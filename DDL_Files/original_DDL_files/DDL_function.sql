


  CREATE OR REPLACE FUNCTION "XDMADM"."FN_SLS_NO_XFER_VPD" (p_schema       IN VARCHAR2,
                                              p_objname      IN VARCHAR2)
   RETURN VARCHAR2 AS
   /***********************************************************************
   * Name: FN_SLS_NO_XFER_VPD
   * Type: Function
   * Description: VPD Function to exclude sales data that was tranfered. This
   *              prevents duplicated records.
   *  REVISIONS:
   *  Ver        Date        Author           Description
   *  ---------  ----------  ---------------  ------------------------------------
   *  1.0        09/01/2011  Matt Nicol       Created this function
   ************************************************************************/
   c_start                CONSTANT NUMBER := DBMS_UTILITY.get_time;
   c_fn_nm                CONSTANT VARCHAR2(30) := 'FN_SLS_NO_XFER_VPD';
   l_security_predicate   VARCHAR2(4000) DEFAULT NULL;
   l_cur_sql              VARCHAR2(4000) := SYS_CONTEXT('USERENV', 'CURRENT_SQL');
   l_sbjct_area VARCHAR2(100)
         := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_sbjct_area_attr);
   l_vpd_exempt VARCHAR2(1)
         := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_exempt_attr);
BEGIN
   --If no subject area context is set then return predicate filtering all data
   IF l_sbjct_area IS NULL THEN
      l_security_predicate   := '1=2';
      ctladm.pkg_vpd_debug_util.vpd_debug('NO SA', c_fn_nm, USER, p_schema, p_objname, l_sbjct_area, l_vpd_exempt, NULL,
      l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   -- Check if user is exempt based on current subject area context
   -- If so, return predicate without any filter
   IF l_vpd_exempt = 'Y' THEN
      l_security_predicate   := '1=1';
      ctladm.pkg_vpd_debug_util.vpd_debug('EXEMPT', c_fn_nm, USER, p_schema, p_objname, l_sbjct_area, l_vpd_exempt,
      NULL, l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   l_security_predicate   := 'XFER_TO_DT IS NULL';
   ctladm.pkg_vpd_debug_util.vpd_debug('ALL DIVS', c_fn_nm, USER, p_schema, p_objname, l_sbjct_area, l_vpd_exempt, NULL,
   l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

   RETURN l_security_predicate;
EXCEPTION
   WHEN OTHERS THEN
      l_security_predicate   := '1=3';
      ctladm.pkg_vpd_debug_util.vpd_debug(SQLCODE || '-' || SQLERRM, c_fn_nm, USER, p_schema, p_objname, l_sbjct_area,
      l_vpd_exempt, NULL, l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
END fn_sls_no_xfer_vpd;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_ENABLE_SUB_PART_IND"
                                     (V_TABLE_OWNER     IN VARCHAR2
                                     ,V_TABLE_NAME      IN VARCHAR2
                                     ,V_PARTITION_VALUE IN VARCHAR2
                                     ,V_INDEX_NAME      IN VARCHAR2
                                     )
      RETURN VARCHAR2
   AS
--******************************************************************************
--* Name          : FN_ENABLE_SUB_PART_IND                                     *
--* Usage         :                                                            *
--******************************************************************************
--* DESCRIPTION                                                                *
--* -----------                                                                *
--* Function Retrieves Subpartition names  the index of those partitions*
--*----------------------------------------------------------------------------*
--* PARM Used:PARTITION_VALUE  - Partition Value to retrieve subpartition names*
--* -------------------------------------------------------------------------- *
--*  INPUT:                                                                    *
--* -------------------------------------------------------------------------- *
--*  Target  :                                                                 *
--* -------------------------------------------------------------------------- *
--*  Return Code : 0 Successful, Others - Load Failed                          *
--******************************************************************************
--*  Date        User Id         Changes Description                           *
--*  =========== =======         ==============================================*
--*  28-MAR-2011 S.Manocha      Initial release of this procedure.            *
--******************************************************************************

--******************************************************************************
--* EIW Standard Variables                                                     *
--******************************************************************************

  CON_PROCESS_NAME  CONSTANT varchar2(40) := 'FN_ENABLE_SUB_PART_IND';

--******************************************************************************
--* Define Cursor to load data by period. For each period, AGG data is loaded  *
--******************************************************************************
   CURSOR c1
   IS
    SELECT subpartition_name
      FROM sys.all_ind_subpartitions d
          ,sys.all_ind_partitions c
          ,sys.all_indexes b
          ,sys.all_tables a
     WHERE     b.table_owner = a.owner
           AND b.table_name = a.table_name
           and b.owner      = c.index_owner
           and b.index_name = c.index_name
           and c.index_owner    = d.index_owner
           and c.index_name     = d.index_name
           and c.partition_name = d.partition_name
           AND b.owner = V_TABLE_OWNER
           AND b.table_name = V_TABLE_NAME
           and B.INDEX_NAME= V_INDEX_NAME
           and c.partition_name = V_PARTITION_VALUE
      ORDER BY 1;
--******************************************************************************
--* Program Variables                                                          *
--******************************************************************************
   v_subpartition_name   SYS.all_ind_subpartitions.SUBPARTITION_NAME%TYPE;
   v_dynamic_sql_stmt    varchar2(32000);

--******************************************************************************
--* Define Variables for publishing Run details in EIW process log             *
--******************************************************************************
   v_prcs_nm            varchar(100);
   v_prcs_stp           varchar(100);
   v_prcs_pram          varchar(100);

--******************************************************************************
--* Program Start                                                              *
--******************************************************************************
BEGIN

      dbms_output.put_line('Start Process '||CON_PROCESS_NAME);
      dbms_output.put_line('Start Time:'||TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS'));
      v_prcs_nm  := CON_PROCESS_NAME ;
      v_prcs_pram:=   V_TABLE_OWNER
                    ||'-'
                    ||V_TABLE_NAME
                    ||'-'
                    ||V_INDEX_NAME
                    ||'-'
                    ||V_PARTITION_VALUE
                    ;
      v_prcs_stp := 'Start Process'||CON_PROCESS_NAME;

      OPEN c1;
--******************************************************************************
--* Using Cursor , Enable the Index of Sub partition                           *
--******************************************************************************
  << compress_sub_partitions>>
       v_prcs_stp := 'Enabling the Index of all subpartitions of '||V_PARTITION_VALUE;

       dbms_output.put_line (v_prcs_stp);
       LOOP
          FETCH c1 INTO v_subpartition_name;

          EXIT WHEN c1%NOTFOUND;

          v_dynamic_sql_stmt:=
                              'ALTER INDEX '||V_TABLE_OWNER||'.'||V_INDEX_NAME||' REBUILD SUBPARTITION '
                           || v_subpartition_name
                           || ' PARALLEL (DEGREE 16)';

          EXECUTE IMMEDIATE v_dynamic_sql_stmt;

          COMMIT;
          DBMS_OUTPUT.put_line ('-----Enabled the Index for Sub-Partition:' || v_subpartition_name);
       END LOOP;

--******************************************************************************
--* Wrap Program                                                               *
--******************************************************************************
  <<Wrap_Program>>

      v_prcs_stp := 'Final Commit';

      CLOSE c1;

      commit;

      dbms_output.put_line ('Successfully Enabled the Index for Partition:' || V_PARTITION_VALUE);
      dbms_output.put_line('End Process '||CON_PROCESS_NAME);
      dbms_output.put_line('End Time:'||TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS'));

      RETURN 0;
--******************************************************************************
--* Exception Handling                                                         *
--******************************************************************************
EXCEPTION
   WHEN OTHERS
   THEN
         DBMS_OUTPUT.put_line ('v_subpartition_name:' || v_subpartition_name);
         DBMS_OUTPUT.put_line ('sql_stmt:'||v_dynamic_sql_stmt);
         DBMS_OUTPUT.put_line ('SQLERROR:' || SQLCODE || ',' || SQLERRM);
         DBMS_OUTPUT.PUT_LINE(       v_prcs_nm
                            ||' - '||v_prcs_stp
                            ||' - '||v_prcs_pram);

      RETURN -1;
END;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_CUST_WK_AGGR_LOAD_INTRVL" (p_div_nbr       NUMBER,
                                     p_date          VARCHAR2 -- process date  yyyymmdd
                                                             )
   RETURN NUMBER IS
   /*********************************************************************
   **********************************************************************
   ** Function:    fn_cust_wk_aggr_load_intrvl                         **
   **                                                                  **
   **********************************************************************
   ** Description:  This function creates the interval records         **
   **               for the customer weekly aggregate table            **
   **                for the Merlin Optimization project R2.0          **
   **                                                                  **
   **    CAUTION: any changes to this function need to be reviewed     **
   **        with the function xdmadm.fn_cust_wk_aggr_load             **
   **        for consistency                                           **
   ** Input:       p_div_nbr : division number                         **
   **              p_date  - process date  yyyymmdd                    **
   **                                                                  **
   ** Output:      xdmadm.cust_wk_aggr_(x)             **
    **********************************************************************
   ** Modifications:                                                   **
   **                                                                  **
   ** Created  By: Arnie Witt        Ver. 1.0          Date: 11/09/12  **
   ** Wes Holbert                         1.1                08/13/13 -   Modified  the calculation for n_prime_sis_flg
   **                                                     AND (prc_src = 3)   AND   (prime_dvt_cost_typ in ('D','F')
   ** Matt Nicol                          1.2                09/02/13 Add SCP_QTY_SHIP and SCP_PROMO_QTY_SHIP
    **********************************************************************
   **  Version               Changes Description                       **
   **  =======               ===================                       **
   **    1.0       Initial release of this function.                   **
   **    2.0       10/12/2015  p1a0168            Modified for Acquisition
   **    3.0       09/07/2016  Madhu Vee          Modified for Order Source
   **    4.0       10/21/2019  Sirish Karpuram    Modified to Add ECom related metrics
   **    5.0       05/19/2020  David Li           Modified GROSS_TGP to exclude Auto Shipping Charge(ASC) when ASC_ORD_APLY_IND = 'P'.
    *********************************************************************/
   c_success                   CONSTANT NUMBER := 0;
   c_error                     CONSTANT NUMBER := 1;

   l_fisc_yr_wk                VARCHAR2(6);
   l_clndr_wk_strt_dt          DATE;
   l_clndr_wk_end_dt           DATE;
   l_fisc_mth_start_dt         DATE;
   l_fisc_mth_end_dt           DATE;
   l_prcs_dt                   DATE;
   l_max_orig_ldr_tm           NUMBER;

   l_cogs_ar_gl_lwr_lmt        NUMBER;
   l_cogs_ar_gl_upr_lmt        NUMBER;
   l_net_sls_ar_gl_lwr_lmt     NUMBER;
   l_net_sls_ar_gl_upr_lmt     NUMBER;
   l_net_acct_pim_suprcls_id   NUMBER;
BEGIN
   -- Validate input parameters
   IF (p_date IS NULL) THEN
      DBMS_OUTPUT.put_line('Error: Invalid Parameters: Date is required');
      RETURN c_error;
   ELSE
      BEGIN
         l_prcs_dt   := TO_DATE(p_date, 'yyyymmdd');
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.put_line('Invalid Date: ' || p_date);
            RETURN c_error;
      END;
   END IF;

   IF (p_div_nbr IS NULL) THEN
      DBMS_OUTPUT.put_line('Error: Invalid Parameters: Div Number required');
      RETURN c_error;
   END IF;

   -- Get fiscal year week
   SELECT DISTINCT t.fisc_yr_wk,
                   t.clndr_wk_strt_dt,
                   t.clndr_wk_end_dt,
                   pt.fisc_mth_start_dt,
                   pt.fisc_mth_end_dt
     INTO l_fisc_yr_wk,
          l_clndr_wk_strt_dt,
          l_clndr_wk_end_dt,
          l_fisc_mth_start_dt,
          l_fisc_mth_end_dt
     FROM xdmadm.time_corp t, xdmadm.prd_time_corp pt, xdmadm.wkly_time_corp w
    WHERE t.fisc_yr_mth = pt.fisc_yr_mth
      AND t.clndr_dt = l_prcs_dt;

   DBMS_OUTPUT.put_line('Fiscal Week: ' || l_fisc_yr_wk);

   DELETE FROM xdmadm.cust_wk_aggr
         WHERE full_day_flg = 'P'
           AND latest_prcs_dt = l_prcs_dt
           AND div_nbr = p_div_nbr;

   DBMS_OUTPUT.put_line('Deleted ' || sql%ROWCOUNT || ' rows');

   -- Get Max Process Date and Loader Time

   SELECT NVL(MAX(orig_ldr_tm), 19900101000000)
     INTO l_max_orig_ldr_tm
     FROM xdmadm.cust_wk_aggr
    WHERE div_nbr = p_div_nbr
      AND fisc_yr_wk = l_fisc_yr_wk
      AND full_day_flg = 'F';

   DBMS_OUTPUT.put_line('Max Original Loader Time: ' || l_max_orig_ldr_tm);

   -- Get param values
   BEGIN
      SELECT param_value_nbr
        INTO l_cogs_ar_gl_lwr_lmt
        FROM xdmadm.param_value
       WHERE app_name = 'ALL'
         AND param_type = 'AR_GL_ACCT_LOWER_LMT'
         AND param_code = 'COGS_AR_GL_LWR_LMT';

      DBMS_OUTPUT.put_line('Parm value for COGS Lower Limit: ' || l_cogs_ar_gl_lwr_lmt);

      SELECT param_value_nbr
        INTO l_cogs_ar_gl_upr_lmt
        FROM xdmadm.param_value
       WHERE app_name = 'ALL'
         AND param_type = 'AR_GL_ACCT_UPPER_LMT'
         AND param_code = 'COGS_AR_GL_UPR_LMT';

      DBMS_OUTPUT.put_line('Parm value for COGS Upper Limit: ' || l_cogs_ar_gl_upr_lmt);

      SELECT param_value_nbr
        INTO l_net_sls_ar_gl_lwr_lmt
        FROM xdmadm.param_value
       WHERE app_name = 'ALL'
         AND param_type = 'AR_GL_ACCT_LOWER_LMT'
         AND param_code = 'NET_SLS_AR_GL_LWR_LMT';

      DBMS_OUTPUT.put_line('Parm value for Net Sales Lower Limit: ' || l_net_sls_ar_gl_lwr_lmt);

      SELECT param_value_nbr
        INTO l_net_sls_ar_gl_upr_lmt
        FROM xdmadm.param_value
       WHERE app_name = 'ALL'
         AND param_type = 'AR_GL_ACCT_UPPER_LMT'
         AND param_code = 'NET_SLS_AR_GL_UPR_LMT';

      DBMS_OUTPUT.put_line('Parm value for Net Sales Upper Limit: ' || l_net_sls_ar_gl_upr_lmt);

      SELECT param_value_nbr
        INTO l_net_acct_pim_suprcls_id
        FROM xdmadm.param_value
       WHERE app_name = 'MERLIN'
         AND param_type = 'NON_ADMIN_PIM_SUPRCLS_ID'
         AND param_code = 'UPPER_LIMIT';

      DBMS_OUTPUT.put_line('Parm value for Net Acct PIM Superclass ID: ' || l_net_acct_pim_suprcls_id);
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
         DBMS_OUTPUT.put_line('Error: Failed to get param value');
         RETURN c_error;
   END;

   INSERT INTO xdmadm.cust_wk_aggr(fisc_yr_wk, full_day_flg, cust_nbr, div_nbr, cust_sk, sls_revenue_div_nbr,
                                   admn_flg, ldr_tm, drop_cnt, drop_cnt_ly, grs_sls_extnd, grs_sls_extnd_ly,
                                   unfrm_qty_ship, unfrm_qty_ship_ly, actl_gp, actl_gp_ly, ttl_alwnc, ttl_alwnc_ly,
                                   grs_tgp, grs_tgp_ly, net_sls, net_sls_ly, net_tgp, net_tgp_ly,
                                   dwa_cost_extnd, dwa_cost_extnd_ly, rbt_loc_accrl_amt, rbt_loc_accrl_amt_ly, rbt_natl_accrl_amt, rbt_natl_accrl_amt_ly,
                                   rbt_loc_exp_amt, rbt_loc_exp_amt_ly, rbt_natl_exp_amt, rbt_natl_exp_amt_ly, ttl_int_vndr_fnd_dvt, ttl_int_vndr_fnd_dvt_ly,
                                   comm_bsis_amt_extnd, comm_bsis_amt_extnd_ly, dond, dond_ly, ttl_vndr_fnd_dvt, ttl_vndr_fnd_dvt_ly,
                                   fixed_sell, fixed_sell_ly, n_prime_sis, n_prime_sis_ly, prc_apprvl, prc_apprvl_ly,
                                   dwo, dwo_ly, invst_cs_prtcpt, invst_cs_prtcpt_ly, net_non_prod_chrg, net_non_prod_chrg_ly,
                                   net_prod_chrg, net_prod_chrg_ly, net_non_prod_alwnc, net_non_prod_alwnc_ly, net_prod_alwnc, net_prod_alwnc_ly,
                                   latest_prcs_dt, orig_ldr_tm, brk_srchrg, cde, prod_sls_tax, cogs_alw_chrg,
                                   prod_alw, prod_chrg, non_prod_alwnc, non_prod_chrg, actl_cst, ap_cost,
                                   ap_gain, frght_cost, inside_pad, lic_prod_extnd, lic_tot_extnd, rep_cost_extnd,
                                   mkt_prod_extnd, mkt_tot_extnd, orig_dwa_cost_extnd, srchrg, cat_sold, cd_ln_cnt,
                                   net_acct_cust_sk_ly, net_acct_cust_sk, rt_inv_cnt, rt_ln_cnt, rt_ln_cnt_ly, vndr_ship_inv_cnt,
                                   vndr_ship_ln_cnt, vndr_ship_ln_cnt_ly, wc_inv_cnt, wc_ln_cnt, wc_ln_cnt_ly, dvt_cost_extnd,
                                   eb_dvt_cost_extnd, eb_loc_int_dvt, eb_loc_vndr_fnd_dvt, eb_natl_int_dvt, eb_natl_vndr_fnd_dvt, eb_ttl_dvt,
                                   eb_ttl_int_vndr_fnd_dvt, eb_ttl_vndr_fnd_dvt, loc_int_dvt, loc_vndr_fnd_dvt, natl_int_dvt, natl_vndr_fnd_dvt,
                                   ttl_dvt, eb_actl_gp, eb_inv_gp, eb_true_gp, inv_actl_gp, inv_gp,
                                   lnd_gp, net_tagp, net_tagp_ly, true_gp, natl_mrktng_alwnc_pgms, eb_natl_mrktng_alwnc_pgms,
                                   eb_loc_mrktng_alwnc_pgms, eb_loc_one_tm, eb_loc_prom_alwnc_pgms, eb_natl_one_tm, eb_natl_prom_alwnc_pgms, eb_ttl_alwnc,
                                   eb_ttl_loc_alwnc, eb_ttl_natl_alwnc, loc_mrktng_alwnc_pgms, loc_one_tm, loc_prom_alwnc_pgms, natl_one_tm,
                                   natl_prom_alwnc_pgms, ttl_loc_alwnc, ttl_natl_alwnc, adj_markout, cd_unfrm_qty_ship, cd_qty_ship,
                                   dry_each, dry_unit, dry_wt, each_ord, each_orig, each_rsrv,
                                   each_ship, eb_unfrm_qty_ship, eb_unfrm_qty_ship_ly, eb_each_ship, eb_net_wt_ship, eb_qty_ship,
                                   eb_qty_ship_ly, eb_unit_ship, frz_each, frz_unit, frz_wt, mb_unfrm_qty_ship,
                                   mb_unfrm_qty_ship_ly, net_wt_ship, net_wt_ship_ly, qty_dvt, qty_markout, qty_ord,
                                   qty_orig, qty_rsrv, qty_ship, qty_ship_ly, qty_subbed, rfrgrt_each,
                                   rfrgrt_unit, rfrgrt_wt, rt_qty_ship, rt_qty_ship_ly, rt_unfrm_qty_ship, rt_unfrm_qty_ship_ly,
                                   unfrm_qty_dvt, unfrm_qty_markout, unfrm_qty_ord, unfrm_qty_orig, unfrm_qty_rsrv, unfrm_qty_subbed,
                                   unit_ord, unit_orig, unit_rsrv, unit_ship, vs_qty_ship, vs_unfrm_qty_ship,
                                   wc_unfrm_qty_ship, wc_qty_ship, cmsn_sls_extnd, cr_memo_dlr, cd_grs_sls_extnd, cs_grs_sls_extnd,
                                   ct_grs_sls_extnd, ec_grs_sls_extnd, eb_net_sls, eb_net_sls_ly, eb_grs_sls_extnd, eb_grs_sls_extnd_ly,
                                   ed_grs_sls_extnd, fs_grs_sls_extnd, mb_net_sls, mb_net_sls_ly, mb_grs_sls_extnd, mb_grs_sls_extnd_ly,
                                   rt_grs_sls_extnd, rt_net_sls, pt_grs_sls_extnd, vs_grs_sls_extnd, wc_grs_sls_extnd, cd_ln_cnt_ly,
                                   cc_inv_cnt, cc_ln_cnt, cc_ln_cnt_ly, cc_unfrm_qty_ship, cc_qty_ship, cc_grs_sls_extnd,
                                   st_grs_sls_extnd, lnd_actl_gp, lnd_actl_gp_ly, fisc_mth_strt_dt, fisc_mth_end_dt, fisc_wk_strt_dt,
                                   fisc_wk_end_dt, rt_grs_sls_extnd_ly, actv_cust_sk, ttl_int_vndr_fnd_dvt_is, ttl_int_vndr_fnd_dvt_is_ly, comm_bsis_amt_extnd_is,
                                   comm_bsis_amt_extnd_is_ly, dond_is, dond_is_ly, ec_grs_sls_extnd_ly, scp_qty_ship, scp_promo_qty_ship,
                                   rtrn_unfrm_qty_ship, invst_sls_prtcpt, invst_sls_prtcpt_ly,usf_gl_ind,ec_st_grs_sls_extnd,
                                   ec_st_grs_sls_extnd_ly,ec_na_grs_sls_extnd,ec_na_grs_sls_extnd_ly,ec_st_grs_sls_extnd_dnmtr,
                                   ec_st_grs_sls_extnd_dnmtr_ly,ec_na_grs_sls_extnd_dnmtr,ec_na_grs_sls_extnd_dnmtr_ly)
      SELECT l_fisc_yr_wk,
             'P',
             e.cust_nbr,
             e.div_nbr,
             e.cust_sk,
             e.sls_revenue_div_nbr,
             e.admn_flg,
             TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'),
             e.drop_cnt,
             NULL,
             e.grs_sls_extnd,
             NULL,
             e.unfrm_qty_ship,
             NULL,
             e.actl_gp,
             NULL,
             e.ttl_alwnc,
             NULL,
             e.grs_tgp,
             NULL,
             e.net_sls,
             NULL,
             e.net_tgp,
             NULL,
             e.dwa_cost_extnd,
             NULL,
             e.rbt_loc_accrl_amt,
             NULL,
             e.rbt_natl_accrl_amt,
             NULL,
             e.rbt_loc_exp_amt,
             NULL,
             e.rbt_natl_exp_amt,
             NULL,
             e.ttl_int_vndr_fnd_dvt,
             NULL,
             e.comm_bsis_amt_extnd,
             NULL,
             e.dond,
             NULL,
             e.ttl_vndr_fnd_dvt,
             NULL,
             e.fixed_sell,
             NULL,
             e.n_prime_sis,
             NULL,
             e.prc_apprvl,
             NULL,
             e.dwo,
             NULL,
             e.invst_cs_prtcptn,
             NULL,
             e.net_non_prod_chrg,
             NULL,
             e.net_prod_chrg,
             NULL,
             e.net_non_prod_alwnc,
             NULL,
             e.net_prod_alwnc,
             NULL,
             e.latest_prcs_dt,
             e.orig_ldr_tm,
             e.brk_srchrg,
             e.cde,
             e.prod_sls_tax,
             e.cogs_alw_chrg,
             e.prod_alw,
             e.prod_chrg,
             e.non_prod_alwnc,
             e.non_prod_chrg,
             e.actl_cst,
             e.ap_cost,
             e.ap_gain,
             e.frght_cost,
             e.inside_pad,
             e.lic_prod_extnd,
             e.lic_tot_extnd,
             e.rep_cost_extnd,
             e.mkt_prod_extnd,
             e.mkt_tot_extnd,
             e.orig_dwa_cost_extnd,
             e.srchrg,
             e.cat_sold,
             e.cd_ln_cnt,
             NULL,
             e.net_acct_cust_sk,
             e.rt_inv_cnt,
             e.rt_ln_cnt,
             NULL,
             e.vndr_ship_inv_cnt,
             e.vndr_ship_ln_cnt,
             NULL,
             e.wc_inv_cnt,
             e.wc_ln_cnt,
             NULL,
             e.dvt_cost_extnd,
             e.eb_dvt_cost_extnd,
             e.eb_loc_int_dvt,
             e.eb_loc_vndr_fnd_dvt,
             e.eb_natl_int_dvt,
             e.eb_natl_vndr_fnd_dvt,
             e.eb_ttl_dvt,
             e.eb_ttl_int_vndr_fnd_dvt,
             e.eb_ttl_vndr_fnd_dvt,
             e.loc_int_dvt,
             e.loc_vndr_fnd_dvt,
             e.natl_int_dvt,
             e.natl_vndr_fnd_dvt,
             e.ttl_dvt,
             e.eb_actl_gp,
             e.eb_inv_gp,
             e.eb_true_gp,
             e.inv_actl_gp,
             e.inv_gp,
             e.lnd_gp,
             e.net_tagp,
             NULL,
             e.true_gp,
             e.natl_mrktng_alwnc_pgms,
             e.eb_natl_mrktng_alwnc_pgms,
             e.eb_loc_mrktng_alwnc_pgms,
             e.eb_loc_one_tm,
             e.eb_loc_prom_alwnc_pgms,
             e.eb_natl_one_tm,
             e.eb_natl_prom_alwnc_pgms,
             e.eb_ttl_alwnc,
             e.eb_ttl_loc_alwnc,
             e.eb_ttl_natl_alwnc,
             e.loc_mrktng_alwnc_pgms,
             e.loc_one_tm,
             e.loc_prom_alwnc_pgms,
             e.natl_one_tm,
             e.natl_prom_alwnc_pgms,
             e.ttl_loc_alwnc,
             e.ttl_natl_alwnc,
             e.adj_markout,
             e.cd_unfrm_qty_ship,
             e.cd_qty_ship,
             e.dry_each,
             e.dry_unit,
             e.dry_wt,
             e.each_ord,
             e.each_orig,
             e.each_rsrv,
             e.each_ship,
             e.eb_unfrm_qty_ship,
             NULL,
             e.eb_each_ship,
             e.eb_net_wt_ship,
             e.eb_qty_ship,
             NULL,
             e.eb_unit_ship,
             e.frz_each,
             e.frz_unit,
             e.frz_wt,
             e.mb_unfrm_qty_ship,
             NULL,
             e.net_wt_ship,
             NULL,
             e.qty_dvt,
             e.qty_markout,
             e.qty_ord,
             e.qty_orig,
             e.qty_rsrv,
             e.qty_ship,
             NULL,
             e.qty_subbed,
             e.rfrgrt_each,
             e.rfrgrt_unit,
             e.rfrgrt_wt,
             e.rt_qty_ship,
             NULL,
             e.rt_unfrm_qty_ship,
             NULL,
             e.unfrm_qty_dvt,
             e.unfrm_qty_markout,
             e.unfrm_qty_ord,
             e.unfrm_qty_orig,
             e.unfrm_qty_rsrv,
             e.unfrm_qty_subbed,
             e.unit_ord,
             e.unit_orig,
             e.unit_rsrv,
             e.unit_ship,
             e.vs_qty_ship,
             e.vs_unfrm_qty_ship,
             e.wc_unfrm_qty_ship,
             e.wc_qty_ship,
             e.cmsn_sls_extnd,
             e.cr_memo_dlr,
             e.cd_grs_sls_extnd,
             e.cs_grs_sls_extnd,
             e.ct_grs_sls_extnd,
             e.ec_grs_sls_extnd,
             e.eb_net_sls,
             NULL,
             e.eb_grs_sls_extnd,
             NULL,
             e.ed_grs_sls_extnd,
             e.fs_grs_sls_extnd,
             e.mb_net_sls,
             NULL,
             e.mb_grs_sls_extnd,
             NULL,
             e.rt_grs_sls_extnd,
             e.rt_net_sls,
             e.pt_grs_sls_extnd,
             e.vs_grs_sls_extnd,
             e.wc_grs_sls_extnd,
             NULL,
             e.cc_inv_cnt,
             e.cc_ln_cnt,
             NULL,
             e.cc_unfrm_qty_ship,
             e.cc_qty_ship,
             e.cc_grs_sls_extnd,
             e.st_grs_sls_extnd,
             e.lnd_actl_gp,
             NULL,
             l_fisc_mth_start_dt,
             l_fisc_mth_end_dt,
             l_clndr_wk_strt_dt,
             l_clndr_wk_end_dt,
             NULL,
             e.cust_sk,
             e.ttl_int_vndr_fnd_dvt_is,
             NULL,
             e.comm_bsis_amt_extnd_is,
             NULL,
             e.dond_is,
             NULL,
             NULL,
             e.scp_qty_ship, -- MN 09102013
             e.scp_promo_qty_ship, -- MN 09102013
             e.rtrn_unfrm_qty_ship,
             e.invst_sls_prtcpt,
             NULL,
             usf_gl_ind,
             ec_st_grs_sls_extnd,
             NULL,
             ec_na_grs_sls_extnd,
             NULL,
             ec_st_grs_sls_extnd_dnmtr,
             NULL,
             ec_na_grs_sls_extnd_dnmtr,
             NULL
        FROM (  SELECT s.cust_nbr,
                       s.div_nbr,
                       s.cust_sk,
                       NVL(s.sls_revenue_div_nbr, s.div_nbr) sls_revenue_div_nbr,
                       DECODE(p.pim_suprcls_id, 97, 'Y', 'N') admn_flg,
                       COUNT(DISTINCT (CASE
                                          WHEN s.trans_typ = 'RT'
                                           AND p.pim_suprcls_id <> 97 THEN
                                             s.div_nbr || s.cust_nbr || s.prcs_dt || s.inv_dt || s.dlvr_rte
                                          ELSE
                                             NULL
                                       END))
                          drop_cnt,
                       SUM(NVL(s.grs_sls_extnd, 0)) grs_sls_extnd,
                       SUM(NVL(s.unfrm_qty_ship, 0)) unfrm_qty_ship,
                       SUM(NVL(s.actl_gp, 0)) actl_gp,
                       SUM(NVL(s.ttl_alwnc, 0)) ttl_alwnc,
                       SUM(NVL((s.grs_sls_extnd - s.dwa_cost_extnd) - (CASE WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END) + (s.ttl_vndr_fnd_dvt), 0)) grs_tgp,
                       SUM(NVL(
                              grs_sls_extnd
                              + (CASE
                                    WHEN before_price_ac_ind <> 'Y'
                                     AND ar_gl_acct BETWEEN l_net_sls_ar_gl_lwr_lmt AND l_net_sls_ar_gl_upr_lmt THEN
                                       (  NVL(prod_alw, 0)
                                        + NVL(prod_chrg, 0)
                                        + NVL(non_prod_alwnc, 0)
                                        + NVL(non_prod_chrg, 0))
                                    ELSE
                                       0
                                 END)
                              - (  NVL(rbt_loc_accrl_amt, 0)
                                 + NVL(rbt_natl_accrl_amt, 0)
                                 + NVL(rbt_loc_exp_amt, 0)
                                 + NVL(rbt_natl_exp_amt, 0)),
                              0))
                          net_sls,
                       SUM(NVL(s.grs_sls_extnd, 0)
                           + CASE
                                WHEN s.before_price_ac_ind <> 'Y'
                                 AND ar_gl_acct BETWEEN l_net_sls_ar_gl_lwr_lmt AND l_net_sls_ar_gl_upr_lmt THEN
                                   (  NVL(s.prod_alw, 0)
                                    + NVL(s.prod_chrg, 0)
                                    + NVL(s.non_prod_alwnc, 0)
                                    + NVL(s.non_prod_chrg, 0))
                                ELSE
                                   0
                             END
                           - (  NVL(s.rbt_loc_accrl_amt, 0)
                              + NVL(s.rbt_loc_exp_amt, 0)
                              + NVL(s.rbt_natl_accrl_amt, 0)
                              + NVL(s.rbt_natl_exp_amt, 0))
                           - s.dwa_cost_extnd
                           + s.ttl_vndr_fnd_dvt
                           + CASE
                                WHEN s.before_price_ac_ind <> 'Y'
                                 AND ar_gl_acct BETWEEN l_cogs_ar_gl_lwr_lmt AND l_cogs_ar_gl_upr_lmt THEN
                                   (  NVL(s.prod_alw, 0)
                                    + NVL(s.prod_chrg, 0)
                                    + NVL(s.non_prod_alwnc, 0)
                                    + NVL(s.non_prod_chrg, 0))
                                ELSE
                                   0
                             END)
                          net_tgp,
                       SUM(NVL(dwa_cost_extnd, 0)) dwa_cost_extnd,
                       SUM(NVL(rbt_loc_accrl_amt, 0)) rbt_loc_accrl_amt,
                       SUM(NVL(rbt_natl_accrl_amt, 0)) rbt_natl_accrl_amt,
                       SUM(NVL(rbt_loc_exp_amt, 0)) rbt_loc_exp_amt,
                       SUM(NVL(rbt_natl_exp_amt, 0)) rbt_natl_exp_amt,
                       SUM(NVL(s.ttl_int_vndr_fnd_dvt, 0)) ttl_int_vndr_fnd_dvt,
                       SUM(NVL(extnd_fctr, 0) * NVL(comm_bsis_amt, 0)) comm_bsis_amt_extnd,
                       SUM(
                          CASE WHEN (s.mrgn_bsis = 'DEV') THEN (s.orig_mrgn_bsis_amt_extnd - s.grs_sls_extnd) ELSE 0 END)
                          dond,
                       SUM(NVL(s.ttl_vndr_fnd_dvt, 0)) ttl_vndr_fnd_dvt,
                       SUM(CASE
                              WHEN NVL(s.cr_memo_nbr, 0) = 0
                               AND NOT (  NVL(s.grs_sls_extnd, 0)
                                        - NVL(s.dwa_cost_extnd, 0)
                                        - CASE WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END
                                        + NVL(s.ttl_vndr_fnd_dvt_is, 0) < 0
                                    AND s.prod_stat_ind_actl IN ('8', '9')) -- not DWO
                               AND NOT NVL(s.ttl_int_vndr_fnd_dvt_is, 0) > 0 -- not IDV
                               AND NVL(s.grs_sls_extnd, 0) + NVL(s.ttl_vndr_fnd_dvt_is, 0) <=
                                      NVL(s.orig_mrgn_bsis_amt_extnd, 0)
                               AND NVL(s.prime_mrk_ind, 'X') = 'F' THEN
                                 CASE
                                    WHEN s.pyr_seg_cd_actl = 'IND' THEN
                                         NVL(s.orig_mrgn_bsis_amt_extnd, 0)
                                       - NVL(s.grs_sls_extnd, 0)
                                       - NVL(s.ttl_vndr_fnd_dvt_is, 0)
                                    WHEN s.pyr_seg_cd_actl <> 'IND'
                                     AND   NVL(s.grs_sls_extnd, 0)
                                         - NVL(s.dwa_cost_extnd, 0)
                                         - CASE WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END
                                         + NVL(s.ttl_vndr_fnd_dvt_is, 0) < 0 THEN
                                       ABS(  NVL(s.grs_sls_extnd, 0)
                                           - NVL(s.dwa_cost_extnd, 0)
                                           - CASE WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END
                                           + NVL(s.ttl_vndr_fnd_dvt_is, 0))
                                    ELSE
                                       0
                                 END
                              ELSE
                                 0
                           END)
                          fixed_sell,
                       SUM(CASE
                              WHEN NVL(s.cr_memo_nbr, 0) = 0
                               AND NOT (  NVL(s.grs_sls_extnd, 0)
                                        - NVL(s.dwa_cost_extnd, 0)
                                        - CASE WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END
                                        + NVL(s.ttl_vndr_fnd_dvt_is, 0) < 0
                                    AND s.prod_stat_ind_actl IN ('8', '9')) -- not DWO
                               AND NOT NVL(s.ttl_int_vndr_fnd_dvt_is, 0) > 0 -- not IDV
                               AND NOT (NVL(s.grs_sls_extnd, 0) + NVL(s.ttl_vndr_fnd_dvt_is, 0) <=
                                           NVL(s.orig_mrgn_bsis_amt_extnd, 0)
                                    AND NVL(s.prime_mrk_ind, 'X') = 'F'
                                    AND (s.pyr_seg_cd_actl = 'IND'
                                      OR   NVL(s.grs_sls_extnd, 0)
                                         - NVL(s.dwa_cost_extnd, 0)
                                         - CASE WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END
                                         + NVL(s.ttl_vndr_fnd_dvt_is, 0) < 0)) -- not FIX
                               AND NOT (NVL(s.grs_sls_extnd, 0) + NVL(s.ttl_vndr_fnd_dvt_is, 0) <=
                                           NVL(s.orig_mrgn_bsis_amt_extnd, 0)
                                    AND s.prc_apprvr_id IS NOT NULL) -- not PAP
                               AND NOT (s.mrgn_bsis = 'DEV') -- not DOND
                               AND NOT (s.mrgn_bsis = 'CBA') -- not CBA
                               AND s.prc_src = 3
                               AND s.prime_sis_flg = 'N'
                               AND NVL(s.grs_sls_extnd, 0) - NVL(s.dwa_cost_extnd, 0) - (CASE WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END) + NVL(s.ttl_vndr_fnd_dvt_is, 0) < 0
                               AND s.prime_dvt_cost_typ IN ('D', 'F') THEN
                                 ABS(NVL(s.grs_sls_extnd, 0) - NVL(s.dwa_cost_extnd, 0) - (CASE WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END) + NVL(s.ttl_vndr_fnd_dvt_is, 0))
                              ELSE
                                 0
                           END)
                          n_prime_sis,
                       SUM(CASE
                              WHEN NVL(s.cr_memo_nbr, 0) = 0
                               AND NOT (  NVL(s.grs_sls_extnd, 0)
                                        - NVL(s.dwa_cost_extnd, 0)
                                        - CASE WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END
                                        + NVL(s.ttl_vndr_fnd_dvt_is, 0) < 0
                                    AND s.prod_stat_ind_actl IN ('8', '9')) -- not DWO
                               AND NOT NVL(s.ttl_int_vndr_fnd_dvt_is, 0) > 0 -- not IDV
                               AND NOT (NVL(s.grs_sls_extnd, 0) + NVL(s.ttl_vndr_fnd_dvt_is, 0) <=
                                           NVL(s.orig_mrgn_bsis_amt_extnd, 0)
                                    AND NVL(s.prime_mrk_ind, 'X') = 'F'
                                    AND (s.pyr_seg_cd_actl = 'IND'
                                      OR   NVL(s.grs_sls_extnd, 0)
                                         - NVL(s.dwa_cost_extnd, 0)
                                         - CASE WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END
                                         + NVL(s.ttl_vndr_fnd_dvt_is, 0) < 0)) -- not FIX
                               AND NVL(s.grs_sls_extnd, 0) + NVL(s.ttl_vndr_fnd_dvt_is, 0) <=
                                      NVL(s.orig_mrgn_bsis_amt_extnd, 0)
                               AND s.prc_apprvr_id IS NOT NULL THEN
                                   NVL(s.orig_mrgn_bsis_amt_extnd, 0)
                                 - NVL(s.grs_sls_extnd, 0)
                                 - NVL(s.ttl_vndr_fnd_dvt_is, 0)
                              ELSE
                                 0
                           END)
                          prc_apprvl,
                       SUM(CASE
                              WHEN NVL(s.cr_memo_nbr, 0) = 0
                               AND NVL(s.grs_sls_extnd, 0) - NVL(s.dwa_cost_extnd, 0) - (CASE WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END) + NVL(s.ttl_vndr_fnd_dvt_is, 0) < 0
                               AND s.prod_stat_ind_actl IN ('8', '9') THEN
                                 ABS(NVL(s.grs_sls_extnd, 0) - NVL(s.dwa_cost_extnd, 0) - (CASE WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END) + NVL(s.ttl_vndr_fnd_dvt_is, 0))
                              ELSE
                                 0
                           END)
                          dwo,
                       SUM(CASE
                              WHEN NVL(s.cr_memo_nbr, 0) = 0
                               AND NOT (  NVL(s.grs_sls_extnd, 0)
                                        - NVL(s.dwa_cost_extnd, 0)
                                        - CASE WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END
                                        + NVL(s.ttl_vndr_fnd_dvt_is, 0) < 0
                                    AND s.prod_stat_ind_actl IN ('8', '9')) -- not DWO
                               AND ((NVL(s.ttl_int_vndr_fnd_dvt_is, 0) > 0) -- IDV
                                 OR (NVL(s.grs_sls_extnd, 0) + NVL(s.ttl_vndr_fnd_dvt_is, 0) <=
                                        NVL(s.orig_mrgn_bsis_amt_extnd, 0)
                                 AND NVL(s.prime_mrk_ind, 'X') = 'F'
                                 AND (s.pyr_seg_cd_actl = 'IND'
                                   OR NVL(s.grs_sls_extnd, 0) - NVL(s.dwa_cost_extnd, 0) - (CASE WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END) + NVL(s.ttl_vndr_fnd_dvt_is, 0) <
                                         0)) -- FIX
                                 OR (NVL(s.grs_sls_extnd, 0) + NVL(s.ttl_vndr_fnd_dvt_is, 0) <=
                                        NVL(s.orig_mrgn_bsis_amt_extnd, 0)
                                 AND s.prc_apprvr_id IS NOT NULL) -- PAP
                                 OR s.mrgn_bsis = 'DEV' -- DOND
                                 OR s.mrgn_bsis = 'CBA' -- CBA
                                 OR (s.prc_src = 3
                                 AND s.prime_sis_flg = 'N'
                                 AND NVL(s.grs_sls_extnd, 0) - NVL(s.dwa_cost_extnd, 0) - (CASE WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END) + NVL(s.ttl_vndr_fnd_dvt_is, 0) <
                                        0
                                 AND s.prime_dvt_cost_typ IN ('D', 'F')) -- NPL
                                                                        ) THEN
                                 s.unfrm_qty_ship
                              ELSE
                                 0
                           END)
                          invst_cs_prtcptn,
                       SUM(NVL((CASE
                                   WHEN before_price_ac_ind <> 'Y'
                                    AND ar_gl_acct BETWEEN l_net_sls_ar_gl_lwr_lmt AND l_net_sls_ar_gl_upr_lmt THEN
                                      NVL(non_prod_chrg, 0)
                                   ELSE
                                      0
                                END),
                               0))
                          net_non_prod_chrg,
                       SUM(NVL((CASE
                                   WHEN before_price_ac_ind <> 'Y'
                                    AND ar_gl_acct BETWEEN l_net_sls_ar_gl_lwr_lmt AND l_net_sls_ar_gl_upr_lmt THEN
                                      NVL(prod_chrg, 0)
                                   ELSE
                                      0
                                END),
                               0))
                          net_prod_chrg,
                       SUM(NVL((CASE
                                   WHEN before_price_ac_ind <> 'Y'
                                    AND ar_gl_acct BETWEEN l_net_sls_ar_gl_lwr_lmt AND l_net_sls_ar_gl_upr_lmt THEN
                                      NVL(non_prod_alwnc, 0)
                                   ELSE
                                      0
                                END),
                               0))
                          net_non_prod_alwnc,
                       SUM(NVL((CASE
                                   WHEN before_price_ac_ind <> 'Y'
                                    AND ar_gl_acct BETWEEN l_net_sls_ar_gl_lwr_lmt AND l_net_sls_ar_gl_upr_lmt THEN
                                      NVL(prod_alw, 0)
                                   ELSE
                                      0
                                END),
                               0))
                          net_prod_alwnc,
                       MAX(s.prcs_dt) latest_prcs_dt,
                       MAX(s.orig_ldr_tm) orig_ldr_tm,
                       SUM(NVL(brk_srchrg, 0)) brk_srchrg,
                       SUM(NVL(cde, 0)) cde,
                       SUM(NVL(prod_sls_tax, 0)) prod_sls_tax,
                       SUM(CASE
                              WHEN s.before_price_ac_ind <> 'Y'
                               AND ar_gl_acct BETWEEN l_cogs_ar_gl_lwr_lmt AND l_cogs_ar_gl_upr_lmt THEN
                                 (  NVL(s.prod_alw, 0)
                                  + NVL(s.prod_chrg, 0)
                                  + NVL(s.non_prod_alwnc, 0)
                                  + NVL(s.non_prod_chrg, 0))
                              ELSE
                                 0
                           END)
                          cogs_alw_chrg,
                       SUM(NVL(prod_alw, 0)) prod_alw,
                       SUM(NVL(prod_chrg, 0)) prod_chrg,
                       SUM(NVL(non_prod_alwnc, 0)) non_prod_alwnc,
                       SUM(NVL(non_prod_chrg, 0)) non_prod_chrg,
                       SUM(NVL(actl_cst, 0)) actl_cst,
                       SUM(NVL(ap_cost, 0)) ap_cost,
                       SUM(NVL(ap_gain, 0)) ap_gain,
                       SUM(NVL(frght_cost, 0)) frght_cost,
                       SUM(NVL(inside_pad, 0)) inside_pad,
                       SUM(NVL(lic_prod_extnd, 0)) lic_prod_extnd,
                       SUM(NVL(lic_tot_extnd, 0)) lic_tot_extnd,
                       SUM(NVL(rep_cost_extnd, 0)) rep_cost_extnd,
                       SUM(NVL(mkt_prod_extnd, 0)) mkt_prod_extnd,
                       SUM(NVL(mkt_tot_extnd, 0)) mkt_tot_extnd,
                       SUM(NVL(orig_dwa_cost_extnd, 0)) orig_dwa_cost_extnd,
                       SUM(NVL(srchrg, 0)) srchrg,
                       COUNT(
                          DISTINCT (CASE
                                       WHEN p.pim_suprcls_id <= l_net_acct_pim_suprcls_id THEN p.pim_suprcls_id
                                       ELSE NULL
                                    END))
                          cat_sold,
                       SUM(CASE
                              WHEN trans_typ = 'CD'
                               AND prod_alwnc_cd IS NULL
                               AND prod_chrg_cd IS NULL THEN
                                 1
                              ELSE
                                 0
                           END)
                          cd_ln_cnt,
                       MAX(CASE WHEN s.trans_typ IN ('RT', 'VS', 'WC') THEN s.cust_sk ELSE NULL END) net_acct_cust_sk,
                       COUNT(DISTINCT CASE
                                         WHEN s.trans_typ = 'RT'
                                          AND p.pim_suprcls_id <> 97 THEN
                                            s.div_nbr || s.cust_nbr || s.prcs_dt || s.inv_dt || s.inv_nbr
                                         ELSE
                                            NULL
                                      END)
                          rt_inv_cnt,
                       SUM(CASE
                              WHEN trans_typ = 'RT'
                               AND prod_alwnc_cd IS NULL
                               AND prod_chrg_cd IS NULL THEN
                                 1
                              ELSE
                                 0
                           END)
                          rt_ln_cnt,
                       COUNT(DISTINCT CASE
                                         WHEN s.trans_typ = 'VS'
                                          AND p.pim_suprcls_id <> 97 THEN
                                            s.div_nbr || s.cust_nbr || s.prcs_dt || s.inv_dt || s.inv_nbr
                                         ELSE
                                            NULL
                                      END)
                          vndr_ship_inv_cnt,
                       SUM(CASE
                              WHEN trans_typ = 'VS'
                               AND prod_alwnc_cd IS NULL
                               AND prod_chrg_cd IS NULL THEN
                                 1
                              ELSE
                                 0
                           END)
                          vndr_ship_ln_cnt,
                       COUNT(DISTINCT CASE
                                         WHEN s.trans_typ = 'WC'
                                          AND p.pim_suprcls_id <> 97 THEN
                                            s.div_nbr || s.cust_nbr || s.prcs_dt || s.inv_dt || s.inv_nbr
                                         ELSE
                                            NULL
                                      END)
                          wc_inv_cnt,
                       SUM(CASE
                              WHEN trans_typ = 'WC'
                               AND prod_alwnc_cd IS NULL
                               AND prod_chrg_cd IS NULL THEN
                                 1
                              ELSE
                                 0
                           END)
                          wc_ln_cnt,
                       SUM(NVL(dvt_cost_extnd, 0)) dvt_cost_extnd,
                       SUM(CASE WHEN p.pim_brnd_typ = 2 THEN dvt_cost_extnd ELSE 0 END) eb_dvt_cost_extnd,
                       SUM(CASE WHEN p.pim_brnd_typ = 2 THEN loc_int_dvt ELSE 0 END) eb_loc_int_dvt,
                       SUM(CASE WHEN p.pim_brnd_typ = 2 THEN loc_vndr_fnd_dvt ELSE 0 END) eb_loc_vndr_fnd_dvt,
                       SUM(CASE WHEN p.pim_brnd_typ = 2 THEN natl_int_dvt ELSE 0 END) eb_natl_int_dvt,
                       SUM(CASE WHEN p.pim_brnd_typ = 2 THEN natl_vndr_fnd_dvt ELSE 0 END) eb_natl_vndr_fnd_dvt,
                       SUM(CASE WHEN p.pim_brnd_typ = 2 THEN ttl_dvt ELSE 0 END) eb_ttl_dvt,
                       SUM(CASE WHEN p.pim_brnd_typ = 2 THEN ttl_int_vndr_fnd_dvt ELSE 0 END) eb_ttl_int_vndr_fnd_dvt,
                       SUM(CASE WHEN p.pim_brnd_typ = 2 THEN ttl_vndr_fnd_dvt ELSE 0 END) eb_ttl_vndr_fnd_dvt,
                       SUM(NVL(loc_int_dvt, 0)) loc_int_dvt,
                       SUM(NVL(loc_vndr_fnd_dvt, 0)) loc_vndr_fnd_dvt,
                       SUM(NVL(natl_int_dvt, 0)) natl_int_dvt,
                       SUM(NVL(natl_vndr_fnd_dvt, 0)) natl_vndr_fnd_dvt,
                       SUM(NVL(ttl_dvt, 0)) ttl_dvt,
                       SUM(CASE WHEN p.pim_brnd_typ = 2 THEN actl_gp ELSE 0 END) eb_actl_gp,
                       SUM(CASE WHEN p.pim_brnd_typ = 2 THEN inv_gp ELSE 0 END) eb_inv_gp,
                       SUM(CASE WHEN p.pim_brnd_typ = 2 THEN true_gp ELSE 0 END) eb_true_gp,
                       SUM(NVL(inv_actl_gp, 0)) inv_actl_gp,
                       SUM(NVL(inv_gp, 0)) inv_gp,
                       SUM(NVL(lnd_gp, 0)) lnd_gp,
                       SUM(actl_gp
                           + CASE
                                WHEN NVL(before_price_ac_ind, 'N') <> 'Y'
                                 AND NVL(ar_gl_acct, 0) BETWEEN l_net_sls_ar_gl_lwr_lmt AND l_net_sls_ar_gl_upr_lmt THEN
                                   NVL(prod_alw, 0) + NVL(prod_chrg, 0) + NVL(non_prod_alwnc, 0) + NVL(non_prod_chrg, 0)
                                ELSE
                                   0
                             END
                           - (  NVL(rbt_loc_accrl_amt, 0)
                              + NVL(rbt_loc_exp_amt, 0)
                              + NVL(rbt_natl_accrl_amt, 0)
                              + NVL(rbt_natl_exp_amt, 0))
                           - CASE
                                WHEN NVL(before_price_ac_ind, 'N') <> 'Y'
                                 AND NVL(ar_gl_acct, 0) BETWEEN l_cogs_ar_gl_lwr_lmt AND l_cogs_ar_gl_upr_lmt THEN
                                   NVL(prod_alw, 0) + NVL(prod_chrg, 0) + NVL(non_prod_alwnc, 0) + NVL(non_prod_chrg, 0)
                                ELSE
                                   0
                             END)
                          net_tagp,
                       SUM(NVL(true_gp, 0)) true_gp,
                       SUM(NVL(natl_mrktng_alwnc_pgms, 0)) natl_mrktng_alwnc_pgms,
                       SUM(CASE WHEN p.pim_brnd_typ = 2 THEN natl_mrktng_alwnc_pgms ELSE 0 END) eb_natl_mrktng_alwnc_pgms,
                       SUM(CASE WHEN p.pim_brnd_typ = 2 THEN loc_mrktng_alwnc_pgms ELSE 0 END) eb_loc_mrktng_alwnc_pgms,
                       SUM(CASE WHEN p.pim_brnd_typ = 2 THEN loc_one_tm ELSE 0 END) eb_loc_one_tm,
                       SUM(CASE WHEN p.pim_brnd_typ = 2 THEN loc_prom_alwnc_pgms ELSE 0 END) eb_loc_prom_alwnc_pgms,
                       SUM(CASE WHEN p.pim_brnd_typ = 2 THEN natl_one_tm ELSE 0 END) eb_natl_one_tm,
                       SUM(CASE WHEN p.pim_brnd_typ = 2 THEN natl_prom_alwnc_pgms ELSE 0 END) eb_natl_prom_alwnc_pgms,
                       SUM(CASE WHEN p.pim_brnd_typ = 2 THEN ttl_alwnc ELSE 0 END) eb_ttl_alwnc,
                       SUM(CASE WHEN p.pim_brnd_typ = 2 THEN ttl_loc_alwnc ELSE 0 END) eb_ttl_loc_alwnc,
                       SUM(CASE WHEN p.pim_brnd_typ = 2 THEN ttl_natl_alwnc ELSE 0 END) eb_ttl_natl_alwnc,
                       SUM(NVL(loc_mrktng_alwnc_pgms, 0)) loc_mrktng_alwnc_pgms,
                       SUM(NVL(loc_one_tm, 0)) loc_one_tm,
                       SUM(NVL(loc_prom_alwnc_pgms, 0)) loc_prom_alwnc_pgms,
                       SUM(NVL(natl_one_tm, 0)) natl_one_tm,
                       SUM(NVL(natl_prom_alwnc_pgms, 0)) natl_prom_alwnc_pgms,
                       SUM(NVL(ttl_loc_alwnc, 0)) ttl_loc_alwnc,
                       SUM(NVL(ttl_natl_alwnc, 0)) ttl_natl_alwnc,
                       SUM(NVL(adj_markout, 0)) adj_markout,
                       SUM(CASE WHEN s.trans_typ = 'CD' THEN unfrm_qty_ship ELSE 0 END) cd_unfrm_qty_ship,
                       SUM(CASE WHEN s.trans_typ = 'CD' THEN qty_ship ELSE 0 END) cd_qty_ship,
                       SUM(NVL(dry_each, 0)) dry_each,
                       SUM(NVL(dry_unit, 0)) dry_unit,
                       SUM(NVL(dry_wt, 0)) dry_wt,
                       SUM(NVL(each_ord, 0)) each_ord,
                       SUM(NVL(each_orig, 0)) each_orig,
                       SUM(NVL(each_rsrv, 0)) each_rsrv,
                       SUM(NVL(each_ship, 0)) each_ship,
                       SUM(CASE WHEN p.pim_brnd_typ = 2 THEN unfrm_qty_ship ELSE 0 END) eb_unfrm_qty_ship,
                       SUM(CASE WHEN p.pim_brnd_typ = 2 THEN each_ship ELSE 0 END) eb_each_ship,
                       SUM(CASE WHEN p.pim_brnd_typ = 2 THEN net_wt_ship ELSE 0 END) eb_net_wt_ship,
                       SUM(CASE WHEN p.pim_brnd_typ = 2 THEN qty_ship ELSE 0 END) eb_qty_ship,
                       SUM(CASE WHEN p.pim_brnd_typ = 2 THEN unit_ship ELSE 0 END) eb_unit_ship,
                       SUM(NVL(frz_each, 0)) frz_each,
                       SUM(NVL(frz_unit, 0)) frz_unit,
                       SUM(NVL(frz_wt, 0)) frz_wt,
                       SUM(CASE WHEN NVL(p.pim_brnd_typ, 1) <> 2 THEN unfrm_qty_ship ELSE 0 END) mb_unfrm_qty_ship,
                       SUM(NVL(net_wt_ship, 0)) net_wt_ship,
                       SUM(NVL(qty_dvt, 0)) qty_dvt,
                       SUM(NVL(qty_markout, 0)) qty_markout,
                       SUM(NVL(qty_ord, 0)) qty_ord,
                       SUM(NVL(qty_orig, 0)) qty_orig,
                       SUM(NVL(qty_rsrv, 0)) qty_rsrv,
                       SUM(NVL(qty_ship, 0)) qty_ship,
                       SUM(NVL(qty_subbed, 0)) qty_subbed,
                       SUM(NVL(rfrgrt_each, 0)) rfrgrt_each,
                       SUM(NVL(rfrgrt_unit, 0)) rfrgrt_unit,
                       SUM(NVL(rfrgrt_wt, 0)) rfrgrt_wt,
                       SUM(CASE WHEN s.trans_typ = 'RT' THEN qty_ship ELSE 0 END) rt_qty_ship,
                       SUM(CASE WHEN s.trans_typ = 'RT' THEN unfrm_qty_ship ELSE 0 END) rt_unfrm_qty_ship,
                       SUM(NVL(unfrm_qty_dvt, 0)) unfrm_qty_dvt,
                       SUM(NVL(unfrm_qty_markout, 0)) unfrm_qty_markout,
                       SUM(NVL(unfrm_qty_ord, 0)) unfrm_qty_ord,
                       SUM(NVL(unfrm_qty_orig, 0)) unfrm_qty_orig,
                       SUM(NVL(unfrm_qty_rsrv, 0)) unfrm_qty_rsrv,
                       SUM(NVL(unfrm_qty_subbed, 0)) unfrm_qty_subbed,
                       SUM(NVL(unit_ord, 0)) unit_ord,
                       SUM(NVL(unit_orig, 0)) unit_orig,
                       SUM(NVL(unit_rsrv, 0)) unit_rsrv,
                       SUM(NVL(unit_ship, 0)) unit_ship,
                       SUM(CASE WHEN s.trans_typ = 'VS' THEN qty_ship ELSE 0 END) vs_qty_ship,
                       SUM(CASE WHEN s.trans_typ = 'VS' THEN unfrm_qty_ship ELSE 0 END) vs_unfrm_qty_ship,
                       SUM(CASE WHEN s.trans_typ = 'WC' THEN unfrm_qty_ship ELSE 0 END) wc_unfrm_qty_ship,
                       SUM(CASE WHEN s.trans_typ = 'WC' THEN qty_ship ELSE 0 END) wc_qty_ship,
                       SUM(NVL(cmsn_sls_extnd, 0)) cmsn_sls_extnd,
                       SUM(NVL(cr_memo_dlr, 0)) cr_memo_dlr,
                       SUM(CASE WHEN s.trans_typ = 'CD' THEN grs_sls_extnd ELSE 0 END) cd_grs_sls_extnd,
                       SUM(CASE WHEN s.ord_src in  (select ORD_SRC from xdmadm.ORD_SRC_MAP where ORD_SRC_GRP = 'CS')
                        THEN grs_sls_extnd ELSE 0 END) cs_grs_sls_extnd, -- 3.0 changes
                       SUM(CASE WHEN s.ord_src = 'CT' THEN grs_sls_extnd ELSE 0 END) ct_grs_sls_extnd,
                       SUM(CASE WHEN s.ord_src in (select ORD_SRC from xdmadm.ORD_SRC_MAP where ORD_SRC_GRP = 'EC')
                        THEN grs_sls_extnd ELSE 0 END) ec_grs_sls_extnd, -- 3.0 changes
                       SUM(CASE
                              WHEN p.pim_brnd_typ = 2 THEN
                                 NVL(
                                    grs_sls_extnd
                                    + (CASE
                                          WHEN before_price_ac_ind <> 'Y'
                                           AND ar_gl_acct BETWEEN l_net_sls_ar_gl_lwr_lmt AND l_net_sls_ar_gl_upr_lmt THEN
                                             (  NVL(prod_alw, 0)
                                              + NVL(prod_chrg, 0)
                                              + NVL(non_prod_alwnc, 0)
                                              + NVL(non_prod_chrg, 0))
                                          ELSE
                                             0
                                       END)
                                    - (  NVL(rbt_loc_accrl_amt, 0)
                                       + NVL(rbt_natl_accrl_amt, 0)
                                       + NVL(rbt_loc_exp_amt, 0)
                                       + NVL(rbt_natl_exp_amt, 0)),
                                    0)
                              ELSE
                                 0
                           END)
                          eb_net_sls,
                       SUM(CASE WHEN p.pim_brnd_typ = 2 THEN grs_sls_extnd ELSE 0 END) eb_grs_sls_extnd,
                       SUM(CASE WHEN s.ord_src in  (select ORD_SRC from xdmadm.ORD_SRC_MAP where ORD_SRC_GRP = 'ED')
                        THEN grs_sls_extnd ELSE 0 END) ed_grs_sls_extnd, -- 3.0 changes
                       SUM(CASE WHEN s.ord_src = 'FS' THEN grs_sls_extnd ELSE 0 END) fs_grs_sls_extnd,
                       SUM(CASE
                              WHEN NVL(p.pim_brnd_typ, 1) <> 2 THEN
                                 NVL(
                                    grs_sls_extnd
                                    + (CASE
                                          WHEN before_price_ac_ind <> 'Y'
                                           AND ar_gl_acct BETWEEN l_net_sls_ar_gl_lwr_lmt AND l_net_sls_ar_gl_upr_lmt THEN
                                             (  NVL(prod_alw, 0)
                                              + NVL(prod_chrg, 0)
                                              + NVL(non_prod_alwnc, 0)
                                              + NVL(non_prod_chrg, 0))
                                          ELSE
                                             0
                                       END)
                                    - (  NVL(rbt_loc_accrl_amt, 0)
                                       + NVL(rbt_natl_accrl_amt, 0)
                                       + NVL(rbt_loc_exp_amt, 0)
                                       + NVL(rbt_natl_exp_amt, 0)),
                                    0)
                              ELSE
                                 0
                           END)
                          mb_net_sls,
                       SUM(CASE WHEN NVL(p.pim_brnd_typ, 1) <> 2 THEN grs_sls_extnd ELSE 0 END) mb_grs_sls_extnd,
                       SUM(CASE WHEN s.trans_typ = 'RT' THEN grs_sls_extnd ELSE 0 END) rt_grs_sls_extnd,
                       SUM(CASE
                              WHEN s.trans_typ = 'RT' THEN
                                 NVL(
                                    grs_sls_extnd
                                    + (CASE
                                          WHEN before_price_ac_ind <> 'Y'
                                           AND ar_gl_acct BETWEEN l_net_sls_ar_gl_lwr_lmt AND l_net_sls_ar_gl_upr_lmt THEN
                                             (  NVL(prod_alw, 0)
                                              + NVL(prod_chrg, 0)
                                              + NVL(non_prod_alwnc, 0)
                                              + NVL(non_prod_chrg, 0))
                                          ELSE
                                             0
                                       END)
                                    - (  NVL(rbt_loc_accrl_amt, 0)
                                       + NVL(rbt_natl_accrl_amt, 0)
                                       + NVL(rbt_loc_exp_amt, 0)
                                       + NVL(rbt_natl_exp_amt, 0)),
                                    0)
                              ELSE
                                 0
                           END)
                          rt_net_sls,
                       SUM(CASE WHEN s.ord_src = 'PT' THEN grs_sls_extnd ELSE 0 END) pt_grs_sls_extnd,
                       SUM(CASE WHEN s.trans_typ = 'VS' THEN grs_sls_extnd ELSE 0 END) vs_grs_sls_extnd,
                       SUM(CASE WHEN s.trans_typ = 'WC' THEN grs_sls_extnd ELSE 0 END) wc_grs_sls_extnd,
                       COUNT(DISTINCT CASE
                                         WHEN s.trans_typ = 'CC'
                                          AND p.pim_suprcls_id <> 97 THEN
                                            s.div_nbr || s.cust_nbr || s.prcs_dt || s.inv_dt || s.inv_nbr
                                         ELSE
                                            NULL
                                      END)
                          cc_inv_cnt,
                       SUM(CASE
                              WHEN trans_typ = 'CC'
                               AND prod_alwnc_cd IS NULL
                               AND prod_chrg_cd IS NULL THEN
                                 1
                              ELSE
                                 0
                           END)
                          cc_ln_cnt,
                       SUM(CASE WHEN s.trans_typ = 'CC' THEN unfrm_qty_ship ELSE 0 END) cc_unfrm_qty_ship,
                       SUM(CASE WHEN s.trans_typ = 'CC' THEN qty_ship ELSE 0 END) cc_qty_ship,
                       SUM(CASE WHEN s.trans_typ = 'CC' THEN grs_sls_extnd ELSE 0 END) cc_grs_sls_extnd,
                       SUM(CASE WHEN s.ord_src = 'ST' THEN grs_sls_extnd ELSE 0 END) st_grs_sls_extnd,
                       SUM(NVL(lnd_actl_gp, 0)) lnd_actl_gp,
                       SUM(CASE
                              WHEN NVL(s.cr_memo_nbr, 0) = 0
                               AND NOT (  NVL(s.grs_sls_extnd, 0)
                                        - NVL(s.dwa_cost_extnd, 0)
                                        - CASE WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END
                                        + NVL(s.ttl_vndr_fnd_dvt_is, 0) < 0
                                    AND s.prod_stat_ind_actl IN ('8', '9')) -- not DWO
                               AND NVL(s.ttl_int_vndr_fnd_dvt_is, 0) > 0 THEN
                                 NVL(s.ttl_int_vndr_fnd_dvt_is, 0)
                              ELSE
                                 0
                           END)
                          ttl_int_vndr_fnd_dvt_is,
                       SUM(CASE
                              WHEN NVL(s.cr_memo_nbr, 0) = 0
                               AND NOT (  NVL(s.grs_sls_extnd, 0)
                                        - NVL(s.dwa_cost_extnd, 0)
                                        - CASE WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END
                                        + NVL(s.ttl_vndr_fnd_dvt_is, 0) < 0
                                    AND s.prod_stat_ind_actl IN ('8', '9')) -- not DWO
                               AND NOT NVL(s.ttl_int_vndr_fnd_dvt_is, 0) > 0 -- not IDV
                               AND NOT (NVL(s.grs_sls_extnd, 0) + NVL(s.ttl_vndr_fnd_dvt_is, 0) <=
                                           NVL(s.orig_mrgn_bsis_amt_extnd, 0)
                                    AND NVL(s.prime_mrk_ind, 'X') = 'F'
                                    AND (s.pyr_seg_cd_actl = 'IND'
                                      OR   NVL(s.grs_sls_extnd, 0)
                                         - NVL(s.dwa_cost_extnd, 0)
                                         - CASE WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END
                                         + NVL(s.ttl_vndr_fnd_dvt_is, 0) < 0)) -- not FIX
                               AND NOT (NVL(s.grs_sls_extnd, 0) + NVL(s.ttl_vndr_fnd_dvt_is, 0) <=
                                           NVL(s.orig_mrgn_bsis_amt_extnd, 0)
                                    AND s.prc_apprvr_id IS NOT NULL) -- not PAP
                               AND NOT (s.mrgn_bsis = 'DEV') -- not DOND
                               AND s.mrgn_bsis = 'CBA' THEN
                                 NVL(s.comm_bsis_amt_extnd, 0) - NVL(s.ttl_vndr_fnd_dvt_is, 0)
                              ELSE
                                 0
                           END)
                          comm_bsis_amt_extnd_is,
                       SUM(CASE
                              WHEN NVL(s.cr_memo_nbr, 0) = 0
                               AND NOT (  NVL(s.grs_sls_extnd, 0)
                                        - NVL(s.dwa_cost_extnd, 0)
                                        - CASE WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END
                                        + NVL(s.ttl_vndr_fnd_dvt_is, 0) < 0
                                    AND s.prod_stat_ind_actl IN ('8', '9')) -- not DWO
                               AND NOT NVL(s.ttl_int_vndr_fnd_dvt_is, 0) > 0 -- not IDV
                               AND NOT (NVL(s.grs_sls_extnd, 0) + NVL(s.ttl_vndr_fnd_dvt_is, 0) <=
                                           NVL(s.orig_mrgn_bsis_amt_extnd, 0)
                                    AND NVL(s.prime_mrk_ind, 'X') = 'F'
                                    AND (s.pyr_seg_cd_actl = 'IND'
                                      OR   NVL(s.grs_sls_extnd, 0)
                                         - NVL(s.dwa_cost_extnd, 0)
                                         - CASE WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END
                                         + NVL(s.ttl_vndr_fnd_dvt_is, 0) < 0)) -- not FIX
                               AND NOT (NVL(s.grs_sls_extnd, 0) + NVL(s.ttl_vndr_fnd_dvt_is, 0) <=
                                           NVL(s.orig_mrgn_bsis_amt_extnd, 0)
                                    AND s.prc_apprvr_id IS NOT NULL) -- not PAP
                               AND s.mrgn_bsis = 'DEV' THEN
                                   NVL(s.orig_mrgn_bsis_amt_extnd, 0)
                                 - NVL(s.grs_sls_extnd, 0)
                                 - NVL(s.ttl_vndr_fnd_dvt_is, 0)
                              ELSE
                                 0
                           END)
                          dond_is,
                       SUM(CASE WHEN scp_all.prod_nbr IS NOT NULL THEN qty_ship ELSE 0 END) scp_qty_ship,
                       SUM(CASE WHEN scp_promo.prod_nbr IS NOT NULL THEN qty_ship ELSE 0 END) scp_promo_qty_ship,
                       SUM(CASE WHEN s.cr_dbt_rsn_cd IN (6, 8) THEN s.unfrm_qty_ship ELSE 0 END) rtrn_unfrm_qty_ship,
                       SUM(CASE
                              WHEN NVL(s.cr_memo_nbr, 0) = 0
                               AND NOT (  NVL(s.grs_sls_extnd, 0)
                                        - NVL(s.dwa_cost_extnd, 0)
                                        - CASE WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END
                                        + NVL(s.ttl_vndr_fnd_dvt_is, 0) < 0
                                    AND s.prod_stat_ind_actl IN ('8', '9')) -- not DWO
                               AND ((NVL(s.ttl_int_vndr_fnd_dvt_is, 0) > 0) -- IDV
                                 OR (NVL(s.grs_sls_extnd, 0) + NVL(s.ttl_vndr_fnd_dvt_is, 0) <=
                                        NVL(s.orig_mrgn_bsis_amt_extnd, 0)
                                 AND NVL(s.prime_mrk_ind, 'X') = 'F'
                                 AND (s.pyr_seg_cd_actl = 'IND'
                                   OR NVL(s.grs_sls_extnd, 0) - NVL(s.dwa_cost_extnd, 0) - (CASE WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END) + NVL(s.ttl_vndr_fnd_dvt_is, 0) <
                                         0)) -- FIX
                                 OR (NVL(s.grs_sls_extnd, 0) + NVL(s.ttl_vndr_fnd_dvt_is, 0) <=
                                        NVL(s.orig_mrgn_bsis_amt_extnd, 0)
                                 AND s.prc_apprvr_id IS NOT NULL) -- PAP
                                 OR s.mrgn_bsis = 'DEV' -- DOND
                                 OR s.mrgn_bsis = 'CBA' -- CBA
                                 OR (s.prc_src = 3
                                 AND s.prime_sis_flg = 'N'
                                 AND NVL(s.grs_sls_extnd, 0) - NVL(s.dwa_cost_extnd, 0) - (CASE WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END) + NVL(s.ttl_vndr_fnd_dvt_is, 0) <
                                        0
                                 AND s.prime_dvt_cost_typ IN ('D', 'F')) -- NPL
                                                                        ) THEN
                                 s.grs_sls_extnd
                              ELSE
                                 0
                           END)
                          invst_sls_prtcpt,
                       case when nvl(rev_div.acqstn_cmpny_nm ,'USF') <> 'USF'
                            and  s.prcs_dt < nvl(rev_div.acqstn_dt, s.prcs_dt) then 'N' else 'Y'
                       end usf_gl_ind,
                       sum(CASE  WHEN   NVL (rev_div.ACQSTN_CMPNY_NM, 'USF') = 'USF'
                       AND NVL(UPPER (TRIM (TRAILING ' ' FROM TRIM (LEADING ' ' FROM s.DTL_ORD_SRC))),'EC') IN ('EC','MO','NV','PO','VP')
                       AND UPPER (TRIM (TRAILING ' ' FROM TRIM (LEADING ' ' FROM s.DTL_ORD_TKR_ROLE))) IN('CUST', 'PRTNR')
                       AND   s.TRANS_TYP IN ('RT', 'VS', 'WC')THEN nvl(s.GRS_SLS_EXTND,0) else 0 end) ec_st_grs_sls_extnd,

                       Sum(CASE WHEN  NVL (rev_div.ACQSTN_CMPNY_NM, 'USF') = 'USF'
                       AND s.TRANS_TYP IN ('RT', 'VS', 'WC') AND ((UPPER (TRIM (TRAILING ' ' FROM TRIM (LEADING ' ' FROM s.DTL_ORD_TKR_ROLE))) IN('PRTNR')
                       AND UPPER (TRIM (TRAILING ' ' FROM TRIM (LEADING ' ' FROM s.DTL_ORD_SRC))) IN('PO'))
                       OR (UPPER (TRIM ( TRAILING ' ' FROM TRIM ( LEADING ' ' FROM s.DTL_ORD_TKR_ROLE))) IN('CUST', 'PRTNR')
                       AND NVL (UPPER (TRIM (TRAILING ' ' FROM TRIM (LEADING ' ' FROM s.DTL_ORD_SRC))),'EC') IN ('EC','MO','NV','PO','VP'))
                       OR (UPPER (TRIM (TRAILING ' ' FROM TRIM (LEADING ' ' FROM s.DTL_ORD_TKR_ROLE))) IN('PRTNR', 'SYSTM')
                       AND UPPER ( TRIM ( TRAILING ' ' FROM TRIM ( LEADING ' ' FROM s.DTL_ORD_SRC))) IN ('ED', 'EP', 'OS')))
                       THEN nvl(s.GRS_SLS_EXTND,0) ELSE 0 END) ec_na_grs_sls_extnd,

                       sum(Case when s.TRANS_TYP IN ('RT', 'VS', 'WC')
                       and NVL(UPPER (TRIM (TRAILING ' ' FROM TRIM (LEADING ' ' FROM s.DTL_ORD_SRC))),'EC') NOT IN ('EP','ED','OS')
                       then nvl(s.GRS_SLS_EXTND,0) else 0 end) ec_st_grs_sls_extnd_dnmtr,

                       sum(Case when s.TRANS_TYP IN ('RT', 'VS', 'WC')  then nvl(s.GRS_SLS_EXTND,0) else 0 end) ec_na_grs_sls_extnd_dnmtr
                  FROM xdmadm.pim_corp p,
                       (SELECT *
                          FROM xdmadm.sales_corp
                         WHERE xfer_to_dt IS NULL
                           AND prcs_dt = l_prcs_dt
                           AND div_nbr = p_div_nbr
                           AND (orig_ldr_tm IS NULL
                             OR orig_ldr_tm > l_max_orig_ldr_tm)) s,
                       (SELECT *
                          FROM xdmadm.scp_promo_wk
                         WHERE frst_scp_flg = 'Y'
                           AND l_fisc_yr_wk >= promo_start_wk) scp_all, -- MN 09102013
                       (SELECT *
                          FROM xdmadm.scp_promo_wk
                         WHERE l_fisc_yr_wk BETWEEN promo_start_wk AND promo_end_wk) scp_promo, -- MN 09102013
                        xdmadm.div_corp d,
                        xdmadm.div_corp rev_div
                    WHERE s.pim_usf_std_prod_cd = p.pim_usf_std_prod_cd
                   AND s.prod_nbr = scp_all.prod_nbr(+) -- MN 09102013
                   AND s.prod_nbr = scp_promo.prod_nbr(+) -- MN 09102013
                   AND s.div_nbr  = d.div_nbr
                   AND nvl(s.sls_revenue_div_nbr,s.div_nbr) = rev_div.div_nbr
              GROUP BY s.cust_nbr,
                       s.div_nbr,
                       s.cust_sk,
                       NVL(s.sls_revenue_div_nbr, s.div_nbr),
                       DECODE(p.pim_suprcls_id, 97, 'Y', 'N') ,
                       case when nvl(rev_div.acqstn_cmpny_nm ,'USF') <> 'USF'
                            and  s.prcs_dt < nvl(rev_div.acqstn_dt, s.prcs_dt) then 'N' else 'Y'
                       end) e;

   DBMS_OUTPUT.put_line('Inserted ' || sql%ROWCOUNT || ' rows');

   COMMIT;

   RETURN c_success;
EXCEPTION
   WHEN OTHERS THEN
      DBMS_OUTPUT.put_line('Unexepected error');
      DBMS_OUTPUT.put_line(SQLCODE || ': ' || SQLERRM);
      ROLLBACK;
      RETURN c_error;
END;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_CUST_CLSFCTN_CORP_WK_LOAD" (odate IN DATE)
   RETURN NUMBER AS
   /***********************************************************************
   * Name: FN_CUST_CLSFCTN_CORP_WK_LOAD
   * Type: Function
   * Description: Load weekly customer classification table.
   * Revisions:
   *  Ver        Date        Author           Description
   *  ---------  ----------  ---------------  -----------------------------
   *  1.0        04/27/2014  Matt Nicol       Created this function
   ************************************************************************/
   c_success            CONSTANT NUMBER := 0;
   c_error              CONSTANT NUMBER := 1;
   c_schema             CONSTANT VARCHAR2(30) := 'XDMADM';
   c_aggr_tbl_syn_nm    CONSTANT VARCHAR2(30) := 'CUST_CLSFCTN_CORP_WK';
   c_aggr_load_syn_nm   CONSTANT VARCHAR2(30) := 'CUST_CLSFCTN_CORP_WK_LOAD';
   l_return_code        NUMBER;
   l_out_msg            VARCHAR2(256);

   l_aggr_tbl_nm        VARCHAR2(30);
   l_load_tbl_nm        VARCHAR2(30);
BEGIN
   -- Validate input parameters
   IF (odate IS NULL) THEN
      DBMS_OUTPUT.put_line('Error: Invalid Parameters: Date is required');
      RETURN c_error;
   END IF;

   -- Get current synonym tables
   EXECUTE IMMEDIATE 'SELECT table_name FROM user_synonyms WHERE synonym_name = ''' || c_aggr_tbl_syn_nm || ''''
      INTO l_aggr_tbl_nm;

   EXECUTE IMMEDIATE 'SELECT table_name FROM user_synonyms WHERE synonym_name = ''' || c_aggr_load_syn_nm || ''''
      INTO l_load_tbl_nm;

   DBMS_OUTPUT.put_line('Aggr Table: ' || l_aggr_tbl_nm);
   DBMS_OUTPUT.put_line('Load Table: ' || l_load_tbl_nm);

   -- Truncate load table
   l_return_code   := usfdba.table_pkg.truncate_table(l_out_msg, c_schema, l_load_tbl_nm);
   DBMS_OUTPUT.put_line('Truncate Load Table Return: ' || l_return_code || ' - ' || l_out_msg);

   IF (l_return_code <> 0) THEN
      DBMS_OUTPUT.put_line('Error: Failed to truncate table');
      RETURN c_error;
   END IF;

   INSERT /*+ append */
         INTO xdmadm.cust_clsfctn_corp_wk_load
      (SELECT ccc.crt_dt,
              ccc.cust_clsfctn,
              ccc.cust_nbr,
              ccc.cust_sk,
              ccc.cust_tenure_mth_actl,
              ccc.div_nbr,
              ccc.fisc_mth_end_dt,
              ccc.fisc_mth_end_dt_yrago,
              ccc.fisc_mth_of_yr,
              ccc.fisc_mth_strt_dt,
              ccc.fisc_mth_strt_dt_yrago,
              ccc.fisc_yr,
              ccc.fisc_yr_mth,
              ccc.net_acct_cust_sk,
              ccc.next_fisc_mth_cust_clsfctn,
              ccc.next_fmth_unfrm_grs_sls_extnd,
              ccc.next_fmth_unfrm_grs_tgp,
              ccc.next_fmth_unfrm_qty_ship,
              ccc.next_fmth_unfrm_tagp,
              ccc.sixth_fisc_mth_cust_clsfctn,
              ccc.third_fisc_mth_cust_clsfctn,
              ccc.unfrm_grs_sls_extnd,
              ccc.unfrm_grs_tgp,
              ccc.unfrm_grs_tgp_per_drop,
              ccc.unfrm_qty_ship,
              ccc.drops,
              ccc.nbr_of_wk_ordr_last_yr_mth,
              ccc.nbr_of_wk_ordr_this_yr_mth,
              ccc.nbr_of_wk_ordr_next_fisc_mth,
              ccc.upd_dt,
              wtc.fisc_yr_wk,
              wtc.clndr_wk_end_dt,
              wtc.clndr_wk_end_dt_yrago,
              wtc.clndr_wk_strt_dt,
              wtc.clndr_wk_strt_dt_yrago,
              wtc.fisc_yr_wkago,
              wtc.fisc_yrago_wk
         FROM xdmadm.cust_clsfctn_corp ccc, xdmadm.wkly_time_corp wtc
        WHERE wtc.fisc_mth_start_dt = ccc.fisc_mth_strt_dt);

   DBMS_OUTPUT.put_line('Inserted ' || sql%ROWCOUNT || ' rows');

   COMMIT;

   -- Analyze customer weekly aggregate table
   l_return_code   := xdmadm.fn_getstat_tbl(c_schema, l_load_tbl_nm);
   DBMS_OUTPUT.put_line('Analyze Return: ' || l_return_code);

   IF (l_return_code <> 0) THEN
      DBMS_OUTPUT.put_line('Error: Failed to analyze table');
      RETURN c_error;
   END IF;

   -- Swap synonyms
   l_return_code   := xdmadm.fn_crt_synonym(c_aggr_tbl_syn_nm, c_schema, l_load_tbl_nm);
   DBMS_OUTPUT.put_line(
      'Create synonym ' || c_aggr_tbl_syn_nm || ' for ' || c_schema || '.' || l_load_tbl_nm || ': ' || l_return_code);

   IF (l_return_code <> 0) THEN
      DBMS_OUTPUT.put_line('Error: Failed to create synonym for aggregate table');
      RETURN c_error;
   END IF;

   l_return_code   := xdmadm.fn_crt_synonym(c_aggr_load_syn_nm, c_schema, l_aggr_tbl_nm);
   DBMS_OUTPUT.put_line(
      'Create synonym ' || c_aggr_load_syn_nm || ' for ' || c_schema || '.' || l_aggr_tbl_nm || ': ' || l_return_code);

   IF (l_return_code <> 0) THEN
      DBMS_OUTPUT.put_line('Error: Failed to create synonym for aggregate table');
      RETURN c_error;
   END IF;

   -- Truncate new load table
   l_return_code   := usfdba.table_pkg.truncate_table(l_out_msg, c_schema, l_aggr_tbl_nm);
   DBMS_OUTPUT.put_line('Truncate Prev Aggr Table Return: ' || l_return_code || ' - ' || l_out_msg);

   IF (l_return_code <> 0) THEN
      DBMS_OUTPUT.put_line('Error: Failed to truncate table');
      RETURN c_error;
   END IF;

   RETURN c_success;
EXCEPTION
   WHEN OTHERS THEN
      DBMS_OUTPUT.put_line('Unexepected error');
      DBMS_OUTPUT.put_line(SQLCODE || ': ' || SQLERRM);
      RETURN c_error;
END fn_cust_clsfctn_corp_wk_load;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_GETSTAT_TBL"
                                     (V_TABLE_OWNER     IN VARCHAR2
                                     ,V_TABLE_NAME      IN VARCHAR2
                                     )
      RETURN VARCHAR2
   AS
--******************************************************************************
--* Name          : FN_GETSTAT_TBL                                         *
--* Usage         : FN_GETSTAT_TBL                                         *
--******************************************************************************
--* DESCRIPTION                                                                *
--* -----------                                                                *
--*               : Gathers stats for the Table                                *
--*----------------------------------------------------------------------------*
--* PARM Used:PARTITION_VALUE  - Partition Value                               *
--* -------------------------------------------------------------------------- *
--*  INPUT:            Table Owner and Table Name                             *
--* -------------------------------------------------------------------------- *
--*  Target  :         Table Owner and Table Name                            *
--* -------------------------------------------------------------------------- *
--*  Return Code : 0 Successful, Others - Load Failed                          *
--******************************************************************************
--*  Date        User Id         Changes Description                           *
--*  =========== =======         ==============================================*
--*  31-MAR-2011 S.Manocha         Initial release of this procedure.            *
--******************************************************************************
--* EIW Standard Variables                                                     *
--******************************************************************************
--******************************************************************************
  CON_PROCESS_NAME  CONSTANT varchar2(40) := 'FN_GETSTAT_TBL';
  CON_PRRTY_SEVERE  CONSTANT INTEGER := 1;
  CON_PRRTY_WARN    CONSTANT INTEGER := 2;
  CON_PRRTY_INFO    CONSTANT INTEGER := 3;
  CON_PRRTY_DEBUG   CONSTANT INTEGER := 4;
  CON_ERR_LVL       CONSTANT INTEGER := 3;
  CON_REC_LIMIT     CONSTANT NUMBER := 500;
  CON_COMM_LIMIT    CONSTANT NUMBER := 1000;
--******************************************************************************
--* Program Variables                                                          *
--******************************************************************************
   v_dynamic_sql_stmt    varchar2(32000);
--******************************************************************************
--* Define Variables for publishing Run details in EIW process log             *
--******************************************************************************
   v_prcs_nm            varchar(100);
   v_prcs_stp           varchar(100);
   v_prcs_pram          varchar(100);
   v_prcs_err_cd        varchar(200);
   v_prcs_err_msg       varchar(200);
   v_getstats_retval    varchar(32);
--******************************************************************************
--* Program Start                                                              *
--******************************************************************************
BEGIN
      v_prcs_nm  := CON_PROCESS_NAME ;
      v_prcs_pram:=   V_TABLE_OWNER
                    ||'-'
                    ||V_TABLE_NAME
                    ;
      v_prcs_stp := 'Start Process';

      DBMS_OUTPUT.PUT_LINE('Start Time:'||TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS'));
      DBMS_OUTPUT.PUT_LINE('v_prcs_pram:'||v_prcs_pram);

--******************************************************************************
--* Using Cursor , Enable the Index of Sub partition                           *
--******************************************************************************
<< compress_sub_partitions>>
       v_prcs_stp := 'Gather stats for V_TABLE_NAME';

        DBMS_STATS.gather_table_stats
                                     (ownname               => V_TABLE_OWNER,
                                      tabname               => V_TABLE_NAME,
                                      estimate_percent      => 100,
                                      block_sample          => FALSE,
                                      method_opt            => 'FOR ALL COLUMNS SIZE 1',
                                      DEGREE                => 128,
                                      granularity           => 'ALL',
                                      CASCADE               => TRUE
                                     );

         if  SQLCODE = 0 then
              DBMS_OUTPUT.put_line
              ('Gather stats for V_TABLE_NAME:' || V_TABLE_NAME
                            ||' Completed');
         else
             DBMS_OUTPUT.put_line ( 'Get Stats Failed for '||V_TABLE_NAME);
             return -1;
         end if;

--******************************************************************************
--* Wrap Program                                                               *
--******************************************************************************
  <<Wrap_Program>>

      v_prcs_stp := 'Final Commit';

      commit;

      DBMS_OUTPUT.put_line ('Gather stats for :' || V_TABLE_NAME||' Completed');
      dbms_output.put_line('End Time:'||to_char(sysdate,'YYYY-MM-DD HH24:MI:SS'));

      RETURN 0;
--******************************************************************************
--* Exception Handling                                                         *
--******************************************************************************
EXCEPTION
   WHEN OTHERS
   THEN
         DBMS_OUTPUT.put_line ('V_TABLE_NAME:' || V_TABLE_NAME);
         DBMS_OUTPUT.put_line ('SQLERROR:' || SQLCODE || ',' || SQLERRM);
         DBMS_OUTPUT.PUT_LINE(       v_prcs_nm
                            ||' - '||v_prcs_stp
                            ||' - '||v_prcs_pram);

      RETURN -1;
END;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_COMPRESS_TBL_PARTITIONS"
   (p_owner_name IN VARCHAR2, p_table_name IN VARCHAR2)
      RETURN NUMBER
   AS

--******************************************************************************
--* Name          : fn_compress_tbl_partitions                                 *
--* Usage         : fn_compress_tbl_partitions                                 *
--******************************************************************************
--* DESCRIPTION                                                                *
--* -----------                                                                *
--* Function Retrieves Partition names and compresses those Partitions    *
--*               :                                                            *
--*----------------------------------------------------------------------------*
--* PARM Used:owner_name - owner of table                                      *
--*          table_name - table name for which partitons need to be compressed *
--* -------------------------------------------------------------------------- *
--*  INPUT:                                       *
--* -------------------------------------------------------------------------- *
--*  Target  :                                                                 *
--* -------------------------------------------------------------------------- *
--*  Return Code : 0 Successful, Others - Load Failed                          *
--******************************************************************************
--*  Date        User Id         Changes Description                           *
--*  =========== =======         ==============================================*
--*  27-MAR-2011 S.Manocha         Initial release of this procedure.          *
--******************************************************************************

--******************************************************************************
--* EIW Standard Variables                                                     *
--******************************************************************************
   CON_PROCESS_NAME  CONSTANT varchar2(40) := 'FN_COMPRESS_TBL_PARTITIONS';

--******************************************************************************
--* Define program variables                                                   *
--******************************************************************************
    i                NUMBER(4);
    v_compress_ret   VARCHAR2(3);
    v_enb_ind_retval VARCHAR2(3);

--******************************************************************************
--* Define Variables for publishing Run details in EIW process log             *
--******************************************************************************
   v_prcs_nm            varchar(100);
   v_prcs_stp           varchar(100);
   v_prcs_pram          varchar(100);

--******************************************************************************
--* Define Cursor to get the list of all paritions                             *
--******************************************************************************

    CURSOR c_get_partitions(v_owner varchar2, v_table varchar2) IS
        SELECT partition_name
        FROM all_tab_partitions
        WHERE 1=1
        AND table_owner  = v_owner
        AND table_name   = v_table;

    TYPE rt_get_partitions IS TABLE OF c_get_partitions%ROWTYPE;
    recs_get_partitions rt_get_partitions;

    CURSOR c_get_index_names (v_owner varchar2, v_table varchar2) IS
    SELECT b.owner,b.table_name,b.index_name
                    FROM all_indexes b, all_tables a
                   WHERE     b.table_owner = a.owner
                         AND b.table_name = a.table_name
                         AND b.owner = v_owner
                         AND b.table_name = v_table;

    TYPE rt_get_index_names IS TABLE OF c_get_index_names%ROWTYPE;
    recs_get_index_names rt_get_index_names;

BEGIN
    dbms_output.put_line('Start Process '||CON_PROCESS_NAME);
    dbms_output.put_line('Start Time:'||TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS'));
    v_prcs_nm  := CON_PROCESS_NAME ;
    v_prcs_pram:= 'PARAM1 : '||p_owner_name||'  PARAM2 : '||p_table_name;
    v_prcs_stp := 'Start Process '||CON_PROCESS_NAME;

--******************************************************************************
--* Getting list of all partitions
--******************************************************************************
    v_prcs_stp := 'Getting list of all partitions';
    dbms_output.put_line('opening a cursor for partition names');
    OPEN c_get_partitions(p_owner_name, p_table_name);
    FETCH c_get_partitions BULK COLLECT INTO recs_get_partitions;
    CLOSE c_get_partitions;
    dbms_output.put_line('closing a cursor for partition names');

--******************************************************************************
--* Compressing paritions
--******************************************************************************

    v_prcs_stp := 'Compressing paritions';
    dbms_output.put_line('No. of Partitions will be comptressed in this run '||recs_get_partitions.count);

    FOR i IN recs_get_partitions.FIRST..recs_get_partitions.LAST
    LOOP
        v_compress_ret := xdmadm.fn_compress_sub_part_tbl(p_owner_name,
                                                          p_table_name,
                                                          recs_get_partitions(i).partition_name);
    END LOOP;



   -- RETURN 0;

--******************************************************************************
--* Enabling the Index of Partitions                                             *
--******************************************************************************

           v_prcs_stp := 'Enabling the Index of Partitions';
           dbms_output.put_line(v_prcs_stp);
           dbms_output.put_line('opening a cursor for Index Names');
           OPEN  c_get_index_names(p_owner_name, p_table_name);
           FETCH c_get_index_names BULK COLLECT INTO recs_get_index_names;
           CLOSE c_get_index_names;
           dbms_output.put_line('closing a cursor for Index Names');

           v_prcs_stp := 'Rebuild Indexes after Compressing Partition';
           FOR j IN recs_get_index_names.first..recs_get_index_names.last
           LOOP
               FOR i IN recs_get_partitions.FIRST..recs_get_partitions.LAST
               LOOP

                     v_enb_ind_retval := xdmadm.FN_ENABLE_SUB_PART_IND
                                            ( p_owner_name                          -->Table Owner
                                             ,p_table_name                          -->Table Name
                                             ,recs_get_partitions(i).partition_name -->Partition Key
                                             ,recs_get_index_names(j).index_name    -->Index Name
                                             );

                     if  v_enb_ind_retval <> 0 then
                         DBMS_OUTPUT.put_line ( 'Rebuild Index Failed for '
                                            ||recs_get_partitions(i).partition_name
                                            ||'-'
                                            ||recs_get_index_names(j).index_name
                                            );
                         return v_enb_ind_retval;
                     else
                        DBMS_OUTPUT.put_line ( 'Rebuild Index Completed for '
                                            ||recs_get_partitions(i).partition_name
                                            ||'-'
                                            ||recs_get_index_names(j).index_name
                                            );
                     end if;
               END LOOP;
           END LOOP;

--******************************************************************************
--* Wrap Program                                                               *
--******************************************************************************
  <<Wrap_Program>>

      v_prcs_stp := 'Final Commit';

      COMMIT;
      dbms_output.put_line('End Process '||CON_PROCESS_NAME);
      dbms_output.put_line('End Time:'||TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS'));
      RETURN 0;
--******************************************************************************
--* Exception Handling                                                         *
--******************************************************************************
EXCEPTION
   WHEN OTHERS
   THEN
         --DBMS_OUTPUT.put_line ('Partition Name:' || recs_get_partitions(i).partition_name);
         DBMS_OUTPUT.put_line ('SQLERROR:' || SQLCODE || ',' || SQLERRM);
         DBMS_OUTPUT.PUT_LINE(       v_prcs_nm
                            ||' - '||v_prcs_stp
                            ||' - '||v_prcs_pram);

      RETURN -1;
END;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_CUST_CORP_PYR_AGGR_LOAD"
   RETURN NUMBER IS
   /***********************************************************************
   * Name: fn_cust_corp_pyr_aggr_load
   * Type: Function
   * Description: This function loads the fn_cust_corp_pyr_aggr_load_PYR table in XDMADM.
   *  REVISIONS:
   *  Ver    Date(dd/mm/yyyy)  Author            Description
   *  -----  ----------        ---------------   ------------------------------------
   *  1.0    13/10/2011        Sandeep Manocha   Created this procedure.
   *  1.1    06/12/2011        Sandeep Manocha   1. Added ACCT_TYP_CD.
   *                                             2. Added explicit list of columns rather then saying star (*)
   *  1.2    12/28/2011        Wes Holbert       1. Added columns cust_cntrct_flg, cust_cntrct_stat_desc,
   *                                                              cust_natl_mngd_flg, cust_mgt_typ_desc
   *                                                The description value comes directly from CUST_CORP table.
   *  1.3    02/13/2012        Wes Holbert       1. Verify the acct_typ_cd using PARAM_VALUE table to avoid hard coding.
   *                                             2. Retreive description values from
   *                                                     prnt_mlt_unit_map.cust_cntrct_stat_desc
   *                                                     cust_mgt_map.cust_mgt_typ_desc
   *                                             3. Compare distinct row count of Cust Corp and Target table,
   *                                                     Return 0 on match, 1 on mismatch.
   *                                             4. Performance - Analyze table.
   *  1.4    12/11/2012        Madhu Veerapaneni 1. Added Accountabily flag and Description columns from XDMADM.Cust_Corp
   *                                                to XDMADM.cust_corp_pyr_aggr table
   *  1.5    07/15/2013        Madhu Veerapaneni 1. Added code to use Active and Inactive tables for loading data.
   *                                             2. Modified to load from Sales Pyramid Agg
   *  1.6    03/17/2014        Madhu Veerapaneni Made the changes below:
    *                                            > Remove dynamic SQL
    *                                            > Replaced load to synonym
    *                                            > Removed  acct typ cd
    * 1.7        10/12/2015    p1a0168            Modified for Acquisition
   ************************************************************************/

   l_fn_start                      DATE;
   v_cust_corp_cnt                 NUMBER := 0;
   v_cust_corp_pyr_aggr_cnt        NUMBER := 0;
   l_load_tbl_cnt                  NUMBER := 0;
   l_return_code                   NUMBER := 0;
   l_object_nm                     VARCHAR2(30);
   l_out_msg                       VARCHAR2(256);
   v_out_msg                       VARCHAR2(256);
   l_load_tbl_nm                   VARCHAR2(30);

   c_success                 CONSTANT NUMBER := 0;
   c_error                   CONSTANT NUMBER := 1;
   c_schema                  CONSTANT VARCHAR2(30) := 'XDMADM';
   c_aggr_tbl_syn_nm         CONSTANT VARCHAR2(30) := 'CUST_CORP_PYR_AGGR';
   c_aggr_load_syn_nm        CONSTANT VARCHAR2(30) := 'CUST_CORP_PYR_AGGR_LOAD';


   all_exceptions exception; /*User Define Exception*/
   e_truncate_table exception;
   e_analyze_table exception;
   e_syn exception;

BEGIN


---- **************** Truncate the table before load  **************** -----

   EXECUTE IMMEDIATE 'SELECT table_name FROM user_synonyms WHERE synonym_name = ''' || c_aggr_load_syn_nm || ''''
      INTO l_load_tbl_nm;

-- Check if the main synonym is pointing to the load table to be loaded and raise exception

   IF (c_aggr_tbl_syn_nm = l_load_tbl_nm) THEN
      RAISE e_syn;
   END IF;

      --Check if data exists in aggregate table and truncate if so
   EXECUTE IMMEDIATE 'SELECT count(1) FROM ' || l_load_tbl_nm INTO l_load_tbl_cnt;

   IF (l_load_tbl_cnt > 0) THEN
      DBMS_OUTPUT.put_line('Load aggregate table has ' || l_load_tbl_nm || ' records in it');

      l_return_code   := usfdba.table_pkg.truncate_table(l_out_msg, c_schema, l_load_tbl_nm);

      DBMS_OUTPUT.put_line('Truncate table Return: ' || l_return_code || ' - ' || l_out_msg);

      IF (l_return_code <> 0) THEN
         l_object_nm   := l_load_tbl_nm;
         RAISE e_truncate_table;
      END IF;

      DBMS_OUTPUT.put_line('Load aggregate table ' || l_load_tbl_nm ||' truncated');

   END IF;

   ---- ************* End Truncate the table before load  **************** -----

   ---- ************* Load the Cust Pyramid Aggregate table ************* -----

    l_fn_start       := SYSDATE;


  /*  Count the number of Distinct rows from Cust pyr Aggr */              --Change 1.5
   SELECT COUNT(1) INTO  v_cust_corp_cnt
   FROM (
         SELECT distinct
                pyr_seg_cd,
                corp_mlt_unit_nbr,
                trd_cls,
                prnt_mlt_unit_cd,
                --acct_typ_cd,
                cust_cntrct_flg,
                cust_natl_mngd_flg,
                cust_acctblty_flg, CUST_ACQSTN_STAT_CRNT,CUST_ACQSTN_STAT_ACTL
    FROM   xdmadm.SALES_SUMM_MRCH_AGGR_LOAD a) ;                                      --Change 1.5


   --Display record count
   DBMS_OUTPUT.put_line('Number of distinct cust attributes from Sales Pyramid Aggr is ' || v_cust_corp_cnt);



         INSERT INTO xdmadm.CUST_CORP_PYR_AGGR_LOAD (
                pyr_seg_cd,
                pyr_seg_desc,
                corp_mlt_unit_nbr,
                corp_mlt_unit_desc,
                trd_cls,
                trd_cls_desc,
                prnt_mlt_unit_cd,
                prnt_mlt_unit_desc,
                --acct_typ_cd,
                cust_cntrct_flg,                                                --Change 1.2
                cust_cntrct_stat_desc,                                          --Change 1.2
                cust_natl_mngd_flg,                                             --Change 1.2
                cust_mgt_typ_desc,                                              --Change 1.2
                cust_acctblty_flg,                                              --Change 1.4
                cust_acctblty_desc,                                             --Change 1.4
                usf_top_pyr_seg_cd,                                             --Change 1.5
                usf_top_pyr_seg_desc,                                           --Change 1.5
                usf_top_pyr_seg_sort_ord,                                       --Change 1.5
                pyr_seg_sort_ord,                                                --Change 1.5
                cust_acqstn_stat_crnt,cust_acqstn_stat_actl
                )
          SELECT DISTINCT
                pyr_seg_cd,
                pyr_seg_desc,
                corp_mlt_unit_nbr,
                corp_mlt_unit_desc,
                trd_cls,
                trd_cls_desc,
                prnt_mlt_unit_cd,
                prnt_mlt_unit_desc,
                cust_cntrct_flg,                                                --Change 1.2
                cust_cntrct_stat_desc,                                          --Change 1.2
                cust_natl_mngd_flg,                                             --Change 1.2
                cust_mgt_typ_desc,                                              --Change 1.2
                cust_acctblty_flg,                                              --Change 1.4
                cust_acctblty_desc,                                             --Change 1.4
                usf_top_pyr_seg_cd,                                             --Change 1.5
                usf_top_pyr_seg_desc,                                           --Change 1.5
                usf_top_pyr_seg_sort_ord,                                       --Change 1.5
                pyr_seg_sort_ord,
                cust_acqstn_stat_crnt,cust_acqstn_stat_actl
         FROM
             xdmadm.SALES_SUMM_MRCH_AGGR_LOAD a ;

       COMMIT;


      DBMS_OUTPUT.put_line(
         'Inserted ' || sql%ROWCOUNT || ' rows in ' || TO_CHAR(ROUND((SYSDATE - l_fn_start) * 86400)) || ' seconds');

      COMMIT;

  --Analyze TABLE

   DBMS_OUTPUT.put_line('Analyze the Load aggregate table ' || l_load_tbl_nm);
   l_return_code    := xdmadm.fn_getstat_tbl(c_schema, l_load_tbl_nm);

   IF (l_return_code <> 0) THEN
      l_object_nm   := l_load_tbl_nm;
      RAISE e_analyze_table;
   END IF;

  /*  Count the number of rows inserted into cust_corp_pyr_aggr */

      SELECT count(1) INTO v_cust_corp_pyr_aggr_cnt FROM xdmadm.CUST_CORP_PYR_AGGR_LOAD;
  DBMS_OUTPUT.put_line('Number of records inserted into CUST_CORP_PYR_AGGR_LOAD is ' || v_cust_corp_pyr_aggr_cnt);

   COMMIT;

     --Change 1.3  The number of distinct cust attributes in sales pyrmaid should match the number of rows inserted into cust_corp_pyr_aggr
  --Change 1.3  Return 1 if counts do not match.
   If v_cust_corp_cnt = v_cust_corp_pyr_aggr_cnt
   THEN
   DBMS_OUTPUT.PUT_LINE('Distinct record count match the number of records inserted into cust_corp_pyr_aggr.');
   RETURN 0;
   ELSE
   DBMS_OUTPUT.PUT_LINE('Distinct record count does not match the number of records inserted into cust_corp_pyr_aggr.');
   RETURN 1;
   END IF;

  --Change 1.3  Return 1 if analyze table fails.
EXCEPTION
   WHEN e_syn THEN
      DBMS_OUTPUT.put_line(
         'Synonym currently points to Load table: ' || c_aggr_load_syn_nm || '. Requires manual update.');
      DBMS_OUTPUT.put_line('Verify the ' ||c_aggr_load_syn_nm|| ' and ' ||c_aggr_load_syn_nm|| ' synonyms');
      RETURN pkg_sls_pyr.c_error;
   WHEN e_truncate_table THEN
      DBMS_OUTPUT.put_line('Error Truncating Table: ' || l_load_tbl_nm || '. Requires manual update.');
      DBMS_OUTPUT.put_line('Verify '||l_load_tbl_nm||' table has any records');
      DBMS_OUTPUT.put_line(l_out_msg);
      RETURN pkg_sls_pyr.c_error;
   WHEN e_analyze_table THEN
      DBMS_OUTPUT.put_line('Error Analyzing Table: ' || l_load_tbl_nm || '. Requires manual update.');
      DBMS_OUTPUT.put_line(l_out_msg);
      RETURN pkg_sls_pyr.c_error;
   WHEN OTHERS THEN
      DBMS_OUTPUT.put_line('Error in XDMADM.fn_cust_corp_pyr_aggr_load:' || SQLCODE || ' ' || SQLERRM);
      RETURN 1;
END;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_CKBK_LNS_AGGR_LOAD" (p_odate        IN DATE,
                               p_prev_yrs     IN NUMBER)
   RETURN NUMBER AS
   /***********************************************************************
   * Name: FN_CKBK_LNS_AGGR_LOAD
   * Type: Function
   * Description: Load cookbook aggregate table.
   * Revisions:
   *  Ver        Date        Author           Description
   *  ---------  ----------  ---------------  -----------------------------
   *  1.0        09/22/2014  Matt Nicol       Created this function
   *  2.0        06/30/2015  Bob Young        CCP Adoption Reporting - Open up to all division
   *  2.1        07/20/2015  Bob Young        CCP Adoption Reporting - Remove Reason Code exclusions
   *  2.2        08/11/2015  Bob Young        CCP Adoption Reporting - Remove unit price range check
   *  3.0        10/19/2015  p1a0168          Modified for Acquisition
   ************************************************************************/
   c_success            CONSTANT NUMBER := 0;
   c_error              CONSTANT NUMBER := 1;
   c_schema             CONSTANT VARCHAR2(30) := 'XDMADM';
   c_aggr_tbl_syn_nm    CONSTANT VARCHAR2(30) := 'CKBK_LNS_AGGR';
   c_aggr_load_syn_nm   CONSTANT VARCHAR2(30) := 'CKBK_LNS_AGGR_LOAD';
   l_return_code        NUMBER;
   l_out_msg            VARCHAR2(256);
   l_start_dt           DATE;

   l_aggr_tbl_nm        VARCHAR2(30);
   l_load_tbl_nm        VARCHAR2(30);

   CURSOR c_get_wks(p_start_dt      DATE,
                    p_end_dt        DATE) IS
        SELECT fisc_yr_wk, MIN(clndr_dt) start_dt, MAX(clndr_dt) end_dt
          FROM xdmadm.time_corp
         WHERE clndr_dt BETWEEN p_start_dt AND p_end_dt
      GROUP BY fisc_yr_wk
      ORDER BY fisc_yr_wk;
BEGIN
   -- Validate input parameters
   IF (p_odate IS NULL) THEN
      DBMS_OUTPUT.put_line('Error: Invalid Parameters: Date is required');
      RETURN c_error;
   END IF;

   IF (p_prev_yrs IS NULL) THEN
      DBMS_OUTPUT.put_line('Error: Invalid Parameters: Previous years is required');
      RETURN c_error;
   END IF;

   -- Determine start date
   SELECT MIN(clndr_dt)
     INTO l_start_dt
     FROM xdmadm.time_corp
    WHERE fisc_yr >= (SELECT fisc_yr - p_prev_yrs
                        FROM xdmadm.time_corp t
                       WHERE clndr_dt = p_odate)
      AND clndr_dt >= TO_DATE('20140405', 'YYYYMMDD'); -- first day of cookbook data

   DBMS_OUTPUT.put_line('Start Date: ' || TO_CHAR(l_start_dt, 'DD-MON-YYYY'));
   DBMS_OUTPUT.put_line('End Date: ' || TO_CHAR(p_odate, 'DD-MON-YYYY'));

   -- Get current synonym tables
   EXECUTE IMMEDIATE 'SELECT table_name FROM user_synonyms WHERE synonym_name = ''' || c_aggr_tbl_syn_nm || ''''
      INTO l_aggr_tbl_nm;

   EXECUTE IMMEDIATE 'SELECT table_name FROM user_synonyms WHERE synonym_name = ''' || c_aggr_load_syn_nm || ''''
      INTO l_load_tbl_nm;

   DBMS_OUTPUT.put_line('Aggr Table: ' || l_aggr_tbl_nm);
   DBMS_OUTPUT.put_line('Load Table: ' || l_load_tbl_nm);

   -- Truncate load table
   l_return_code   := usfdba.table_pkg.truncate_table(l_out_msg, c_schema, l_load_tbl_nm);
   DBMS_OUTPUT.put_line('Truncate Load Table Return: ' || l_return_code || ' - ' || l_out_msg);

   IF (l_return_code <> 0) THEN
      DBMS_OUTPUT.put_line('Error: Failed to truncate table');
      RETURN c_error;
   END IF;

   FOR r_get_wks IN c_get_wks(l_start_dt, p_odate) LOOP
      INSERT /*+ append */
            INTO xdmadm.ckbk_lns_aggr_load
         (SELECT *
            FROM (/* 2.0 no need for inline view to restrict division WITH divs AS (SELECT param_value_nbr div_nbr
                                  FROM xdmadm.param_value
                                 WHERE app_name = 'COOKBOOK'
                                   AND param_type = 'ACTV_DIV')*/
                    SELECT prcs_dt,
                           div_nbr,
                           cust_nbr,
                           trans_typ,
                           SUM(total_line) ln_cnt,
                           SUM(lines_below_min) lt_min_ln_cnt,
                           SUM(line_min_to_target) min_to_trgt_ln_cnt,
                           SUM(line_tar_to_max) trgt_to_max_ln_cnt,
                           SUM(line_above_max) gt_max_ln_cnt,
                           SUM(lost_sales) lost_sales,
                           TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
                      FROM (  SELECT s.prcs_dt,
                                     s.div_nbr,
                                     s.cust_nbr,
                                     s.trans_typ,
                                     COUNT(1) total_line,
                                     SUM(CASE WHEN s.unit_prc < ROUND(s.ckbk_min_prc, 2) THEN 1 ELSE 0 END) lines_below_min,
                                     SUM(CASE
                                            WHEN s.unit_prc >= ROUND(s.ckbk_min_prc, 2)
                                             AND s.unit_prc < ROUND(s.ckbk_trgt_prc, 2) THEN
                                               1
                                            ELSE
                                               0
                                         END)
                                        line_min_to_target,
                                     SUM(CASE
                                            WHEN s.unit_prc >= ROUND(s.ckbk_trgt_prc, 2)
                                             AND s.unit_prc <= ROUND(s.ckbk_max_prc, 2) THEN
                                               1
                                            ELSE
                                               0
                                         END)
                                        line_tar_to_max,
                                     SUM(CASE WHEN s.unit_prc > ROUND(s.ckbk_max_prc, 2) THEN 1 ELSE 0 END) line_above_max,
                                     SUM(CASE
                                            WHEN s.unit_prc < ROUND(s.ckbk_min_prc, 2) THEN
                                               ((ROUND(s.ckbk_trgt_prc, 2) - s.unit_prc) * s.unfrm_qty_ship)
                                            ELSE
                                               0
                                         END)
                                        lost_sales
                                FROM xdmadm.sales_corp s,
                                     xdmadm.prod_corp p,
                                     xdmadm.pim_corp pim,
                                     xdmadm.cust_corp cc,
                                     xdmadm.div_corp srd
--                                     xdmadm.ckbk_rsn_excld rsn /* 2.1 remove reason code exclusion */
                                     /* 2.0 remove join to inline view of division restriction ,divs */
                               WHERE s.prod_nbr = p.prod_nbr
                                 AND s.div_nbr = p.div_nbr
                                 AND p.pim_usf_std_prod_cd = pim.pim_usf_std_prod_cd
                                 AND s.cust_nbr = cc.cust_nbr
                                 AND s.div_nbr = cc.div_nbr
                                -- AND s.sls_revenue_div_nbr = srd.div_nbr
                                 AND srd.div_typ_cd <> 'CC' --EXCLUDE CASH N CARRY
                                 AND s.prod_stat_ind_actl <> '1' --EXCLUDE SPECIAL ORDERS
                                 AND s.prcs_dt BETWEEN r_get_wks.start_dt AND r_get_wks.end_dt
                                 /* 2.0 remove join to division restriction AND s.div_nbr = divs.div_nbr */
                                 AND s.qty_ship >= 1
                                 AND pim.pim_suprcls_id NOT IN (97, 11) --EXCLUDE ADMIN AND EQUIPMENT
                                 AND s.prc_src <> 3 --EXCLUDE NULL AND 3
                               --  AND s.ckbk_min_prc > 0
                               --  AND s.ckbk_max_prc > 0
                                 AND s.ckbk_trgt_prc > 0
                                 AND s.xfer_to_dt IS NULL
                                 AND cc.trd_cls = '1'
                                 AND nvl (srd.acqstn_cmpny_nm,'USF') = 'USF'
                                 And nvl (s.sls_revenue_div_nbr, srd.div_nbr) = srd.div_nbr
                                 /* AND s.cust_nbr = rsn.cust_nbr(+)
                                  AND s.prod_nbr = rsn.prod_nbr(+)
                                  AND s.prcs_dt = rsn.prcs_dt(+)  2.0 remove reason code
                                  AND ((s.unit_prc BETWEEN ROUND(s.ckbk_min_prc, 2) AND ROUND(s.ckbk_max_prc, 2))
                                   OR (rsn.excld_flg IS NULL) 2.0 remove reason code
                                   )*/
                            GROUP BY s.prcs_dt,
                                     s.div_nbr,
                                     s.cust_nbr,
                                     s.trans_typ) result
                  GROUP BY prcs_dt,
                           div_nbr,
                           cust_nbr,
                           trans_typ));

      DBMS_OUTPUT.put_line('Inserted ' || sql%ROWCOUNT || ' rows for ' || r_get_wks.fisc_yr_wk);

      COMMIT;
   END LOOP;

   -- Analyze customer weekly aggregate table
   l_return_code   := xdmadm.fn_getstat_tbl(c_schema, l_load_tbl_nm);
   DBMS_OUTPUT.put_line('Analyze Return: ' || l_return_code);

   IF (l_return_code <> 0) THEN
      DBMS_OUTPUT.put_line('Error: Failed to analyze table');
      RETURN c_error;
   END IF;

   -- Swap synonyms
   l_return_code   := xdmadm.fn_crt_synonym(c_aggr_tbl_syn_nm, c_schema, l_load_tbl_nm);
   DBMS_OUTPUT.put_line(
      'Create synonym ' || c_aggr_tbl_syn_nm || ' for ' || c_schema || '.' || l_load_tbl_nm || ': ' || l_return_code);

   IF (l_return_code <> 0) THEN
      DBMS_OUTPUT.put_line('Error: Failed to create synonym for aggregate table');
      RETURN c_error;
   END IF;

   l_return_code   := xdmadm.fn_crt_synonym(c_aggr_load_syn_nm, c_schema, l_aggr_tbl_nm);
   DBMS_OUTPUT.put_line(
      'Create synonym ' || c_aggr_load_syn_nm || ' for ' || c_schema || '.' || l_aggr_tbl_nm || ': ' || l_return_code);

   IF (l_return_code <> 0) THEN
      DBMS_OUTPUT.put_line('Error: Failed to create synonym for aggregate table');
      RETURN c_error;
   END IF;

   -- Truncate new load table
   l_return_code   := usfdba.table_pkg.truncate_table(l_out_msg, c_schema, l_aggr_tbl_nm);
   DBMS_OUTPUT.put_line('Truncate Prev Aggr Table Return: ' || l_return_code || ' - ' || l_out_msg);

   IF (l_return_code <> 0) THEN
      DBMS_OUTPUT.put_line('Error: Failed to truncate table');
      RETURN c_error;
   END IF;

   -- Update fact load table
   UPDATE xdmadm.fact_load_stat
      SET div_load_ts   = p_odate
    WHERE fact_table = 'CKBK_LNS_AGGR'
      AND div_nbr = 0;

   IF (sql%ROWCOUNT = 0) THEN
      INSERT INTO xdmadm.fact_load_stat(fact_table, div_nbr, fact_table_dsply_nm, fact_typ_desc, div_load_ts)
          VALUES ('CKBK_LNS_AGGR',
                  0,
                  'COOKBOOK LINES AGG',
                  'COOKBOOK LINES AGG',
                  p_odate);

      DBMS_OUTPUT.put_line('Inserted row in FACT_LOAD_STAT');
   ELSE
      DBMS_OUTPUT.put_line('Updated row in FACT_LOAD_STAT');
   END IF;

   COMMIT;

   RETURN c_success;
EXCEPTION
   WHEN OTHERS THEN
      DBMS_OUTPUT.put_line('Unexepected error');
      DBMS_OUTPUT.put_line(SQLCODE || ': ' || SQLERRM);
      RETURN c_error;
END fn_ckbk_lns_aggr_load;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_AUGEO_CUST_EXTRCT" (p_partner_id IN VARCHAR2, p_odate IN   VARCHAR2 )
   RETURN NUMBER
IS
/*******************************************************************************
**               Name: FN_DDM_augeo_cust_Extrct                               **
**                                                                            **
**  Modified By:                    Date:                                     **
**                                                                            **
**  Madhu Veerapaneni               28-Jan-2016              ver 1.0          **
**                                                                            **
**                                                                            **
********************************************************************************
**                              Description                                   **
**                                                                            **
**  This function writes to a staging table AUGEO_CUST_EXTRCT                 **
**  used to hold  extracted cust data for AUGEO.                              **
**  The processing of data flows as follows:                                  **
**    - Delete from table (AUGEO_CUST_EXTRCT)                                 **
**    - Insert to table (AUGEO_CUST_EXTRCT)                                   **
**                                                                            **
**  At every step in the processing, messages are sent to Oracle              **
**  logs and common errors are identified/captured via EXCEPTION              **
**  processing and unique function return codes to easily identify            **
**  point of failure and last point of commitment.                            **
**                                                                            **
**  Input  : p_partner_id      augeo_cust                                     **
**  Output : success(0)                                                       **
**           failure (nonzero)                                                **
**                                                                            **
**  Return:  0    - no errors occurred during processing.                     **
**           <> 0 - failure during execution                                  **
**                                                                            **
**                                                                            **
**   Error Handling: Record level errors will be logged in the data-          **
**   base error log. For Oracle errors identified with "WHEN OTHER            **
**   THEN" clause ( to differentiate from insert/update failure               **
**   identified by SQL%NOTFOUND), error will be logged and the job            **
**   aborted with a non-0 (failure) return code. Analyze error will           **
**   not cause the job to abort with a non-0 return code.                     **
**                                                                            **
********************************************************************************
**  Version               Changes Description                                 **
**  =======               ===================                                 **
**    1.0                 Initial release of this function.                   **
**                                                                            **
**  =======               ===================                                 **
*******************************************************************************/

   /**********************************
   **     Variables declaration     **
   **********************************/
   c_quote                 VARCHAR2 (1)  := '"';
   c_comma               VARCHAR2 (1)    := ',';
   v_prd_tbl_name        VARCHAR2 (24)   := 'AUGEO_CUST_EXTRCT';
   v_fn_name             VARCHAR2 (25)   := 'FN_augeo_cust_Extrct';
   v_owner               VARCHAR2 (9)    := 'XDMADM';
   v_return_message      VARCHAR2 (2000) := NULL;
   wkstartdate           VARCHAR2 (14);
   wkenddate             VARCHAR2 (14);
   v_ret_val             number := 0;
   v_ret_cd              number:= 0 ;
   out_msg               VARCHAR2(500)   := null;

BEGIN

   dbms_output.put_line('START of function ' || v_owner || '.' || v_fn_name);
   dbms_output.put_line('...');


   /***************************************************************************
   **  Delete from table: DATA_EXTRACTS_augeo_cust.                          **
   ***************************************************************************/

   BEGIN
      DBMS_OUTPUT.PUT_LINE('...truncating  ' || UPPER(RTRIM(SUBSTR(p_partner_id, 1, 30))));
      DBMS_OUTPUT.PUT_LINE('...         table : ' || v_owner || '.' || v_prd_tbl_name);

    --truncate the backup table
    v_ret_cd := usfdba.table_pkg.truncate_table(out_msg, v_owner,  v_prd_tbl_name );
    IF v_ret_cd <> 0 THEN
      --stop the program if table does not exist or truncate permission not granted or any other error
      dbms_output.put_line('end of function ' || v_owner || '.' || v_fn_name);
      dbms_output.put_line('...Error '|| out_msg);
     return 2;
    END IF;

   END;

         DBMS_OUTPUT.PUT_LINE('...Inserting ' || UPPER(RTRIM(SUBSTR(p_partner_id, 1, 30))));
         DBMS_OUTPUT.PUT_LINE('...         into table : ' || v_owner || '.' || v_prd_tbl_name);
         DBMS_OUTPUT.PUT_LINE('...Input Parameters Used: PARTNER_ID = ' || UPPER(RTRIM(SUBSTR(p_partner_id, 1, 30))));


            INSERT /*+ PARALLEL APPEND */ INTO XDMADM.AUGEO_CUST_EXTRCT
             NOLOGGING  (KEY_augeo_cust, DATA_augeo_cust)
              WITH  user_emp
       AS (SELECT   user_id,
                    empl_id from STGADM.CRM_USR_EXTND_EXT)
           SELECT DISTINCT      UPPER(RTRIM( SUBSTR ('AUGEO_CUST', 1, 30))),
                     '"' ||
                     TRIM(NVL(TRANSLATE(c.cust_nbr,'*^|><@"~`&',' '),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(c.cust_nm,'*^|><@"~`&',' ')),'NAME blank IN db'))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(c.addr_ln_1,'*^|><@"~`&','        ')),'Address_1 blank IN db'))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(c.addr_ln_2,'*^|><@"~`&','        ')),'Address_2 blank IN db'))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(c.city,'*^|><@"~`&','     ')),'City blank IN db'))
                     ||'","' ||
                     TRIM(UPPER(NVL(TRANSLATE(c.st,'*^|><@"~`&','      '),'XX')))
                     ||'","' ||
                     TRIM(NVL(TRANSLATE(c.zip_cd,'*^|><@"~`&','         '),' '))
                     ||'","' ||
                     TRIM(NVL(TRANSLATE(c.phn_nbr,'*^|><@"~`&','         '),' '))
                     ||'","' ||
                     TRIM(NVL(TRANSLATE(c.acct_typ_desc,'*^|><@"~`&','         '),' '))
                     ||'","' ||
                     TRIM(NVL(TRANSLATE(c.Acct_typ_cd,'*^|><@"~`&','         '),' '))
                     ||'","' ||
                     TRIM(TRANSLATE(c.div_nbr,'*^|><@"~`&','         '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(c.dstrct_cd,'*^|><@"~`&','         ')),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(c.dstrct_nm,'*^|><@"~`&','         ')),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(c.dstrct_sls_mgr_nm,'*^|><@"~`&','         ')),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(c.dstrct_sls_mgr_id,'*^|><@"~`&','         ')),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(c.trtry_cd,'*^|><@"~`&','         ')),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(c.trtry_mgr_id,'*^|><@"~`&','         ')),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(c.trtry_mgr_nm,'*^|><@"~`&','         ')),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(c.cust_mjr_cd,'*^|><@"~`&','         ')),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(c.cust_mnr_cd,'*^|><@"~`&','         ')),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(b.prcs_sys,'*^|><@"~`&','         ')),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(b.brnch_cd,'*^|><@"~`&','         ')),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(DECODE(c.corp_mlt_unit_nbr,'000','   ','UNK','   ',c.corp_mlt_unit_nbr),'*^|><@"~`&','         ')),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(DECODE(c.corp_mlt_unit_desc,'Valid Code','   ','DEFAULT VALUE FOR Reference','   ',c.corp_mlt_unit_desc),'*^|><@"~`&','         ')),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(DECODE(c.prnt_mlt_unit_cd,'UNK','   ',c.prnt_mlt_unit_cd),'*^|><@"~`&','         ')),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(DECODE(c.prnt_mlt_unit_desc,'UNKNOWN','   ',c.prnt_mlt_unit_desc),'*^|><@"~`&','         ')),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(c.cust_bus_seg,'*^|><@"~`&','         ')),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(c.cmsn_pay_ind,'*^|><@"~`&','         ')),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(c.rgn_sls_mgr_id,'*^|><@"~`&','         ')),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(c.rgn_sls_mgr_nm,'*^|><@"~`&','         ')),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(rsm_id.empl_id,'*^|><@"~`&','         ')),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(dsm_id.empl_id,'*^|><@"~`&','         ')),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(tm_id.empl_id,'*^|><@"~`&','         ')),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(c.menu_typ_cd,'*^|><@"~`&','         ')),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(c.usf_top_pyr_seg_cd,'*^|><@"~`&','         ')),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(c.cust_cntrct_stat_desc,'*^|><@"~`&','         ')),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(c.cust_natl_mngd_flg,'*^|><@"~`&','         ')),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(c.mkt_seg_cd,'*^|><@"~`&','         ')),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(c.pyr_seg_cd,'*^|><@"~`&','         ')),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(c.mp_mkt_seg_cd,'*^|><@"~`&','         ')),' '))
                     ||'","' ||
                     TRIM(NVL(LTRIM(TRANSLATE(c.trtry_type,'*^|><@"~`&','         ')),' '))
                     ||'"'
              FROM XDMADM.div_corp b,
                   XDMADM.cust_corp c,
                   user_emp tm_id, user_emp dsm_id,user_emp rsm_id
              WHERE b.inact_dt IS NULL
              AND   c.div_nbr = b.div_nbr
              AND   c.trd_cls = '1'
              AND   c.inact_dt IS NULL
              AND   c.trtry_mgr_id = tm_id.user_id(+)
              AND   c.dstrct_sls_mgr_id = dsm_id.user_id(+)
              AND   c.rgn_sls_mgr_id = rsm_id.user_id(+)
              ;

         COMMIT;
         DBMS_OUTPUT.PUT_LINE('...End of  Insert ' || UPPER(RTRIM(SUBSTR(p_partner_id, 1, 30))));
         DBMS_OUTPUT.PUT_LINE('...Count  Insert ' || UPPER(RTRIM(SUBSTR(p_partner_id, 1, 30))));


            INSERT /*+ PARALLEL APPEND */ INTO  XDMADM.AUGEO_CUST_EXTRCT
             NOLOGGING (KEY_augeo_cust, DATA_augeo_cust)
              SELECT DISTINCT
                     UPPER(RTRIM( SUBSTR ('AUGEO_CUST', 1, 30))),
                     '"Customer Master",'
                     ||
                      COUNT(*)
              FROM XDMADM.AUGEO_CUST_EXTRCT
              WHERE key_augeo_cust = UPPER(RTRIM( SUBSTR ('AUGEO_CUST', 1, 30))) ;

         COMMIT;
         DBMS_OUTPUT.PUT_LINE('...End of Count Insert ' || UPPER(RTRIM(SUBSTR(p_partner_id, 1, 30))));

      DBMS_OUTPUT.PUT_LINE('...');
      DBMS_OUTPUT.PUT_LINE('END of function ' || v_owner || '.' || v_fn_name);
      RETURN 0;


EXCEPTION
   WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('...ERROR inserting into table ' || v_owner || '.' || v_prd_tbl_name);
      DBMS_OUTPUT.PUT_LINE('...SQLERRM: ' || SQLERRM);
      DBMS_OUTPUT.PUT_LINE('...SQLCODE: ' || SQLCODE);
      DBMS_OUTPUT.PUT_LINE('END of function ' || v_owner || '.' || v_fn_name);
      RETURN 2;
   WHEN OTHERS THEN
      ROLLBACK;
      DBMS_OUTPUT.PUT_LINE('...ERROR inserting into table ' || v_owner || '.' || v_prd_tbl_name);
      DBMS_OUTPUT.PUT_LINE('...SQLERRM: ' || SQLERRM);
      DBMS_OUTPUT.PUT_LINE('...SQLCODE: ' || SQLCODE);
      DBMS_OUTPUT.PUT_LINE('END of function ' || v_owner || '.' || v_fn_name);
      RETURN 3;
END fn_augeo_cust_extrct;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_SWITCH_SYNONYM"
(v_schema_name in varchar2, v_synonym_name in varchar2)
      RETURN NUMBER
   AS
   v_prcs_nm            varchar2(50) := 'xdmadm.fn_switch_synonym ';
   v_prcs_stp           varchar2(200);
   n_ret                number(1);
   v_table_name         varchar(100);

BEGIN

--******************************************************************************
--* Select Inactive table, which will be loaded
--******************************************************************************
<<SELECT_INCT_TABLE>>

   v_prcs_stp := 'Select table to which the synonym will be switched';
   SELECT tbl_nm INTO v_table_name
     FROM ctladm.syn_tbl_map
    WHERE actv_ind = 'N'
      AND synonym_nm = v_synonym_name;

   dbms_output.put_line('Table to which synonym will be switched:'||v_table_name);

--******************************************************************************
--* Switch the synonym
--******************************************************************************
   v_prcs_stp := 'Switch the synonym';
   n_ret := XDMADM.fn_crt_synonym(v_synonym_name, v_schema_name,v_table_name);
   v_prcs_stp := 'Synonym successfully switched';

--******************************************************************************
--* Updating Syn Switching Table
--******************************************************************************
   v_prcs_stp := 'Updating Synonym Switching Table';
   UPDATE ctladm.syn_tbl_map
    SET actv_ind = 'N',
    last_updt = sysdate
    WHERE actv_ind = 'Y'
    AND synonym_nm = v_synonym_name;

   UPDATE ctladm.syn_tbl_map
    SET actv_ind = 'Y',
    last_updt = sysdate
    WHERE tbl_nm = v_table_name
    AND synonym_nm = v_synonym_name;

    COMMIT;
    RETURN 0;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE(v_prcs_nm||' - '||v_prcs_stp);
        DBMS_OUTPUT.put_line ('ERROR: Synonym name does not exist or synonym invalid. Failed at the above step.');
        DBMS_OUTPUT.put_line ('ERROR:' || SQLCODE || ',' || SQLERRM);
      RETURN 3;
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(v_prcs_nm||' - '||v_prcs_stp);
        DBMS_OUTPUT.put_line ('ERROR:' || SQLCODE || ',' || SQLERRM);
        ROLLBACK;
        RETURN 2;
END;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_RNK_USR_DIV_ALL_VPD" (p_schema       IN VARCHAR2,
                                                         p_objname      IN VARCHAR2)
   RETURN VARCHAR2 AS
   /***********************************************************************
   * Name: FN_USR_DIV_ALL_VPD
   * Type: Function
   * Description: VPD Function to limit divisions based only on the user role
   *              for Sales Ranking data.
   *  REVISIONS:
   *  Ver        Date        Author           Description
   *  ---------  ----------  ---------------  ------------------------------------
   *  1.0        06/26/2013  Matt Nicol       Created this function
   ************************************************************************/
   c_start                CONSTANT NUMBER := DBMS_UTILITY.get_time;
   c_fn_nm                CONSTANT VARCHAR2(30) := 'FN_RNK_USR_DIV_ALL_VPD';
   l_security_predicate   VARCHAR2(4000) DEFAULT NULL;
   l_cur_sql              VARCHAR2(4000) := SYS_CONTEXT('USERENV', 'CURRENT_SQL');
   l_sbjct_area           VARCHAR2(100) := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_sbjct_area_attr);
   l_vpd_exempt           VARCHAR2(1) := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_exempt_attr);
   l_all_divs             VARCHAR2(1) := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_alldivs_attr);

   l_div_count            NUMBER := 0;
   l_first                BOOLEAN := TRUE;

   CURSOR divs_c(p_user          VARCHAR2,
                 p_sbjct_area    VARCHAR2) IS
      SELECT DISTINCT CASE WHEN dc.grp_typ_cd = 'SALES' THEN 'G_' || dc.grp_cd ELSE 'D_' || dc.brnch_cd END div_nbr
        FROM ctladm.vw_usr_to_div ud, xdmadm.div_corp dc
       WHERE ud.div_nbr = dc.div_nbr
         AND UPPER(usr_nm) = p_user
         AND sbjct_area IN (p_sbjct_area, 'ALL');

   divs_rec               divs_c%ROWTYPE;
BEGIN
   --If no subject area context is set then return predicate filtering all data
   IF l_sbjct_area IS NULL THEN
      l_security_predicate   := '1=2';
      ctladm.pkg_vpd_debug_util.vpd_debug('NO SA',
                                          c_fn_nm,
                                          USER,
                                          p_schema,
                                          p_objname,
                                          l_sbjct_area,
                                          l_vpd_exempt,
                                          l_all_divs,
                                          l_cur_sql,
                                          l_security_predicate,
                                          (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   -- Check if user is exempt based on current subject area context
   -- If so, return predicate without any filter
   IF l_vpd_exempt = 'Y' THEN
      l_security_predicate   := '1=1';
      ctladm.pkg_vpd_debug_util.vpd_debug('EXEMPT',
                                          c_fn_nm,
                                          USER,
                                          p_schema,
                                          p_objname,
                                          l_sbjct_area,
                                          l_vpd_exempt,
                                          l_all_divs,
                                          l_cur_sql,
                                          l_security_predicate,
                                          (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   -- Check if user has all division access based on current subject area context
   -- If so, return predicate without any filter
   IF l_all_divs = 'Y' THEN
      l_security_predicate   := '1=1';
      ctladm.pkg_vpd_debug_util.vpd_debug('ALL DIVS',
                                          c_fn_nm,
                                          USER,
                                          p_schema,
                                          p_objname,
                                          l_sbjct_area,
                                          l_vpd_exempt,
                                          l_all_divs,
                                          l_cur_sql,
                                          l_security_predicate,
                                          (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   SELECT COUNT( * )
     INTO l_div_count
     FROM ctladm.vw_usr_to_div ud, xdmadm.div_corp dc
    WHERE ud.div_nbr = dc.div_nbr
      AND ud.usr_nm = USER
      AND ud.sbjct_area IN (l_sbjct_area, 'ALL')
      AND ud.div_nbr IS NOT NULL;

   IF l_div_count > 0 THEN
      l_first                := TRUE;

      OPEN divs_c(USER, l_sbjct_area);

      LOOP
         FETCH divs_c INTO divs_rec;

         EXIT WHEN divs_c%NOTFOUND;

         IF l_first THEN
            l_security_predicate   := 'GRP_CD_OR_BRNCH_CD IN (''' || divs_rec.div_nbr || '''';
            l_first                := FALSE;
         ELSE
            l_security_predicate   := l_security_predicate || ',''' || divs_rec.div_nbr || '''';
         END IF;
      END LOOP;

      CLOSE divs_c;

      l_security_predicate   := l_security_predicate || ') OR ORG_LVL = ''RGN''';
   ELSE
      --User has access to no divisions
      l_security_predicate   := '1=2';
   END IF;

   ctladm.pkg_vpd_debug_util.vpd_debug('USR DIVS',
                                       c_fn_nm,
                                       USER,
                                       p_schema,
                                       p_objname,
                                       l_sbjct_area,
                                       l_vpd_exempt,
                                       l_all_divs,
                                       l_cur_sql,
                                       l_security_predicate,
                                       (DBMS_UTILITY.get_time - c_start) / 100);

   RETURN l_security_predicate;
EXCEPTION
   WHEN OTHERS THEN
      l_security_predicate   := '1=2';
      ctladm.pkg_vpd_debug_util.vpd_debug(SQLCODE || '-' || SQLERRM,
                                          c_fn_nm,
                                          USER,
                                          p_schema,
                                          p_objname,
                                          l_sbjct_area,
                                          l_vpd_exempt,
                                          NULL,
                                          l_cur_sql,
                                          l_security_predicate,
                                          (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
END fn_rnk_usr_div_all_vpd;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_CASES_AND_DOLLARS_TEMP_WK" (p_in_odate IN VARCHAR2)
   RETURN NUMBER IS
   /******************************************************************************
     NAME: XDMADM.FN_CASES_AND_DOLLARS_TEMP_WK
     TYPE: Function
     USAGE:XDMADM.FN_CASES_AND_DOLLARS_TEMP_WK (P_IN_ODATE )

     PURPOSE:  Function Inserts the  into CASES_AND_DOLLARS_TEMP_WK

     REVISIONS:
     Ver        Date                    Description
     ---------  --------------------------------------------------

     1.         07/14/2014              Initial Development

    ******************************************************************************/

   /***************************
   * Variables declaration    *
   ****************************/



   v_const          NUMBER := 2;
   v_end_dt         DATE;
   v_strt_dt        DATE;
   v_odate          DATE := TO_DATE(p_in_odate, 'YYYYMMDD');
   v_prcs_stp       VARCHAR2(2000);
   v_ldr_tm         NUMBER(20);
   v_out_msg        VARCHAR2(256);

   v_dba_func_msg   VARCHAR2(2000) := 'oXo';
   dml_err_cnt      NUMBER;
   v_brnch_cd       VARCHAR2(5) := NULL;
   v_div_nbr        NUMBER(5) := NULL;

   l_start          NUMBER;
   l_end            NUMBER;
   v_table_owner    VARCHAR2(40) := 'XDMADM'; /*-- hardcoded value*/
   v_table_name1    VARCHAR2(40) := 'CASES_AND_DOLLARS_TEMP_WK';
   v_table_name2    VARCHAR2(40) := 'DOLLARS_BY_PYR_SEG_WK'; /*-- hardcoded value*/
   v_table_name3    VARCHAR2(40) := 'CASES_AND_RVNUE_BY_GL_ACCT_WK'; /*-- hardcoded value*/
   v_truncate_tbl   NUMBER(3);

   CURSOR c_get_dts(p_strt_dt       DATE,
                    p_end_dt        DATE) IS
      SELECT fisc_mth_start_dt, fisc_mth_end_dt
        FROM xdmadm.prd_time_corp
       WHERE fisc_mth_start_dt BETWEEN p_strt_dt AND p_end_dt;
BEGIN
   ----Truncating Table 1.....
   BEGIN
      v_prcs_stp       := 'Truncating Table XDMADM.CASES_AND_DOLLARS_TEMP_WK..... ';

      DBMS_OUTPUT.put_line('Truncating/Deleting records from CASES_AND_DOLLARS_TEMP_WK');
      v_truncate_tbl   := usfdba.table_pkg.truncate_table(v_out_msg, v_table_owner, v_table_name1);
      DBMS_OUTPUT.put_line(v_out_msg);

      IF v_truncate_tbl != 0 THEN
         DBMS_OUTPUT.put_line('Error in Truncating the ' || v_table_name1 || ' table');
         RETURN 500;
      END IF;

      DBMS_OUTPUT.put_line('XDMADM.CASES_AND_DOLLARS_TEMP_WK table truncated successfully');
   END;

   ----Truncating Table 2.....
   BEGIN
      v_prcs_stp       := 'Truncating Table XDMADM.DOLLARS_BY_PYR_SEG_WK..... ';

      DBMS_OUTPUT.put_line('Truncating/Deleting records from DOLLARS_BY_PYR_SEG_WK');
      v_truncate_tbl   := usfdba.table_pkg.truncate_table(v_out_msg, v_table_owner, v_table_name2);
      DBMS_OUTPUT.put_line(v_out_msg);

      IF v_truncate_tbl != 0 THEN
         DBMS_OUTPUT.put_line('Error in Truncating the ' || v_table_name2 || ' table');
         RETURN 500;
      END IF;

      DBMS_OUTPUT.put_line('XDMADM.DOLLARS_BY_PYR_SEG_WK table truncated successfully');
   END;

   ----Truncating Table 3.....

   BEGIN
      v_prcs_stp       := 'Truncating Table XDMADM.CASES_AND_RVNUE_BY_GL_ACCT_WK..... ';

      DBMS_OUTPUT.put_line('Truncating/Deleting records from CASES_AND_RVNUE_BY_GL_ACCT_WK');
      v_truncate_tbl   := usfdba.table_pkg.truncate_table(v_out_msg, v_table_owner, v_table_name3);
      DBMS_OUTPUT.put_line(v_out_msg);

      IF v_truncate_tbl != 0 THEN
         DBMS_OUTPUT.put_line('Error in Truncating the ' || v_table_name3 || ' table');
         RETURN 500;
      END IF;

      DBMS_OUTPUT.put_line('XDMADM.CASES_AND_RVNUE_BY_GL_ACCT_WK table truncated successfully');
   END;

   BEGIN
      v_prcs_stp   := 'GET THE VARIABLES ASSIGNED ';

      -- Retreive  Start and End Date


     /* SELECT MIN(clndr_dt)
        INTO v_strt_dt
        FROM xdmadm.time_corp
       WHERE fisc_yr IN (SELECT fisc_yr - v_const
                           FROM xdmadm.time_corp
                          WHERE clndr_dt = (SELECT clndr_dt_wkago
                                              FROM xdmadm.time_corp
                                             WHERE clndr_dt = v_odate));
    */

    SELECT MIN(clndr_dt)
        INTO v_strt_dt
        FROM xdmadm.time_corp
       WHERE fisc_yr IN (SELECT fisc_yr - (Select param_value_nbr FROM xdmadm.param_value
 WHERE app_name = 'HYP_PLANNING' and PARAM_TYPE = 'DATE_RANGE' and param_code = 'NOOFYRS'  )
                           FROM xdmadm.time_corp
                          WHERE clndr_dt = (SELECT clndr_dt_wkago
                                              FROM xdmadm.time_corp
                                             WHERE clndr_dt = v_odate));
      --- to get the end date . date of last closed fiscal week of the year

      SELECT MAX(clndr_dt)
        INTO v_end_dt
        FROM xdmadm.time_corp
       WHERE fisc_yr_wk = (SELECT fisc_yr_wk
                             FROM xdmadm.time_corp
                            WHERE clndr_dt = (SELECT clndr_dt_wkago
                                                FROM xdmadm.time_corp
                                               WHERE clndr_dt = v_odate));

      DBMS_OUTPUT.put_line('Start Date is:' || v_strt_dt);
      DBMS_OUTPUT.put_line('End Date is:' || v_end_dt);
      DBMS_OUTPUT.put_line('Run Date is:' || v_odate);

      -- Get LDR_TM

      SELECT TO_NUMBER(TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')) INTO v_ldr_tm FROM DUAL;

      DBMS_OUTPUT.put_line('LDR_TM is :' || v_ldr_tm);
   EXCEPTION
      WHEN OTHERS THEN
         DBMS_OUTPUT.put_line('Error in v_prcs_stp : ' || v_prcs_stp);

         RETURN 900;
   END;

   --******************************************************************************
   --* INSERT INTO XDMADM.CASES_AND_DOLLARS_TEMP                                *
   --******************************************************************************
   BEGIN
      v_prcs_stp   := 'INSERT INTO table starts ';
      l_start      := DBMS_UTILITY.get_time;

      DBMS_OUTPUT.put_line('TIME ' || TO_CHAR(SYSDATE, 'yyyymmdd hh24:mi:ss'));

      FOR r_get_dts IN c_get_dts(v_strt_dt, v_end_dt) LOOP
         INSERT /*+ append */
               INTO xdmadm.cases_and_dollars_temp_wk(sls_div_nbr, div_nbr, div_typ_cd, fisc_yr, fisc_mth_of_yr, fisc_wk_of_prd,
                                                     pyr_seg_cd, gl_acct_cd, cust_acctblty_flg, cust_natl_mngd_flg, delivered_type, unfrm_qty_ship,
                                                     grs_sls_extnd, dwa_cost_extnd, natl_one_tm, natl_prom_alwnc_pgms, loc_mrktng_alwnc_pgms, loc_one_tm,
                                                     loc_prom_alwnc_pgms, natl_mrktng_alwnc_pgms, rbt_loc_accrl_amt, rbt_natl_accrl_amt, rbt_loc_exp_amt, rbt_natl_exp_amt,
                                                     loc_int_dvt, loc_vndr_fnd_dvt, natl_int_dvt, natl_vndr_fnd_dvt, ttl_ac, ldr_tm)
            SELECT *
              FROM (  SELECT CASE WHEN d.div_typ_cd = 'CC' THEN NVL(s.sls_revenue_div_nbr, s.div_nbr) ELSE s.div_nbr END
                                sls_div_nbr,
                             s.div_nbr,
                             d.div_typ_cd,
                             t.fisc_yr,
                             t.fisc_mth_of_yr,
                             t.fisc_wk_of_prd,
                             c.pyr_seg_cd,
                             CASE
                                WHEN (s.ar_gl_acct IN (SELECT DISTINCT param_value_chr
                                                         FROM xdmadm.param_value
                                                        WHERE app_name = 'HYP_PLANNING'
                                                          AND param_type LIKE '%AR_GL_ACCT_CD')) THEN
                                   CASE WHEN s.before_price_ac_ind <> 'Y' THEN s.ar_gl_acct ELSE NULL END
                                ELSE
                                   0
                             END
                                gl_acct_cd,
                             c.cust_acctblty_flg,
                             c.cust_natl_mngd_flg,
                             CASE WHEN NVL(s.sls_revenue_div_nbr, s.div_nbr) = s.div_nbr THEN 'Y' ELSE 'N' END
                                delivered_type,
                             SUM(unfrm_qty_ship) unfrm_qty_ship,
                             SUM(NVL(grs_sls_extnd, 0)) grs_sls_extnd,
                             SUM(NVL(dwa_cost_extnd, 0)) dwa_cost_extnd,
                             SUM(NVL(natl_one_tm, 0)) natl_one_tm,
                             SUM(NVL(natl_prom_alwnc_pgms, 0)) natl_prom_alwnc_pgms,
                             SUM(NVL(loc_mrktng_alwnc_pgms, 0)) loc_mrktng_alwnc_pgms,
                             SUM(NVL(loc_one_tm, 0)) loc_one_tm,
                             SUM(NVL(loc_prom_alwnc_pgms, 0)) loc_prom_alwnc_pgms,
                             SUM(NVL(natl_mrktng_alwnc_pgms, 0)) natl_mrktng_alwnc_pgms,
                             SUM(NVL(rbt_loc_accrl_amt, 0)) rbt_loc_accrl_amt,
                             SUM(NVL(rbt_natl_accrl_amt, 0)) rbt_natl_accrl_amt,
                             SUM(NVL(rbt_loc_exp_amt, 0)) rbt_loc_exp_amt,
                             SUM(NVL(rbt_natl_exp_amt, 0)) rbt_natl_exp_amt,
                             SUM(CASE WHEN s.trans_typ = 'AP' THEN loc_int_dvt ELSE 0 END) loc_int_dvt,
                             SUM(CASE WHEN s.trans_typ = 'AP' THEN loc_vndr_fnd_dvt ELSE 0 END) loc_vndr_fnd_dvt,
                             SUM(CASE WHEN s.trans_typ = 'AP' THEN natl_int_dvt ELSE 0 END) natl_int_dvt,
                             SUM(CASE WHEN s.trans_typ = 'AP' THEN natl_vndr_fnd_dvt ELSE 0 END) natl_vndr_fnd_dvt,
                             SUM(CASE
                                    WHEN s.ar_gl_acct IN (SELECT DISTINCT param_value_chr
                                                            FROM xdmadm.param_value
                                                           WHERE app_name = 'HYP_PLANNING'
                                                             AND param_type LIKE '%AR_GL_ACCT_CD') THEN
                                       CASE
                                          WHEN s.before_price_ac_ind <> 'Y' THEN
                                             (  (NVL(s.prod_alw, 0))
                                              + (NVL(s.prod_chrg, 0))
                                              + (NVL(s.non_prod_alwnc, 0))
                                              + (NVL(s.non_prod_chrg, 0)))
                                          ELSE
                                             0
                                       END
                                    ELSE
                                       0
                                 END)
                                ttl_ac,
                             v_ldr_tm
                        FROM xdmadm.sales_corp s,
                             xdmadm.cust_corp c,
                             xdmadm.div_corp d,
                             xdmadm.time_corp t,
                             xdmadm.pim_corp p
                       WHERE s.prcs_dt BETWEEN r_get_dts.fisc_mth_start_dt AND r_get_dts.fisc_mth_end_dt
                         AND s.prcs_dt = t.clndr_dt
                         AND s.cust_nbr = c.cust_nbr
                         AND c.div_nbr = d.div_nbr
                         AND s.pim_usf_std_prod_cd = p.pim_usf_std_prod_cd
                         AND CASE
                                WHEN (NVL(s.sls_revenue_div_nbr, s.div_nbr) = 0) THEN s.div_nbr
                                ELSE NVL(s.sls_revenue_div_nbr, s.div_nbr)
                             END = d.div_nbr
                         AND d.conv_to_div_nbr IS NULL
                         AND s.xfer_to_dt IS NULL
                         AND c.trd_cls <> '2'
                         AND p.pim_suprcls_id <> 97
                    GROUP BY CASE
                                WHEN d.div_typ_cd = 'CC' THEN NVL(s.sls_revenue_div_nbr, s.div_nbr)
                                ELSE s.div_nbr
                             END,
                             s.div_nbr,
                             d.div_typ_cd,
                             t.fisc_yr,
                             t.fisc_mth_of_yr,
                             t.fisc_wk_of_prd,
                             c.pyr_seg_cd,
                             CASE
                                WHEN (s.ar_gl_acct IN (SELECT DISTINCT param_value_chr
                                                         FROM xdmadm.param_value
                                                        WHERE app_name = 'HYP_PLANNING'
                                                          AND param_type LIKE '%AR_GL_ACCT_CD')) THEN
                                   CASE WHEN s.before_price_ac_ind <> 'Y' THEN s.ar_gl_acct ELSE NULL END
                                ELSE
                                   0
                             END,
                             c.cust_acctblty_flg,
                             c.cust_natl_mngd_flg,
                             CASE WHEN NVL(s.sls_revenue_div_nbr, s.div_nbr) = s.div_nbr THEN 'Y' ELSE 'N' END);

         DBMS_OUTPUT.put_line('NO OF ROWS INSERTED:' || sql%ROWCOUNT);

         COMMIT;
      END LOOP;

      l_end        := DBMS_UTILITY.get_time;

      DBMS_OUTPUT.put_line(ROUND((l_end - l_start) / 100, 2) || ' seconds...');

      RETURN 0;
   EXCEPTION
      WHEN OTHERS THEN
         DBMS_OUTPUT.put_line('Error in v_prcs_stp:' || v_prcs_stp || SQLCODE || SQLERRM);

         RETURN 701;
   END;
--******************************************************************************
--* Exception Handling                                                         *
--******************************************************************************

EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      DBMS_OUTPUT.put_line(SQLCODE);
      DBMS_OUTPUT.put_line(SQLERRM);

      DBMS_OUTPUT.put_line('Error in function FN_CASES_AND_DOLLARS_TEMP_WK');
      RETURN 600;
END fn_cases_and_dollars_temp_wk;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_GET_PAST_FUT_WKS" (p_fisc_yr_wk   IN VARCHAR2,
                                               p_num_wk       IN NUMBER)
   RETURN VARCHAR2
   DETERMINISTIC IS
   l_fisc_yr_wk   VARCHAR2(6 BYTE);
BEGIN
   SELECT fisc_yr_wk
     INTO l_fisc_yr_wk
     FROM xdmadm.time_corp t
    WHERE clndr_dt = (SELECT MIN(clndr_dt) + (7 * p_num_wk)
                        FROM xdmadm.time_corp
                       WHERE fisc_yr_wk = p_fisc_yr_wk);

   RETURN l_fisc_yr_wk;
END fn_get_past_fut_wks;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_ALL_DIV_ACTIVE_VPD" (p_schema       IN VARCHAR2,
                                                    p_objname      IN VARCHAR2)
   RETURN VARCHAR2 AS
   /***********************************************************************
   * Name: FN_ALL_DIV_ACTIVE_VPD
   * Type: Function
   * Description: VPD Function to exclude inactive divisions.
   *  REVISIONS:
   *  Ver        Date        Author           Description
   *  ---------  ----------  ---------------  ------------------------------------
   *  1.0        11/21/2011  Matt Nicol       Created this function
   ************************************************************************/
   c_start                CONSTANT NUMBER := DBMS_UTILITY.get_time;
   c_fn_nm                CONSTANT VARCHAR2(30) := 'FN_DIV_ALL_ACTIVE_VPD';
   l_security_predicate   VARCHAR2(4000) DEFAULT NULL;
   l_cur_sql              VARCHAR2(4000) := SYS_CONTEXT('USERENV', 'CURRENT_SQL');
   l_sbjct_area VARCHAR2(100)
         := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_sbjct_area_attr);
   l_vpd_exempt VARCHAR2(1)
         := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_exempt_attr);
   l_all_divs VARCHAR2(1)
         := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_alldivs_attr);

   l_div_count            NUMBER := 0;
   l_first                BOOLEAN := TRUE;

   CURSOR all_divs_c IS
      SELECT /*+ NOPARALLEL */
            dc.div_nbr
        FROM xdmadm.div_corp dc
       WHERE dc.conv_to_div_nbr IS NULL
          OR dc.conv_on_date > SYSDATE;

   all_divs_rec           all_divs_c%ROWTYPE;
BEGIN
   --If no subject area context is set then return predicate filtering all data

   IF l_sbjct_area IS NULL THEN
      l_security_predicate   := '1=2';
      ctladm.pkg_vpd_debug_util.vpd_debug('NO SA', c_fn_nm, USER, p_schema, p_objname, l_sbjct_area, l_vpd_exempt,
      l_all_divs, l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   -- Check if user is exempt based on current subject area context
   -- If so, return predicate without any filter

   IF l_vpd_exempt = 'Y' THEN
      l_security_predicate   := '1=1';
      ctladm.pkg_vpd_debug_util.vpd_debug('EXEMPT', c_fn_nm, USER, p_schema, p_objname, l_sbjct_area, l_vpd_exempt,
      l_all_divs, l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   -- Check if user has all division access based on current subject area context
   -- If so, return predicate that excludes inactive divisions

   SELECT COUNT( * )
     INTO l_div_count
     FROM xdmadm.div_corp dc
    WHERE dc.conv_to_div_nbr IS NULL
       OR dc.conv_on_date > SYSDATE;

   IF l_div_count > 0 THEN
      l_first                := TRUE;

      OPEN all_divs_c;

      LOOP
         FETCH all_divs_c INTO all_divs_rec;

         EXIT WHEN all_divs_c%NOTFOUND;

         IF l_first THEN
            l_security_predicate   := 'DIV_NBR IN (' || all_divs_rec.div_nbr;
            l_first                := FALSE;
         ELSE
            l_security_predicate   := l_security_predicate || ',' || all_divs_rec.div_nbr;
         END IF;
      END LOOP;

      CLOSE all_divs_c;

      l_security_predicate   := l_security_predicate || ')';
   ELSE
      l_security_predicate   := '1=2';
   END IF;

   ctladm.pkg_vpd_debug_util.vpd_debug('ALL DIVS', c_fn_nm, USER, p_schema, p_objname, l_sbjct_area, l_vpd_exempt,
   l_all_divs, l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

   RETURN l_security_predicate;
EXCEPTION
   WHEN OTHERS THEN
      l_security_predicate   := '1=2';
      ctladm.pkg_vpd_debug_util.vpd_debug(SQLCODE || '-' || SQLERRM, c_fn_nm, USER, p_schema, p_objname, l_sbjct_area,
      l_vpd_exempt, NULL, l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
END fn_all_div_active_vpd;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_TMS_VLDTN" (p_odate IN DATE)
   RETURN NUMBER AS
   /***********************************************************************
   * Name: FN_TMS_VLDTN
   * Type: Function
   * Description: Validate PO data between PO_CORP and SHPM_CORP
   * Revisions:
   *  Ver        Date        Author           Description
   *  ---------  ----------  ---------------  -----------------------------
   *  1.0        10/21/2015  Matt Nicol       Created this function
   ************************************************************************/
   c_success                 CONSTANT NUMBER := 0;
   c_error                   CONSTANT NUMBER := 1;

   l_fisc_yr_wk              VARCHAR2(6);

   l_tms_po_cnt_pct          NUMBER;
   l_tms_rcvd_pct            NUMBER;
   l_tms_rcvd_qty_pct        NUMBER;
   l_tms_rcvd_vol_pct        NUMBER;
   l_tms_rcvd_wght_pct       NUMBER;

   l_tms_po_cnt_pct_lmt      NUMBER;
   l_tms_rcvd_pct_lmt        NUMBER;
   l_tms_rcvd_qty_pct_lmt    NUMBER;
   l_tms_rcvd_vol_pct_lmt    NUMBER;
   l_tms_rcvd_wght_pct_lmt   NUMBER;

   l_fail_cnt                NUMBER := 0;
BEGIN
   -- Validate input parameters
   IF (p_odate IS NULL) THEN
      DBMS_OUTPUT.put_line('Error: Invalid Parameters: Date is required');
      RETURN c_error;
   END IF;

   SELECT fisc_yr_wk
     INTO l_fisc_yr_wk
     FROM xdmadm.time_corp
    WHERE clndr_dt = p_odate;

   DBMS_OUTPUT.put_line('Fiscal Week:' || l_fisc_yr_wk);

   BEGIN
      SELECT param_value_nbr
        INTO l_tms_po_cnt_pct_lmt
        FROM xdmadm.param_value
       WHERE app_name = 'MANHATTAN'
         AND param_type = 'TMS_VLDTN'
         AND param_code = 'PO_CNT_PCT_LMT';

      SELECT param_value_nbr
        INTO l_tms_rcvd_pct_lmt
        FROM xdmadm.param_value
       WHERE app_name = 'MANHATTAN'
         AND param_type = 'TMS_VLDTN'
         AND param_code = 'RCVD_PCT_LMT';

      SELECT param_value_nbr
        INTO l_tms_rcvd_qty_pct_lmt
        FROM xdmadm.param_value
       WHERE app_name = 'MANHATTAN'
         AND param_type = 'TMS_VLDTN'
         AND param_code = 'RCVD_QTY_PCT_LMT';

      SELECT param_value_nbr
        INTO l_tms_rcvd_vol_pct_lmt
        FROM xdmadm.param_value
       WHERE app_name = 'MANHATTAN'
         AND param_type = 'TMS_VLDTN'
         AND param_code = 'RCVD_VOL_PCT_LMT';

      SELECT param_value_nbr
        INTO l_tms_rcvd_wght_pct_lmt
        FROM xdmadm.param_value
       WHERE app_name = 'MANHATTAN'
         AND param_type = 'TMS_VLDTN'
         AND param_code = 'RCVD_WGHT_PCT_LMT';
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
         DBMS_OUTPUT.put_line('Error getting limits from param table');
         RETURN c_error;
   END;

   BEGIN
        SELECT ROUND(((SUM(CASE WHEN src_po_id IS NOT NULL THEN 1 ELSE 0 END) / COUNT( * )) * 100), 2) tms_po_cnt_pct,
               CASE
                  WHEN SUM(CASE WHEN src_po_id IS NOT NULL THEN 1 ELSE 0 END) = 0 THEN
                     0
                  ELSE
                     ROUND((  SUM(CASE
                                     WHEN src_po_id IS NOT NULL
                                      AND tms_rcvd_dt IS NOT NULL THEN
                                        1
                                     ELSE
                                        0
                                  END)
                            / SUM(CASE WHEN src_po_id IS NOT NULL THEN 1 ELSE 0 END)
                            * 100),
                           2)
               END
                  tms_rcvd_pct,
               CASE
                  WHEN SUM(CASE WHEN src_po_id IS NOT NULL THEN eiw_rcvd_qty ELSE 0 END) = 0 THEN 0
                  ELSE ROUND(((SUM(tms_rcvd_qty) / SUM(CASE WHEN src_po_id IS NOT NULL THEN eiw_rcvd_qty ELSE 0 END)) * 100), 2)
               END
                  tms_rcvd_qty_pct,
               CASE
                  WHEN SUM(CASE WHEN src_po_id IS NOT NULL THEN eiw_rcvd_vol ELSE 0 END) = 0 THEN 0
                  ELSE ROUND(((SUM(tms_rcvd_vol) / SUM(CASE WHEN src_po_id IS NOT NULL THEN eiw_rcvd_vol ELSE 0 END)) * 100), 2)
               END
                  tms_rcvd_vol_pct,
               CASE
                  WHEN SUM(CASE WHEN src_po_id IS NOT NULL THEN eiw_rcvd_wght ELSE 0 END) = 0 THEN 0
                  ELSE ROUND(((SUM(tms_rcvd_wght) / SUM(CASE WHEN src_po_id IS NOT NULL THEN eiw_rcvd_wght ELSE 0 END)) * 100), 2)
               END
                  tms_rcvd_wght_pct
          INTO l_tms_po_cnt_pct, l_tms_rcvd_pct, l_tms_rcvd_qty_pct, l_tms_rcvd_vol_pct, l_tms_rcvd_wght_pct
          FROM (WITH eiw_pos AS
                       (  SELECT tc.fisc_yr_wk,
                                 po.po_nbr,
                                 div.brnch_cd,
                                 div.div_nbr,
                                 po.po_rcvd_dt,
                                 po.ord_dt,
                                 SUM(po.rcvd_qty) rcvd_qty,
                                 SUM(po.prod_cube_rcvd_extnd) rcvd_vol,
                                 SUM(po.prod_grs_wght_rcvd_extnd) rcvd_wght
                            FROM xdmadm.po_corp po, xdmadm.div_corp div, xdmadm.time_corp tc
                           WHERE po.div_nbr = div.div_nbr
                             AND po.po_rcvd_dt = tc.clndr_dt
                             AND tc.fisc_yr_wk = l_fisc_yr_wk
                             AND po.trans_typ = 'PR'
                             AND frght_ppaid_ind_actl || frght_ppay_add_ind_actl || frght_bill_ind_actl || frght_bckhl_ind_actl || ctms_ind_actl IN
                                       ('NYYNY', 'YNYNY', 'YNNYN', 'NNYNY', 'NNYYN')
                        GROUP BY tc.fisc_yr_wk,
                                 po.po_nbr,
                                 div.brnch_cd,
                                 div.div_nbr,
                                 po.po_rcvd_dt,
                                 po.ord_dt),
                    tms_pos AS (SELECT DISTINCT tms_src,
                                                src_po_id,
                                                po_nbr,
                                                po_brnch_cd,
                                                po_div_nbr,
                                                po_rcvd_dt,
                                                po_crt_dt,
                                                rcvd_qty,
                                                rcvd_volume,
                                                rcvd_wght
                                  FROM xdmadm.shpm_corp
                                 WHERE tms_src = 'MANHATTAN')
                SELECT ep.fisc_yr_wk,
                       ep.po_nbr,
                       ep.brnch_cd,
                       ep.div_nbr,
                       ep.rcvd_qty eiw_rcvd_qty,
                       ep.rcvd_vol eiw_rcvd_vol,
                       ep.rcvd_wght eiw_rcvd_wght,
                       tp.tms_src,
                       tp.src_po_id,
                       tp.po_rcvd_dt tms_rcvd_dt,
                       tp.rcvd_qty tms_rcvd_qty,
                       tp.rcvd_volume tms_rcvd_vol,
                       tp.rcvd_wght tms_rcvd_wght
                  FROM eiw_pos ep, tms_pos tp
                 WHERE ep.po_nbr = tp.po_nbr(+)
                   AND ep.div_nbr = tp.po_div_nbr(+)
                   AND ep.ord_dt = tp.po_crt_dt(+))
      GROUP BY fisc_yr_wk;
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
         DBMS_OUTPUT.put_line('No POs found for fiscal week');
         l_tms_po_cnt_pct      := 0;
         l_tms_rcvd_pct        := 0;
         l_tms_rcvd_qty_pct    := 0;
         l_tms_rcvd_vol_pct    := 0;
         l_tms_rcvd_wght_pct   := 0;
   END;

   DBMS_OUTPUT.put_line('TMS PO Matched%:' || l_tms_po_cnt_pct || ' Min:' || l_tms_po_cnt_pct_lmt);

   IF l_tms_po_cnt_pct > l_tms_po_cnt_pct_lmt THEN
      DBMS_OUTPUT.put_line('Pass');
   ELSE
      DBMS_OUTPUT.put_line('Fail');
      l_fail_cnt   := 1;
   END IF;

   DBMS_OUTPUT.put_line('TMS Receipt%:' || l_tms_rcvd_pct || ' Min:' || l_tms_rcvd_pct_lmt);

   IF l_tms_rcvd_pct > l_tms_rcvd_pct_lmt THEN
      DBMS_OUTPUT.put_line('Pass');
   ELSE
      DBMS_OUTPUT.put_line('Fail');
      l_fail_cnt   := 1;
   END IF;

   DBMS_OUTPUT.put_line('TMS Received Quantity%:' || l_tms_rcvd_qty_pct || ' Min:' || l_tms_rcvd_qty_pct_lmt);

   IF l_tms_rcvd_qty_pct > l_tms_rcvd_qty_pct_lmt THEN
      DBMS_OUTPUT.put_line('Pass');
   ELSE
      DBMS_OUTPUT.put_line('Fail');
      l_fail_cnt   := 1;
   END IF;

   DBMS_OUTPUT.put_line('TMS Received Volume%:' || l_tms_rcvd_vol_pct || ' Min:' || l_tms_rcvd_vol_pct_lmt);

   IF l_tms_rcvd_vol_pct > l_tms_rcvd_vol_pct_lmt THEN
      DBMS_OUTPUT.put_line('Pass');
   ELSE
      DBMS_OUTPUT.put_line('Fail');
      l_fail_cnt   := 1;
   END IF;

   DBMS_OUTPUT.put_line('TMS Received Weight%:' || l_tms_rcvd_wght_pct || ' Min:' || l_tms_rcvd_wght_pct_lmt);

   IF l_tms_rcvd_wght_pct > l_tms_rcvd_wght_pct_lmt THEN
      DBMS_OUTPUT.put_line('Pass');
   ELSE
      DBMS_OUTPUT.put_line('Fail');
      l_fail_cnt   := 1;
   END IF;

   IF l_fail_cnt = 0 THEN
      DBMS_OUTPUT.put_line('Validation Successful');
      RETURN c_success;
   ELSE
      DBMS_OUTPUT.put_line('Validation Failed');
      DBMS_OUTPUT.put_line('Note: Extract will still be delivered. Need to notify inbound logistcs team and investigate issue.');

      RETURN c_error;
   END IF;
EXCEPTION
   WHEN OTHERS THEN
      DBMS_OUTPUT.put_line(SQLERRM);
      RETURN c_error;
END fn_tms_vldtn;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_CHANGE_CUST_LOAD" (odate          IN DATE,
                             p_prev_years   IN NUMBER,
                             p_full_load_flg IN VARCHAR2)
   RETURN NUMBER AS
   /***********************************************************************
   * Name: FN_CHANGE_CUST_LOAD
   * Type: Function
   * Description: Populate CHANGE_CUST table in XDMADM.
   * Revisions:
   *  Ver        Date        Author           Description
   *  ---------  ----------  ---------------  -----------------------------
   *  1.0        12/20/2012  Matt Nicol       Created this function
   *  1.1        02/08/2013  Matt Nicol       Updated to subtract 2 days from prev_ldr_tm
   *  1.2        09/10/2013  Matt Nicol       Updated to check CHANGE_SCP table
   *  1.3        05/27/2014  Matt Nicol       Fixed start date calculation
   ************************************************************************/
   c_success          CONSTANT NUMBER := 0;
   c_error            CONSTANT NUMBER := 1;

   l_prev_ldr_tm      NUMBER;
   l_new_ldr_tm       NUMBER;
   l_start_dt         DATE;
   l_change_pim_cnt   NUMBER;
   l_change_scp_cnt   NUMBER; -- MN 09102013
   l_return_code      NUMBER;
   l_out_msg          VARCHAR2(256);
BEGIN
   IF (odate IS NULL) THEN
      DBMS_OUTPUT.put_line('Error: Invalid Parameters: Date is required');
      RETURN c_error;
   END IF;

   DBMS_OUTPUT.put_line('ODATE: ' || odate);

   IF (p_prev_years IS NULL) THEN
      DBMS_OUTPUT.put_line('Error: Invalid Parameters: Previous Years is required');
      RETURN c_error;
   END IF;

   DBMS_OUTPUT.put_line('Previous years: ' || p_prev_years);

   IF (p_full_load_flg IS NULL) THEN
      DBMS_OUTPUT.put_line('Error: Invalid Parameters: Full load flag is required');
      RETURN c_error;
   END IF;

   DBMS_OUTPUT.put_line('Full load flag: ' || p_full_load_flg);

   --Truncate CHANGE_CUST table
   l_return_code   := usfdba.table_pkg.truncate_table(l_out_msg, 'XDMADM', 'CHANGE_CUST');

   IF (l_return_code <> 0) THEN
      DBMS_OUTPUT.put_line('Error: Failed to truncate CHANGE_CUST table');
      RETURN c_error;
   END IF;

   DBMS_OUTPUT.put_line('Truncated CHANGE_CUST table');

   --Get start DATE
   --MN 052714 - Fixed to use fiscal year of ODATE instead of calendar year
   SELECT MIN(t.clndr_dt)
     INTO l_start_dt
     FROM xdmadm.time_corp t, xdmadm.time_corp t2
    WHERE t.fisc_yr = t2.fisc_yr - (p_prev_years + 1)
      AND t2.clndr_dt = odate;

   DBMS_OUTPUT.put_line('Start date: ' || l_start_dt);

   --Get new loader time from SALES_CORP
   SELECT MAX(ldr_tm)
     INTO l_new_ldr_tm
     FROM xdmadm.sales_corp s, xdmadm.div_corp d
    WHERE s.div_nbr = d.div_nbr
      AND prcs_dt >= l_start_dt;

   DBMS_OUTPUT.put_line('New loader time: ' || l_new_ldr_tm);

   --Check for full load flag
   IF (p_full_load_flg = 'Y') THEN
      l_prev_ldr_tm   := 0;
   ELSE
      --Get previous loader time from FACT_LOAD_STAT
      -- 02/08/2013 MN - Updated to subtract 2 days
      SELECT TO_CHAR(prcs_dt - 2, 'YYYYMMDDHH24MISS')
        INTO l_prev_ldr_tm
        FROM xdmadm.fact_load_stat
       WHERE fact_table = 'CUST_WK_AGGR';
   END IF;

   DBMS_OUTPUT.put_line('Previous loader time: ' || l_prev_ldr_tm);

   INSERT /*+ append */
         INTO xdmadm.change_cust
      SELECT DISTINCT t.fisc_yr_wk, s.cust_nbr, s.div_nbr
        FROM xdmadm.sales_corp s, xdmadm.div_corp d, xdmadm.time_corp t
       WHERE s.div_nbr = d.div_nbr
         AND s.prcs_dt = t.clndr_dt
         AND s.prcs_dt >= l_start_dt
         AND ldr_tm > l_prev_ldr_tm
         AND ldr_tm <= l_new_ldr_tm;

   DBMS_OUTPUT.put_line('Inserted ' || sql%ROWCOUNT || ' into CHANGE_CUST');

   COMMIT;

   IF (p_full_load_flg <> 'Y') THEN
      --Check if there are any changes to PIM_CORP since last run
      SELECT COUNT( * )
        INTO l_change_pim_cnt
        FROM (SELECT pim_usf_std_prod_cd, admn_flg, brnd_typ FROM xdmadm.change_pim
              MINUS
              SELECT pim_usf_std_prod_cd, DECODE(pim_suprcls_id, 97, 'Y', 'N'), DECODE(pim_brnd_typ, 2, 'EB', 'MB')
                FROM xdmadm.pim_corp);

      DBMS_OUTPUT.put_line('Number of changed PIM_CORP records: ' || l_change_pim_cnt);

      IF (l_change_pim_cnt > 0) THEN
         --Insert into CHANGE_CUST where PIM_CORP data has changed
         INSERT /*+ append */
               INTO xdmadm.change_cust
            WITH chng AS
                   (SELECT pim_usf_std_prod_cd, admn_flg, brnd_typ FROM xdmadm.change_pim
                    MINUS
                    SELECT pim_usf_std_prod_cd, DECODE(pim_suprcls_id, 97, 'Y', 'N'), DECODE(pim_brnd_typ, 2, 'EB', 'MB')
                      FROM xdmadm.pim_corp)
            SELECT DISTINCT t.fisc_yr_wk, s.cust_nbr, s.div_nbr
              FROM xdmadm.sales_corp s,
                   xdmadm.div_corp d,
                   xdmadm.time_corp t,
                   chng ch
             WHERE s.div_nbr = d.div_nbr
               AND s.prcs_dt = t.clndr_dt
               AND d.conv_to_div_nbr IS NULL
               AND s.xfer_to_dt IS NULL
               AND s.prcs_dt >= l_start_dt
               AND ldr_tm <= l_new_ldr_tm
               AND s.pim_usf_std_prod_cd = ch.pim_usf_std_prod_cd
               AND NOT EXISTS (SELECT 'X'
                                 FROM xdmadm.change_cust
                                WHERE fisc_yr_wk = t.fisc_yr_wk
                                  AND cust_nbr = s.cust_nbr
                                  AND div_nbr = s.div_nbr);

         DBMS_OUTPUT.put_line('Inserted ' || sql%ROWCOUNT || ' into CHANGE_CUST');

         COMMIT;
      END IF;
   END IF;

   -- MN 09102013
   IF (p_full_load_flg <> 'Y') THEN
      --Check if there are any changes to SCP_PROMO_WK since last RUN
      SELECT COUNT( * )
        INTO l_change_scp_cnt
        FROM (SELECT DISTINCT prod_nbr
                FROM ((SELECT scp_num,
                              prod_nbr,
                              promo_start_dt,
                              promo_end_dt,
                              promo_start_wk,
                              promo_end_wk,
                              frst_scp_flg
                         FROM xdmadm.scp_promo_wk
                       MINUS
                       SELECT scp_num,
                              prod_nbr,
                              promo_start_dt,
                              promo_end_dt,
                              promo_start_wk,
                              promo_end_wk,
                              frst_scp_flg
                         FROM xdmadm.change_scp)
                      UNION
                      (SELECT scp_num,
                              prod_nbr,
                              promo_start_dt,
                              promo_end_dt,
                              promo_start_wk,
                              promo_end_wk,
                              frst_scp_flg
                         FROM xdmadm.change_scp
                       MINUS
                       SELECT scp_num,
                              prod_nbr,
                              promo_start_dt,
                              promo_end_dt,
                              promo_start_wk,
                              promo_end_wk,
                              frst_scp_flg
                         FROM xdmadm.scp_promo_wk)));

      DBMS_OUTPUT.put_line('Number of changed SCP_PROMO_WK records: ' || l_change_scp_cnt);

      IF (l_change_scp_cnt > 0) THEN
         --Insert into CHANGE_CUST where SCP_PROMO_WK data has changed
         INSERT /*+ append */
               INTO xdmadm.change_cust
            WITH chng AS (SELECT DISTINCT prod_nbr
                            FROM ((SELECT scp_num,
                                          prod_nbr,
                                          promo_start_dt,
                                          promo_end_dt,
                                          promo_start_wk,
                                          promo_end_wk,
                                          frst_scp_flg
                                     FROM xdmadm.scp_promo_wk
                                   MINUS
                                   SELECT scp_num,
                                          prod_nbr,
                                          promo_start_dt,
                                          promo_end_dt,
                                          promo_start_wk,
                                          promo_end_wk,
                                          frst_scp_flg
                                     FROM xdmadm.change_scp)
                                  UNION
                                  (SELECT scp_num,
                                          prod_nbr,
                                          promo_start_dt,
                                          promo_end_dt,
                                          promo_start_wk,
                                          promo_end_wk,
                                          frst_scp_flg
                                     FROM xdmadm.change_scp
                                   MINUS
                                   SELECT scp_num,
                                          prod_nbr,
                                          promo_start_dt,
                                          promo_end_dt,
                                          promo_start_wk,
                                          promo_end_wk,
                                          frst_scp_flg
                                     FROM xdmadm.scp_promo_wk)))
            SELECT DISTINCT t.fisc_yr_wk, s.cust_nbr, s.div_nbr
              FROM xdmadm.sales_corp s,
                   xdmadm.div_corp d,
                   xdmadm.time_corp t,
                   chng ch
             WHERE s.div_nbr = d.div_nbr
               AND s.prcs_dt = t.clndr_dt
               AND d.conv_to_div_nbr IS NULL
               AND s.xfer_to_dt IS NULL
               AND s.prcs_dt >= l_start_dt
               AND ldr_tm <= l_new_ldr_tm
               AND s.prod_nbr = ch.prod_nbr
               AND NOT EXISTS (SELECT 'X'
                                 FROM xdmadm.change_cust
                                WHERE fisc_yr_wk = t.fisc_yr_wk
                                  AND cust_nbr = s.cust_nbr
                                  AND div_nbr = s.div_nbr);

         DBMS_OUTPUT.put_line('Inserted ' || sql%ROWCOUNT || ' into CHANGE_CUST');

         COMMIT;
      END IF;
   END IF;

   -- Analyze CHANGE_CUST table
   l_return_code   := xdmadm.fn_getstat_tbl('XDMADM', 'CHANGE_CUST');
   DBMS_OUTPUT.put_line('Analyze CHANGE_CUST Return: ' || l_return_code);

   IF (l_return_code <> 0) THEN
      DBMS_OUTPUT.put_line('Error: Failed to analyze CHANGE_CUST table');
      RETURN c_error;
   END IF;

   --Truncate CHANGE_PIM table
   l_return_code   := usfdba.table_pkg.truncate_table(l_out_msg, 'XDMADM', 'CHANGE_PIM');

   IF (l_return_code <> 0) THEN
      DBMS_OUTPUT.put_line('Error: Failed to truncate CHANGE_PIM table');
      RETURN c_error;
   END IF;

   --Reload CHANGE_PIM table
   INSERT /*+ append */
         INTO xdmadm.change_pim
      SELECT pim_usf_std_prod_cd, DECODE(pim_suprcls_id, 97, 'Y', 'N'), DECODE(pim_brnd_typ, 2, 'EB', 'MB')
        FROM xdmadm.pim_corp;

   COMMIT;

   -- Analyze CHANGE_PIM table
   l_return_code   := xdmadm.fn_getstat_tbl('XDMADM', 'CHANGE_PIM');
   DBMS_OUTPUT.put_line('Analyze CHANGE_PIM Return: ' || l_return_code);

   IF (l_return_code <> 0) THEN
      DBMS_OUTPUT.put_line('Error: Failed to analyze CHANGE_PIM table');
      RETURN c_error;
   END IF;

   -- MN 09102013
   --Truncate CHANGE_SCP table
   l_return_code   := usfdba.table_pkg.truncate_table(l_out_msg, 'XDMADM', 'CHANGE_SCP');

   IF (l_return_code <> 0) THEN
      DBMS_OUTPUT.put_line('Error: Failed to truncate CHANGE_SCP table');
      RETURN c_error;
   END IF;

   -- MN 09102013
   --Reload CHANGE_SCP table
   INSERT /*+ append */
         INTO xdmadm.change_scp
      SELECT scp_num,
             prod_nbr,
             promo_start_dt,
             promo_end_dt,
             promo_start_wk,
             promo_end_wk,
             frst_scp_flg
        FROM xdmadm.scp_promo_wk;

   COMMIT;

   -- MN 09102013
   -- Analyze CHANGE_SCP table
   l_return_code   := xdmadm.fn_getstat_tbl('XDMADM', 'CHANGE_SCP');
   DBMS_OUTPUT.put_line('Analyze CHANGE_SCP Return: ' || l_return_code);

   IF (l_return_code <> 0) THEN
      DBMS_OUTPUT.put_line('Error: Failed to analyze CHANGE_SCP table');
      RETURN c_error;
   END IF;

   --Update previous loader time in FACT_LOAD_STAT
   UPDATE xdmadm.fact_load_stat
      SET prcs_dt   = TO_DATE(l_new_ldr_tm, 'YYYYMMDDHH24MISS')
    WHERE fact_table = 'CUST_WK_AGGR';

   COMMIT;
   DBMS_OUTPUT.put_line('Updated FACT_LOAD_STAT process date');

   RETURN c_success;
EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      DBMS_OUTPUT.put_line('Unexepected error');
      DBMS_OUTPUT.put_line(SQLCODE || ': ' || SQLERRM);
      RETURN c_error;
END fn_change_cust_load;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_CASES_BY_GL_ACCT_LOAD" (P_IN_ODATE   IN VARCHAR2)
   RETURN NUMBER IS

 /******************************************************************************
   NAME: XDMADM.FN_CASES_BY_GL_ACCT_LOAD
   TYPE: Function
   USAGE:XDMADM.FN_CASES_BY_GL_ACCT_LOAD (P_IN_ODATE )

   PURPOSE:  Function Inserts the  into CASES_AND_RVNUE_BY_GL_ACCT

   REVISIONS:
   Ver        Date                    Description
   ---------  --------------------------------------------------

   1.        10/28/2013              Initial Development

  ******************************************************************************/

  /***************************
  * Variables declaration    *
  ****************************/



    v_const         NUMBER := 2 ;
    v_end_dt        DATE;
    v_strt_dt       DATE;
    v_odate         DATE := to_date(p_in_odate,'YYYYMMDD');
    v_prcs_stp      VARCHAR2(2000);
    v_ldr_tm        NUMBER(20);
    v_out_msg       VARCHAR2(256);

    v_dba_func_msg   VARCHAR2(2000) := 'oXo';
    dml_err_cnt      NUMBER;


   l_start              NUMBER;
   l_end                NUMBER;
   v_table_owner       VARCHAR2(40) := 'XDMADM'; /*-- hardcoded value*/
   v_table_name      VARCHAR2(40) := 'CASES_AND_RVNUE_BY_GL_ACCT'; /*-- hardcoded value*/
   v_truncate_tbl      NUMBER(3);


    BEGIN



--******************************************************************************
  --* iNSERT INTO XDMADM.CASES_AND_RVNUE_BY_GL_ACCT                                 *
  --******************************************************************************
  BEGIN
       v_prcs_stp := 'INSERT INTO table starts ';
       l_start := DBMS_UTILITY.get_time;

        DBMS_OUTPUT.PUT_LINE('TIME ' || to_char(sysdate, 'yyyymmdd hh24:mi:ss'));

  INSERT  /*+ append */  INTO xdmadm.CASES_AND_RVNUE_BY_GL_ACCT (
     SELECT brnch_cd,
           fisc_yr,
           fisc_mth_of_yr,
           acct,
           gl_account,
           cust_acctblty_flg,
           cust_natl_mngd_flg,
           ROUND (SUM (unfrm_qty_ship), 2) data_value
      FROM
          (SELECT x3.brnch_cd, --jc
                x1.div_nbr,
                x1.div_typ_cd,
                x1.fisc_yr,
                x1.fisc_mth_of_yr,
                nvl(x2.pyr_seg_cd_actl, 'UNK') pyr_seg_cd,
                x2.acct,
                x1.sls_div_nbr,
                CASE
                  WHEN x1.div_nbr       = x1.sls_div_nbr  and x1.div_typ_cd     = 'CC' and x2.delivered_type = 'N'
                  THEN '9010220'
                  ELSE x2.gl_account
                END gl_account,
                x1.cust_acctblty_flg,
                x1.cust_natl_mngd_flg,
                x1.unfrm_qty_ship ,
                x2.descr,
                x2.delivered_type
      FROM    (  SELECT
                        sls_div_nbr,
                        div_nbr,
                        div_typ_cd,
                        fisc_yr,
                        fisc_mth_of_yr,
                        pyr_seg_cd,
                        gl_acct_cd,
                        cust_acctblty_flg,
                        cust_natl_mngd_flg,
                        delivered_type,
                        sum(unfrm_qty_ship)  unfrm_qty_ship
                    FROM xdmadm.cases_and_dollars_temp
                GROUP BY
                            sls_div_nbr,
                            div_nbr,
                            div_typ_cd,
                            fisc_yr,
                            fisc_mth_of_yr,
                            pyr_seg_cd,
                            gl_acct_cd,
                            cust_acctblty_flg,
                            cust_natl_mngd_flg,
                            delivered_type ) x1
                 LEFT OUTER JOIN xdmadm.gl_acct_by_pyr_seg x2
                               ON  x1.pyr_seg_cd     = x2.pyr_seg_cd_actl
                              AND x1.delivered_type = x2.delivered_type --jc
                  INNER JOIN xdmadm.div_corp x3
                          ON x2.div_typ_cd                    = x3.div_typ_cd
                         AND NVL(x1.sls_div_nbr, x1.div_nbr) = x3.div_nbr)
               GROUP BY
                       brnch_cd,
                       fisc_yr,
                       fisc_mth_of_yr,
                       acct,
                       gl_account,
                       cust_acctblty_flg,
                       cust_natl_mngd_flg );


      l_end := DBMS_UTILITY.get_time;


      DBMS_OUTPUT.PUT_LINE('NO OF ROWS INSERTED:' || sql%rowcount ) ;

      DBMS_OUTPUT.PUT_LINE ( round( (l_end - l_start)/100, 2 ) ||' seconds...' );
      COMMIT;
       RETURN 0;
    exception
      WHEN OTHERS
      THEN
        DBMS_OUTPUT.PUT_LINE('Error in v_prcs_stp:'||v_prcs_stp || SQLCODE || SQLERRM );



         RETURN 701;
    END;


   --******************************************************************************
   --* Exception Handling                                                         *
   --******************************************************************************

    EXCEPTION
      WHEN OTHERS
      THEN
     ROLLBACK;
     DBMS_OUTPUT.PUT_LINE(SQLCODE);
     DBMS_OUTPUT.PUT_LINE(SQLERRM);

    DBMS_OUTPUT.put_line('Error in function FN_CASES_BY_GL_ACCT_LOAD');
    RETURN 600;



END FN_CASES_BY_GL_ACCT_LOAD;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_COMPRESS_SUB_PART_TBL"
                                     (V_TABLE_OWNER     IN VARCHAR2
                                     ,V_TABLE_NAME      IN VARCHAR2
                                     ,V_PARTITION_VALUE IN VARCHAR2)
      RETURN VARCHAR2
   AS
--******************************************************************************
--* Name          : FN_COMPRESS_SUB_PART_TBL                                   *
--* Usage         : FN_COMPRESS_SUB_PART_TBL(PARTITION_VALUE)                  *
--******************************************************************************
--* DESCRIPTION                                                                *
--* -----------                                                                *
--* Function Retrieves Subpartition names and                                  *
--*               : compresses those subpartitions                             *
--*----------------------------------------------------------------------------*
--* PARM Used:PARTITION_VALUE  - Partition Value to retrieve subpartition names*
--* -------------------------------------------------------------------------- *
--*  INPUT:                                                                    *
--* -------------------------------------------------------------------------- *
--*  Target  :                                                                 *
--* -------------------------------------------------------------------------- *
--*  Return Code : 0 Successful, Others - Load Failed                          *
--******************************************************************************
--*  Date        User Id         Changes Description                           *
--*  =========== =======         ==============================================*
--*  27-MAR-2011 S.Manocha      Initial release of this procedure.             *
--******************************************************************************
--* EIW Standard Variables                                                     *
--******************************************************************************
--******************************************************************************
  CON_PROCESS_NAME  CONSTANT varchar2(40) := 'FN_COMPRESS_SUB_PART_TBL';

--******************************************************************************
--* Define Cursor to load data by period. For each period, AGG data is loaded  *
--******************************************************************************
   CURSOR c1
   IS
        SELECT subpartition_name
          FROM sys.ALL_TAB_SUBPARTITIONS
         WHERE table_owner = V_TABLE_OWNER
           AND table_name = V_TABLE_NAME
           and partition_name in
                (SELECT partition_name
                    FROM sys.all_tab_partitions
                    WHERE table_owner = V_TABLE_OWNER
                      AND table_name =  V_TABLE_NAME
                      and partition_name =V_PARTITION_VALUE
                  )
      ORDER BY 1;
--******************************************************************************
--* Program Variables                                                          *
--******************************************************************************
   v_subpartition_name   SYS.ALL_TAB_SUBPARTITIONS.SUBPARTITION_NAME%TYPE;

--******************************************************************************
--* Define Variables for publishing Run details in EIW process log             *
--******************************************************************************
   v_prcs_nm            varchar(100);
   v_prcs_stp           varchar(100);
   v_prcs_pram          varchar(100);

--******************************************************************************
--* Program Start                                                              *
--******************************************************************************
BEGIN
      dbms_output.put_line('Start Process '||CON_PROCESS_NAME);
      dbms_output.put_line('Start Time:'||TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS'));
      v_prcs_nm  := CON_PROCESS_NAME ;
      v_prcs_pram:= v_subpartition_name;
      v_prcs_stp := 'Start Process '||CON_PROCESS_NAME;

      OPEN c1;
--******************************************************************************
--* Using Cursor , Compress the Sub partitions                                 *
--******************************************************************************
  << compress_sub_partitions>>
       v_prcs_stp := 'Compress Subpartitions';

       LOOP
          FETCH c1 INTO v_subpartition_name;

          EXIT WHEN c1%NOTFOUND;


          EXECUTE IMMEDIATE 'ALTER TABLE '||V_TABLE_OWNER||'.'||V_TABLE_NAME||' MOVE SUBPARTITION '
                           || v_subpartition_name
                           || ' COMPRESS for query high parallel 16';



          COMMIT;
       END LOOP;

--******************************************************************************
--* Wrap Program                                                               *
--******************************************************************************
  <<Wrap_Program>>

      v_prcs_stp := 'Final Commit';

      CLOSE c1;

      commit;

      dbms_output.put_line ('Compression Completed for Partition:' || V_PARTITION_VALUE);
      dbms_output.put_line('End Time:'||to_char(sysdate,'YYYY-MM-DD HH24:MI:SS'));

      RETURN 0;
--******************************************************************************
--* Exception Handling                                                         *
--******************************************************************************
EXCEPTION
   WHEN OTHERS
   THEN
         DBMS_OUTPUT.put_line ('v_subpartition_name:' || v_subpartition_name);
         DBMS_OUTPUT.put_line ('SQLERROR:' || SQLCODE || ',' || SQLERRM);
         DBMS_OUTPUT.PUT_LINE(       v_prcs_nm
                            ||' - '||v_prcs_stp
                            ||' - '||v_prcs_pram);

      RETURN -1;
END;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_SALES_SUMM_CUST_MRCH_LOAD" (
   v_in_odate IN VARCHAR2)
   RETURN NUMBER
IS
   /***********************************************************************
   ** Program Name:  XDMADM.FN_SALES_SUMM_CUST_MRCH_LOAD
   **
   ** Description: . This function will load last closed period data into XDMADM.SALES_SUMM_CUST_MRCH_A/B table.
   **
   ** Called by: SalesSummCustMrch.sh
   **
   ** Input parameter: ODATE  (YYYYMMDD)
   **
   ** Output parameters :
   **
   ** Modification Log
   ** 08-11-2011  Manisha Singh   Created function.
   ** 02-14-2011  Corrie Kaczmarek Added logic to update avg_pntrtn_rate
   ** 05-14-2012  p1a0168 Changes Made for cm.curr_ind (+) = 'Y'
   *  26/6/13     p1a0168           change to exclude CC Sales
   *  11/19/2015  Robert Moore      Convert CUST_MNR_CD to MENU_TYP_CD
   * 11/10/2015  p1a0168         Modified for acquistions
   ************************************************************************/
--      EIW Standard Variables
--***********************************************************************
   CON_PROCESS_NAME  CONSTANT varchar2(40) := 'FN_SALES_SUMM_CUST_MRCH_LOAD';

    -- VARIABLES
   v_odate                        DATE := TO_DATE (v_in_odate, 'YYYYMMDD');
   v_cur_fisc_yr_mth          XDMADM.TIME_CORP.fisc_yr_mth%TYPE;
   v_last_fisc_yr_mth         XDMADM.TIME_CORP.fisc_yr_mth%TYPE;
   v_cur_fisc_mth_of_yr     XDMADM.TIME_CORP.fisc_mth_of_yr%TYPE;
   v_last_fisc_mth_of_yr    XDMADM.TIME_CORP.fisc_mth_of_yr%TYPE;
   v_fisc_yr                       XDMADM.TIME_CORP.fisc_yr%TYPE;
   v_cur_fisc_prd_nm         XDMADM.TIME_CORP.fisc_prd_nm%TYPE;
   v_last_fisc_prd_nm        XDMADM.TIME_CORP.fisc_prd_nm%TYPE;
   v_prd_strt_dt                DATE;
   v_prd_end_dt                DATE;
   v_fisc_yr_mth        VARCHAR2 (8 Byte);
   v_fisc_wks_this_pd   NUMBER;
   v_pim_super_id   Varchar(20 Byte);
   v_pim_mrch_ctgry_nm  Varchar(200 Byte);
   l_fisc_yr_qtr VARCHAR(8 Byte);
   l_fisc_cnt NUMBER;
   v_12_prd_strt_dt  DATE;
   v_12_prd_end_dt    DATE;
   v_param_value NUMBER;


   v_syn_nm                    CTLADM.SYN_TBL_MAP.synonym_nm%TYPE:= 'SALES_SUMM_CUST_MRCH' ;
   v_tbl_to_load               CTLADM.SYN_TBL_MAP.tbl_nm%TYPE;
   v_tbl_owner                 VARCHAR2(40 BYTE):='XDMADM';
   v_tbl_inactv                 VARCHAR2 (40 BYTE);
   v_tbl_actv                    VARCHAR2 (40 BYTE);
   v_tbl_nm                     VARCHAR2 (40 BYTE);
   v_sql_str                     VARCHAR2(5000):=' ';

   v_cnt                     NUMBER;
   v_ret_val                NUMBER;
   v_trunc_allow         boolean;
   v_trunc_ret            NUMBER(3);
   v_grs_sls_extnd      NUMBER;
   v_unfrm_qty_ship   NUMBER;

/******************************************************************************
 Define Variables for publishing Run details in EIW process log
******************************************************************************/
   v_prcs_nm           varchar(100);
   v_prcs_step         varchar(100);
   v_prcs_pram        varchar(100);
   v_out_msg           varchar(200);

--******************************************************************************
--* Define User Defined Exceptions                                             *
--******************************************************************************
   ALL_EXCEPTIONS       EXCEPTION;

BEGIN
    dbms_output.put_line('Start Process '||CON_PROCESS_NAME);
    dbms_output.put_line('Start Time:'||TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS'));
    v_prcs_nm  := CON_PROCESS_NAME ;
    v_prcs_pram:= 'PARAM1 : '||v_odate;
    v_prcs_step := 'Start Process '||CON_PROCESS_NAME;

   -- Get date parameters

   v_prcs_step:='Getting date parameters';

   SELECT   CAST (100
            * (CASE
                  WHEN fisc_mth_of_yr = '01' THEN fisc_yr - 1
                  ELSE fisc_yr
               END)
            + CASE
                 WHEN fisc_mth_of_yr = '01' THEN 12
                 ELSE CAST (fisc_mth_of_yr AS INT) - 1
              END AS CHAR (6)
         ) mth
  INTO   v_fisc_yr_mth
  FROM   XDMADM.time_corp
 WHERE   clndr_dt = TRUNC(v_odate);

 select distinct fisc_wks_this_pd
   into v_fisc_wks_this_pd
  from xdmadm.time_corp
 where fisc_yr_mth = v_fisc_yr_mth;

   SELECT t.fisc_yr_mth
     INTO v_cur_fisc_yr_mth
     FROM xdmadm.time_corp t
    WHERE t.clndr_dt = v_odate;

   DBMS_OUTPUT.put_line ('Current Period is '|| v_cur_fisc_yr_mth);

    SELECT MAX (a.fisc_yr_mth)
       INTO v_last_fisc_yr_mth
      FROM xdmadm.time_corp a
     WHERE a.fisc_yr_mth < (SELECT a.fisc_yr_mth
                              FROM xdmadm.time_corp a
                             WHERE a.clndr_dt = TRUNC (v_odate));

      SELECT   MAX(FISC_YR_QTR)
      into l_fisc_yr_qtr
                             FROM   xdmadm.time_corp
                             WHERE   FISC_YR_QTR <
                              (SELECT   FISC_YR_QTR
                                         FROM   xdmadm.time_corp
                                        WHERE   clndr_dt = v_odate);

         DBMS_OUTPUT.put_line ('fisc_yr_qtr' || l_fisc_yr_qtr);

     -- DO a check to make sure the CUST_MRCH_NTL_AVG has the same fisc_yr_qtr and the SALES_SUMM_CUST_MRCH table
     select count(*)
        into l_fisc_cnt
        from xdmadm.cust_mrch_ntl_avg
      where fisc_yr_qtr = l_fisc_yr_qtr
        and rownum = 1;

               if l_fisc_cnt = 0
               then
               DBMS_OUTPUT.put_line ('xdmadm.cust_mrch_ntl_avg does not have correct fisc_yr_qtr');
               DBMS_OUTPUT.put_line ('Correct fisc_yr_qtr is ' || l_fisc_yr_qtr);
               return 1 ;
               end if;


   DBMS_OUTPUT.put_line ('Last Closed Period is '|| v_last_fisc_yr_mth);

    SELECT MIN(clndr_dt),MAX (clndr_dt)
     INTO v_prd_strt_dt, v_prd_end_dt
     FROM xdmadm.time_corp
    WHERE fisc_yr_mth = v_last_fisc_yr_mth;

   DBMS_OUTPUT.put_line ('Start Date of last period is '|| v_prd_strt_dt);
   DBMS_OUTPUT.put_line ('End Date of last period is '|| v_prd_end_dt);

    select max(clndr_dt) INTO v_12_prd_end_dt from xdmadm.time_corp where fisc_yr_mth in (
    SELECT MAX (a.fisc_yr_mth)
      FROM xdmadm.time_corp a
     WHERE a.fisc_yr_mth < (SELECT a.fisc_yr_mth
                              FROM xdmadm.time_corp a
                             WHERE a.clndr_dt = TRUNC (v_odate)));

  DBMS_OUTPUT.put_line('End Date: '||v_12_prd_end_dt);

   select min(clndr_dt)
   into  v_12_prd_strt_dt
     from xdmadm.time_corp
    where fisc_yr_mth in
              (select  fisc_yr_mth - 100 as "12_Mth_Ago"
                 from   xdmadm.time_corp
                 where  clndr_dt = trunc(v_odate));

 DBMS_OUTPUT.put_line('Start Date: '||v_12_prd_strt_dt);

   SELECT tbl_nm
     INTO v_tbl_inactv
     FROM ctladm.syn_tbl_map
    WHERE synonym_nm = v_syn_nm AND actv_ind = 'N';

   SELECT tbl_nm
     INTO v_tbl_actv
     FROM ctladm.syn_tbl_map
    WHERE synonym_nm = v_syn_nm AND actv_ind = 'Y';

   SELECT table_name
      INTO v_tbl_nm
    FROM ALL_SYNONYMS
   WHERE     owner = 'XDMADM'
       AND table_owner = 'XDMADM'
       AND synonym_name = 'SALES_SUMM_CUST_MRCH';

       SELECT   param_value_nbr
   INTO   v_param_value
   FROM   xdmadm.param_value
 WHERE   app_name = 'SALES_COVERAGE_MMA'
   AND   param_type ='DEFAULT_PNTRTN_RATE';


    IF v_tbl_actv <> v_tbl_nm THEN
         dbms_output.put_line('The tables ALL_SYNONYMS and ctladm.syn_tbl_map are not in synch');
         RETURN 1;
    END IF;

   DBMS_OUTPUT.put_line ('Table which needs to be loaded for '|| v_last_fisc_yr_mth|| ' is '|| v_tbl_inactv);

--******************************************************************************
--* Truncating the inactive Table      *
--******************************************************************************
   v_prcs_step := 'Truncating '||v_tbl_inactv ||' Table';
   dbms_output.put_line('Truncating the table '||v_tbl_inactv);
    v_trunc_ret := USFDBA.TABLE_PKG.TRUNCATE_TABLE(v_out_msg, 'XDMADM',v_tbl_inactv);
     DBMS_OUTPUT.PUT_LINE(v_out_msg);
     IF v_trunc_ret != 0 THEN
        DBMS_OUTPUT.PUT_LINE('Error in Truncating '||v_tbl_inactv||' table');
        RAISE ALL_EXCEPTIONS;
     END IF;

   v_tbl_to_load := v_tbl_inactv;



   DBMS_OUTPUT.put_line ('Loading the table ' || v_tbl_to_load || ' started...' || systimestamp);

  --Step 1
   -- build all customer to merch category combinations
   v_prcs_step:='Build all customer to merch category combinations';

v_sql_str:=' INSERT INTO '|| v_tbl_owner||'.'||v_tbl_to_load
    || ' with merch_sales as (  SELECT   count(distinct case when s.trans_typ = ''RT'' then '
    || 's.DIV_NBR||CUST_NBR||INV_DT||nvl(DLVR_RTE,'' '')||PRCS_DT '
    || 'else ''0'' end) drops, s.div_nbr, s.cust_nbr, '
    || v_last_fisc_yr_mth
    || ', NVL (p.pim_mrch_ctgry_nm,''UNKNOWN'') pim_mrch_ctgry_nm, '
    || 'SUM (NVL (s.grs_sls_extnd, 0)) grs_sls_extnd,
                      SUM (NVL (s.unfrm_qty_ship, 0)) unfrm_qty_ship,
                      SUM (NVL (s.actl_gp, 0)) actl_gp
               FROM   xdmadm.sales_corp s,xdmadm.pim_corp p,xdmadm.div_corp div
              WHERE   nvl(s.SLS_REVENUE_DIV_NBR,s.div_nbr) = div.DIV_NBR and div.div_typ_cd <> ''CC'' and NVL (div.acqstn_cmpny_nm,''USF'') = ''USF''
                      AND s.prcs_dt BETWEEN '''||v_prd_strt_dt||''' AND '''||v_prd_end_dt||'''
                      AND XFER_TO_DT IS NULL
                      AND p.pim_sk = s.pim_sk
                      AND p.pim_suprcls_id NOT IN
                               (SELECT   param_value_nbr FROM   xdmadm.param_value WHERE   app_name =''FN_CUST_MRCH_NTL_AVG_LOAD''  AND param_type = ''PIM_SUPRCLS_ID'')
           GROUP BY   s.div_nbr,
                      s.cust_nbr,
                      p.pim_mrch_ctgry_nm),
    cust as
    (SELECT   DISTINCT s.div_nbr, s.cust_nbr, c.menu_typ_cd,c.crm_ttl_wkly_ptnl,c.crm_mp_fbd_prch_ovrd_ind
                       FROM   MERCH_SALES s, xdmadm.cust_corp c
                      WHERE   s.cust_nbr = c.cust_nbr
                      and s.div_nbr = c.div_nbr ),
    sales
       AS (SELECT   c.div_nbr,
                    c.cust_nbr,
                    '||v_last_fisc_yr_mth || ',
                    pim.pim_mrch_ctgry_nm,
                    0 grs_sls_extnd,
                    0 unfrm_qty_ship,
                    c.menu_typ_cd,
                    c.crm_ttl_wkly_ptnl,
                    c.crm_mp_fbd_prch_ovrd_ind
             FROM   cust c,
                    (SELECT   DISTINCT  NVL (pim_mrch_ctgry_nm, ''UNKNOWN'')    pim_mrch_ctgry_nm   FROM   xdmadm.pim_corp) pim),
ptnl
       AS (SELECT   c.cust_nbr,
                    c.div_nbr,
                    c.menu_typ_cd,
                    cmc.pim_mrch_ctgry_nm,
                    CASE
                       WHEN c.crm_mp_fbd_prch_ovrd_ind = ''N'' AND NVL(CMP.MP_FOOD_BVRG_DSPSBL_PRCH,0) = 0
                       THEN  c.crm_ttl_wkly_ptnl * ' || v_fisc_wks_this_pd|| '
                       WHEN c.crm_mp_fbd_prch_ovrd_ind = ''N'' AND NVL(CMP.MP_FOOD_BVRG_DSPSBL_PRCH,0) <> 0
                       THEN (cmp.mp_food_bvrg_dspsbl_prch / 52) * '|| v_fisc_wks_this_pd||'
                       WHEN C.CRM_MP_FBD_PRCH_OVRD_IND = ''Y'' AND NVL(C.CRM_TTL_WKLY_PTNL,0) = 0
                       THEN (cmp.mp_food_bvrg_dspsbl_prch / 52) * '|| v_fisc_wks_this_pd||'
                       WHEN C.CRM_MP_FBD_PRCH_OVRD_IND = ''Y'' AND NVL(C.CRM_TTL_WKLY_PTNL,0) <> 0
                       THEN  c.crm_ttl_wkly_ptnl *'|| v_fisc_wks_this_pd|| '
                    END
                       crm_ttl_mthly_ptnl,
                    cmc.ntl_avg_spnd_prcnt
             FROM   cust c,
                    XDMADM.CUST_MRCH_NTL_AVG cmc,
                    XDMADM.CUST_MKTPLUS_CORP cmp
            WHERE       1 = 1
                    AND cmc.menu_typ_cd = c.menu_typ_cd
                    AND c.cust_nbr = cmp.cust_nbr(+)
                    AND c.div_nbr = cmp.div_nbr(+)
                    AND cmp.curr_ind (+) = ''Y''),
           pntrtn_rate as
        (select s.cust_nbr, s.div_nbr,
         (SUM (NVL (s.grs_sls_extnd, 0))/nvl(m.avg_pntrtn_rate, '||v_param_value||'))/12 as cust_ttl_ptnl
        from xdmadm.sales_corp s,xdmadm.CUST_AVG_PNTRTN_RATE m,cust c,XDMADM.DIV_CORP DIV
         where nvl(s.SLS_REVENUE_DIV_NBR,s.div_nbr) = div.DIV_NBR and div.div_typ_cd <> ''CC'' and NVL (div.acqstn_cmpny_nm,''USF'') = ''USF''
           AND m.menu_typ_cd(+) = c.menu_typ_cd
           and s.cust_nbr = c.cust_nbr
           and s.div_nbr = c.div_nbr
           AND XFER_TO_DT IS NULL
           and s.prcs_dt BETWEEN '''||v_12_prd_strt_dt||''' AND '''||v_12_prd_end_dt||'''
           group by s.cust_nbr, s.div_nbr, avg_pntrtn_rate)
SELECT   s.div_nbr,
         s.cust_nbr,
         '||v_last_fisc_yr_mth || ',
         s.pim_mrch_ctgry_nm,
         nvl(m.grs_sls_extnd,0),
         nvl(m.unfrm_qty_ship,0),
         p.menu_typ_cd,
         case when nvl(crm_ttl_mthly_ptnl,0) = 0 then r.cust_ttl_ptnl else crm_ttl_mthly_ptnl end crm_ttl_mthly_ptnl,
         nvl(ntl_avg_spnd_prcnt,0),
         case when drops >0 then actl_gp/drops else 0 end tgapdrops
  FROM   ptnl p, sales s, MERCH_SALES m, pntrtn_rate r
 WHERE       p.cust_nbr(+) = s.cust_nbr
         AND p.div_nbr(+) = s.div_nbr
         AND p.pim_mrch_ctgry_nm(+) = s.pim_mrch_ctgry_nm
         AND p.menu_typ_cd(+) = s.menu_typ_cd
         AND s.div_nbr = m.div_nbr(+)
         AND s.cust_nbr = m.cust_nbr(+)
         AND s.pim_mrch_ctgry_nm = m.pim_mrch_ctgry_nm(+)
         AND s.cust_nbr = r.cust_nbr
         AND s.div_nbr = r.div_nbr';

    dbms_output.put_line('SQL for Insert Statement is:  '||  v_sql_str);

    EXECUTE IMMEDIATE v_sql_str;
    COMMIT;

   --Analyze Table
  DBMS_OUTPUT.PUT_LINE('Start table analyze... ' || systimestamp);
    v_ret_val    := usfdba.stats_pkg.analyze_table(v_out_msg, 'XDMADM',v_tbl_to_load);
    IF v_ret_val != 0 THEN
      DBMS_OUTPUT.PUT_LINE('Error in analyzing '||v_tbl_to_load||' table');
      RAISE ALL_EXCEPTIONS;
    END IF;
    DBMS_OUTPUT.PUT_LINE('Table '||v_tbl_to_load||' analyzed OK...' || systimestamp);


v_prcs_step:='Validating the data...';

   DBMS_OUTPUT.put_line ('Validating the data loaded...');

   v_sql_str:= ' SELECT COUNT (*) '
        ||' FROM (SELECT SUM (s.grs_sls_extnd) grs_sls_extnd, SUM (s.unfrm_qty_ship) unfrm_qty_ship FROM xdmadm.sales_corp s, xdmadm.pim_corp p, '
        ||' XDMADM.DIV_CORP DIV WHERE 1=1 AND nvl(s.SLS_REVENUE_DIV_NBR,s.div_nbr) = div.DIV_NBR and div.div_typ_cd <> ''CC'' and NVL (div.acqstn_cmpny_nm,''USF'') = ''USF''  AND s.prcs_dt BETWEEN '''||v_prd_strt_dt ||''' AND '''|| v_prd_end_dt
        ||''' AND XFER_TO_DT is null '
        || 'AND p.pim_sk = s.pim_sk
                      AND p.pim_suprcls_id NOT IN
                               (SELECT   param_value_nbr
                                  FROM   xdmadm.param_value
                                 WHERE   app_name =
                                            ''FN_CUST_MRCH_NTL_AVG_LOAD''
                                         AND param_type = ''PIM_SUPRCLS_ID'')'
        ||' MINUS '
        ||' SELECT SUM (s.grs_sls_extnd) grs_sls_extnd, SUM (s.unfrm_qty_ship) unfrm_qty_ship FROM '|| v_tbl_owner||'.'||v_tbl_to_load||' s)';

    dbms_output.put_line('SQL for Validation is:  '||  v_sql_str);

    EXECUTE IMMEDIATE v_sql_str INTO v_cnt;

   IF v_cnt <> 0
   THEN
      DBMS_OUTPUT.PUT_LINE ('***** Validation failed !! *****');
      DBMS_OUTPUT.PUT_LINE ('Please validate the data loaded against the data in XDMADM.SALES_CORP table for the Period '|| v_last_fisc_yr_mth);
      DBMS_OUTPUT.PUT_LINE('Please see below the details: ');
      SELECT SUM (s.grs_sls_extnd) grs_sls_extnd, SUM (s.unfrm_qty_ship) unfrm_qty_ship
      INTO v_grs_sls_extnd, v_unfrm_qty_ship
      FROM xdmadm.sales_corp s, xdmadm.pim_corp p, XDMADM.DIV_CORP DIV
      WHERE 1=1
                      AND nvl(s.SLS_REVENUE_DIV_NBR,s.div_nbr) = div.DIV_NBR and div.div_typ_cd <> 'CC' and NVL (div.acqstn_cmpny_nm,'USF') = 'USF'
                      AND s.prcs_dt BETWEEN v_prd_strt_dt  AND v_prd_end_dt
      AND XFER_TO_DT is null
      AND p.pim_sk = s.pim_sk
                      AND p.pim_suprcls_id NOT IN
                               (SELECT   param_value_nbr
                                  FROM   xdmadm.param_value
                                 WHERE   app_name = 'FN_CUST_MRCH_NTL_AVG_LOAD'
                                         AND param_type = 'PIM_SUPRCLS_ID');

       dbms_output.put_line('Table XDMADM.Sales_CORP');
      dbms_output.put_line('GRS_SLS_EXTND: '||v_grs_sls_extnd||'  UNFRM_QTY_SHIP: '||v_unfrm_qty_ship);

      EXECUTE IMMEDIATE ' SELECT SUM (grs_sls_extnd) grs_sls_extnd, SUM (unfrm_qty_ship) unfrm_qty_ship FROM '||v_tbl_to_load
        INTO   v_grs_sls_extnd, v_unfrm_qty_ship;
       dbms_output.put_line('Table '||v_tbl_to_load);
      dbms_output.put_line('GRS_SLS_EXTND: '||v_grs_sls_extnd||'  UNFRM_QTY_SHIP: '||v_unfrm_qty_ship);

      RETURN 1;
   END IF;

   DBMS_OUTPUT.put_line ('Data validated successfully.');

   DBMS_OUTPUT.PUT_LINE ('Calling XDMADM.FN_CRT_SYNONYM function to recreate the synonym to point to the newly built table '|| v_tbl_to_load);
   -- Recreate the synonym to point to the newly built table
   v_ret_val :=
      XDMADM.FN_CRT_SYNONYM (v_syn_nm, 'XDMADM', v_tbl_to_load);

   IF v_ret_val <> 0
   THEN
      DBMS_OUTPUT.PUT_LINE ('Error in calling XDMADM.FN_CRT_SYNONYM function');
      RETURN 1;
   END IF;

   -- Update SYN_TBL_MAP to mark the newly built table as active, and mark the other table as inactive
   DBMS_OUTPUT.PUT_LINE ('Updating SYN_TBL_MAP table to mark the newly built table as active and mark the other table as inactive');

   ---Update SYN_TBL_MAP to mark the active table as inactive
   UPDATE ctladm.syn_tbl_map
      SET actv_ind = 'N',
      last_updt=sysdate
    WHERE synonym_nm = v_syn_nm AND actv_ind = 'Y';

   ---Update SYN_TBL_MAP to mark the newly built table as active
   UPDATE ctladm.syn_tbl_map
      SET actv_ind = 'Y',
      last_updt=sysdate
    WHERE tbl_nm = v_tbl_to_load;

   COMMIT;

   --Truncate the now inactive table

   SELECT tbl_nm
     INTO v_tbl_inactv
     FROM ctladm.syn_tbl_map
    WHERE synonym_nm = v_syn_nm AND actv_ind = 'N';

--******************************************************************************
--* Truncating the inactive Table      *
--******************************************************************************
    DBMS_OUTPUT.put_line ('Truncating the inactive table ' || v_tbl_inactv);
    v_prcs_step := 'Truncating '||v_tbl_inactv ||' Table';
    v_trunc_ret := USFDBA.TABLE_PKG.TRUNCATE_TABLE(v_out_msg, 'XDMADM',v_tbl_inactv);
    DBMS_OUTPUT.PUT_LINE(v_out_msg);
    IF v_trunc_ret != 0 THEN
        DBMS_OUTPUT.PUT_LINE('Error in Truncating '||v_tbl_inactv||' table');
        RAISE ALL_EXCEPTIONS;
    END IF;


    ---Update fact_load_stat table
    v_prcs_step:= 'Updating fact_load_stat table';

    DBMS_OUTPUT.PUT_LINE ('Updating xdmadm.fact_load_stat table ...');

    UPDATE  xdmadm.fact_load_stat
    SET latest_prcs_dt =v_prd_end_dt,
    div_load_stat = 1,
    div_load_ts = sysdate,
    prcs_dt = v_odate
    WHERE fact_table ='SALES_SUMM_CUST_MRCH' ;
    COMMIT;

   RETURN 0;
EXCEPTION
      WHEN ALL_EXCEPTIONS
      THEN
         ROLLBACK;
         DBMS_OUTPUT.put_line ('error raised at step:');
         DBMS_OUTPUT.put_line ('******'||v_prcs_step);
         RETURN 1;
      WHEN OTHERS
      THEN
          ROLLBACK;
         DBMS_OUTPUT.put_line ('ERROR:' || SQLCODE || ',' || SQLERRM);
         DBMS_OUTPUT.PUT_LINE(       v_prcs_nm
                            ||' - '||v_prcs_step
                            ||' - '||v_prcs_pram);
         RETURN 2;
END FN_SALES_SUMM_CUST_MRCH_LOAD;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_CUST_AVG_PNTRTN_RATE_LOAD" (ODATE IN VARCHAR2)
   RETURN NUMBER IS
 /***********************************************************************
   * Name: fn_cust_avg_pntrtn_rate_load
   * Type: Function
   * Description: This function loads the fn_CUST_AVG_PNTRTN_RATE_load table in XDMADM.
   *  REVISIONS:
   *  Ver    Date(dd/mm/yyyy)  Author                Description
   *  -----  ----------        ---------------      ------------------------------------
   *  1.0    11/30/2015        Madhu Veerapaneni    Created this procedure.
   ************************************************************************/

   l_fn_start                       DATE;
   v_cust_corp_cnt                  NUMBER := 0;
   v_cust_avg_pntrtn_rate_cnt       NUMBER := 0;
   l_load_tbl_cnt                   NUMBER := 0;
   l_return_code                    NUMBER := 0;
   l_object_nm                      VARCHAR2(30);
   l_out_msg                        VARCHAR2(256);
   v_out_msg                        VARCHAR2(256);
   l_load_tbl_nm                    VARCHAR2(30);

   c_success                 CONSTANT NUMBER := 0;
   c_error                   CONSTANT NUMBER := 1;
   c_schema                  CONSTANT VARCHAR2(30) := 'XDMADM';
   c_aggr_tbl_syn_nm         CONSTANT VARCHAR2(30) := 'CUST_AVG_PNTRTN_RATE';
   c_aggr_load_syn_nm        CONSTANT VARCHAR2(30) := 'CUST_AVG_PNTRTN_RATE_LOAD';

   v_prd_strt_dt               DATE;
   v_prd_end_dt                DATE;
   v_param_value               NUMBER;
   v_fisc_yr_mth               VARCHAR2 (8 Byte);
   v_12_mth_ago                VARCHAR2 (8 Byte);
   v_odate                     DATE := TO_DATE (odate, 'YYYYMMDD');
   p_param_type                VARCHAR2(32767);

   all_exceptions exception; /*User Define Exception*/
   e_truncate_table exception;
   e_analyze_table exception;
   e_syn exception;
   e_swap_table exception;

BEGIN

 select max(clndr_dt) INTO v_prd_end_dt from xdmadm.time_corp where fisc_yr_mth in (
    SELECT MAX (a.fisc_yr_mth)
      FROM xdmadm.time_corp a
     WHERE a.fisc_yr_mth < (SELECT a.fisc_yr_mth
                              FROM xdmadm.time_corp a
                             WHERE a.clndr_dt = TRUNC (v_odate)));

  DBMS_OUTPUT.put_line('End Date: '||v_prd_end_dt);

   select min(clndr_dt)
   into  v_prd_strt_dt
     from xdmadm.time_corp
    where fisc_yr_mth in
              (select  fisc_yr_mth - 100 as "12_Mth_Ago"
                 from   xdmadm.time_corp
                 where  clndr_dt = trunc(v_odate));

 DBMS_OUTPUT.put_line('Start Date: '||v_prd_strt_dt);

   SELECT   param_value_nbr
   INTO   v_param_value
   FROM   xdmadm.param_value
 WHERE   app_name = 'SALES_COVERAGE_MMA'
     AND param_type ='DEFAULT_PNTRTN_RATE';

  SELECT param_type
  INTO   p_param_type
  FROM xdmadm.param_value
  WHERE APP_NAME = 'ALL' and param_code like 'CUST_AVG_PNTRTN_RATE';

---- **************** Truncate the table before load  **************** -----

   EXECUTE IMMEDIATE 'SELECT table_name FROM user_synonyms WHERE synonym_name = ''' || c_aggr_load_syn_nm || ''''
      INTO l_load_tbl_nm;

-- Check if the main synonym is pointing to the load table to be loaded and raise exception

   IF (c_aggr_tbl_syn_nm = l_load_tbl_nm) THEN
      RAISE e_syn;
   END IF;

      --Check if data exists in aggregate table and truncate if so
   EXECUTE IMMEDIATE 'SELECT count(1) FROM ' || l_load_tbl_nm INTO l_load_tbl_cnt;

   IF (l_load_tbl_cnt > 0) THEN
      DBMS_OUTPUT.put_line('Load aggregate table has ' || l_load_tbl_nm || ' records in it');

      l_return_code   := usfdba.table_pkg.truncate_table(l_out_msg, c_schema, l_load_tbl_nm);

      DBMS_OUTPUT.put_line('Truncate table Return: ' || l_return_code || ' - ' || l_out_msg);

      IF (l_return_code <> 0) THEN
         l_object_nm   := l_load_tbl_nm;
         RAISE e_truncate_table;
      END IF;

      DBMS_OUTPUT.put_line('Load aggregate table ' || l_load_tbl_nm ||' truncated');

   END IF;

   ---- ************* End Truncate the table before load  **************** -----

   ---- ************* Load the Cust Pyramid Aggregate table ************* -----

    l_fn_start       := SYSDATE;


INSERT INTO xdmadm.CUST_AVG_PNTRTN_RATE_LOAD (MENU_TYP_CD,
                                              GRS_SLS_EXTND,
                                              MP_FOOD_BVRG_DSPSBL_PRCH,
                                              AVG_PNTRTN_RATE)
   WITH chd_ptnl
          AS (SELECT   c.menu_typ_cd,
                       c.cust_nbr,
                       c.div_nbr,
                       mp_food_bvrg_dspsbl_prch
                FROM   xdmadm.CUST_CORP c, xdmadm.CUST_MKTPLUS_CORP m
               WHERE       c.cust_nbr = m.cust_nbr
                       AND c.div_nbr = m.div_nbr
                       AND m.mp_food_bvrg_dspsbl_prch > 0
                       AND m.curr_ind = 'Y'
                       AND c.cust_natl_mngd_flg = 'L'),
       sales
          AS (  SELECT   m.div_nbr,
                         m.cust_nbr,
                         SUM (s.grs_sls_extnd) grs_sls_extnd
                  FROM   chd_ptnl m, xdmadm.sales_corp s, xdmadm.DIV_CORP div
                 WHERE       m.cust_nbr = s.cust_nbr
                         AND m.div_nbr = s.div_nbr
                         AND s.prcs_dt BETWEEN v_prd_strt_dt AND v_prd_end_dt
                         AND s.xfer_to_dt IS NULL
                         AND NVL (s.sls_revenue_div_nbr, s.div_nbr) =
                               div.div_nbr
                         AND div.div_typ_cd <> 'CC' ---  change to exclude CC divisions
                         AND NVL (div.acqstn_cmpny_nm, 'USF') = 'USF'
              GROUP BY   m.div_nbr, m.cust_nbr)
   SELECT
            menu_typ_cd,
            grs_sls_extnd,
            MP_FOOD_BVRG_DSPSBL_PRCH,
            CASE WHEN AVG_PNTRT_RATE > 1 THEN 1 ELSE AVG_PNTRT_RATE END AS AVG_PNTRT_RATE
     FROM   (  SELECT
                        c.menu_typ_cd,
                        SUM (p.grs_sls_extnd) GRS_SLS_EXTND,
                        SUM (c.MP_FOOD_BVRG_DSPSBL_PRCH) AS MP_FOOD_BVRG_DSPSBL_PRCH,
                        NVL (SUM (p.grs_sls_extnd) / SUM (c.MP_FOOD_BVRG_DSPSBL_PRCH), v_param_value )
                           AS AVG_PNTRT_RATE
                 FROM   sales p, chd_ptnl c
                WHERE       p.cust_nbr = c.cust_nbr
                        AND p.div_nbr = c.div_nbr
                        AND p.grs_sls_extnd > 0
             GROUP BY   c.menu_typ_cd);

      DBMS_OUTPUT.put_line(
         'Inserted ' || sql%ROWCOUNT || ' rows in ' || TO_CHAR(ROUND((SYSDATE - l_fn_start) * 86400)) || ' seconds');

      COMMIT;

  --Analyze TABLE

   DBMS_OUTPUT.put_line('Analyze the Load aggregate table ' || l_load_tbl_nm);
   l_return_code    := xdmadm.fn_getstat_tbl(c_schema, l_load_tbl_nm);

   IF (l_return_code <> 0) THEN
      l_object_nm   := l_load_tbl_nm;
      RAISE e_analyze_table;
   END IF;

 -- Validation before SYN swap


    SELECT count(1) INTO v_cust_avg_pntrtn_rate_cnt FROM xdmadm.CUST_AVG_PNTRTN_RATE_LOAD ;

    DBMS_OUTPUT.put_line(v_cust_avg_pntrtn_rate_cnt || ' ' || 'Rows Inserted into CUST_AVG_PNTRTN_RATE_LOAD');

    DBMS_OUTPUT.put_line('Validate the Load aggregate table has records');

   IF  v_cust_avg_pntrtn_rate_cnt > 0 THEN

   l_return_code    := XDMADM.FN_SYN_SWAP ( P_PARAM_TYPE, v_odate );

   IF (l_return_code <> 0) THEN
       l_object_nm   := l_load_tbl_nm;
      RAISE e_swap_table;
   ELSE
       DBMS_OUTPUT.put_line('The Load aggregate table SYN swap is completed');
   END IF;

  ELSE
  DBMS_OUTPUT.put_line('The Load aggregate table has no records and the SYN swap will not be performed');

  END IF;


RETURN 0;
  --Change 1.3  Return 1 if analyze table fails.
EXCEPTION
   WHEN e_syn THEN
      DBMS_OUTPUT.put_line(
         'Synonym currently points to Load table: ' || c_aggr_load_syn_nm || '. Requires manual update.');
      DBMS_OUTPUT.put_line('Verify the ' ||c_aggr_load_syn_nm|| ' and ' ||c_aggr_load_syn_nm|| ' synonyms');
      RETURN pkg_sls_pyr.c_error;
   WHEN e_truncate_table THEN
      DBMS_OUTPUT.put_line('Error Truncating Table: ' || l_load_tbl_nm || '. Requires manual update.');
      DBMS_OUTPUT.put_line('Verify '||l_load_tbl_nm||' table has any records');
      DBMS_OUTPUT.put_line(l_out_msg);
      RETURN pkg_sls_pyr.c_error;
   WHEN e_analyze_table THEN
      DBMS_OUTPUT.put_line('Error Analyzing Table: ' || l_load_tbl_nm || '. Requires manual update.');
      DBMS_OUTPUT.put_line(l_out_msg);
      RETURN pkg_sls_pyr.c_error;
   WHEN e_swap_table THEN
      DBMS_OUTPUT.put_line('Synonym swap has failed');
      DBMS_OUTPUT.put_line(l_out_msg);
      RETURN pkg_sls_pyr.c_error;
   WHEN OTHERS THEN
      DBMS_OUTPUT.put_line('Error in XDMADM.fn_cust_avg_pntrtn_rate_load:' || SQLCODE || ' ' || SQLERRM);
      RETURN 1;
END;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_AOP_TYPE_CORP_VPD" (p_schema       IN VARCHAR2,
                                                  p_objname      IN VARCHAR2)
   RETURN VARCHAR2 AS
   /***********************************************************************
   * Name: FN_AOP_TYPE_CORP_VPD
   * Type: Function
   * Description: VPD Function to only include AOP Type of CORP from Corpaop_pyr_wk.
   *
   *  REVISIONS:
   *  Ver        Date        Author           Description
   *  ---------  ----------  ---------------  ------------------------------------
   *  1.0        09/01/2011  Matt Nicol       Created this function
   ************************************************************************/
   c_start                CONSTANT NUMBER := DBMS_UTILITY.get_time;
   c_fn_nm                CONSTANT VARCHAR2(30) := 'FN_AOP_TYPE_CORP_VPD';
   l_security_predicate   VARCHAR2(4000) DEFAULT NULL;
   l_cur_sql              VARCHAR2(4000) := SYS_CONTEXT('USERENV', 'CURRENT_SQL');
   l_sbjct_area           VARCHAR2(100) := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_sbjct_area_attr);
   l_vpd_exempt           VARCHAR2(1) := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_exempt_attr);
BEGIN
   --If no subject area context is set then return predicate filtering all data
   IF l_sbjct_area IS NULL THEN
      l_security_predicate   := '1=2';
      ctladm.pkg_vpd_debug_util.vpd_debug('NO SA',
                                          c_fn_nm,
                                          USER,
                                          p_schema,
                                          p_objname,
                                          l_sbjct_area,
                                          l_vpd_exempt,
                                          NULL,
                                          l_cur_sql,
                                          l_security_predicate,
                                          (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   -- Check if user is exempt based on current subject area context
   -- If so, return predicate without any filter
   IF l_vpd_exempt = 'Y' THEN
      l_security_predicate   := '1=1';
      ctladm.pkg_vpd_debug_util.vpd_debug('EXEMPT',
                                          c_fn_nm,
                                          USER,
                                          p_schema,
                                          p_objname,
                                          l_sbjct_area,
                                          l_vpd_exempt,
                                          NULL,
                                          l_cur_sql,
                                          l_security_predicate,
                                          (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   l_security_predicate   := 'AOP_TYPE = ''CORP''';
   ctladm.pkg_vpd_debug_util.vpd_debug('CORP AOP',
                                       c_fn_nm,
                                       USER,
                                       p_schema,
                                       p_objname,
                                       l_sbjct_area,
                                       l_vpd_exempt,
                                       NULL,
                                       l_cur_sql,
                                       l_security_predicate,
                                       (DBMS_UTILITY.get_time - c_start) / 100);

   RETURN l_security_predicate;
EXCEPTION
   WHEN OTHERS THEN
      l_security_predicate   := '1=3';
      ctladm.pkg_vpd_debug_util.vpd_debug(SQLCODE || '-' || SQLERRM,
                                          c_fn_nm,
                                          USER,
                                          p_schema,
                                          p_objname,
                                          l_sbjct_area,
                                          l_vpd_exempt,
                                          NULL,
                                          l_cur_sql,
                                          l_security_predicate,
                                          (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
END FN_AOP_TYPE_CORP_VPD;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_GET_FISC_TIME" (p_clndr_dt     IN DATE,
                          p_timeframe    IN VARCHAR2,
                          p_remove_prev_on_last_day IN VARCHAR2 DEFAULT 'N')
   RETURN VARCHAR2
   DETERMINISTIC IS
   l_fisc_yr_wk            VARCHAR2(6 BYTE);
   l_fisc_yr_mth           VARCHAR2(6 BYTE);
   l_fisc_yr               VARCHAR2(4 BYTE);
   l_prev_fisc_yr_wk       VARCHAR2(6 BYTE);
   l_prev_fisc_wk_yr_mth   VARCHAR2(6 BYTE);
   l_prev_fisc_yr_mth      VARCHAR2(6 BYTE);
   l_prev_fisc_yr          VARCHAR2(4 BYTE);
   l_last_dt_mth           DATE;
   l_timeframe             VARCHAR2(30) := p_timeframe;
BEGIN
  -- If flag is Y and saturday the change prev to cur
   IF (p_remove_prev_on_last_day = 'Y')
  AND (TO_CHAR(p_clndr_dt, 'D') = 7)
  AND (l_timeframe IN ('PREV_WK', 'PREV_YR_WK')) THEN
      l_timeframe   := 'YR_WK';
   END IF;

  -- If flag is Y and last day in period the change prev to cur
   IF (p_remove_prev_on_last_day = 'Y')
  AND (l_timeframe IN ('PREV_MTH', 'PREV_YR_MTH')) THEN
      SELECT MAX(clndr_dt)
        INTO l_last_dt_mth
        FROM xdmadm.time_corp
       WHERE fisc_yr_mth = (SELECT fisc_yr_mth
                              FROM xdmadm.time_corp
                             WHERE clndr_dt = p_clndr_dt);

      IF (p_clndr_dt = l_last_dt_mth) THEN
         l_timeframe   := 'YR_MTH';
      END IF;
   END IF;

   IF (l_timeframe LIKE 'PREV%') THEN
      SELECT fisc_yr_wkago, DECODE(fisc_mth_of_yr, 1, (fisc_yr - 1) || '12', fisc_yr || fisc_mth_of_yr - 1), fisc_yr - 1
        INTO l_prev_fisc_yr_wk, l_prev_fisc_yr_mth, l_prev_fisc_yr
        FROM wkly_time_corp
       WHERE p_clndr_dt BETWEEN clndr_wk_strt_dt AND clndr_wk_end_dt;

      IF l_timeframe = 'PREV_WK_YR_MTH' THEN
         SELECT fisc_yr_mth
           INTO l_prev_fisc_wk_yr_mth
           FROM wkly_time_corp
          WHERE fisc_yr_wk = l_prev_fisc_yr_wk;

         RETURN l_prev_fisc_wk_yr_mth;
      ELSIF l_timeframe IN ('PREV_WK', 'PREV_YR_WK') THEN
         RETURN l_prev_fisc_yr_wk;
      ELSIF l_timeframe IN ('PREV_MTH', 'PREV_YR_MTH') THEN
         RETURN l_prev_fisc_yr_mth;
      ELSIF l_timeframe = 'PREV_YR' THEN
         RETURN l_prev_fisc_yr;
      END IF;
   ELSE
      SELECT fisc_yr_wk, fisc_yr_mth, fisc_yr
        INTO l_fisc_yr_wk, l_fisc_yr_mth, l_fisc_yr
        FROM time_corp
       WHERE TRUNC(clndr_dt) = TRUNC(p_clndr_dt);

      IF l_timeframe IN ('WK', 'YR_WK') THEN
         RETURN l_fisc_yr_wk;
      ELSIF l_timeframe IN ('MTH', 'YR_MTH') THEN
         RETURN l_fisc_yr_mth;
      ELSIF l_timeframe = 'YR' THEN
         RETURN l_fisc_yr;
      END IF;
   END IF;
END fn_get_fisc_time;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_CUST_CORP_AGGR_LOAD"
   RETURN NUMBER IS
   /***********************************************************************
   * Name: FN_CUST_CORP_AGGR_LOAD
   * Type: Function
   * Description: This function loads the CUST_CORP_AGGR table in XDMADM.
   *  REVISIONS:
   *  Ver        Date        Author           Description
   *  ---------  ----------  ---------------  ------------------------------------
   *  1.0        04/29/2011  Corrie Kaczmarek Created this procedure.
   *  1.2        06/24/2011  Matt Nicol       Added code to handle null values
   *  1.3        07/07/2011  Matt Nicol       Use copr mu map instead of desc from cust
   ************************************************************************/
   v_out_msg                VARCHAR2(256);
   v_table_owner            VARCHAR2(40) := 'XDMADM'; /*-- hardcoded value*/
   v_table_name             VARCHAR2(40) := 'CUST_CORP_AGGR'; /*-- hardcoded value*/
   v_truncate_tbl           NUMBER(3);
   v_prcs_stp               VARCHAR(100);
   cust_corp_aggr_tbl_cnt   NUMBER := 0;

   all_exceptions exception; /*User Define Exception*/
BEGIN
   DBMS_OUTPUT.put_line('Truncating/Deleting records from CUST_CORP_AGGR');
   v_truncate_tbl   := usfdba.table_pkg.truncate_table(v_out_msg, v_table_owner, v_table_name);
   DBMS_OUTPUT.put_line(v_out_msg);

   IF v_truncate_tbl != 0 THEN
      DBMS_OUTPUT.put_line('Error in Truncating the ' || v_table_name || ' table');
      RAISE all_exceptions;
   END IF;

   DBMS_OUTPUT.put_line('XDMADM.CUST_CORP_AGGR table truncated successfully');

   DBMS_OUTPUT.put_line('Inserting Rows into CUST_CORP_AGGR');

   INSERT INTO cust_corp_aggr(acct_typ_cd, acct_typ_desc, corp_mlt_unit_nbr, corp_mlt_unit_desc, trd_cls, trd_cls_desc, prnt_mlt_unit_cd, prnt_mlt_unit_desc)
      SELECT DISTINCT NVL(a.acct_typ_cd, '-9') acct_typ_cd, a.acct_typ_desc,
                      NVL(a.corp_mlt_unit_nbr, '-99') corp_mlt_unit_nbr, cm.corp_mlt_unit_desc,
                      NVL(a.trd_cls, 'U') trd_cls, CASE a.trd_cls
                                                      WHEN '1' THEN 'Trade'
                                                      WHEN '2' THEN 'Vendor'
                                                      WHEN '3' THEN 'Employee'
                                                      WHEN '4' THEN 'Other Non Trade'
                                                      WHEN 'U' THEN 'UNKNOWN'
                                                      ELSE 'UNKNOWN'
                                                   END
                                                      AS trd_cls_desc, NVL(a.prnt_mlt_unit_cd, '-99') prnt_mlt_unit_cd,
                      pm.prnt_mlt_unit_desc
        FROM xdmadm.cust_corp a, corp_mu_map cm, prnt_mlt_unit_map pm
       WHERE a.corp_mlt_unit_nbr = cm.corp_mlt_unit_nbr(+)
         AND a.prnt_mlt_unit_cd = pm.prnt_mlt_unit_cd(+);

   SELECT COUNT(1) INTO cust_corp_aggr_tbl_cnt FROM cust_corp_aggr;

   DBMS_OUTPUT.put_line(cust_corp_aggr_tbl_cnt || ' ' || 'Rows Inserted into CUST_CORP_AGGR');

   COMMIT;
   RETURN 0;
EXCEPTION
   WHEN OTHERS THEN
      DBMS_OUTPUT.put_line('Error in XDMADM.CUST_CORP_AGGR:' || SQLCODE || ' ' || SQLERRM);
      RETURN 1;
END fn_cust_corp_aggr_load;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_DOLLARS_BY_PYR_SEG_LOAD_WK" (p_in_odate IN VARCHAR2)
   RETURN NUMBER IS
   /******************************************************************************
     NAME: XDMADM.FN_DOLLARS_BY_PYR_SEG_LOAD_WK
     TYPE: Function
     USAGE:XDMADM.FN_DOLLARS_BY_PYR_SEG_LOAD_WK (P_IN_ODATE )

     PURPOSE:  Function Inserts the  into DOLLARS_BY_PYR_SEG_WK

     REVISIONS:
     Ver        Date                    Description
     ---------  --------------------------------------------------

     1.         07/14/2014              Initial Development

    ******************************************************************************/

   /***************************
   * Variables declaration    *
   ****************************/



   v_const          NUMBER := 2;
   v_end_dt         DATE;
   v_strt_dt        DATE;
   v_odate          DATE := TO_DATE(p_in_odate, 'YYYYMMDD');
   v_prcs_stp       VARCHAR2(2000);
   v_ldr_tm         NUMBER(20);
   v_out_msg        VARCHAR2(256);

   v_dba_func_msg   VARCHAR2(2000) := 'oXo';
   dml_err_cnt      NUMBER;

   l_start          NUMBER;
   l_end            NUMBER;
   v_table_owner    VARCHAR2(40) := 'XDMADM'; /*-- hardcoded value*/
   v_table_name1    VARCHAR2(40) := 'DOLLARS_BY_PYR_SEG_WK'; /*-- hardcoded value*/
BEGIN
   --******************************************************************************
   --* INSERT INTO XDMADM.DOLLARS_BY_PYR_SEG                                 *
   --******************************************************************************
   BEGIN
      v_prcs_stp   := 'INSERT INTO table starts ';
      l_start      := DBMS_UTILITY.get_time;

      DBMS_OUTPUT.put_line('TIME ' || TO_CHAR(SYSDATE, 'yyyymmdd hh24:mi:ss'));

                   INSERT /*+ append */
                         INTO  xdmadm.dollars_by_pyr_seg_wk(sls_div_nbr, brnch_cd, div_nbr, fisc_yr, fisc_mth_of_yr, fisc_wk_of_prd,
                                                            pyr_seg_cd, gl_acct_cd, cust_acctblty_flg, cust_natl_mngd_flg, grs_sls_extnd, dwa_cost_extnd,
                                                            natl_one_tm, natl_prom_alwnc_pgms, loc_mrktng_alwnc_pgms, loc_one_tm, loc_prom_alwnc_pgms, natl_mrktng_alwnc_pgms,
                                                            rbt_loc_accrl_amt, rbt_natl_accrl_amt, rbt_loc_exp_amt, rbt_natl_exp_amt, loc_int_dvt, loc_vndr_fnd_dvt,
                                                            natl_int_dvt, natl_vndr_fnd_dvt, ttl_ac, ldr_tm)
         SELECT *
           FROM (WITH x1 AS (  SELECT sls_div_nbr,
                                      div_nbr,
                                      fisc_yr,
                                      fisc_mth_of_yr,
                                      fisc_wk_of_prd,
                                      pyr_seg_cd,
                                      gl_acct_cd,
                                      cust_acctblty_flg,
                                      cust_natl_mngd_flg,
                                      SUM(NVL(grs_sls_extnd, 0)) grs_sls_extnd,
                                      SUM(NVL(dwa_cost_extnd, 0)) dwa_cost_extnd,
                                      SUM(NVL(natl_one_tm, 0)) natl_one_tm,
                                      SUM(NVL(natl_prom_alwnc_pgms, 0)) natl_prom_alwnc_pgms,
                                      SUM(NVL(loc_mrktng_alwnc_pgms, 0)) loc_mrktng_alwnc_pgms,
                                      SUM(NVL(loc_one_tm, 0)) loc_one_tm,
                                      SUM(NVL(loc_prom_alwnc_pgms, 0)) loc_prom_alwnc_pgms,
                                      SUM(NVL(natl_mrktng_alwnc_pgms, 0)) natl_mrktng_alwnc_pgms,
                                      SUM(NVL(rbt_loc_accrl_amt, 0)) rbt_loc_accrl_amt,
                                      SUM(NVL(rbt_natl_accrl_amt, 0)) rbt_natl_accrl_amt,
                                      SUM(NVL(rbt_loc_exp_amt, 0)) rbt_loc_exp_amt,
                                      SUM(NVL(rbt_natl_exp_amt, 0)) rbt_natl_exp_amt,
                                      SUM(loc_int_dvt) loc_int_dvt,
                                      SUM(loc_vndr_fnd_dvt) loc_vndr_fnd_dvt,
                                      SUM(natl_int_dvt) natl_int_dvt,
                                      SUM(natl_vndr_fnd_dvt) natl_vndr_fnd_dvt,
                                      SUM(ttl_ac) ttl_ac,
                                      ldr_tm
                                 FROM cases_and_dollars_temp_wk
                             GROUP BY sls_div_nbr,
                                      div_nbr,
                                      fisc_yr,
                                      fisc_mth_of_yr,
                                      fisc_wk_of_prd,
                                      pyr_seg_cd,
                                      gl_acct_cd,
                                      cust_acctblty_flg,
                                      cust_natl_mngd_flg,
                                      ldr_tm),
                     d1 AS (SELECT div_nbr, brnch_cd FROM xdmadm.div_corp)
                 SELECT x1.sls_div_nbr,
                        d1.brnch_cd,
                        x1.div_nbr,
                        x1.fisc_yr,
                        x1.fisc_mth_of_yr,
                        x1.fisc_wk_of_prd,
                        x1.pyr_seg_cd,
                        x1.gl_acct_cd,
                        x1.cust_acctblty_flg,
                        x1.cust_natl_mngd_flg,
                        x1.grs_sls_extnd,
                        x1.dwa_cost_extnd,
                        x1.natl_one_tm,
                        x1.natl_prom_alwnc_pgms,
                        x1.loc_mrktng_alwnc_pgms,
                        x1.loc_one_tm,
                        x1.loc_prom_alwnc_pgms,
                        x1.natl_mrktng_alwnc_pgms,
                        x1.rbt_loc_accrl_amt,
                        x1.rbt_natl_accrl_amt,
                        x1.rbt_loc_exp_amt,
                        x1.rbt_natl_exp_amt,
                        x1.loc_int_dvt,
                        x1.loc_vndr_fnd_dvt,
                        x1.natl_int_dvt,
                        x1.natl_vndr_fnd_dvt,
                        x1.ttl_ac,
                        x1.ldr_tm
                   FROM x1, d1
                  WHERE x1.sls_div_nbr = d1.div_nbr);

      l_end        := DBMS_UTILITY.get_time;

      DBMS_OUTPUT.put_line('NO OF ROWS INSERTED:' || sql%ROWCOUNT);

      DBMS_OUTPUT.put_line(ROUND((l_end - l_start) / 100, 2) || ' seconds...');
      COMMIT;
      RETURN 0;
   EXCEPTION
      WHEN OTHERS THEN
         DBMS_OUTPUT.put_line('Error in v_prcs_stp:' || v_prcs_stp || SQLCODE || SQLERRM);

         RETURN 701;
   END;
--******************************************************************************
--* Exception Handling                                                         *
--******************************************************************************

EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      DBMS_OUTPUT.put_line(SQLCODE);
      DBMS_OUTPUT.put_line(SQLERRM);

      DBMS_OUTPUT.put_line('Error in function FN_DOLLARS_BY_PYR_SEG_LOAD_WK');
      RETURN 600;
END fn_dollars_by_pyr_seg_load_wk;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_DIV_ALL_VPD" (p_schema       IN VARCHAR2,
                                                 p_objname      IN VARCHAR2)
   RETURN VARCHAR2 AS
   /***********************************************************************
   * Name: FN_DIV_ALL_VPD
   * Type: Function
   * Description: VPD Function to include all divisions.
   *  REVISIONS:
   *  Ver        Date        Author           Description
   *  ---------  ----------  ---------------  ------------------------------------
   *  1.0        11/21/2011  Matt Nicol       Created this function
   ************************************************************************/
   c_start                CONSTANT NUMBER := DBMS_UTILITY.get_time;
   c_fn_nm                CONSTANT VARCHAR2(30) := 'FN_DIV_ALL_VPD';
   l_security_predicate   VARCHAR2(4000) DEFAULT NULL;
   l_cur_sql              VARCHAR2(4000) := SYS_CONTEXT('USERENV', 'CURRENT_SQL');
   l_sbjct_area VARCHAR2(100)
         := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_sbjct_area_attr);
   l_vpd_exempt VARCHAR2(1)
         := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_exempt_attr);
   l_all_divs VARCHAR2(1)
         := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_alldivs_attr);


BEGIN
   --If no subject area context is set then return predicate filtering all data

   IF l_sbjct_area IS NULL THEN
      l_security_predicate   := '1=2';
      ctladm.pkg_vpd_debug_util.vpd_debug('NO SA', c_fn_nm, USER, p_schema, p_objname, l_sbjct_area, l_vpd_exempt,
      l_all_divs, l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   l_security_predicate   := '1=1';
   ctladm.pkg_vpd_debug_util.vpd_debug('ALL DIVS', c_fn_nm, USER, p_schema, p_objname, l_sbjct_area, l_vpd_exempt,
   l_all_divs, l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

   RETURN l_security_predicate;
EXCEPTION
   WHEN OTHERS THEN
      l_security_predicate   := '1=2';
      ctladm.pkg_vpd_debug_util.vpd_debug(SQLCODE || '-' || SQLERRM, c_fn_nm, USER, p_schema, p_objname, l_sbjct_area,
      l_vpd_exempt, NULL, l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
END fn_div_all_vpd;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_SAME_DAY_LOAD_VPD" (p_schema       IN VARCHAR2,
                              p_objname      IN VARCHAR2)
   RETURN VARCHAR2 AS
   /***********************************************************************
   * Name: FN_SAME_DAY_LOAD_VPD
   * Type: Function
   * Description: VPD Function to exclude sales data based on when the divisions
   *              that the user has access to were last loaded.
   *  REVISIONS:
   *  Ver        Date        Author           Description
   *  ---------  ----------  ---------------  ------------------------------------
   *  1.0        09/01/2011  Matt Nicol       Created this function
   *  1.0        04/30/2013  Matt Nicol       Added additional exclusion for STK and SPC divs
   ************************************************************************/

   c_start                CONSTANT NUMBER := sys.DBMS_UTILITY.get_time;
   c_fn_nm                CONSTANT VARCHAR2(30) := 'FN_SAME_DAY_LOAD_VPD';
   l_security_predicate   VARCHAR2(4000) DEFAULT NULL;
   l_cur_sql              VARCHAR2(4000) := SYS_CONTEXT('USERENV', 'CURRENT_SQL');
   l_sbjct_area           VARCHAR2(100) := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_sbjct_area_attr);
   l_vpd_exempt           VARCHAR2(1) := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_exempt_attr);
   l_all_divs             VARCHAR2(1) := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_alldivs_attr);
   l_spcl_hndling         VARCHAR2(20);
   l_usr_div_date         VARCHAR2(20);
   l_stmt_no              NUMBER := 0;
   l_div_count            NUMBER := 0;
   l_div_nbr              NUMBER := 0;
   l_first                BOOLEAN := TRUE;
BEGIN
   --If no subject area context is set then return predicate filtering all data

   IF l_sbjct_area IS NULL THEN
      l_security_predicate   := '1=2';
      ctladm.pkg_vpd_debug_util.vpd_debug('NO SA',
                                          c_fn_nm,
                                          USER,
                                          p_schema,
                                          p_objname,
                                          l_sbjct_area,
                                          l_vpd_exempt,
                                          l_all_divs,
                                          l_cur_sql,
                                          l_security_predicate,
                                          (sys.DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   -- Check if user is exempt based on current subject area context
   -- If so, return predicate without any filter

   IF l_vpd_exempt = 'Y' THEN
      l_security_predicate   := '1=1';
      ctladm.pkg_vpd_debug_util.vpd_debug('EXEMPT',
                                          c_fn_nm,
                                          USER,
                                          p_schema,
                                          p_objname,
                                          l_sbjct_area,
                                          l_vpd_exempt,
                                          l_all_divs,
                                          l_cur_sql,
                                          l_security_predicate,
                                          (sys.DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   -- Check if user has all division access based on current subject area context
   -- If so, determine look for earliest date a division is not loaded
   -- Otherwise, look for date only in the divisions the user has access to

   IF l_all_divs = 'Y' THEN
      SELECT TO_CHAR(MIN(div_load_ts), 'YYYYMMDDHH24MISS')
        INTO l_usr_div_date
        FROM xdmadm.fact_load_stat f, xdmadm.div_corp d
       WHERE div_load_stat = 0
         AND fact_table = 'SALES_CORP'
         AND f.div_nbr = d.div_nbr
         AND fact_typ_cd = 'RG'
         AND d.div_typ_cd NOT IN ('CC', 'STK', 'SPC'); -- Added STK and SPC 4/30/13

      IF l_usr_div_date IS NOT NULL THEN
         l_security_predicate   :=
               'TO_DATE(to_char(NVL(ORIG_LDR_TM,LDR_TM)),''YYYYMMDDHH24MISS'') <  TO_DATE('''
            || l_usr_div_date
            || ''',''YYYYMMDDHH24MISS'')';
         ctladm.pkg_vpd_debug_util.vpd_debug('ALL DIVS NO SAME DAY',
                                             c_fn_nm,
                                             USER,
                                             p_schema,
                                             p_objname,
                                             l_sbjct_area,
                                             l_vpd_exempt,
                                             l_all_divs,
                                             l_cur_sql,
                                             l_security_predicate,
                                             (sys.DBMS_UTILITY.get_time - c_start) / 100);

         RETURN l_security_predicate;
      ELSE
         l_security_predicate   := '1=1';
         ctladm.pkg_vpd_debug_util.vpd_debug('ALL DIVS SAME DAY',
                                             c_fn_nm,
                                             USER,
                                             p_schema,
                                             p_objname,
                                             l_sbjct_area,
                                             l_vpd_exempt,
                                             l_all_divs,
                                             l_cur_sql,
                                             l_security_predicate,
                                             (sys.DBMS_UTILITY.get_time - c_start) / 100);

         RETURN l_security_predicate;
      END IF;
   END IF;

   SELECT TO_CHAR(MIN(fls.div_load_ts), 'YYYYMMDDHH24MISS')
     INTO l_usr_div_date
     FROM xdmadm.fact_load_stat fls, ctladm.vw_usr_to_div utd, xdmadm.div_corp d
    WHERE fls.div_nbr = utd.div_nbr
      AND fls.div_nbr = d.div_nbr
      AND utd.sbjct_area IN (l_sbjct_area, 'ALL')
      AND UPPER(utd.usr_nm) = USER
      AND fls.div_load_stat = 0
      AND fls.fact_table = 'SALES_CORP'
      AND fls.fact_typ_cd = 'RG'
      AND d.div_typ_cd NOT IN ('CC', 'STK', 'SPC'); -- Added STK and SPC 4/30/13

   IF l_usr_div_date IS NOT NULL THEN
      l_security_predicate   :=
            'TO_DATE(to_char(NVL(ORIG_LDR_TM,LDR_TM)),''YYYYMMDDHH24MISS'') <  TO_DATE('''
         || l_usr_div_date
         || ''',''YYYYMMDDHH24MISS'')';
      ctladm.pkg_vpd_debug_util.vpd_debug('USR DIVS NO SAME DAY',
                                          c_fn_nm,
                                          USER,
                                          p_schema,
                                          p_objname,
                                          l_sbjct_area,
                                          l_vpd_exempt,
                                          l_all_divs,
                                          l_cur_sql,
                                          l_security_predicate,
                                          (sys.DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   ELSE
      l_security_predicate   := '1=1';
      ctladm.pkg_vpd_debug_util.vpd_debug('USR DIVS SAME DAY',
                                          c_fn_nm,
                                          USER,
                                          p_schema,
                                          p_objname,
                                          l_sbjct_area,
                                          l_vpd_exempt,
                                          l_all_divs,
                                          l_cur_sql,
                                          l_security_predicate,
                                          (sys.DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;
EXCEPTION
   WHEN OTHERS THEN
      l_security_predicate   := '1=3';
      ctladm.pkg_vpd_debug_util.vpd_debug(SQLCODE || '-' || SQLERRM,
                                          c_fn_nm,
                                          USER,
                                          p_schema,
                                          p_objname,
                                          l_sbjct_area,
                                          l_vpd_exempt,
                                          l_all_divs,
                                          l_cur_sql,
                                          l_security_predicate,
                                          (sys.DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
END fn_same_day_load_vpd;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_FWB_MDL_UPDT" (p_odate varchar2,p_abort_flg in char)
return number as


/****************************************************************************************************************************
   NAME: XDMADM.FN_FWB_MDL_UPDT
   TYPE: Function
   USAGE:XDMADM.FN_FWB_MDL_UPDT (p_odate,p_abort_flg)

   PURPOSE:   This function is used to update data in the XDMADM.FWB_MDL table.



        REVISIONS:
        Ver        Date        Author           Description
        ---------  ----------  ---------------  -------------------------------------------------------------------
        1.0        06/10/2011   Greg Gaynes      1. Created this procedure.
        1.1        06/23/2011   Greg Gaynes      1. Added outer join to Pct cursor queries
                                                 2. Changing group by to div_nbr, prch_from_vndr_nbr
                                                    in the calculation for div_by_vndr_prod_nbr_pct
                                                 3. If DLR_REMNG_AMT < 0 then setting to 0.
                                                 4. Added ABS( ) around (new_lic-old_lic)
        1.2        06/30/2011  Greg Gaynes       1. Adding logic for 'Reval' process
                                                 2. Modifying logic for 'Inventory Gain' logic
                                                    (removed update to set the status in the fwb_mdl table).
                                                 3. Modifying logic for both Percent calculations

        1.21        06/30/2011  Vikas Wadhwa     1. Modified extraction and calculation queries for PCT columns
                                                    (Added subqueries and changed partitioning to calculation percentages accurately)
        1.3        7/21/2011   Barbara Resendiz  1.  Modified color coding logic for the COV Fix.
                                                     (Removed any reference -comment or code - to the PIM_CORP table since it's no
                                                      longer needed for color coding.
                                                      Added the CMPNY_VNDR_NBR column to be used for the color coding.
                                                      note:The CMPNY_VNDR_NBR column is sourced and validated during the Apex process
                                                      in staging.)

        1.4        08/04/2011  Vikas Wadhwa     1. Modified Update function to look at PO_STAT and PO_CNFRM_ON_TM flags when setting


        1.5        09/12/2011  Vikas Wadhwa     1. Modified to remove overused sysout logs via dbms.put_line
                                                2. Modified to ensure only inact_dt = null records are updated.
                                                3. Added OR case to update fwb_last_updt_dt when it is currently null
                                                4. Change update of FWB_LAST_UPDT_DT to SYSDATE rather than ODATE
                                                5. Updated header comments for correct input tables to this function

        1.51       09/20/2011  Corrie Kaczmarek 1. Modified ctladm.fact_div_load_stat to xdmadm.fact_load_stat

        1.6        11/04/2011  Vikas Wadhwa     1. Modified Main Cursor to pull PIM_USF_STD_PROD_CD from prod_corp first.

        1.61       11/13/2011  Vikas Wadhwa     1. Modified Main Cursor to partition the FWB_MDL_BRIDGE join to include FWB_CYC_ID
        ---------  ----------  ---------------  ------------------------------------

        2.0        09/16/2011  Vikas Wadhwa     1. Cleaned up comments and code and updated for Release 2 of Forward Buy

        2.1        10/18/2011  Vikas Wadhwa     1. Added a WITH clause to main cursor to create Open Order aggregations for DEALS

        2.2        10/18/2011  Vikas Wadhwa     1. Cleaned code to conform to names/parameters of XDMADM.FN_FWB_MDL_BRIDGE_LOAD
                                                2. Updated the check on FACT_LOAD_STAT to include a check of XDMADM.PARAM_VALUE
                                                   so that tables that do not load every day will have a check of lastest_prcs_dt
                                                   that corresponds the the last usual run.
                                                3. Added filter to check that fstat.fact_typ_cd = 'RG' on FACT_LOAD_STAT received
                                                4. Change error handling to only have 1 BEGIN/END block with exceptions below.
                                                   There were errors being caught and the process moved forward, we want an entire
                                                   rollback for any errors.


        2.3        10/18/2011  Vikas Wadhwa     1. Updated Main cursor to only look for deal quantities that end AFTER odate
                                                2. Updated Main cursor to keep the gain flag = 'Y' and calculate captured
                                                   for DEALS every day until the deal ends.


        2.41        10/26/2011  Vikas Wadhwa     1. Updated Main cursor to use the RCVD_QTY field from received POs as the basis
                                                   for QOH for deals, rather than TTL_QTY_ORD

        2.42        10/26/2011  Vikas Wadhwa     1. Added section to update XDMADM.FWB_LAST_UPDT_DT based on divisional load
                `                                  status for POs and Inventory


        2.43        10/26/2011  Vikas Wadhwa     1. Removed FWB_CYC_ID from the DIV_BY_VNDR_PCT and DIV_BY_VNDR_PROD_NBR_PCT calculations
                `                               2. Removed PRCH_FROM_VNDR_NBR from main cursor update logic

        2.5        11/02/2011  Vikas Wadhwa     1. Changed DIV_BY_VNDR_PCT and DIV_BY_VNDR_PROD_NBR_PCT calculations to bulk cursor fetches
                                                   since cursor has taken up to 20x longer with production realistic data
                `                               2. Removed EFF_DT from the DIV_BY_VNDR_PCT and DIV_BY_VNDR_PROD_NBR_PCT calculations
                                                3. Changed DLR_REMNG_AMT calculation in main cursor to use TRGT_CASE_ON_HND for Deals rather
                                                   than week logic.


        2.51        11/02/2011  Vikas Wadhwa     1. Changed DIV_BY_VNDR_PCT and DIV_BY_VNDR_PROD_NBR_PCT calculations to a MERGE
                                                   since cursor has taken up to 20x longer with production realistic data
                                                 2. Updated Main Cursor to pull PIM_USF_STD_PROD_CD from PROD_CORP rather than inventory

        2.52        11/04/2011  Vikas Wadhwa     1. Changed DIV_BY_VNDR_PCT and DIV_BY_VNDR_PROD_NBR_PCT calculations to not ignore
                                                    products that have gone into GAIN, only products past their effective date.

        2.6         11/10/2011  Vikas Wadhwa     1. Changed DIV_BY_VNDR_PCT and DIV_BY_VNDR_PROD_NBR_PCT calculations to
                                                    populate values with 101 when working with a reval complete product.

        2.61        11/11/2011  Vikas Wadhwa     1. Changed DIV_BY_VNDR_PCT and DIV_BY_VNDR_PROD_NBR_PCT calculations to
                                                    use V_ODATE < BUILD_END_DT rather than <=

        2.62        11/16/2011  Vikas Wadhwa     1. Changed DIV_BY_VNDR_PCT calculations to only update a vendor to 101 if there are
                                                    no qualifying products within the vendor (i.e. only if all products in a vendor
                                                    are NOT in gain or are all DEALS.)

        2.63        11/16/2011  Leela            1. Bugfix: Fix calculation for fwb_crnt_opn_on_ord_qty, fwb_crnt_cnfrm_opn_ord_qty and fwb_crnt_on_hnd_net_qty


   Input Tables :  XDMADM.FWB_MDL
                   XDMADM.FWB_MDL_BRIDGE
                   XDMADM.INVNTY_TRK_CORP_DLY
                   XDMADM.OPO_CORP
                   XDMADM.TIME_CORP
                   XDMADM.FACT_LOAD_STAT
                   XDMADM.PARAM_VALUE

   Output Tables:  XDMADM.FWB_MDL



   The runs:
   Run #1 the p_abort_flg = 'N'
   Run #2 the p_abort_flg = 'Y' since this indicates the fact load status
   may have failed from the End of Day process to reset the flags.
   The parameter, p_abort_flg := 'Y'



   Outputs a success message upon updating rows into a table or error message on failure


   ERROR HANDLING:
   WHEN an error occurs, error message is displayed by SQLERRM function and return 1.



   p_odate VARCHAR2(8) :='20110921';
   p_abort_flg CHAR(1) :='N';

****************************************************************************************************************************/


    CON_PROCESS_NAME   CONSTANT VARCHAR2(40) := 'FN_FWB_MDL_UPDT';
    CON_PRRTY_SEVERE   CONSTANT INTEGER := 1;
    CON_PRRTY_WARN     CONSTANT INTEGER := 2;
    CON_PRRTY_INFO     CONSTANT INTEGER := 3;
    CON_PRRTY_DEBUG    CONSTANT INTEGER := 4;
    CON_ERR_LVL        CONSTANT INTEGER := 3;
    v_prcs_err_cd      NUMBER;
    v_prcs_err_msg     VARCHAR2(500);
    v_prcs_nm          VARCHAR2(30);
    v_prcs_stp         VARCHAR2(500);


    v_div_by_vndr_pct               xdmadm.fwb_mdl.div_by_vndr_pct%TYPE;
    v_div_by_vndr_prod_nbr_pct      xdmadm.fwb_mdl.div_by_vndr_prod_nbr_pct%TYPE;
    v_div_by_vndr_pct_ttl           NUMBER := 0;
    v_div_by_vndr_prod_nbr_pct_ttl  NUMBER := 0;

    v_fwb_mdl_rec                   xdmadm.fwb_mdl%rowtype;
    v_opo_corp_stat                 xdmadm.fact_load_stat.div_load_stat%TYPE;
    v_inv_stat                      xdmadm.fact_load_stat.div_load_stat%TYPE;
    v_cursor_rowcount               NUMBER := 0;
    v_updt_process                  NUMBER := 0;
    v_div_pct                       NUMBER := 0;
    v_div_pct_display               VARCHAR2(30);

    v_odate                         date := to_date(p_odate,'yyyymmdd');

    v_gain_end_days                 NUMBER;
    v_reval_ship_dt_null_days       NUMBER;

    v_opo_corp_schedule             VARCHAR2(3);
    v_po_corp_schedule              VARCHAR2(3);
    v_inventory_schedule            VARCHAR2(3);


BEGIN


    /*****************************************************************************************************
    ** Populate PARAM_VALUE values for this function
    ******************************************************************************************************/
    dbms_output.put_line(' ');
    v_prcs_stp := 'Populating forward buy values from the xdmadm.PARAM_VALUE table';
    dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||v_prcs_stp);


       -- R2
       SELECT param_code
       INTO v_gain_end_days
       FROM xdmadm.param_value
       WHERE app_name = 'FORWARD_BUY'
       AND param_type = 'GAIN_END_DAYS';

       -- R2
       SELECT param_code
       INTO v_reval_ship_dt_null_days
       FROM xdmadm.param_value
       WHERE app_name = 'FORWARD_BUY'
       AND param_type = 'REVAL_SHIP_DT_NULL_DAYS';

       -- R2
       SELECT param_code
       INTO v_opo_corp_schedule
       FROM xdmadm.param_value
       WHERE app_name = 'FORWARD_BUY'
       AND param_type = 'OPO_CORP_SCHEDULE';

       -- R2
       SELECT param_code
       INTO v_po_corp_schedule
       FROM xdmadm.param_value
       WHERE app_name = 'FORWARD_BUY'
       AND param_type = 'PO_CORP_SCHEDULE';

       -- R2
       SELECT param_code
       INTO v_inventory_schedule
       FROM xdmadm.param_value
       WHERE app_name = 'FORWARD_BUY'
       AND param_type = 'INVENTORY_SCHEDULE';



        /****************************************************************************************************
        ** This function runs twice per day. If there is nothing to process the first run (abort_flag = 'N')
        ** this program exits without error. If there is nothing to process the second time,
        ** (abort flag ='Y') then the program raises an error and aborts.
        ** The inventory and Open PO's run earlier thus the timestamp check for the same day.
        *****************************************************************************************************/

        v_prcs_stp := 'Checking Open PO and Inventory Status';
        dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||v_prcs_stp);

        -- Changed for R2
        -- Added latest_prcs_dt to WHERE clause
        -- Added CASE statements to handle process not running every day
        SELECT div_load_stat
          INTO v_opo_corp_stat
          FROM xdmadm.fact_load_stat
         WHERE fact_table = 'OPO_CORP'
           AND ROWNUM = 1
           AND TRUNC(latest_prcs_dt) = CASE
                                          WHEN v_opo_corp_schedule = '1-7'
                                             THEN v_odate
                                          WHEN v_opo_corp_schedule = '1-6'
                                             THEN CASE WHEN TO_CHAR(v_odate,'D') = 7 THEN v_odate - 1
                                                  ELSE v_odate END
                                          WHEN v_opo_corp_schedule = '2-6'
                                             THEN CASE WHEN TO_CHAR(v_odate,'D') = 6 THEN v_odate - 1
                                                       WHEN TO_CHAR(v_odate,'D') = 7 THEN v_odate - 2
                                                  ELSE v_odate END
                                       ELSE v_odate
                                       END;



        -- Changed for R2
        -- Added latest_prcs_dt to WHERE clause
        -- Added CASE statements to handle process not running every day
        SELECT div_load_stat
          INTO v_inv_stat
          FROM xdmadm.fact_load_stat
         WHERE fact_table = 'INVNTY_TRK_CORP_DLY'
           AND ROWNUM = 1
           AND TRUNC(latest_prcs_dt) = CASE
                                          WHEN v_inventory_schedule = '1-7'
                                             THEN v_odate
                                          WHEN v_inventory_schedule = '1-6'
                                             THEN CASE WHEN TO_CHAR(v_odate,'D') = 7 THEN v_odate - 1
                                                  ELSE v_odate END
                                          WHEN v_inventory_schedule = '2-6'
                                             THEN CASE WHEN TO_CHAR(v_odate,'D') = 6 THEN v_odate - 1
                                                       WHEN TO_CHAR(v_odate,'D') = 7 THEN v_odate - 2
                                                  ELSE v_odate END
                                       ELSE v_odate
                                       END;

        dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'     Open PO status is '||v_opo_corp_stat);
        dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'     Inventory status is '||v_inv_stat);


    /****************************************************************************************************
    ** Proceed only if OPO_CORP and INVNTY_TRK_CORP_DLY have finished for ODATE
    *****************************************************************************************************/
    IF (v_opo_corp_stat > 0 AND v_inv_stat > 0) then


        /*********************************************************
        ** Freeze old records using GAIN_END_DAYS days parameter
        **********************************************************/

        v_prcs_stp :=  'Freezing old records';
        dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||v_prcs_stp);

        UPDATE XDMADM.fwb_mdl
           SET fwb_frz_ind = 'Y'
          WHERE build_end_dt < (v_odate - v_gain_end_days)
        AND NVL(fwb_frz_ind,'N') != 'Y';

        v_prcs_stp := '     Freezing Completed Successfully:  '||SQL%ROWCOUNT||' rows frozen';
        dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||v_prcs_stp);




        /*********************************************************
        ** Define and populate Main Cursor
        **********************************************************/
        v_prcs_stp := 'Starting FWB_MDL Update Main cursor';
        dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||v_prcs_stp);

        FOR c_fwb_mdl_updt IN
        (

         WITH inv_deals AS
                (
                   SELECT opo_sub_q.div_nbr,
                       opo_sub_q.prod_nbr,
                       opo_sub_q.build_end_dt,
                       opo_sub_q.fwb_cyc_id,
                       opo_sub_q.fwb_crnt_opn_on_ord_qty,
                       opo_sub_q.fwb_crnt_cnfrm_opn_ord_qty,
                       po_sub_q.fwb_crnt_on_hnd_net_qty
                   FROM
                (SELECT
                       mdl_deals.div_nbr,
                       mdl_deals.prod_nbr,
                       mdl_deals.build_end_dt,
                       mdl_deals.fwb_cyc_id,
                       SUM(DECODE(opo.po_cnfrm_ind, 'N', opo.ttl_qty_ord, 0))   fwb_crnt_opn_on_ord_qty,
                       SUM(DECODE(opo.po_cnfrm_ind, 'Y', opo.cnfrm_qty_ord, 0)) fwb_crnt_cnfrm_opn_ord_qty

                    FROM xdmadm.fwb_mdl mdl_deals

                    LEFT OUTER JOIN xdmadm.opo_corp opo
                      ON mdl_deals.div_nbr = opo.div_nbr
                     AND mdl_deals.prod_nbr = opo.prod_nbr
                     AND mdl_deals.fwb_cyc_typ = 'DEALS'
                     AND (

                              (
                                    mdl_deals.ord_typ = 'ORDER DATE'
                                AND opo.ord_dt BETWEEN mdl_deals.build_strt_dt AND mdl_deals.build_end_dt
                              )

                            OR
                              (     (mdl_deals.ord_typ = 'REQUESTED DELIVERY DATE' OR mdl_deals.ord_typ='SCHEDULED DELIVERY DATE')
                                AND opo.arvl_dt BETWEEN mdl_deals.build_strt_dt AND mdl_deals.build_end_dt
                              )

                            OR (  mdl_deals.ord_typ = 'SHIP DATE'
                                  AND NVL(opo.ship_dt, opo.ord_dt + v_reval_ship_dt_null_days)
                                      BETWEEN mdl_deals.build_strt_dt AND mdl_deals.build_end_dt
                                )
                         )
                     WHERE
                         mdl_deals.fwb_cyc_typ = 'DEALS'
                     AND mdl_deals.inact_dt IS NULL
                     AND NVL(mdl_deals.fwb_frz_ind,'N') = 'N'
                     AND v_odate <= mdl_deals.build_end_dt
                     group by mdl_deals.div_nbr, mdl_deals.prod_nbr, mdl_deals.build_end_dt, mdl_deals.fwb_cyc_id) opo_sub_q
                LEFT OUTER JOIN
                    (SELECT
                       mdl_deals.div_nbr,
                       mdl_deals.prod_nbr,
                       mdl_deals.build_end_dt,
                       mdl_deals.fwb_cyc_id,
                       SUM(po.rcvd_qty) fwb_crnt_on_hnd_net_qty

                    FROM xdmadm.fwb_mdl mdl_deals

                    INNER JOIN xdmadm.po_corp po
                      ON mdl_deals.div_nbr = po.div_nbr
                     AND mdl_deals.prod_nbr = po.prod_nbr
                     AND po.po_rcvd_dt > v_odate - v_gain_end_days - v_reval_ship_dt_null_days
                     AND mdl_deals.fwb_cyc_typ = 'DEALS'
                     AND (

                              (
                                    mdl_deals.ord_typ = 'ORDER DATE'
                                AND po.ord_dt BETWEEN mdl_deals.build_strt_dt AND mdl_deals.build_end_dt
                              )


                            OR
                              (     (mdl_deals.ord_typ = 'REQUESTED DELIVERY DATE' OR mdl_deals.ord_typ='SCHEDULED DELIVERY DATE')
                                AND  po.arvl_dt BETWEEN mdl_deals.build_strt_dt AND mdl_deals.build_end_dt
                              )

                            OR (  mdl_deals.ord_typ = 'SHIP DATE'
                                  AND NVL(po.ship_dt, NVL(po.po_rcvd_dt, po.ord_dt + v_reval_ship_dt_null_days))
                                      BETWEEN mdl_deals.build_strt_dt AND mdl_deals.build_end_dt
                                )
                         )  -- R2

                   WHERE
                         mdl_deals.fwb_cyc_typ = 'DEALS'
                     AND mdl_deals.inact_dt IS NULL
                     AND NVL(mdl_deals.fwb_frz_ind,'N') = 'N'
                     AND v_odate <= mdl_deals.build_end_dt
                     AND po.rcvd_qty <> 0
                     group by mdl_deals.div_nbr, mdl_deals.prod_nbr, mdl_deals.build_end_dt, mdl_deals.fwb_cyc_id) po_sub_q
                   ON  opo_sub_q.div_nbr = po_sub_q.div_nbr
                       AND opo_sub_q.prod_nbr = po_sub_q.prod_nbr
                       AND opo_sub_q.build_end_dt = po_sub_q.build_end_dt
                       AND opo_sub_q.fwb_cyc_id = po_sub_q.fwb_cyc_id
          )
/*--Values calculated for fwb_crnt_opn_on_ord_qty, fwb_crnt_cnfrm_opn_ord_qty and fwb_crnt_on_hnd_net_qty are wrong
                   SELECT
                       mdl_deals.div_nbr,
                       mdl_deals.prod_nbr,
                       mdl_deals.build_end_dt,
                       mdl_deals.fwb_cyc_id,
                       SUM(DECODE(opo.po_cnfrm_ind, 'N', opo.ttl_qty_ord, 0))   fwb_crnt_opn_on_ord_qty,
                       SUM(DECODE(opo.po_cnfrm_ind, 'Y', opo.cnfrm_qty_ord, 0)) fwb_crnt_cnfrm_opn_ord_qty,
                       SUM(po.rcvd_qty) fwb_crnt_on_hnd_net_qty

                    FROM xdmadm.fwb_mdl mdl_deals

                    LEFT OUTER JOIN xdmadm.opo_corp opo
                      ON mdl_deals.div_nbr = opo.div_nbr
                     AND mdl_deals.prod_nbr = opo.prod_nbr
                     AND mdl_deals.fwb_cyc_typ = 'DEALS'
                     AND (

                              (
                                    mdl_deals.ord_typ = 'ORDER DATE'
                                AND opo.ord_dt BETWEEN mdl_deals.build_strt_dt AND mdl_deals.build_end_dt
                              )

                            OR
                              (     (mdl_deals.ord_typ = 'REQUESTED DELIVERY DATE' OR mdl_deals.ord_typ='SCHEDULED DELIVERY DATE')
                                AND opo.arvl_dt BETWEEN mdl_deals.build_strt_dt AND mdl_deals.build_end_dt
                              )

                            OR (  mdl_deals.ord_typ = 'SHIP DATE'
                                  AND NVL(opo.ship_dt, opo.ord_dt + v_reval_ship_dt_null_days)
                                      BETWEEN mdl_deals.build_strt_dt AND mdl_deals.build_end_dt
                                )
                         ) -- R2


                    LEFT OUTER JOIN xdmadm.po_corp po
                      ON mdl_deals.div_nbr = po.div_nbr
                     AND mdl_deals.prod_nbr = po.prod_nbr
                     AND po.po_rcvd_dt > v_odate - v_gain_end_days - v_reval_ship_dt_null_days
                     AND mdl_deals.fwb_cyc_typ = 'DEALS'
                     AND (

                              (
                                    mdl_deals.ord_typ = 'ORDER DATE'
                                AND po.ord_dt BETWEEN mdl_deals.build_strt_dt AND mdl_deals.build_end_dt
                              )


                            OR
                              (     (mdl_deals.ord_typ = 'REQUESTED DELIVERY DATE' OR mdl_deals.ord_typ='SCHEDULED DELIVERY DATE')
                                AND  po.arvl_dt BETWEEN mdl_deals.build_strt_dt AND mdl_deals.build_end_dt
                              )

                            OR (  mdl_deals.ord_typ = 'SHIP DATE'
                                  AND NVL(po.ship_dt, NVL(po.po_rcvd_dt, po.ord_dt + v_reval_ship_dt_null_days))
                                      BETWEEN mdl_deals.build_strt_dt AND mdl_deals.build_end_dt
                                )
                         ) -- R2

                   WHERE
                         mdl_deals.fwb_cyc_typ = 'DEALS'
                     AND mdl_deals.inact_dt IS NULL
                     AND NVL(mdl_deals.fwb_frz_ind,'N') = 'N'
                     AND v_odate <= mdl_deals.build_end_dt


                   group by mdl_deals.div_nbr, mdl_deals.prod_nbr, mdl_deals.build_end_dt, mdl_deals.fwb_cyc_id
*/


         SELECT
            mdl.eff_dt,
            mdl.build_end_dt,
            mdl.fwb_cyc_id,
            mdl.div_nbr,
            mdl.prod_nbr,
            mdl.new_lic,
            mdl.old_lic,
            NVL(prod.pim_usf_std_prod_cd, mdl.pim_usf_std_prod_cd) pim_usf_std_prod_cd,
            mdl.prch_from_vndr_nbr,
            mdl.lic_wed_actl_dt,
            mdl.lic_thu_actl_dt,
            mdl.fst_bus_dt_next_mth,
            NVL(mdl.fwb_frz_ind,'N') fwb_frz_ind,

            CASE
            WHEN NVL(fstat.fact_table, 'NO PO') = 'PO_CORP' AND NVL(inv.prod_nbr, 'NO ROW') <> 'NO ROW'
               THEN TRUNC(SYSDATE)
            ELSE mdl.fwb_last_updt_dt
            END fwb_last_updt_dt,


            CASE
                WHEN mdl.fwb_cyc_typ = 'DEALS'
                   THEN NVL(inv_deals.fwb_crnt_cnfrm_opn_ord_qty,NVL(mdl.fwb_crnt_cnfrm_opn_ord_qty,0))
            ELSE NVL(inv.fwb_crnt_cnfrm_opn_ord_qty,0)
            END fwb_crnt_cnfrm_opn_ord_qty ,

            CASE
                WHEN mdl.fwb_cyc_typ = 'DEALS'
                   THEN NVL(inv_deals.fwb_crnt_opn_on_ord_qty,NVL(mdl.fwb_crnt_opn_on_ord_qty,0))
            ELSE NVL(inv.fwb_crnt_opn_on_ord_qty,0)
            END fwb_crnt_opn_on_ord_qty ,


        -- Current on hand
            CASE
                WHEN mdl.fwb_cyc_typ = 'DEALS'
                   THEN NVL(inv_deals.fwb_crnt_on_hnd_net_qty, NVL(mdl.fwb_crnt_on_hnd_net_qty,0))
            ELSE
                    CASE
                      WHEN NVL(inv.qty_on_hnd_actl,0) - NVL(inv.RSRV_QTY,0) < 0
                        THEN 0
                      ELSE NVL(inv.qty_on_hnd_actl,0) - NVL(inv.RSRV_QTY,0)
                    END
           END fwb_crnt_on_hnd_net_qty,


        -- Dollar remaining
            CASE
                WHEN mdl.fwb_cyc_typ = 'DEALS'
                   THEN
                    (

                      mdl.trgt_case_on_hnd

                    -
                      (
                        NVL(inv_deals.fwb_crnt_on_hnd_net_qty,NVL(mdl.fwb_crnt_on_hnd_net_qty,0)) + NVL(inv_deals.fwb_crnt_cnfrm_opn_ord_qty,NVL(mdl.fwb_crnt_cnfrm_opn_ord_qty,0))
                      )
                    ) * ABS(mdl.new_lic - mdl.old_lic)

            ELSE
                    (
                      (
                       (NVL(mdl.trgt_wks_on_hnd,0) - 2) * NVL(mdl.strt_wkly_case_mvmnt,0)
                      )
                    -
                      (
                        NVL(inv.qty_on_hnd_actl,0) - NVL(inv.RSRV_QTY,0) + NVL(inv.fwb_crnt_cnfrm_opn_ord_qty,0)
                      )
                    ) * ABS(mdl.new_lic - mdl.old_lic)
            END dlr_remng_amt,


        -- Bridge table fields
            b.b_fwb_trans_typ fwb_trans_typ,

            NVL(
                  CASE
                  WHEN b.b_stat <> 'COMPLETE' AND b.b_fwb_trans_typ = 'PO_CORP'
                       THEN 'FORCED COMPLETE'
                  ELSE b.b_stat
                  END

                ,'NO PO'
               )  prod_nbr_po_stat,

            b.b_day_before_received,


        -- Inventory on the day before the PO was received
            CASE
              WHEN NVL(inv_received.qty_on_hnd_actl,0) - NVL(inv_received.RSRV_QTY,0) > 0
                THEN NVL(inv_received.qty_on_hnd_actl,0) - NVL(inv_received.RSRV_QTY,0)
              ELSE 0
            END  received_crnt_on_hnd_net_qty,


        -- Captured dollar amount based on inventory received the day before.
             CASE
               WHEN b.b_fwb_trans_typ = 'PO_CORP' AND (NVL(inv_received.qty_on_hnd_actl,0) - NVL(inv_received.RSRV_QTY,0)) > 0
                 THEN (NVL(inv_received.qty_on_hnd_actl,0) - NVL(inv_received.RSRV_QTY,0)) * ABS(mdl.new_lic - mdl.old_lic)
               WHEN mdl.fwb_cyc_typ = 'DEALS'
                 THEN (  NVL(inv_deals.fwb_crnt_on_hnd_net_qty   ,NVL(mdl.fwb_crnt_on_hnd_net_qty   ,0))
                       + NVL(inv_deals.fwb_crnt_cnfrm_opn_ord_qty,NVL(mdl.fwb_crnt_cnfrm_opn_ord_qty,0))
                      )  * ABS(mdl.new_lic - mdl.old_lic)
             ELSE NVL(mdl.captd_amt,0)
             END captd_amt,


        -- Set gain indicator to 'Y' when a PO has been received
            CASE
             WHEN mdl.fwb_cyc_typ = 'DEALS'
                THEN 'Y'
             WHEN b.b_fwb_trans_typ = 'PO_CORP'
                THEN 'Y'
             ELSE 'N'
            END fwb_invnty_gain_ind

         FROM
              xdmadm.fwb_mdl mdl

              JOIN xdmadm.prod_corp prod
                ON mdl.div_nbr = prod.div_nbr
               AND mdl.prod_nbr = prod.prod_nbr

              LEFT OUTER JOIN xdmadm.invnty_trk_corp_dly inv
                ON mdl.div_nbr = inv.div_nbr
               AND mdl.prod_nbr = inv.prod_nbr
               AND(
                        ( v_odate <= mdl.build_end_dt
                          AND inv.invnty_dt = v_odate
                        )
                    OR
                        ( v_odate > mdl.build_end_dt
                           AND inv.invnty_dt = mdl.build_end_dt
                        )
                  )

              JOIN xdmadm.fact_load_stat fstat
                ON mdl.div_nbr = fstat.div_nbr
               AND fstat.fact_table = 'PO_CORP'
               AND fstat.fact_typ_cd = 'RG'
               AND fstat.latest_prcs_dt = v_odate
               AND fstat.div_load_stat > 0

            /********************************************************************************
            ** Sub select is to fetch the status of a list of PO's for the division
            ** where:
            **     * if one of the po's is Received, the status will be updated to 'COMPLETE'
            **     * if there is one occurence of COMPLETE for all PO's of a div, prod, cyc, eff_dt
            **       , then RETURN COMPLETE
            **     * if all status' are INCOMPLETE, then RETURN INCOMPLETE
            **     * if a record is not RETURNed (reason for outer join), then RETURN
            **       'NO PO'
            ** Note: The subselect is orders trans_typ desc so Received appear before Open
            **  Then status is ordered ascending so COMPLETE are fetched before INCOMPLETE.
            **  Only the first record from the bridge table is RETURNed for the evaluation.
            *********************************************************************************/

            LEFT OUTER JOIN
            (

                         SELECT
                            brg.eff_dt  b_eff_dt,
                            brg.fwb_cyc_id b_fwb_cyc_id,
                            brg.fwb_trans_typ b_fwb_trans_typ,
                            brg.div_nbr   b_div_nbr,
                            brg.prod_nbr b_prod_nbr,
                            brg.po_stat  b_stat,
                            brg.day_before_received b_day_before_received,
                            brg.rn b_rn
                         FROM
                         (
                              SELECT
                                    fmb.fwb_cyc_id,
                                    fmb.fwb_trans_typ,
                                    fmb.div_nbr,
                                    fmb.prod_nbr,
                                    fmb.eff_dt,

                                    CASE
                                        WHEN (fmb.po_stat = 'COMPLETE' and fmb.po_cnfrm_on_tm = 'Y')
                                           THEN 'COMPLETE'
                                    ELSE 'INCOMPLETE'
                                    END po_stat,

                                    CASE
                                        WHEN fmb.PO_RCVD_DT = TO_DATE('01-JAN-1900', 'dd-mon-yyyy')
                                            THEN TO_DATE('01-JAN-1900', 'dd-mon-yyyy')
                                        ELSE fmb.PO_RCVD_DT - 1
                                    END day_before_received,

                                    row_number() OVER (PARTITION BY fmb.fwb_cyc_id, fmb.div_nbr, fmb.prod_nbr
                                                       ORDER BY fmb.fwb_trans_typ DESC, fmb.po_stat asc
                                                       )  RN

                               FROM xdmadm.fwb_mdl_bridge fmb
                          ) brg

                          WHERE brg.rn=1
             ) b

              ON mdl.div_nbr = b_div_nbr
             AND mdl.prod_nbr = b_prod_nbr
             AND mdl.fwb_cyc_id = b_fwb_cyc_id
             AND mdl.eff_dt = b_eff_dt
             AND mdl.fwb_cyc_typ <> 'DEALS'

            LEFT OUTER JOIN xdmadm.invnty_trk_corp_dly inv_received
              ON mdl.div_nbr = inv_received.div_nbr
             AND mdl.prod_nbr = inv_received.prod_nbr
             AND inv_received.invnty_dt = b.b_day_before_received

            -- R2
            LEFT OUTER JOIN inv_deals
              ON mdl.div_nbr = inv_deals.div_nbr
             AND mdl.prod_nbr = inv_deals.prod_nbr
             AND mdl.build_end_dt = inv_deals.build_end_dt
             AND mdl.fwb_cyc_id = inv_deals.fwb_cyc_id
             AND v_odate <= mdl.build_end_dt
             AND mdl.fwb_cyc_typ = 'DEALS'

         WHERE mdl.inact_dt IS NULL
           AND mdl.fwb_cyc_typ IN ('MONTHLY', 'DEALS')
           AND NVL(mdl.fwb_frz_ind,'N') = 'N'

           AND (   NVL(mdl.fwb_invnty_gain_ind,'N') = 'N'
                OR mdl.fwb_cyc_typ = 'DEALS'
               )

        )



    LOOP

        BEGIN

             -- Unique record identifiers
             v_fwb_mdl_rec.div_nbr := c_fwb_mdl_updt.div_nbr;
             v_fwb_mdl_rec.prod_nbr := c_fwb_mdl_updt.prod_nbr;
             v_fwb_mdl_rec.fwb_cyc_id := c_fwb_mdl_updt.fwb_cyc_id;
             v_fwb_mdl_rec.eff_dt := c_fwb_mdl_updt.eff_dt;
             v_fwb_mdl_rec.build_end_dt := c_fwb_mdl_updt.build_end_dt;

             -- Dimensional fields to be updated
             v_fwb_mdl_rec.pim_usf_std_prod_cd := c_fwb_mdl_updt.pim_usf_std_prod_cd;
             v_fwb_mdl_rec.prch_from_vndr_nbr := c_fwb_mdl_updt.prch_from_vndr_nbr;

             -- Status fields to be updated
             v_fwb_mdl_rec.fwb_invnty_gain_ind := c_fwb_mdl_updt.fwb_invnty_gain_ind;
             v_fwb_mdl_rec.prod_nbr_po_stat := c_fwb_mdl_updt.prod_nbr_po_stat;
             v_fwb_mdl_rec.fwb_last_updt_dt := c_fwb_mdl_updt.fwb_last_updt_dt;

             -- Calculated fields to be updated
             v_fwb_mdl_rec.fwb_crnt_cnfrm_opn_ord_qty := c_fwb_mdl_updt.fwb_crnt_cnfrm_opn_ord_qty;
             v_fwb_mdl_rec.fwb_crnt_opn_on_ord_qty := c_fwb_mdl_updt.fwb_crnt_opn_on_ord_qty;
             v_fwb_mdl_rec.fwb_crnt_on_hnd_net_qty := c_fwb_mdl_updt.fwb_crnt_on_hnd_net_qty;
             v_fwb_mdl_rec.captd_amt := c_fwb_mdl_updt.captd_amt;

             IF ( c_fwb_mdl_updt.dlr_remng_amt < 0 )
             THEN
                 v_fwb_mdl_rec.dlr_remng_amt := 0;
             ELSE
                 v_fwb_mdl_rec.dlr_remng_amt := c_fwb_mdl_updt.dlr_remng_amt;
             END IF;


            /* Debugging output for code testing
             dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'v_fwb_mdl_rec.pim_usf_std_prod_cd is '||v_fwb_mdl_rec.pim_usf_std_prod_cd );
             dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'v_fwb_mdl_rec.prch_from_vndr_nbr is '||v_fwb_mdl_rec.prch_from_vndr_nbr );
             dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'v_fwb_mdl_rec.eff_dt_mns_one is '||v_fwb_mdl_rec.eff_dt_mns_one );
             dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'v_fwb_mdl_rec.lic_wed_actl_dt is '||v_fwb_mdl_rec.lic_wed_actl_dt );
             dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'v_fwb_mdl_rec.lic_thu_actl_dt is '||v_fwb_mdl_rec.lic_thu_actl_dt );
             dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'v_fwb_mdl_rec.fst_bus_dt_next_mth is '||v_fwb_mdl_rec.fst_bus_dt_next_mth );
             dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'v_fwb_mdl_rec.captd_amt is '||v_fwb_mdl_rec.captd_amt );
             dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'v_fwb_mdl_rec.fwb_crnt_cnfrm_opn_ord_qty is '||v_fwb_mdl_rec.fwb_crnt_cnfrm_opn_ord_qty );
             dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'v_fwb_mdl_rec.fwb_crnt_opn_on_ord_qty is '||v_fwb_mdl_rec.fwb_crnt_opn_on_ord_qty );
             dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'v_fwb_mdl_rec.fwb_crnt_on_hnd_net_qty is '||v_fwb_mdl_rec.fwb_crnt_on_hnd_net_qty );
             dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'v_fwb_mdl_rec.dlr_remng_amt is '||v_fwb_mdl_rec.dlr_remng_amt );
             dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'v_fwb_mdl_rec.fwb_invnty_gain_ind is '||v_fwb_mdl_rec.fwb_invnty_gain_ind );
             dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'v_fwb_mdl_rec.prod_nbr_po_stat is '||v_fwb_mdl_rec.prod_nbr_po_stat );
             dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'v_fwb_mdl_rec.fwb_last_updt_dt is '||v_fwb_mdl_rec.fwb_last_updt_dt );
            */



             /*********************************************************
             ** Update XDMADM.FWB_MDL based on Main Cursor results
             **********************************************************/


             IF (v_odate <= v_fwb_mdl_rec.build_end_dt)
             THEN

                 v_prcs_stp := 'Updating CALCULATED quantities for a record that has an effective date in the FUTURE';

                 UPDATE xdmadm.fwb_mdl
                 SET
                      pim_usf_std_prod_cd            = v_fwb_mdl_rec.pim_usf_std_prod_cd
                     ,fwb_invnty_gain_ind            = v_fwb_mdl_rec.fwb_invnty_gain_ind
                     ,prod_nbr_po_stat               = v_fwb_mdl_rec.prod_nbr_po_stat
                     ,fwb_last_updt_dt               = v_fwb_mdl_rec.fwb_last_updt_dt
                     ,fwb_crnt_on_hnd_net_qty        = v_fwb_mdl_rec.fwb_crnt_on_hnd_net_qty
                     ,fwb_crnt_cnfrm_opn_ord_qty     = v_fwb_mdl_rec.fwb_crnt_cnfrm_opn_ord_qty
                     ,fwb_crnt_opn_on_ord_qty        = v_fwb_mdl_rec.fwb_crnt_opn_on_ord_qty
                     ,captd_amt                      = v_fwb_mdl_rec.captd_amt
                     ,dlr_remng_amt                  = v_fwb_mdl_rec.dlr_remng_amt

                 WHERE div_nbr = v_fwb_mdl_rec.div_nbr
                   AND prod_nbr = v_fwb_mdl_rec.prod_nbr
                   AND fwb_cyc_id = v_fwb_mdl_rec.fwb_cyc_id
                   AND build_end_dt = v_fwb_mdl_rec.build_end_dt;

                 v_updt_process := 1;



             ELSIF ( v_fwb_mdl_rec.build_end_dt < v_odate)
             THEN

                 v_prcs_stp := 'Updating attributes ONLY for records that have effective dates in the PAST';

                 UPDATE xdmadm.fwb_mdl
                 SET
                      pim_usf_std_prod_cd             = v_fwb_mdl_rec.pim_usf_std_prod_cd
                     ,fwb_invnty_gain_ind            = v_fwb_mdl_rec.fwb_invnty_gain_ind
                     ,prod_nbr_po_stat               = v_fwb_mdl_rec.prod_nbr_po_stat
                     ,captd_amt                      = v_fwb_mdl_rec.captd_amt
                     ,fwb_last_updt_dt               = v_fwb_mdl_rec.fwb_last_updt_dt

                 WHERE div_nbr = v_fwb_mdl_rec.div_nbr
                   AND prod_nbr = v_fwb_mdl_rec.prod_nbr
                   AND fwb_cyc_id = v_fwb_mdl_rec.fwb_cyc_id
                   AND build_end_dt = v_fwb_mdl_rec.build_end_dt;

                 v_updt_process := 1;


             ELSE
                 v_prcs_stp := 'FWB_MDL Update failed while comparing ODATE and BUILD_END_DT';
                 dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||v_prcs_stp);
                 dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'ODATE: '||v_odate);
                 dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'BUILD_END_DT: '||v_fwb_mdl_rec.build_end_dt);
                 dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'FWB_CYC_ID: '||v_fwb_mdl_rec.fwb_cyc_id);

                 RETURN 1;
             END IF;


             v_cursor_rowcount := v_cursor_rowcount + 1;

        EXCEPTION
        WHEN OTHERS THEN
                dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'*****GENERAL ERROR!*****');
                dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'ERROR IN STEP:  ' || v_prcs_stp);
                v_prcs_err_msg:= ' SQLERRM: '||Sqlerrm||' Sqlcode: '||SQLCODE;
                dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'Messages: '||v_prcs_err_msg);
                dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'ODATE: '||v_odate);
                dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'EFF_DT: '||v_fwb_mdl_rec.eff_dt);
                dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'BUILD_END_DT: '||v_fwb_mdl_rec.build_end_dt);
                dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'FWB_CYC_ID: '||v_fwb_mdl_rec.fwb_cyc_id);
                dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'DIV_NBR: '||v_fwb_mdl_rec.div_nbr);
                dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'PROD_NBR: '||v_fwb_mdl_rec.prod_nbr);
                ROLLBACK;
                RETURN 1;
        END;


    END LOOP;


    v_prcs_stp := '     Main cursor found:  '||v_cursor_rowcount||' rows updated';
    dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||v_prcs_stp);



                /*********************************************************
                ** Update XDMADM.FWB_MDL.DIV_BY_VNDR_PCT values
                **********************************************************/
                v_prcs_stp := 'Updating DIV_BY_VNDR_PCT';
                v_cursor_rowcount := 0;

                MERGE INTO xdmadm.fwb_mdl DEST

                USING
                (
                      SELECT
                          rt.div_nbr,
                          rt.fwb_cyc_typ,
                          rt.cmpny_vndr_nbr,
                          rt.div_ttl,
                          rt.dlr_remng_amt,
                          LAG(rt.running_sum, 1, 0 ) over (partition by rt.div_nbr, rt.fwb_cyc_typ order by rt.dlr_remng_amt desc) shifted_sum,
                          qualifier_count
                      FROM

                        (  SELECT mdl.div_nbr,
                                  mdl.fwb_cyc_typ,
                                  mdl.cmpny_vndr_nbr,
                                  mdl.dlr_remng_amt,
                                  mdl.div_ttl,
                                  sum(nvl(mdl.dlr_remng_amt,0)) over (partition by mdl.div_nbr, mdl.fwb_cyc_typ order by mdl.dlr_remng_amt desc) running_sum,
                                  qualifier_count
                             FROM
                                  (
                                  SELECT
                                      mdl.div_nbr,
                                      mdl.fwb_cyc_typ,
                                      mdl.cmpny_vndr_nbr,
                                      div_total.div_ttl,
                                      SUM(CASE WHEN mdl.fwb_invnty_gain_ind = 'Y' AND mdl.fwb_cyc_typ <> 'DEALS' THEN 0 ELSE mdl.dlr_remng_amt END) dlr_remng_amt,
                                      SUM(CASE WHEN mdl.fwb_invnty_gain_ind = 'N' OR mdl.fwb_cyc_typ = 'DEALS' THEN 1 ELSE 0 END) qualifier_count
                                  FROM xdmadm.fwb_mdl mdl

                                  JOIN
                                  (
                                      SELECT
                                             mdl_totals.div_nbr,
                                             mdl_totals.fwb_cyc_typ,
                                             SUM(CASE WHEN mdl_totals.fwb_invnty_gain_ind = 'Y' AND mdl_totals.fwb_cyc_typ <> 'DEALS' THEN 0 ELSE NVL(mdl_totals.dlr_remng_amt,0) END) div_ttl

                                        FROM xdmadm.fwb_mdl mdl_totals

                                       WHERE NVL(mdl_totals.fwb_frz_ind,'N') = 'N'
                                         AND mdl_totals.inact_dt is null
                                         AND v_odate < mdl_totals.build_end_dt
                                         AND mdl_totals.fwb_cyc_typ IN ('MONTHLY', 'DEALS')

                                      GROUP BY mdl_totals.div_nbr,
                                               mdl_totals.fwb_cyc_typ
                                  ) div_total

                                     ON mdl.div_nbr = div_total.div_nbr
                                    AND mdl.fwb_cyc_typ = div_total.fwb_cyc_typ

                                  WHERE NVL(mdl.fwb_frz_ind,'N') = 'N'
                                    AND mdl.inact_dt is null
                                    AND v_odate < mdl.build_end_dt

                                  GROUP BY mdl.div_nbr, mdl.fwb_cyc_typ, mdl.cmpny_vndr_nbr, div_total.div_ttl
                                  ORDER BY mdl.div_nbr, mdl.fwb_cyc_typ, sum(mdl.dlr_remng_amt) desc
                                  ) mdl
                         ) rt

                ) SRC

                on (
                    src.div_nbr = dest.div_nbr
                AND src.fwb_cyc_typ = dest.fwb_cyc_typ
                AND src.cmpny_vndr_nbr= dest.cmpny_vndr_nbr
                AND src.fwb_cyc_typ IN ('MONTHLY', 'DEALS')
                )

                WHEN MATCHED THEN UPDATE SET
                dest.div_by_vndr_pct = CASE WHEN src.qualifier_count = 0 AND dest.fwb_invnty_gain_ind = 'Y' AND dest.fwb_cyc_typ <> 'DEALS' THEN 101
                                       ELSE
                                            CASE
                                                WHEN src.div_ttl > 0
                                                    THEN (src.shifted_sum/src.div_ttl)*100
                                                ELSE 0
                                            END
                                       END;


                v_cursor_rowcount := SQL%ROWCOUNT;
                v_prcs_stp := '     div_by_vndr_pct:  '||v_cursor_rowcount||' rows updated';
                dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||v_prcs_stp);


                /*********************************************************
                ** Update XDMADM.FWB_MDL.DIV_BY_VNDR_PROD_NBR_PCT values
                **********************************************************/
                v_prcs_stp := 'Updating DIV_BY_VNDR_PROD_NBR_PCT';
                v_cursor_rowcount := 0;

                MERGE INTO xdmadm.fwb_mdl DEST

                USING
                (
                        SELECT rt.div_nbr,
                           rt.fwb_cyc_typ,
                           rt.cmpny_vndr_nbr,
                           rt.prod_nbr,
                           rt.div_vndr_ttl,
                           rt.dlr_remng_amt,
                           LAG(rt.Running_Sum, 1, 0 ) over (partition by rt.div_nbr, rt.fwb_cyc_typ, rt.cmpny_vndr_nbr order by rt.dlr_remng_amt desc) shifted_sum
                        FROM

                          (  SELECT mdl.div_nbr,
                                    mdl.fwb_cyc_typ,
                                    mdl.cmpny_vndr_nbr,
                                    mdl.prod_nbr,
                                    mdl.div_vndr_ttl,
                                    mdl.dlr_remng_amt,
                                    sum(nvl(mdl.dlr_remng_amt,0)) over (partition by mdl.div_nbr, mdl.fwb_cyc_typ, mdl.cmpny_vndr_nbr order by mdl.dlr_remng_amt desc) running_sum
                               FROM
                                    (
                                    SELECT
                                        mdl.div_nbr,
                                        mdl.fwb_cyc_typ,
                                        mdl.cmpny_vndr_nbr,
                                        mdl.prod_nbr,
                                        div_vendor_total.div_vndr_ttl,
                                        SUM(mdl.dlr_remng_amt) dlr_remng_amt
                                    FROM xdmadm.fwb_mdl mdl
                                    JOIN
                                       (
                                        SELECT mdl_totals.div_nbr,
                                               mdl_totals.fwb_cyc_typ,
                                               mdl_totals.cmpny_vndr_nbr,
                                               SUM(CASE WHEN mdl_totals.fwb_invnty_gain_ind = 'Y' AND mdl_totals.fwb_cyc_typ <> 'DEALS' THEN 0 ELSE  NVL(mdl_totals.dlr_remng_amt,0) END) div_vndr_ttl
                                          FROM xdmadm.fwb_mdl mdl_totals

                                         WHERE NVL(mdl_totals.fwb_frz_ind,'N') = 'N'
                                           AND mdl_totals.inact_dt is null
                                           AND v_odate < mdl_totals.build_end_dt

                                        GROUP BY mdl_totals.div_nbr,
                                                 mdl_totals.fwb_cyc_typ,
                                                 mdl_totals.cmpny_vndr_nbr
                                       ) div_vendor_total

                                    ON mdl.div_nbr = div_vendor_total.div_nbr
                                      AND mdl.cmpny_vndr_nbr = div_vendor_total.cmpny_vndr_nbr
                                      AND mdl.fwb_cyc_typ = div_vendor_total.fwb_cyc_typ

                                    WHERE NVL(mdl.fwb_frz_ind,'N') = 'N'
                                      AND mdl.inact_dt is null
                                      AND v_odate < mdl.build_end_dt

                                    GROUP BY mdl.div_nbr, mdl.fwb_cyc_typ, mdl.cmpny_vndr_nbr, mdl.prod_nbr, div_vendor_total.div_vndr_ttl
                                    ORDER BY mdl.div_nbr, mdl.fwb_cyc_typ, mdl.cmpny_vndr_nbr, sum(mdl.dlr_remng_amt) desc
                                  ) mdl
                          ) rt

                ) SRC

                on (
                    src.div_nbr = dest.div_nbr
                AND src.fwb_cyc_typ = dest.fwb_cyc_typ
                AND src.cmpny_vndr_nbr= dest.cmpny_vndr_nbr
                AND src.prod_nbr= dest.prod_nbr
                AND src.fwb_cyc_typ IN ('MONTHLY', 'DEALS')
                )

                WHEN MATCHED THEN UPDATE SET
                dest.div_by_vndr_prod_nbr_pct = CASE WHEN dest.fwb_invnty_gain_ind = 'Y' AND dest.fwb_cyc_typ <> 'DEALS' THEN 101
                                       ELSE
                                            CASE
                                                WHEN src.div_vndr_ttl > 0
                                                    THEN (src.shifted_sum/src.div_vndr_ttl)*100
                                                ELSE 0
                                            END
                                       END;

                v_cursor_rowcount := SQL%ROWCOUNT;

                v_prcs_stp := '     div_by_vndr_prod_nbr_pct:  '||v_cursor_rowcount||' rows updated';
                dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||v_prcs_stp);




                /*********************************************************
                ** Update XDMADM.FWB_LAST_UPDT_DT
                **********************************************************/
                v_prcs_stp := 'Updating FWB_LAST_UPDT_DT';

                UPDATE xdmadm.fwb_mdl
                SET fwb_last_updt_dt = trunc(SYSDATE)
                WHERE
                      div_nbr in
                               (
                                SELECT po.div_nbr

                                FROM xdmadm.fact_load_stat po

                                JOIN xdmadm.invnty_trk_corp_dly inv
                                  ON inv.div_nbr = po.div_nbr
                                 AND inv.invnty_dt = v_odate

                               WHERE po.fact_table = 'PO_CORP'
                                 AND po.fact_typ_cd = 'RG'
                                 AND po.latest_prcs_dt = v_odate
                                 AND po.div_load_stat > 0
                               )
                      and NVL(fwb_frz_ind,'N') = 'N'
                      AND fwb_cyc_typ IN ('MONTHLY', 'DEALS');


                v_cursor_rowcount := SQL%ROWCOUNT;

                v_prcs_stp := '     FWB_LAST_UPDT_DT update complete.  '||v_cursor_rowcount||' rows updated';
                dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||v_prcs_stp);







    ELSE
         IF (p_abort_flg = 'N') THEN
            NULL;
            RETURN 0;

         ELSIF ( p_abort_flg = 'Y') THEN
            /****************************************************************************
            ** At this point, even if the status in XDMADM.FACT_LOAD_STAT are both > 0
            ** the timestamp may be old indicating an End Of Day process failed.
            ** If this is the second run for this program, the abort flag = 'Y'
            ****************************************************************************/
                dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'*****FACT_LOAD CHECK ERROR!*****');
                dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'ERROR IN STEP:  ' || v_prcs_stp);
                v_prcs_err_msg:= ' SQLERRM: '||Sqlerrm||' Sqlcode: '||SQLCODE;
                dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'Messages: '||v_prcs_err_msg);
                ROLLBACK;
                RETURN 1;

        ELSIF ( p_abort_flg is null) THEN
                dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'*****ABORT FLAG PARAMETER ERROR!*****');
                dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'ERROR IN STEP:  ' || v_prcs_stp);
                v_prcs_err_msg:= ' SQLERRM: '||Sqlerrm||' Sqlcode: '||SQLCODE;
                dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'Messages: '||v_prcs_err_msg);
                ROLLBACK;
                RETURN 1;

        END IF;


    END IF;


    IF (v_updt_process = 0) then
        dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'No records have been processed');
    END IF;


    COMMIT;
    dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'PROCESS COMMITED');
    RETURN 0;



EXCEPTION

WHEN no_data_found THEN
        dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'*****NO DATA FOUND ERROR!*****');
        dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'ERROR IN STEP:  ' || v_prcs_stp);
        v_prcs_err_msg:= ' SQLERRM: '||Sqlerrm||' Sqlcode: '||SQLCODE;
        dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'Messages: '||v_prcs_err_msg);
        ROLLBACK;
        Return 1;


WHEN OTHERS THEN
        dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'*****GENERAL ERROR!*****');
        dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'ERROR IN STEP:  ' || v_prcs_stp);
        v_prcs_err_msg:= ' SQLERRM: '||Sqlerrm||' Sqlcode: '||SQLCODE;
        dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'Messages: '||v_prcs_err_msg);
        ROLLBACK;
        RETURN 1;
END;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_CUST_WK_AGGR_SYN_TST" (odate IN DATE)
   RETURN NUMBER AS
   /***********************************************************************
   * Name: FN_CUST_WK_AGGR_SYN
   * Type: Function
   * Description: Swap synonym on customer week aggregate in XDMADM.
   * Revisions:
   *  Ver        Date        Author           Description
   *  ---------  ----------  ---------------  -----------------------------
   *  1.0        10/16/2012  Matt Nicol       Created this function
   ************************************************************************/
   c_success            CONSTANT NUMBER := 0;
   c_error              CONSTANT NUMBER := 0;
   c_schema             CONSTANT VARCHAR2(30) := 'XDMADM';
   c_aggr_tbl_syn_nm    CONSTANT VARCHAR2(30) := 'CUST_WK_AGGR_TST';
   c_aggr_load_syn_nm   CONSTANT VARCHAR2(30) := 'CUST_WK_AGGR_LOAD_TST';
   l_return_code        NUMBER;
   l_out_msg            VARCHAR2(256);

   l_aggr_tbl_nm        VARCHAR2(30);
   l_load_tbl_nm        VARCHAR2(30);
BEGIN
   -- Validate input parameters
   IF (odate IS NULL) THEN
      DBMS_OUTPUT.put_line('Error: Invalid Parameters: Date is required');
      RETURN c_error;
   END IF;

   -- Get current synonym tables
   EXECUTE IMMEDIATE 'SELECT table_name FROM user_synonyms WHERE synonym_name = ''' || c_aggr_tbl_syn_nm || ''''
      INTO l_aggr_tbl_nm;

   EXECUTE IMMEDIATE 'SELECT table_name FROM user_synonyms WHERE synonym_name = ''' || c_aggr_load_syn_nm || ''''
      INTO l_load_tbl_nm;

   DBMS_OUTPUT.put_line('Aggr Table: ' || l_aggr_tbl_nm);
   DBMS_OUTPUT.put_line('Load Table: ' || l_load_tbl_nm);

   -- Analyze customer weekly aggregate table
   l_return_code   := xdmadm.fn_getstat_tbl(c_schema, l_load_tbl_nm);
   DBMS_OUTPUT.put_line('Analyze Return: ' || l_return_code);

   IF (l_return_code <> 0) THEN
      DBMS_OUTPUT.put_line('Error: Failed to analyze table');
      RETURN c_error;
   END IF;

   -- Swap synonyms
   l_return_code   := xdmadm.fn_crt_synonym(c_aggr_tbl_syn_nm, c_schema, l_load_tbl_nm);
   DBMS_OUTPUT.put_line(
      'Create synonym ' || c_aggr_tbl_syn_nm || ' for ' || c_schema || '.' || l_load_tbl_nm || ': ' || l_return_code);

   IF (l_return_code <> 0) THEN
      DBMS_OUTPUT.put_line('Error: Failed to create synonym for aggregate table');
      RETURN c_error;
   END IF;

   l_return_code   := xdmadm.fn_crt_synonym(c_aggr_load_syn_nm, c_schema, l_aggr_tbl_nm);
   DBMS_OUTPUT.put_line(
      'Create synonym ' || c_aggr_load_syn_nm || ' for ' || c_schema || '.' || l_aggr_tbl_nm || ': ' || l_return_code);

   IF (l_return_code <> 0) THEN
      DBMS_OUTPUT.put_line('Error: Failed to create synonym for aggregate table');
      RETURN c_error;
   END IF;

   -- Truncate new load table
   l_return_code   := usfdba.table_pkg.truncate_table(l_out_msg, c_schema, l_aggr_tbl_nm);
   DBMS_OUTPUT.put_line('Truncate Prev Aggr Table Return: ' || l_return_code || ' - ' || l_out_msg);

   IF (l_return_code <> 0) THEN
      DBMS_OUTPUT.put_line('Error: Failed to truncate table');
      RETURN c_error;
   END IF;

   RETURN c_success;
EXCEPTION
   WHEN OTHERS THEN
      DBMS_OUTPUT.put_line('Unexepected error');
      DBMS_OUTPUT.put_line(SQLCODE || ': ' || SQLERRM);
      RETURN c_error;
END;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_CUST_MRCH_NTL_AVG_LOAD" (p_odate IN DATE)
   RETURN NUMBER AS
   /***********************************************************************
    * Name: fn_cust_mrch_ntl_avg_load
    * Type: Function
    * Description: Populate corporate pyramid sales aggregate in XDMADM.
	* Shell: DBMXDMCustMrchNtlAvgLoad.sh - Quaterly Sunday Execution
    *  REVISIONS:
    *  Ver        Date        Author           Description
    *  ---------  ----------  ---------------  -----------------------------
    *  1.0        11/30/2011  Corrie Kaczmarek  Created this procedure.
    *  1.1        26/6/13     p1a0168           change to exclude CC Sales
    *  2.0       10/19/2015   p1a0168            Modified for Acquisition
	*  3.0       11/18/2015   Robert Moore      Use Menu type instead of Minor Code
    ************************************************************************/


l_strt_dt            date;
l_end_dt             date;
l_insert_cnt         NUMBER;
l_merge_cnt          NUMBER;
l_fn_start           DATE;
l_delete_cnt         NUMBER;
l_insert_unknown_cnt NUMBER;
l_fisc_yr_qtr  Varchar2 (18 Byte);

BEGIN
DBMS_OUTPUT.put_line('Start');

l_fn_start       := SYSDATE;

DBMS_OUTPUT.put_line('Truncate XDMADM.Cust_mrch_ntl_avg');

execute immediate 'TRUNCATE table Cust_mrch_ntl_avg';

l_delete_cnt     := sql%ROWCOUNT;

DBMS_OUTPUT.put_line(
      'Delete' || l_delete_cnt || ' rows from Cust_mrch_ntl_avg' || TO_CHAR(ROUND((SYSDATE - l_fn_start) * 86400)) || ' seconds');
SELECT   MIN (clndr_dt), MAX (clndr_dt),MAX(FISC_YR_QTR)
  INTO  l_strt_dt, l_end_dt, l_fisc_yr_qtr
    FROM   xdmadm.time_corp
 WHERE   FISC_YR_QTR =
            (SELECT   MAX(FISC_YR_QTR)
               FROM   xdmadm.time_corp
              WHERE   FISC_YR_QTR <
                         (SELECT   FISC_YR_QTR
                                         FROM   xdmadm.time_corp
                                        WHERE   clndr_dt = p_odate));
DBMS_OUTPUT.put_line('l_strt_dt '|| l_strt_dt || ' l_end_dt '|| l_end_dt || ' l_fisc_yr_qtr' || l_fisc_yr_qtr);


INSERT INTO XDMADM.CUST_MRCH_NTL_AVG
WITH CUST_MERCH
       AS (SELECT   cust.menu_typ_cd,  -- Update to use Menu Type XDMADM.cust_menu_typ_map menu_type_cd
                    pim_mrch_ctgry_nm,
                    0 ntl_avg_spend_prcnt
             FROM   (SELECT   menu_typ_cd
                       FROM   XDMADM.cust_menu_typ_map c) cust,
                    (SELECT   DISTINCT
                              NVL (pim_mrch_ctgry_nm, 'UNKNOWN')
                                 pim_mrch_ctgry_nm
                       FROM   xdmadm.pim_corp) pim),
    cust_list
       AS (  SELECT   c.div_nbr, c.cust_nbr, COUNT (DISTINCT P.pim_suprcls_id)
               FROM   xdmadm.sales_corp S,
                      xdmadm.prod_corp pr,
                      xdmadm.pim_corp P,
                      xdmadm.div_corp d,
                      xdmadm.div_corp div,                                                               ---  change to exclude CC divisions
                      xdmadm.cust_corp c
              WHERE       nvl(s.SLS_REVENUE_DIV_NBR,s.div_nbr) = div.DIV_NBR and div.div_typ_cd <> 'CC'  ---  change to exclude CC divisions
                      AND nvl (div.acqstn_cmpny_nm,'USF') = 'USF'     --Change for Acquisition
                      AND s.div_nbr = d.div_nbr
                      AND s.prcs_dt BETWEEN l_strt_dt AND l_end_dt
                      AND d.cmpny_cd = 1                     --broad line only
                      AND s.div_nbr = pr.div_nbr
                      AND s.Prod_nbr = pr.prod_nbr
                      AND s.div_nbr = c.div_nbr
                      AND s.cust_nbr = c.cust_nbr
                      AND s.xfer_to_dt IS NULL
                      AND pr.pim_usf_std_prod_cd = p.pim_usf_std_prod_cd
					  AND c.cust_natl_mngd_flg = 'L'  --Change for Menu Type, and removed account type and menu type condition below.
                      /*AND c.acct_typ_cd IN
                               (SELECT   param_value_chr
                                  FROM   xdmadm.param_value
                                 WHERE   app_name =
                                            'FN_CUST_MRCH_NTL_AVG_LOAD'
                                         AND param_type = 'ACCT_TYP_CD')
                      AND c.menu_typ_cd IN    --Update to menu_type_cd
                               (SELECT   param_value_chr
                                  FROM   xdmadm.param_value
                                 WHERE   app_name =
                                            'FN_CUST_MRCH_NTL_AVG_LOAD'
                                         AND param_type = 'MENU_TYP_CD')*/
                      AND D.DIV_TYP_CD NOT IN (SELECT   param_value_chr
                                  FROM   xdmadm.param_value
                                 WHERE   app_name =
                                            'FN_CUST_MRCH_NTL_AVG_LOAD'
                                         AND param_type = 'DIV_TYP_CD')

           GROUP BY   c.div_nbr, c.cust_nbr
             HAVING   COUNT (DISTINCT P.pim_suprcls_id) >= 10),
    cust
       AS (SELECT   c.acct_typ_cd,
                    c.menu_typ_cd, --Update to menu_type_cd
                    c.cust_nbr,
                    c.div_nbr
             FROM   xdmadm.cust_corp c, cust_list l
            WHERE       c.div_nbr = l.div_nbr
                    AND c.cust_nbr = l.cust_nbr
                    )
SELECT   c.menu_typ_cd,  --Update to menu_type_cd
         c.pim_mrch_ctgry_nm,
         CASE
            WHEN NVL (sls.sls_cust_cat_typ, 0) = 0
                 OR NVL (sls.sls_cust_typ, 0) = 0
            THEN
               0
            ELSE
               (sls.sls_cust_cat_typ / sls.sls_cust_typ) * 100
         END
            AS ntl_avg_spnd_prcnt,
            l_fisc_yr_qtr
  FROM   (  SELECT   menu_typ_cd,   --Update to menu_type_cd
                     pim_mrch_ctgry_nm,
                     SUM (grs_sls_extnd)
                        OVER (PARTITION BY menu_typ_cd, pim_mrch_ctgry_nm)  --Update to menu_type_cd
                        AS sls_cust_cat_typ,
                     SUM (grs_sls_extnd)
                        OVER (PARTITION BY menu_typ_cd)  --Update to menu_type_cd
                        AS sls_cust_typ
              FROM(SELECT c.menu_typ_cd,  --Update to menu_type_cd
                     p.pim_mrch_ctgry_nm,
                     SUM (s.grs_sls_extnd) grs_sls_extnd
              FROM   xdmadm.sales_corp s,
                     cust c,
                     xdmadm.pim_corp p,
                     xdmadm.prod_corp pc,
                     xdmadm.div_corp div                                                            ---  change to exclude CC divisions
             WHERE   nvl(s.SLS_REVENUE_DIV_NBR,s.div_nbr) = div.DIV_NBR and div.div_typ_cd <> 'CC'  ---  change to exclude CC divisions
                     AND nvl (div.acqstn_cmpny_nm,'USF') = 'USF'     --Change for Acquisition
                     AND s.prcs_dt BETWEEN l_strt_dt AND l_end_dt
                     AND s.cust_nbr = c.cust_nbr
                     AND s.div_nbr = c.div_nbr
                     AND s.xfer_to_dt IS NULL
                     AND s.Prod_nbr = pc.prod_nbr
                     AND s.div_nbr = pc.div_nbr
                     AND pc.pim_usf_std_prod_cd = p.pim_usf_std_prod_cd
                     AND p.pim_suprcls_id NOT IN
                               (SELECT   param_value_nbr
                                  FROM   xdmadm.param_value
                                 WHERE   app_name =
                                            'FN_CUST_MRCH_NTL_AVG_LOAD'
                                         AND param_type = 'PIM_SUPRCLS_ID')
                      AND p.pim_mrch_ctgry_nm NOT IN
                               (SELECT   param_value_chr
                                  FROM   xdmadm.param_value
                                 WHERE   app_name =
                                            'FN_CUST_MRCH_NTL_AVG_LOAD'
                                         AND param_type = 'PIM_MRCH_CTGRY_NM')
          GROUP BY   c.menu_typ_cd, p.pim_mrch_ctgry_nm)) sls,   --update menu_typ_cd
         CUST_MERCH c
 WHERE   c.menu_typ_cd = sls.menu_typ_cd(+)   --Update to menu_type_cd
         AND c.pim_mrch_ctgry_nm = sls.pim_mrch_ctgry_nm(+)
  ;
l_merge_cnt     := sql%ROWCOUNT;


DBMS_OUTPUT.put_line(
      'Insert ' || l_merge_cnt || ' rows in ' || TO_CHAR(ROUND((SYSDATE - l_fn_start) * 86400)) || ' seconds');


     COMMIT;

  RETURN 0;

EXCEPTION
           WHEN OTHERS THEN
      DBMS_OUTPUT.put_line('Error in XDMADM.fn_cust_mrch_ntl_avg_load:' || SQLCODE || ' ' || SQLERRM);
      RETURN 1;
END fn_cust_mrch_ntl_avg_load;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_NO_CC_DIV_VPD" (p_schema       IN VARCHAR2,
                          p_objname      IN VARCHAR2)
   RETURN VARCHAR2 AS
   /***********************************************************************
   * Name: FN_NO_CC_DIV_VPD
   * Type: Function
   * Description: VPD Function to exclude cash and carry divisions.
   *  REVISIONS:
   *  Ver        Date        Author           Description
   *  ---------  ----------  ---------------  ------------------------------------
   *  1.0        11/21/2011  Matt Nicol       Created this function
   ************************************************************************/
   c_start                CONSTANT NUMBER := DBMS_UTILITY.get_time;
   c_fn_nm                CONSTANT VARCHAR2(30) := 'FN_NO_CC_DIV_VPD';
   l_security_predicate   VARCHAR2(4000) DEFAULT NULL;
   l_cur_sql              VARCHAR2(4000) := SYS_CONTEXT('USERENV', 'CURRENT_SQL');
   l_sbjct_area           VARCHAR2(100) := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_sbjct_area_attr);
   l_vpd_exempt           VARCHAR2(1) := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_exempt_attr);
   l_all_divs             VARCHAR2(1) := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_alldivs_attr);

   l_div_count            NUMBER := 0;
   l_first                BOOLEAN := TRUE;

--Get all cash and carry divisions
   CURSOR all_divs_c IS
      SELECT /*+ NOPARALLEL */
            dc.div_nbr
        FROM xdmadm.div_corp dc
       WHERE div_typ_cd = 'CC'
         AND (dc.conv_to_div_nbr IS NULL
           OR dc.conv_on_date > SYSDATE);

   all_divs_rec           all_divs_c%ROWTYPE;
BEGIN
   --If no subject area context is set then return predicate filtering all data

   IF l_sbjct_area IS NULL THEN
      l_security_predicate   := '1=2';
      ctladm.pkg_vpd_debug_util.vpd_debug('NO SA',
                                          c_fn_nm,
                                          USER,
                                          p_schema,
                                          p_objname,
                                          l_sbjct_area,
                                          l_vpd_exempt,
                                          l_all_divs,
                                          l_cur_sql,
                                          l_security_predicate,
                                          (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   -- Check if user is exempt based on current subject area context
   -- If so, return predicate without any filter

   IF l_vpd_exempt = 'Y' THEN
      l_security_predicate   := '1=1';
      ctladm.pkg_vpd_debug_util.vpd_debug('EXEMPT',
                                          c_fn_nm,
                                          USER,
                                          p_schema,
                                          p_objname,
                                          l_sbjct_area,
                                          l_vpd_exempt,
                                          l_all_divs,
                                          l_cur_sql,
                                          l_security_predicate,
                                          (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   -- Check if user has all division access based on current subject area context
   -- If so, return predicate that excludes cash and carry divisions

   SELECT COUNT( * )
     INTO l_div_count
     FROM xdmadm.div_corp dc
    WHERE div_typ_cd = 'CC'
      AND (dc.conv_to_div_nbr IS NULL
        OR dc.conv_on_date > SYSDATE);

   IF l_div_count > 0 THEN
      l_first                := TRUE;

      OPEN all_divs_c;

      LOOP
         FETCH all_divs_c INTO all_divs_rec;

         EXIT WHEN all_divs_c%NOTFOUND;

         IF l_first THEN
            l_security_predicate   := 'DIV_NBR NOT IN (' || all_divs_rec.div_nbr;
            l_first                := FALSE;
         ELSE
            l_security_predicate   := l_security_predicate || ',' || all_divs_rec.div_nbr;
         END IF;
      END LOOP;

      CLOSE all_divs_c;

      l_security_predicate   := l_security_predicate || ')';
   ELSE
      l_security_predicate   := '1=1';
   END IF;

   ctladm.pkg_vpd_debug_util.vpd_debug('NO CC',
                                       c_fn_nm,
                                       USER,
                                       p_schema,
                                       p_objname,
                                       l_sbjct_area,
                                       l_vpd_exempt,
                                       l_all_divs,
                                       l_cur_sql,
                                       l_security_predicate,
                                       (DBMS_UTILITY.get_time - c_start) / 100);

   RETURN l_security_predicate;
EXCEPTION
   WHEN OTHERS THEN
      l_security_predicate   := '1=2';
      ctladm.pkg_vpd_debug_util.vpd_debug(SQLCODE || '-' || SQLERRM,
                                          c_fn_nm,
                                          USER,
                                          p_schema,
                                          p_objname,
                                          l_sbjct_area,
                                          l_vpd_exempt,
                                          NULL,
                                          l_cur_sql,
                                          l_security_predicate,
                                          (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
END fn_no_cc_div_vpd;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_XDM_SALES_CORP_UPD_AN" (
                                P_IN_DIV_NBR    IN NUMBER,
                                P_IN_SRC_TBL    IN VARCHAR2,
                                P_IN_TGT_TBL    IN VARCHAR2,
                                P_IN_START_DT   IN VARCHAR2,
                                P_IN_END_DT     IN VARCHAR2,
                                p_out_message   IN OUT VARCHAR2) RETURN NUMBER  IS
/*
NAME: FN_XDM_SALES_CORP_UPD_AN
PURPOSE: HISTORICAL UPDATE FOR AP TRANSACTIONS IN XDMADM.SALES_CORP TABLE

    XIW   1. CREATE NEW SALES_CORP SHELL - DBA
          2. INSERT-APPEND INTO NEW SHELL - DW
          3. SWAP TABLES - DBA

          This function requires the following input parameters:
          division number
          source table
          target table
          start date
          end date
    THIS IS THE LAST FUNCTION CALLED IN THE UPDATE PROCESS. This function includes a validation query at the end to reconcile both tables.
*/

   v_return_nbr              NUMBER         := 0;
   v_err_msg                 VARCHAR2(32767) := NULL;
   n_return_code             NUMBER         := 0;
   v_return_message          VARCHAR2(32767) := NULL;

   v_src_cnt                 NUMBER;
   v_src_grs_sls             NUMBER;
   v_src_qty_ship            NUMBER;
   v_src_ttl_dvt             NUMBER;
   v_src_np_alw              NUMBER;
   v_src_np_chrg             NUMBER;
   v_src_prd_alw             NUMBER;
   v_src_prd_chrg            NUMBER;

   v_tgt_cnt                 NUMBER;
   v_tgt_grs_sls             NUMBER;
   v_tgt_qty_ship            NUMBER;
   v_tgt_ttl_dvt             NUMBER;
   v_tgt_np_alw              NUMBER;
   v_tgt_np_chrg             NUMBER;
   v_tgt_prd_alw             NUMBER;
   v_tgt_prd_chrg            NUMBER;

   v_ins_sql1         VARCHAR2(32767);
   v_ins_sql2         VARCHAR2(32767);
   v_ins_sql3          VARCHAR2(32767);
   v_ins_sql4          VARCHAR2(32767);
   v_ins_sql5         VARCHAR2(32767);
   v_ins_sql6         VARCHAR2(32767);

   v_antxn_sql1         VARCHAR2(32767);
   v_antxn_sql2         VARCHAR2(32767);
   v_antxn_sql3         VARCHAR2(32767);
   v_antxn_sql4         VARCHAR2(32767);
   v_antxn_sql5         VARCHAR2(32767);
   v_antxn_sql6         VARCHAR2(32767);
   v_antxn_sql7         VARCHAR2(32767);
   v_antxn_sql8         VARCHAR2(32767);
   v_antxn_sql9         VARCHAR2(32767);
   v_antxn_sql10         VARCHAR2(32767);
   v_antxn_sql11         VARCHAR2(32767);
   v_antxn_sql12         VARCHAR2(32767);

   v_reg_addfilter_sql     VARCHAR2(32767);
   v_ap_addfilter_sql     VARCHAR2(32767);
   v_an_addfilter_sql     VARCHAR2(32767);

   v_div_nbr           NUMBER;
   v_src_tbl           VARCHAR2(50);
   v_tgt_tbl           VARCHAR2(50);
   v_start_dt           VARCHAR2(12) := p_in_start_dt;
   v_end_dt             VARCHAR2(12) := p_in_end_dt;
   v_audt_sql1     VARCHAR2(2000);
   v_audt_sql2     VARCHAR2(2000);

   v_audt_fin      VARCHAR2(32767);

BEGIN

   v_div_nbr  := p_in_div_nbr;
   v_src_tbl  := p_in_src_tbl;
   v_tgt_tbl  := p_in_tgt_tbl;

v_ins_sql1 := 'INSERT /*+ APPEND */ INTO ' || v_tgt_tbl || ' (acct_typ_cd_actl, acct_typ_cd_desc_actl, actl_cst, actl_extnd, actl_gp, adj_markout, alw_chrg_cd, ' ||
 ' ap_cost, ap_gain, ap_vndr_nbr_actl, brk_srchrg, bsis_alw_amt, bsis_alw_applied, bsis_alw_ind, bsis_amt, carr_addr_txt, carr_alt_id, carr_alt_id_typ_cd, ' ||
 ' carr_city_nm, carr_cmnt, carr_cntct, carr_ctry_txt, carr_data_src_cd, carr_dot_nbr, carr_email_txt, carr_eqmt_mark_typ_cd, ' ||
 ' carr_fax_nbr, carr_inv_user_id, carr_motor_carr_nbr, carr_nm, carr_phn_nbr, carr_scac_cd, ';

v_ins_sql2 := ' carr_st_cd, carr_stat_cd, carr_updt_dt, carr_updt_tm, carr_updt_user_id, carr_usf_nbr, carr_zip_cd, cde, cmpny_vndr_nbr_actl, cmsn_sls_extnd, ' ||
 ' cntrct_cpr_amt, cntrct_cpr_amt_ind, cntrct_cpr_bsis, cntrct_cpr_bsis_dt, cntrct_cpr_calc, cntrct_cpr_grp_typ, cntrct_cpr_nbr, cntrct_cpr_prod_grp, ' ||
 ' COMM_BSIS_AMT, corp_dvt_sls_base_rbt, corp_mlt_unit_desc_actl, corp_mlt_unit_nbr_actl, corp_non_dvt_sls_base_rbt, corp_prch_base_rbt, cr_dbt_rsn_cd, ' ||
 ' cr_dbt_rsn_desc, cr_memo_dlr, cr_memo_dt, cr_memo_dwa, cr_memo_nbr, cust_bus_seg_actl, cust_bus_seg_desc_actl, cust_nbr, cust_po_nbr, cust_prod_nbr, ' ||
 ' cust_sk, div_nbr, div_sk, dlvr_rte, dlvr_seq_nbr, drvr, dry_each, dry_unit, dry_wt, dstrct_cd_actl, dstrct_nm_actl, dstrct_sls_mgr_id_actl, ' ||
 ' dstrct_sls_mgr_nm_actl, ';

v_ins_sql3 := ' dvt_cost_extnd, dwa_cost_extnd, each_conv_fctr, END_DAY_CD, each_ord, each_orig, each_prc, each_rsrv, each_ship, extnd_fctr, frght_cost, ' ||
 ' frz_each, frz_unit, frz_wt, gl_sbsys_cd, grs_sls_extnd, inside_pad, inv_actl_gp, inv_dt, inv_gp, inv_nbr, lagp_per_case, ldr, ldr_seq_nbr, ' ||
 ' ldr_tm, lic_prod_extnd, lic_tot_extnd, line_nbr, lnd_actl_gp, lnd_gp, loc_dvt_sls_base_rbt, loc_int_dvt, loc_mlt_unit_desc_actl, loc_mlt_unit_nbr_actl, '||
 ' loc_mrktng_alwnc_pgms, loc_non_dvt_sls_base_rbt, loc_one_tm, loc_prch_base_rbt, loc_prom_alwnc_pgms, loc_vndr_fnd_dvt, lpp, mkt_prod_extnd, ' ||
 ' mkt_tot_extnd, mrgn_bsis, natl_int_dvt, natl_mrktng_alwnc_pgms, natl_one_tm, natl_prom_alwnc_pgms, natl_vndr_fnd_dvt, net_sls_extnd, net_wt_ship, ' ||
 ' non_prod_alwnc, non_prod_alwnc_cd, non_prod_alwnc_desc, non_prod_chrg, non_prod_chrg_cd, non_prod_chrg_desc, ';

v_ins_sql4 := ' ntv_cr_dbt_rsn_cd, ntv_cr_dbt_rsn_desc, ntv_ord_cls, ntv_ord_typ, ord_src, ord_tkr, orig_dwa_cost_extnd, orig_ldr_tm, orig_ord_dt, ' ||
 ' pick_slot_actl, pim_brnd_typ_actl, pim_brnd_typ_desc_actl, pim_cls_desc_actl, pim_cls_id_actl, pim_ctgry_desc_actl, ' ||
 ' pim_ctgry_id_actl, pim_grp_desc_actl, pim_grp_id_actl, pim_sk, pim_suprcls_desc_actl, pim_suprcls_id_actl, pim_usf_std_prod_cd, prc_mrgn, ' ||
 ' prc_src, prch_from_vndr_nbr_actl, prcs_dt, prime_aft_adj_dlr_amt, prime_aft_bsis_adj_amt, prime_aft_bsis_adj_ind, ' ||
 ' prime_bfr_adj_dlr_amt, prime_bfr_bsis_adj_amt, prime_bfr_bsis_adj_ind, prime_calc_ind, prime_cnh_cntrct_nbr, prime_cnh_prc_br_cd, ' ||
 ' prime_cns_cost_pt_mrk, prime_cns_cost_pt_rng, prime_cntrct_calc_bsis_amt, prime_cntrct_each_mrk_amt, prime_cntrct_each_mrk_typ, prime_cntrct_nm, ' ||
 ' prime_cntrct_prod_excpt_ind, prime_cost_by_po_nbr, prime_cust_prc_on_ind, prime_dvt_cost_amt, prime_dvt_cost_aply, prime_dvt_cost_typ, ';

v_ins_sql5 := ' prime_dvtn_grp_nbr, prime_dvtn_grp_nm, prime_extnd_rbl_sis_amt, prime_frght_amt, prime_frght_bsis, prime_hcp_pim_cat, prime_hcp_pim_cls, ' ||
' prime_hcp_pim_grp, prime_hcp_usf_std_prod_cd, prime_min_mrk_amt, prime_mrk_amt, prime_mrk_ind, prime_ord_orig_unit_prc, prime_prc_bsis, ' ||
' prime_prc_bsis_amt, prime_prc_by, prime_prc_cost_tbl_eff_dt, prime_prc_cost_tbl_eff_tm, prime_rbl_sis_amt, prime_rbl_sis_mrgn, prime_rbl_sis_per, ' ||
' prime_rnd_cd, prime_sbtyp_prc_by, prime_sis_flg, prime_updt_cyc, prnt_mlt_unit_cd_actl, prnt_mlt_unit_desc_actl, prod_alw, prod_alwnc_cd, ' ||
' prod_alwnc_desc, prod_chrg, prod_chrg_cd, prod_chrg_desc, prod_nbr, prod_sk, prod_sls_tax, prod_stat_ind_actl, qty_dvt, qty_markout, qty_ord, ' ||
' qty_orig, qty_rsrv, qty_ship, qty_subbed, rcrd_stat, rcvng_po_nbr, ';

v_ins_sql6 := ' rep_cost_extnd, rfrgrt_each, rfrgrt_unit, rfrgrt_wt, rtd_ind, sample_ord_ind, ship_from, ship_to_id, sls_mrgn, sls_uom, srchrg, ' ||
' sub_for, sub_prod_ind, tagp_per_case, tax_typ, tm_sk, trans_typ, trd_cls_actl, trtry_cd_actl, trtry_mgr_id_actl, trtry_mgr_nm_actl, ' ||
' true_gp, true_mfr, ttl_alwnc, ttl_dvt, ttl_int_vndr_fnd_dvt, ttl_loc_alwnc, ttl_natl_alwnc, ttl_vndr_fnd_dvt, unfrm_qty_dvt, ' ||
' unfrm_qty_markout, unfrm_qty_ord, unfrm_qty_orig, unfrm_qty_rsrv, unfrm_qty_ship, unfrm_qty_subbed, unit_ord, unit_orig, unit_prc, ' ||
' unit_rsrv, unit_ship, xfer_from_dt, xfer_to_dt) ';

v_antxn_sql1 := ' WITH txn_hdr AS ( SELECT   slc.div_nbr, slc.prcs_dt, slc.inv_nbr, slc.cust_nbr, slc.cr_memo_nbr, slc.pim_sk, ' ||
' slc.acct_typ_cd_actl, slc.acct_typ_cd_desc_actl, slc.alw_chrg_cd, slc.ap_vndr_nbr_actl, slc.bsis_alw_applied, slc.bsis_alw_ind ' ||
' , slc.cmpny_vndr_nbr_actl, slc.cntrct_cpr_amt_ind, slc.cntrct_cpr_bsis, slc.cntrct_cpr_bsis_dt, slc.cntrct_cpr_calc, slc.cntrct_cpr_nbr, ' ||
' slc.cntrct_cpr_prod_grp, slc.corp_mlt_unit_desc_actl, slc.corp_mlt_unit_nbr_actl, slc.cr_dbt_rsn_cd ' ||
' , slc.cr_dbt_rsn_desc, slc.cr_memo_dlr, slc.cust_bus_seg_actl, slc.cust_bus_seg_desc_actl, slc.cust_prod_nbr, slc.cust_sk, slc.div_sk, ' ||
' slc.dstrct_cd_actl, slc.dstrct_nm_actl ';

v_antxn_sql2 := ', slc.dstrct_sls_mgr_id_actl, slc.dstrct_sls_mgr_nm_actl, slc.each_conv_fctr, slc.line_nbr, slc.loc_mlt_unit_desc_actl, ' ||
' slc.loc_mlt_unit_nbr_actl, slc.mrgn_bsis, slc.natl_vndr_fnd_dvt, slc.ntv_cr_dbt_rsn_desc, slc.ntv_ord_typ, slc.pick_slot_actl ' ||
' , slc.pim_brnd_typ_actl, slc.pim_brnd_typ_desc_actl, slc.pim_cls_desc_actl, slc.pim_cls_id_actl, slc.pim_ctgry_desc_actl, slc.pim_ctgry_id_actl, ' ||
' slc.pim_grp_desc_actl, slc.pim_grp_id_actl, slc.pim_suprcls_desc_actl, slc.pim_suprcls_id_actl, slc.prch_from_vndr_nbr_actl, ' ||
' slc.prime_aft_bsis_adj_ind, slc.prime_bfr_bsis_adj_ind, slc.prime_calc_ind, slc.prime_cnh_prc_br_cd, slc.prime_cntrct_each_mrk_amt, ' ||
' slc.prime_cntrct_nm, slc.prime_cost_by_po_nbr ';

v_antxn_sql3 := ', slc.prime_cust_prc_on_ind, slc.prime_dvt_cost_aply, slc.prime_dvt_cost_typ, slc.prime_dvtn_grp_nbr, slc.prime_dvtn_grp_nm, ' ||
' slc.prime_frght_bsis, slc.prime_hcp_pim_cat, slc.prime_hcp_pim_cls, slc.prime_hcp_pim_grp, slc.prime_mrk_ind, slc.prime_prc_bsis, ' ||
' slc.prime_prc_by, slc.prime_rbl_sis_mrgn, slc.prime_rbl_sis_per,slc.prc_src, slc.prime_rnd_cd, slc.prime_sbtyp_prc_by, slc.prime_sis_flg, ' ||
' slc.prime_updt_cyc, slc.prnt_mlt_unit_cd_actl, slc.prnt_mlt_unit_desc_actl, slc.prod_alwnc_cd, slc.prod_alwnc_desc, ' ||
' slc.prod_chrg_cd, slc.prod_chrg_desc, slc.prod_sk, slc.prod_stat_ind_actl, slc.ship_to_id, slc.sls_uom, slc.trd_cls_actl, ' ||
' slc.trtry_cd_actl, slc.trtry_mgr_id_actl, slc.trtry_mgr_nm_actl ';

v_antxn_sql4 := ', slc.true_mfr, slc.PRIME_CNTRCT_EACH_MRK_TYP, slc.ldr_tm, slc.tm_sk, rank() OVER (PARTITION BY slc.div_nbr, slc.inv_nbr, slc.cust_nbr, slc.cr_memo_nbr, ' ||
' slc.prcs_dt  ORDER BY   slc.div_nbr, slc.inv_nbr, slc.cust_nbr, slc.cr_memo_nbr, slc.prcs_dt ' ||
' , slc.line_nbr) as ldrtm_ranking FROM ' || v_src_tbl || ' slc WHERE slc.trans_typ IN (''RT'',''VS'',''WC'',''CD'') ' ||
' AND slc.prcs_dt BETWEEN ''' || v_start_dt || ''' AND ''' || v_end_dt || ''')';

v_antxn_sql5 := ' SELECT slc.acct_typ_cd_actl,slc.acct_typ_cd_desc_actl,an.actl_cst,an.actl_extnd,an.actl_gp,an.adj_markout,an.alw_chrg_cd, ' ||
' an.ap_cost,an.ap_gain, NVL(an.ap_vndr_nbr_actl,''0000000''),an.brk_srchrg,an.bsis_alw_amt, NULL as bsis_alw_applied, NULL as bsis_alw_ind, ' ||
' an.bsis_amt,an.carr_addr_txt,an.carr_alt_id,an.carr_alt_id_typ_cd,an.carr_city_nm,an.carr_cmnt,an.carr_cntct,an.carr_ctry_txt, ' ||
' an.carr_data_src_cd,an.carr_dot_nbr,an.carr_email_txt,an.carr_eqmt_mark_typ_cd,an.carr_fax_nbr,an.carr_inv_user_id, ' ||
' an.carr_motor_carr_nbr,an.carr_nm,an.carr_phn_nbr,an.carr_scac_cd,an.carr_st_cd,an.carr_stat_cd,an.carr_updt_dt,an.carr_updt_tm, ' ||
' an.carr_updt_user_id,an.carr_usf_nbr,an.carr_zip_cd,an.cde,0 as cmpny_vndr_nbr_actl, ';

v_antxn_sql6 := ' an.cmsn_sls_extnd,an.cntrct_cpr_amt,NULL as cntrct_cpr_amt_ind,NULL as cntrct_cpr_bsis,NULL as cntrct_cpr_bsis_dt,NULL as cntrct_cpr_calc, ' ||
' an.cntrct_cpr_grp_typ,NULL as cntrct_cpr_nbr,NULL as cntrct_cpr_prod_grp,0 as comm_bsis_amt,an.corp_dvt_sls_base_rbt, ' ||
' slc.corp_mlt_unit_desc_actl,slc.corp_mlt_unit_nbr_actl,an.corp_non_dvt_sls_base_rbt,an.corp_prch_base_rbt,an.cr_dbt_rsn_cd, ' ||
' an.cr_dbt_rsn_desc,an.cr_memo_dlr,an.cr_memo_dt,an.cr_memo_dwa,an.cr_memo_nbr,slc.cust_bus_seg_actl, ' ||
' slc.cust_bus_seg_desc_actl,an.cust_nbr,an.cust_po_nbr,NULL as cust_prod_nbr,slc.cust_sk,an.div_nbr,an.div_sk,an.dlvr_rte,an.dlvr_seq_nbr, ' ||
' an.drvr,an.dry_each,an.dry_unit,an.dry_wt,slc.dstrct_cd_actl,slc.dstrct_nm_actl,slc.dstrct_sls_mgr_id_actl, ';

v_antxn_sql7 := ' slc.dstrct_sls_mgr_nm_actl,an.dvt_cost_extnd,an.dwa_cost_extnd,slc.each_conv_fctr,NULL as END_DAY_CD,an.each_ord,an.each_orig, ' ||
' an.each_prc,an.each_rsrv,an.each_ship,an.extnd_fctr,an.frght_cost,an.frz_each,an.frz_unit,an.frz_wt,an.gl_sbsys_cd,an.grs_sls_extnd, ' ||
' an.inside_pad,an.inv_actl_gp,an.inv_dt,an.inv_gp,an.inv_nbr,an.lagp_per_case,an.ldr,an.ldr_seq_nbr ,an.ldr_tm as an_ldr_tm, ' ||
' an.lic_prod_extnd,an.lic_tot_extnd,an.line_nbr,an.lnd_actl_gp,an.lnd_gp,an.loc_dvt_sls_base_rbt,an.loc_int_dvt, ' ||
' slc.loc_mlt_unit_desc_actl,slc.loc_mlt_unit_nbr_actl,an.loc_mrktng_alwnc_pgms,an.loc_non_dvt_sls_base_rbt,an.loc_one_tm,an.loc_prch_base_rbt, ' ||
' an.loc_prom_alwnc_pgms,an.loc_vndr_fnd_dvt, an.lpp,an.mkt_prod_extnd,an.mkt_tot_extnd,slc.mrgn_bsis,an.natl_int_dvt, ' ||
' an.natl_mrktng_alwnc_pgms,an.natl_one_tm,an.natl_prom_alwnc_pgms,an.natl_vndr_fnd_dvt,an.net_sls_extnd, ';

v_antxn_sql8 := ' an.net_wt_ship,an.non_prod_alwnc,an.non_prod_alwnc_cd,an.non_prod_alwnc_desc,an.non_prod_chrg,an.non_prod_chrg_cd, ' ||
' an.non_prod_chrg_desc,an.ntv_cr_dbt_rsn_cd,an.ntv_cr_dbt_rsn_desc,an.ntv_ord_cls, CASE WHEN (an.cr_memo_nbr<>0) THEN ''CD''     ' ||
' WHEN (an.cr_memo_nbr=0) THEN slc.ntv_ord_typ END AS ntv_ord_typ, an.ord_src,an.ord_tkr,an.orig_dwa_cost_extnd,an.ldr_tm as orig_ldr_tm,an.orig_ord_dt, ' ||
' NULL as pick_slot_actl, NVL(an.pim_brnd_typ_actl,9), NVL(an.pim_brnd_typ_desc_actl,''UNKNOWN''), NVL(an.pim_cls_desc_actl,''UNKNOWN''), ' ||
' NVL(an.pim_cls_id_actl,99999), NVL(an.pim_ctgry_desc_actl,''UNKNOWN''), NVL(an.pim_ctgry_id_actl,99999),  NVL(an.pim_grp_desc_actl,''UNKNOWN''), ' ||
' NVL(an.pim_grp_id_actl,99999), NVL(an.pim_sk,0), NVL(an.pim_suprcls_desc_actl,''UNKNOWN''), NVL(an.pim_suprcls_id_actl,99999), ';

v_antxn_sql9 := ' an.pim_usf_std_prod_cd,an.prc_mrgn,an.prc_src,NVL(an.prch_from_vndr_nbr_actl,''000000''),an.prcs_dt,an.prime_aft_adj_dlr_amt, ' ||
' an.prime_aft_bsis_adj_amt,NULL as prime_aft_bsis_adj_ind,an.prime_bfr_adj_dlr_amt,an.prime_bfr_bsis_adj_amt,NULL as prime_bfr_bsis_adj_ind, ' ||
' NULL as prime_calc_ind,an.prime_cnh_cntrct_nbr,NULL AS prime_cnh_prc_br_cd,an.prime_cns_cost_pt_mrk,an.prime_cns_cost_pt_rng, ' ||
' an.prime_cntrct_calc_bsis_amt,slc.prime_cntrct_each_mrk_amt,NULL AS prime_cntrct_each_mrk_typ,NULL AS prime_cntrct_nm,an.prime_cntrct_prod_excpt_ind, ' ||
' NULL AS prime_cost_by_po_nbr,NULL AS prime_cust_prc_on_ind,an.prime_dvt_cost_amt,NULL AS prime_dvt_cost_aply,NULL AS Prime_dvt_cost_typ,NULL AS prime_dvtn_grp_nbr, ' ||
' NULL as prime_dvtn_grp_nm,an.prime_extnd_rbl_sis_amt, ';

v_antxn_sql10 := ' an.prime_frght_amt,NULL AS prime_frght_bsis,NULL AS prime_hcp_pim_cat,NULL AS prime_hcp_pim_cls,NULL AS prime_hcp_pim_grp, ' ||
' an.prime_hcp_usf_std_prod_cd,an.prime_min_mrk_amt,an.prime_mrk_amt,NULL AS prime_mrk_ind,an.prime_ord_orig_unit_prc, ' ||
' NULL AS prime_prc_bsis,an.prime_prc_bsis_amt,NULL as prime_prc_by,an.prime_prc_cost_tbl_eff_dt,an.prime_prc_cost_tbl_eff_tm,an.prime_rbl_sis_amt, ' ||
' NULL AS prime_rbl_sis_mrgn,NULL AS prime_rbl_sis_per,NULL AS prime_rnd_cd,slc.prime_sbtyp_prc_by,NULL AS Prime_sis_flg,NULL AS Prime_updt_cyc, ' ||
' slc.prnt_mlt_unit_cd_actl,slc.prnt_mlt_unit_desc_actl,an.prod_alw,an.prod_alwnc_cd,an.prod_alwnc_desc,an.prod_chrg,an.prod_chrg_cd, ' ||
' an.prod_chrg_desc,an.prod_nbr,an.prod_sk,an.prod_sls_tax,NULL AS prod_stat_ind_actl,an.qty_dvt, ';

v_antxn_sql11 := ' an.qty_markout,an.qty_ord,an.qty_orig,an.qty_rsrv,an.qty_ship,an.qty_subbed,an.rcrd_stat,an.rcvng_po_nbr,an.rep_cost_extnd, ' ||
' an.rfrgrt_each,an.rfrgrt_unit,an.rfrgrt_wt,an.rtd_ind,an.sample_ord_ind,an.ship_from,slc.ship_to_id,an.sls_mrgn,slc.sls_uom,an.srchrg, ' ||
' an.sub_for,an.sub_prod_ind,an.tagp_per_case,an.tax_typ,slc.tm_sk,an.trans_typ,slc.trd_cls_actl,slc.trtry_cd_actl,slc.trtry_mgr_id_actl, ' ||
' slc.trtry_mgr_nm_actl,an.true_gp,NVL(an.true_mfr,0),an.ttl_alwnc,an.ttl_dvt,an.ttl_int_vndr_fnd_dvt,an.ttl_loc_alwnc,an.ttl_natl_alwnc, ' ||
' an.ttl_vndr_fnd_dvt,an.unfrm_qty_dvt,an.unfrm_qty_markout,an.unfrm_qty_ord,an.unfrm_qty_orig,an.unfrm_qty_rsrv,an.unfrm_qty_ship, ' ||
' an.unfrm_qty_subbed,an.unit_ord,an.unit_orig,an.unit_prc,an.unit_rsrv,an.unit_ship,an.xfer_from_dt,an.xfer_to_dt ';

IF v_div_nbr = '9999' THEN
v_antxn_sql12 := ' FROM ' || v_src_tbl || ' an,  txn_hdr slc ' ||
' WHERE an.trans_typ = ''AN'' AND slc.div_nbr = an.div_nbr ' ||
' AND slc.prcs_dt = an.prcs_dt AND slc.inv_nbr = an.inv_nbr AND slc.cust_nbr = an.cust_nbr ' ||
' AND slc.cr_memo_nbr = an.cr_memo_nbr AND slc.ldrtm_ranking = 1 AND NVL(an.grs_sls_extnd,0)=0 ' ;
ELSE
  v_antxn_sql12 := ' FROM ' || v_src_tbl || ' an,  txn_hdr slc ' ||
' WHERE an.trans_typ = ''AN'' AND slc.div_nbr = an.div_nbr ' ||
' AND slc.prcs_dt = an.prcs_dt AND slc.inv_nbr = an.inv_nbr AND slc.cust_nbr = an.cust_nbr ' ||
' AND slc.cr_memo_nbr = an.cr_memo_nbr AND slc.ldrtm_ranking = 1 AND slc.div_nbr = ' || v_div_nbr || '  AND NVL(an.grs_sls_extnd,0)=0 ';
END IF;

v_an_addfilter_sql := ' AND an.prcs_dt BETWEEN ''' || v_start_dt || ''' AND ''' || v_end_dt || '''';


EXECUTE IMMEDIATE v_ins_sql1 || v_ins_sql2 || v_ins_sql3 || v_ins_sql4 || v_ins_sql5 || v_ins_sql6 || v_antxn_sql1 || v_antxn_sql2 || v_antxn_sql3 || v_antxn_sql4 ||
v_antxn_sql5 || v_antxn_sql6 || v_antxn_sql7 || v_antxn_sql8 || v_antxn_sql9 || v_antxn_sql10 || v_antxn_sql11 || v_antxn_sql12 || v_an_addfilter_sql ;

COMMIT;

dbms_output.put_line ('STEP 1: Load complete for AN txn');

/*Insert records into audit process*/
BEGIN

IF v_div_nbr = '9999' THEN --RUN FOR ALL DIVISIONS WITH USE A DATE RANGE THEN
v_audt_sql1 := ' SELECT COUNT(*), SUM(NVL(GRS_SLS_EXTND,0)), SUM(NVL(QTY_SHIP,0)), SUM(NVL(TTL_DVT,0)), SUM(NVL(NON_PROD_ALWNC,0)), SUM(NVL(NON_PROD_CHRG,0)), SUM(NVL(PROD_ALW,0)), SUM(NVL(PROD_CHRG,0)) FROM '|| v_src_tbl ||
              ' an WHERE 1=1 AND NVL(an.grs_sls_extnd,0)=0 ' || v_an_addfilter_sql;

v_audt_sql2 := ' SELECT COUNT(*), SUM(NVL(GRS_SLS_EXTND,0)), SUM(NVL(QTY_SHIP,0)), SUM(NVL(TTL_DVT,0)), SUM(NVL(NON_PROD_ALWNC,0)), SUM(NVL(NON_PROD_CHRG,0)), SUM(NVL(PROD_ALW,0)), SUM(NVL(PROD_CHRG,0)) FROM '|| v_tgt_tbl ||
             ' an WHERE 1=1  AND NVL(an.grs_sls_extnd,0)=0 ' || v_an_addfilter_sql ;

ELSE
v_audt_sql1 := ' SELECT COUNT(*), SUM(NVL(GRS_SLS_EXTND,0)), SUM(NVL(QTY_SHIP,0)), SUM(NVL(TTL_DVT,0)), SUM(NVL(NON_PROD_ALWNC,0)), SUM(NVL(NON_PROD_CHRG,0)), SUM(NVL(PROD_ALW,0)), SUM(NVL(PROD_CHRG,0)) FROM '|| v_src_tbl ||
              ' an WHERE 1=1 AND div_nbr = ' || v_div_nbr || '  AND NVL(an.grs_sls_extnd,0)=0  ' || v_an_addfilter_sql;

v_audt_sql2 := ' SELECT COUNT(*), SUM(NVL(GRS_SLS_EXTND,0)), SUM(NVL(QTY_SHIP,0)), SUM(NVL(TTL_DVT,0)), SUM(NVL(NON_PROD_ALWNC,0)), SUM(NVL(NON_PROD_CHRG,0)), SUM(NVL(PROD_ALW,0)), SUM(NVL(PROD_CHRG,0)) FROM '|| v_tgt_tbl ||
             ' an WHERE 1=1 AND div_nbr = ' || v_div_nbr || '  AND NVL(an.grs_sls_extnd,0)=0  ' || v_an_addfilter_sql ;
END IF;


EXECUTE IMMEDIATE v_audt_sql1 INTO v_src_cnt, v_src_grs_sls, v_src_qty_ship, v_src_ttl_dvt, v_src_np_alw, v_src_np_chrg, v_src_prd_alw, v_src_prd_chrg;

COMMIT;

dbms_output.put_line ('AUDIT 1: complete first audit');

EXECUTE IMMEDIATE v_audt_sql2 INTO v_tgt_cnt, v_tgt_grs_sls, v_tgt_qty_ship, v_tgt_ttl_dvt, v_tgt_np_alw, v_tgt_np_chrg, v_tgt_prd_alw, v_tgt_prd_chrg;

COMMIT;

dbms_output.put_line ('AUDIT 2: complete second audit');

IF v_src_cnt > 0 THEN
  IF (v_src_cnt = v_tgt_cnt) AND (v_src_grs_sls = v_tgt_grs_sls) AND (v_src_qty_ship = v_tgt_qty_ship) AND (v_src_ttl_dvt = v_tgt_ttl_dvt)
  AND (v_src_np_alw = v_tgt_np_alw) AND (v_src_np_chrg = v_tgt_np_chrg) AND (v_src_prd_alw = v_tgt_prd_alw) AND (v_src_prd_chrg = v_tgt_prd_chrg) THEN
    dbms_output.put_line ('src cnt ' || v_src_cnt || '; tgt cnt ' || v_tgt_cnt || '; ');
    dbms_output.put_line ('src grs_sls ' || v_src_grs_sls || '; tgt grs_sls ' || v_tgt_grs_sls || '; ');
    dbms_output.put_line ('src qty_ship ' || v_src_qty_ship || '; tgt qty_ship ' || v_tgt_qty_ship || '; ');
    dbms_output.put_line ('src ttl_dvt ' || v_src_ttl_dvt || '; tgt ttl_dvt ' || v_tgt_ttl_dvt || '; ');
    dbms_output.put_line ('v_src_np_alw ' || v_src_np_alw || '; v_tgt_np_alw ' || v_tgt_np_alw || '; ');
    dbms_output.put_line ('v_src_np_chrg ' || v_src_np_chrg || '; v_tgt_np_chrg ' || v_tgt_np_chrg || '; ');
    dbms_output.put_line ('v_src_prd_alw ' || v_src_prd_alw || '; v_tgt_prd_alw ' || v_tgt_prd_alw || '; ');
    dbms_output.put_line ('v_src_prd_chrg ' || v_src_prd_chrg || '; v_tgt_prd_chrg ' || v_tgt_prd_chrg || '; ');

    RETURN 0; --Test
  ELSE
    DBMS_OUTPUT.PUT_LINE ('source count ' || v_src_cnt || ' target count ' || v_tgt_cnt || 'source grs sls ' || v_src_grs_sls || 'target grs sls ' ||
    v_tgt_grs_sls || 'source qty ship ' || v_src_qty_ship || 'target qty ship ' || v_tgt_qty_ship || 'source ttl dvt ' || v_src_ttl_dvt ||
    'target ttl dvt ' || v_tgt_ttl_dvt);
    dbms_output.put_line ('v_src_np_alw ' || v_src_np_alw || '; v_tgt_np_alw ' || v_tgt_np_alw || '; ');
    dbms_output.put_line ('v_src_np_chrg ' || v_src_np_chrg || '; v_tgt_np_chrg ' || v_tgt_np_chrg || '; ');
    dbms_output.put_line ('v_src_prd_alw ' || v_src_prd_alw || '; v_tgt_prd_alw ' || v_tgt_prd_alw || '; ');
    dbms_output.put_line ('v_src_prd_chrg ' || v_src_prd_chrg || '; v_tgt_prd_chrg ' || v_tgt_prd_chrg || '; ');
    dbms_output.put_line (v_ins_sql1 || v_ins_sql2 || v_ins_sql3 || v_ins_sql4 || v_ins_sql5 || v_ins_sql6 || v_antxn_sql1 || v_antxn_sql2 || v_antxn_sql3 || v_antxn_sql4 ||
  v_antxn_sql5 || v_antxn_sql6 || v_antxn_sql7 || v_antxn_sql8 || v_antxn_sql9 || v_antxn_sql10 || v_antxn_sql11 || v_antxn_sql12 || v_an_addfilter_sql);
    RETURN 20;
  END IF;
END IF;

RETURN 0;

END;

  EXCEPTION
    WHEN OTHERS THEN

      p_out_message := '*ERROR in AN historical update script ' || SQLCODE || ' ' ||
                       SQLERRM;
      dbms_output.put_line(SQLCODE);
      dbms_output.put_line(SQLERRM);
      RETURN 20;

END FN_XDM_SALES_CORP_UPD_AN;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_CUST_CLS_DLY" (v_in_odate     IN VARCHAR2,
                         v_in_ldr_tm    IN NUMBER,
                         v_in_div_nbr   IN NUMBER,
                         v_in_cust_nbr  IN VARCHAR2 DEFAULT NULL)
   RETURN NUMBER IS
   /***********************************************************************
   ** Program Name:  XDMADM.FN_CUST_CLS_DLY
   **
   ** Description: . This function will reclassify all transferred customers
   ** based on the division number and last loader time inputs. It will reclassifty
   ** all history (1+current) for transferred customers. Input parameter ODATE,
   ** last loader time, division number and optional customer number is passed in
   ** from the calling script DBMXDMCustClsDly.sh.
   ** When customer number is specified in the input, it will process that
   ** specific customer only regardless of the loader time. This is for special maintenance purposes.
   ** It performs a CTAS on XDMADM.CUST_CLSFCTN_#### work table. Then data from
   ** said table is MERGED into XDMADM.CUST_CLSFCTN_CORP target table.
   **
   ** Called by: DBMXDMCustClsDly.sh
   **
   ** Input parameter: ODATE  (YYYYMMDD), DIV_NBR, CUST_NBR (optional)
   **
   ** Output parameters :
   **
   ** Modification Log
   ** 03-07-2011  MYasay   Created function.
   ** 02-16-2012  MLeela   Modifiy: When inserting missing classifications insert zero for fisc_wk_of_yr. Change query to minus monthly data from Sales_corp to cust_clsfctn_corp
   ** 27-03-2012  CKaczmarek Added update to tagp, drops, tagp_per_drops
   ** 27-03-2012  CKaczmarek Added update to next_fisc_mth_cust_clsfctn
   ** 17-06-2012 CKaczmarek Added sales measures and fisc_mth_sos_cnt to insert and merge.
   ** 03-14-2013 Matt Nicol Added update to populate UNFRM_GRS_TGP, UNFRM_GRS_TGP_PER_DROP, CAT_SOLD,
   ** CUST_TENURE_MTH_ACTL. Updated DROPS calculation to exclude Admin. Added section to update
   ** GRS_TGP columns when new AP transactions are loaded.
   ** 10/12/2015  p1a0168     Modified for Acquisition
   ** 11/30/2016  Leela     Modified exclusion week 49 to 53 for a 53 week fiscal year
   ** 05/01/2019  Sirish Karpuram Modified for Acquisition Data Ledger Filter
   ** 05/19/2020  David Li   Modified GROSS_TGP to exclude Auto Shipping Charge(ASC) when ASC_ORD_APLY_IND = 'P'.
   ************************************************************************/

   -- VARIABLES
   v_odate                          DATE := TO_DATE(v_in_odate, 'YYYYMMDD');
   v_src_schema                     VARCHAR2(20) := 'XDMADM';
   v_tgt_schema                     VARCHAR2(20) := 'XDMADM';
   v_tbl_prfx                       VARCHAR2(20) := 'CUST_CLSFCTN_';
   v_end_dt                         DATE;
   v_fisc_yr                        NUMBER(4);
   v_cur_fisc_yr                    NUMBER(4);
   v_fisc_mth_of_yr                 VARCHAR2(2);
   v_cur_fisc_mth_of_yr             VARCHAR2(2);
   v_cur_fisc_yr_mth                VARCHAR(18);
   v_fisc_wk_of_yr                  NUMBER(2);
   v_fisc_wk_strt_dt                DATE;
   v_fisc_wk_strt_dt_yrago          DATE;
   v_fisc_mth_end_dt_yrago          DATE;
   v_fisc_wk_of_prd                 NUMBER(2);
   v_py_max_wk                      NUMBER(2);
   v_2y_ago_max_wk                  NUMBER(2);
   v_cnt                            NUMBER;
   v_cnt2                           NUMBER;
   v_ctas_stmt                      VARCHAR2(32767);
   v_ctas_stmt1                      VARCHAR2(32767);
   v_mrg_stmt                       VARCHAR2(5000);
   v_cust_vw                        VARCHAR2(1000);
   v_prior_fisc_mth_strt_dt         DATE;
   v_last_fisc_mth_of_yr            NUMBER;
   v_fisc_yr_last_mth               NUMBER;
   v_fisc_mth_strt_dt_yrago         DATE;
   v_fisc_mth_strt_dt               DATE;
   v_fisc_mth_end_dt                DATE;
   v_fisc_yr_three_mth_ago          NUMBER;
   v_fisc_mth_of_yr_three_mth_ago   VARCHAR(2);
   v_fisc_yr_six_mth_ago            NUMBER;
   v_fisc_mth_of_yr_six_mth_ago     VARCHAR(2);
   v_fisc_yr_mth_six_mth_ago        VARCHAR2(18);
   v_fisc_yr_mth_three_mth_ago      VARCHAR2(18);
   v_last_fisc_yr_mth               VARCHAR2(18);
   v_fisc_yr_mth                    VARCHAR2(18);
   l_insert_cnt                     NUMBER;
   l_trans_insert                   VARCHAR2(32767);
   l_fn_start                       DATE;
   v_net_acct_pim_suprcls_id        NUMBER;

   -- curso to update grs_tgp columns when new AP transactions are loaded
   CURSOR c_ap_tgp IS
      SELECT x.cust_nbr,
             x.div_nbr,
             x.cust_sk,
             x.fisc_yr_mth,
             x.fisc_mth_start_dt,
             x.unfrm_grs_tgp,
             CASE
                WHEN x.unfrm_grs_tgp <> 0 THEN CASE WHEN x.drop_cnt <> 0 THEN x.unfrm_grs_tgp / x.drop_cnt ELSE 0 END
                ELSE NULL
             END
                unfrm_grs_tgp_per_drop
        FROM (  SELECT s.cust_nbr,
                       s.div_nbr,
                       c.cust_sk,
                       t.fisc_yr_mth,
                       p.fisc_mth_start_dt,
                       SUM(CASE
                              WHEN NVL(pim.pim_suprcls_id, 1) <> 97 THEN
                                 NVL(s.grs_sls_extnd - s.dwa_cost_extnd - (CASE WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END) + s.ttl_vndr_fnd_dvt, 0)
                              ELSE
                                 0
                           END)
                          unfrm_grs_tgp,
                       COUNT(DISTINCT CASE
                                         WHEN NVL(pim.pim_suprcls_id, 1) <> 97
                                          AND s.trans_typ = 'RT' THEN
                                            s.div_nbr || s.cust_nbr || s.prcs_dt || s.inv_dt || s.dlvr_rte
                                         ELSE
                                            NULL
                                      END)
                          drop_cnt
                  FROM xdmadm.sales_corp s,
                       xdmadm.div_corp d,
                       xdmadm.time_corp t,
                       xdmadm.prd_time_corp p,
                       xdmadm.pim_corp pim,
                       xdmadm.cust_corp c
                 WHERE NVL(s.sls_revenue_div_nbr, s.div_nbr) = d.div_nbr
                   AND s.prcs_dt = t.clndr_dt
                   AND s.cust_nbr = c.cust_nbr
                   AND s.div_nbr = c.div_nbr
                   AND s.pim_usf_std_prod_cd = pim.pim_usf_std_prod_cd
                   AND s.xfer_to_dt IS NULL
                   AND t.fisc_yr_mth = p.fisc_yr_mth
                   AND s.div_nbr = v_in_div_nbr
                   AND d.div_typ_cd <> 'CC'
				   AND  (case when NVL (d.acqstn_cmpny_nm,'USF') <> 'USF'
						 and NVL(s.sls_revenue_div_nbr, s.div_nbr) = d.div_nbr
					     and s.prcs_dt < NVL(d.acqstn_dt,s.prcs_dt)
					     then 'NON_USFGL' else 'USFGL' END) ='USFGL'  -- (20190501 Modified for Acquisition Data Ledger)
                   --AND NVL (d.acqstn_cmpny_nm,'USF') = 'USF'   --Modified for Acquisition ( 20190501 Commented out for Acquisition Data Ledger)
                   AND EXISTS (SELECT 'X'
                                 FROM xdmadm.sales_corp s2, xdmadm.time_corp t2
                                WHERE s2.prcs_dt = t2.clndr_dt
                                  AND s2.div_nbr = v_in_div_nbr
                                  AND s2.xfer_to_dt IS NULL
                                  AND s2.xfer_from_dt IS NULL
                                  AND s2.ldr_tm > v_in_ldr_tm
                                  AND s2.trans_typ = 'AP'
                                  AND s2.cust_nbr = s.cust_nbr
                                  AND s2.div_nbr = s.div_nbr
                                  AND t2.fisc_yr_mth = t.fisc_yr_mth)
              GROUP BY s.cust_nbr,
                       s.div_nbr,
                       c.cust_sk,
                       t.fisc_yr_mth,
                       p.fisc_mth_start_dt) x;

   TYPE t_ap_tgp IS TABLE OF c_ap_tgp%ROWTYPE;

   r_ap_tgp                         t_ap_tgp;

   /*cursor to update tagp_per_drops and next_fisc_mth_cust_clsfctn.  The next_fisc_mth_cust_clsfctn is built by using the lead function
     it will find the next months clsfctn and populate.  The logic in the case statement below is to handle all situation that could possibly occur for each customer.
     The column should only be populated if the customer, division, fisc year and fisc month of year are in sequental order.  If a month gets skipped then
     the next_fisc_mth_cust_clsfctn will be 'OTHER'.  If the month is the month before the last closed period it will be null because the next period has not been classified yet.
     */
   CURSOR tagp_drops(
      c_fisc_yr      IN            NUMBER,
      c_fisc_mth_of_yr IN          VARCHAR2,
      c_end_dt       IN            DATE,
      c_in_div_nbr   IN            NUMBER,
      c_last_fisc_yr_mth IN        VARCHAR2,
      c_fisc_yr_mth_three_mth_ago IN VARCHAR2,
      c_fisc_yr_mth_six_mth_ago IN VARCHAR2,
      c_prior_fisc_mth_strt_dt IN  DATE) IS
      WITH cust_list AS (SELECT DISTINCT cust_sk, cust_nbr, div_nbr
                           FROM xdmadm.sales_corp
                          WHERE xfer_from_dt IS NOT NULL
                            AND div_nbr = v_in_div_nbr
                            AND ldr_tm > v_in_ldr_tm)
      SELECT cust_sk,
             cust_nbr,
             div_nbr,
             fisc_yr,
             fisc_mth_of_yr,
             fisc_yr_mth,
             cust_clsfctn,
             fisc_mth_strt_dt,
             fisc_mth_end_dt,
             nbr_of_wk_ordr_last_yr_mth,
             nbr_of_wk_ordr_this_yr_mth,
             CASE WHEN fisc_yr_mth < v_last_fisc_yr_mth THEN NVL(next_prd_cust_clsfctn, 'OTHER') ELSE NULL END
                next_fisc_mth_cust_clsfctn,
             CASE
                WHEN fisc_yr_mth < v_fisc_yr_mth_three_mth_ago THEN NVL(three_month_cust_clsfctn, 'OTHER')
                ELSE NULL
             END
                three_mth_cust_clsfctn,
             CASE WHEN fisc_yr_mth < v_fisc_yr_mth_six_mth_ago THEN NVL(six_month_cust_clsfctn, 'OTHER') ELSE NULL END
                six_mth_cust_clsfctn,
             CASE WHEN fisc_yr_mth < v_last_fisc_yr_mth THEN NVL(nbr_of_wk_ordr_next_mth, 0) ELSE 0 END
                nbr_of_wk_ordr_next_mth,
             CASE WHEN fisc_yr_mth < v_last_fisc_yr_mth THEN NVL(next_fmth_unfrm_grs_sls_extnd, 0) ELSE 0 END
                next_fmth_unfrm_grs_sls_extnd, --add for sprint 7 to calculate next fisc mth unfrm_grs_sls_extnd
             CASE WHEN fisc_yr_mth < v_last_fisc_yr_mth THEN NVL(next_fmth_unfrm_tagp, 0) ELSE 0 END
                next_fmth_unfrm_tagp, --add for sprint 7 to calculate next fisc mth unfrm_tagp
             CASE WHEN fisc_yr_mth < v_last_fisc_yr_mth THEN NVL(next_fmth_unfrm_grs_tgp, 0) ELSE 0 END
                next_fmth_unfrm_grs_tgp,
             CASE WHEN fisc_yr_mth < v_last_fisc_yr_mth THEN NVL(next_fmth_unfrm_qty_ship, 0) ELSE 0 END
                next_fmth_unfrm_qty_ship --add for sprint 7 to calculate next fisc mth unfrm_qty_ship
        FROM (SELECT c.cust_sk,
                     c.cust_nbr,
                     c.div_nbr,
                     c.fisc_yr,
                     c.fisc_mth_of_yr,
                     c.fisc_yr_mth,
                     c.fisc_mth_strt_dt,
                     c.fisc_mth_end_dt,
                     nbr_of_wk_ordr_last_yr_mth,
                     nbr_of_wk_ordr_this_yr_mth,
                     cust_clsfctn,
                     LEAD(cust_clsfctn, 1, NULL)
                        OVER (PARTITION BY c.cust_nbr, c.div_nbr
                              ORDER BY c.div_nbr,
                                       c.cust_nbr,
                                       c.fisc_yr,
                                       c.fisc_mth_of_yr)
                        AS next_prd_cust_clsfctn,
                     LEAD(c.cust_clsfctn, 3, NULL)
                        OVER (PARTITION BY c.cust_nbr, c.div_nbr
                              ORDER BY c.div_nbr,
                                       c.cust_nbr,
                                       c.fisc_yr,
                                       c.fisc_mth_of_yr)
                        AS three_month_cust_clsfctn,
                     LEAD(c.cust_clsfctn, 6, NULL)
                        OVER (PARTITION BY c.cust_nbr, c.div_nbr
                              ORDER BY c.div_nbr,
                                       c.cust_nbr,
                                       c.fisc_yr,
                                       c.fisc_mth_of_yr)
                        AS six_month_cust_clsfctn,
                     LEAD(nbr_of_wk_ordr_this_yr_mth, 1, NULL)
                        OVER (PARTITION BY c.cust_nbr, c.div_nbr
                              ORDER BY c.div_nbr,
                                       c.cust_nbr,
                                       c.fisc_yr,
                                       c.fisc_mth_of_yr)
                        AS nbr_of_wk_ordr_next_mth,
                     LEAD(unfrm_grs_sls_extnd, 1, NULL)
                        OVER (PARTITION BY c.cust_nbr, c.div_nbr
                              ORDER BY c.div_nbr,
                                       c.cust_nbr,
                                       c.fisc_yr,
                                       c.fisc_mth_of_yr)
                        AS next_fmth_unfrm_grs_sls_extnd, --Sprint 7
                     LEAD(unfrm_tagp, 1, NULL)
                        OVER (PARTITION BY c.cust_nbr, c.div_nbr
                              ORDER BY c.div_nbr,
                                       c.cust_nbr,
                                       c.fisc_yr,
                                       c.fisc_mth_of_yr)
                        AS next_fmth_unfrm_tagp, --Sprint 7
                     LEAD(unfrm_grs_tgp, 1, NULL)
                        OVER (PARTITION BY c.cust_nbr, c.div_nbr
                              ORDER BY c.div_nbr,
                                       c.cust_nbr,
                                       c.fisc_yr,
                                       c.fisc_mth_of_yr)
                        AS next_fmth_unfrm_grs_tgp,
                     LEAD(unfrm_qty_ship, 1, NULL)
                        OVER (PARTITION BY c.cust_nbr, c.div_nbr
                              ORDER BY c.div_nbr,
                                       c.cust_nbr,
                                       c.fisc_yr,
                                       c.fisc_mth_of_yr)
                        AS next_fmth_unfrm_qty_ship --Sprint 7
                FROM xdmadm.cust_clsfctn_corp c
               WHERE c.fisc_mth_strt_dt <= v_prior_fisc_mth_strt_dt
                 AND c.div_nbr = v_in_div_nbr
                 AND c.cust_nbr IN (SELECT DISTINCT cust_nbr FROM cust_list));

   TYPE t_tagp_drops IS TABLE OF tagp_drops%ROWTYPE;

   r_tagp_drops                     t_tagp_drops;
BEGIN
   l_fn_start   := SYSDATE;

   -- Get date parameters
   -- ODATE determines the last sales record (based on prcs_dt)
   -- that will be included in the sales comparison for current year sales.
   -- If ODATE does not fall on a Saturday, calculate back to the most recent Saturday date.  This is the last closed week.
   -- Whatever period the Saturday date falls on is the processing period.
   CASE TRIM(TO_CHAR(v_odate, 'DAY'))
      WHEN 'SATURDAY' THEN
         v_end_dt   := v_odate;
      ELSE
         v_end_dt   := TRUNC(v_odate, 'DAY') - 1; -- get the most recent Saturday date
   END CASE;

   SELECT t.fisc_yr, t.fisc_mth_of_yr, t.fisc_yr_mth
     INTO v_fisc_yr, v_fisc_mth_of_yr, v_fisc_yr_mth
     FROM xdmadm.time_corp t
    WHERE t.clndr_dt = v_end_dt;

   SELECT t.fisc_yr,
          t.fisc_mth_of_yr,
          t.fisc_wk_of_yr,
          t.fisc_wk_of_prd,
          t.fisc_yr_mth
     INTO v_cur_fisc_yr,
          v_cur_fisc_mth_of_yr,
          v_fisc_wk_of_yr,
          v_fisc_wk_of_prd,
          v_cur_fisc_yr_mth
     FROM xdmadm.time_corp t
    WHERE t.clndr_dt = v_odate;

   SELECT MIN(t.clndr_dt), MIN(t.clndr_dt_yrago)
     INTO v_fisc_wk_strt_dt, v_fisc_wk_strt_dt_yrago
     FROM xdmadm.time_corp t
    WHERE t.fisc_yr = v_cur_fisc_yr
      AND t.fisc_wk_of_yr = v_fisc_wk_of_yr;

   SELECT MAX(t.clndr_dt_yrago),
          MIN(clndr_dt_yrago),
          MIN(clndr_dt),
          MAX(clndr_dt)
     INTO v_fisc_mth_end_dt_yrago,
          v_fisc_mth_strt_dt_yrago,
          v_fisc_mth_strt_dt,
          v_fisc_mth_end_dt
     FROM xdmadm.time_corp t
    WHERE t.fisc_yr = v_cur_fisc_yr
      AND t.fisc_mth_of_yr = v_cur_fisc_mth_of_yr;

   SELECT MAX(t.fisc_wk_of_yr)
     INTO v_py_max_wk -- check if prior year has 53 weeks
     FROM xdmadm.time_corp t
    WHERE t.fisc_yr = v_fisc_yr - 1;

   SELECT MAX(t.fisc_wk_of_yr)
     INTO v_2y_ago_max_wk -- check if 2 years ago has 53 weeks
     FROM xdmadm.time_corp t
    WHERE t.fisc_yr = v_fisc_yr - 2;

   IF v_fisc_wk_of_prd <> 1 THEN
      v_fisc_wk_strt_dt_yrago   := NULL;
      v_fisc_mth_end_dt_yrago   := NULL;
   END IF;

   SELECT MIN(clndr_dt)
     INTO v_prior_fisc_mth_strt_dt
     FROM xdmadm.time_corp
    WHERE fisc_yr_mth IN (SELECT MAX(a.fisc_yr_mth)
                            FROM xdmadm.time_corp a
                           WHERE a.fisc_yr_mth < (SELECT a.fisc_yr_mth
                                                    FROM xdmadm.time_corp a
                                                   WHERE a.clndr_dt = v_odate));

   SELECT MAX(fisc_mth_of_yr), MAX(fisc_yr), MAX(fisc_yr_mth)
     INTO v_last_fisc_mth_of_yr, v_fisc_yr_last_mth, v_last_fisc_yr_mth
     FROM xdmadm.time_corp a
    WHERE fisc_yr_mth = (SELECT MAX(a.fisc_yr_mth) --min(fisc_mth_of_yr) fisc_mth_of_yr, max(a.fisc_yr) fisc_yr
                           FROM xdmadm.time_corp a
                          WHERE a.fisc_yr_mth < (SELECT a.fisc_yr_mth
                                                   FROM xdmadm.time_corp a
                                                  WHERE a.clndr_dt = v_odate));

   --find fisc_yr_mth 6 months ago for 6 month churn

   SELECT CASE WHEN fisc_mth_of_yr > 6 THEN fisc_yr_mth - 6 ELSE fisc_yr_mth - 94 END
     INTO v_fisc_yr_mth_six_mth_ago
     FROM xdmadm.time_corp
    WHERE clndr_dt = v_odate;

   --find fisc_yr_mth 3 months ago for 6 month churn
   SELECT CASE WHEN fisc_mth_of_yr > 3 THEN fisc_yr_mth - 3 ELSE fisc_yr_mth - 91 END
     INTO v_fisc_yr_mth_three_mth_ago
     FROM xdmadm.time_corp
    WHERE clndr_dt = v_odate;

   -- Get PIM_SUPRCLS_ID to calculate cat sold MN 03142013
   SELECT param_value_nbr
     INTO v_net_acct_pim_suprcls_id
     FROM xdmadm.param_value
    WHERE app_name = 'MERLIN'
      AND param_type = 'NON_ADMIN_PIM_SUPRCLS_ID'
      AND param_code = 'UPPER_LIMIT';

   DBMS_OUTPUT.put_line('Processing year: ' || v_fisc_yr || ' period: ' || v_fisc_mth_of_yr || ' ' || SYSTIMESTAMP);

   IF v_in_cust_nbr IS NULL THEN
      -- check if there are any transfers to process
      SELECT COUNT( * )
        INTO v_cnt
        FROM xdmadm.sales_corp
       WHERE div_nbr = v_in_div_nbr
         AND xfer_from_dt IS NOT NULL
         AND ldr_tm > v_in_ldr_tm;

      -- this dictates what customers get reclassified
      -- in this scenario it will get list of customers who were transferred since the last load
      v_cust_vw   :=
         q'[(SELECT cc.cust_sk, cc.cust_nbr, cc.div_nbr, cc.first_rt_fisc_yr_mth
             FROM xdmadm.cust_corp cc
             WHERE EXISTS (SELECT 'X'
                     FROM xdmadm.sales_corp
                    WHERE div_nbr = ]'
                  || v_in_div_nbr
                  || q'[ AND xfer_from_dt IS NOT NULL
                      AND ldr_tm > ]'
                     || v_in_ldr_tm
                     || q'[ AND cust_nbr = cc.cust_nbr
                      AND div_nbr = cc.div_nbr)) c]';

   ELSE -- if cust_nbr input not null then reclassify specific customer
      -- check if valid customer#
      SELECT COUNT( * )
        INTO v_cnt
        FROM xdmadm.cust_corp
       WHERE div_nbr = v_in_div_nbr
         AND cust_nbr = v_in_cust_nbr;

      -- this dictates what customers get reclassified
      -- in this scenario it will list the one customer from the input
      v_cust_vw   :=
         '(SELECT  cust_nbr, div_nbr, cust_sk, first_rt_fisc_yr_mth FROM xdmadm.cust_corp
              WHERE   div_nbr = '
         || v_in_div_nbr
         || ' AND     cust_nbr = '''
         || v_in_cust_nbr
         || ''') c ';
   END IF;

   DBMS_OUTPUT.put_line('v_cnt ' || v_cnt);

   IF v_cnt > 0 THEN
      -- drop table
      DBMS_OUTPUT.put_line(
         'Dropping table ' || v_src_schema || '.' || v_tbl_prfx || v_in_div_nbr || ' ' || SYSTIMESTAMP);

      BEGIN
         EXECUTE IMMEDIATE 'DROP TABLE ' || v_src_schema || '.' || v_tbl_prfx || v_in_div_nbr;

         DBMS_OUTPUT.put_line(
            'Table ' || v_src_schema || '.' || v_tbl_prfx || v_in_div_nbr || ' dropped ' || SYSTIMESTAMP);
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.put_line(   'Table '
                                 || v_src_schema
                                 || '.'
                                 || v_tbl_prfx
                                 || v_in_div_nbr
                                 || ' does not exist. Continue processing...');
      END;

      -- build classification data
      v_ctas_stmt    :=
         'CREATE TABLE ' || v_src_schema || '.' || v_tbl_prfx || v_in_div_nbr
         || q'[ TABLESPACE SALES_TS NOLOGGING AS
                   -- current year reclassification
                   SELECT c.cust_nbr,
                          c.div_nbr,
                          c.fisc_yr,
                          c.fisc_mth_of_yr,
                          0 as fisc_wk_of_yr,
                            CASE
                               WHEN no_cd_unfrm_sales_ty > 0
                                AND no_cd_unfrm_sales_ly > 0 THEN
                                  'PRIOR YEAR'
                               WHEN no_cd_unfrm_sales_ty > 0
                                AND no_cd_unfrm_sales_ly <= 0 THEN
                                  'NEW'
                               WHEN no_cd_unfrm_sales_ty <= 0
                                AND no_cd_unfrm_sales_ly > 0 THEN
                                  'LOST'
                               ELSE
                                  'OTHER'
                            END
                               AS cust_clsfctn,
                          t.fisc_mth_strt_dt,
                          t.fisc_mth_end_dt,
                          t.fisc_mth_strt_dt_yrago,
                          t.fisc_mth_end_dt_yrago,
                          sysdate as crt_dt,
                          nbr_wk_ly as nbr_of_wk_ordr_last_yr_mth,
                          nbr_wk_ty as nbr_of_wk_ordr_this_yr_mth,
                          c.cust_sk,
                          c.fisc_yr_mth,
                          c.tagp,
                          c.drops,
                          c.tagp_per_drop,
                          c.grs_sls_extnd,
                          c.qty_ship,
                          c.unfrm_grs_sls_extnd,
                          c.unfrm_tagp,
                          c.unfrm_qty_ship,
                          c.sos_cnt as fisc_mth_sos_cnt,
                          c.cat_sold,
                          c.unfrm_grs_tgp,
                          CASE
                             WHEN c.unfrm_grs_tgp <> 0 THEN CASE WHEN drops <> 0 THEN c.unfrm_grs_tgp / c.drops ELSE 0 END
                             ELSE NULL
                          END
                             unfrm_grs_tgp_per_drop,
                          c.cust_tenure_mth_actl,
                          CASE WHEN NVL(net_acct_flg, 'N') = 'Y' THEN c.cust_sk ELSE NULL END net_acct_cust_sk
                   FROM (SELECT cust_nbr,
                                div_nbr,
                                fisc_yr,
                                fisc_mth_of_yr,
                                sum(NVL(sales_ty,0)) AS sales_ty,
                                sum(NVL(sales_ly,0)) AS sales_ly,
                                SUM(NVL(no_cd_unfrm_sales_ty, 0)) AS no_cd_unfrm_sales_ty,
                                SUM(NVL(no_cd_unfrm_sales_ly, 0)) AS no_cd_unfrm_sales_ly,
                                sum(nvl(nbr_wk_ly,0)) nbr_wk_ly,
                                sum(nvl(nbr_wk_ty,0)) nbr_wk_ty,
                                cust_sk,
                                fisc_yr_mth,
                                sum(nvl(tagp,0)) tagp,
                                sum(nvl(drops,0)) drops,
                                sum(nvl(tagp_per_drop,0)) tagp_per_drop,
                                sum(nvl(grs_sls_extnd,0)) grs_sls_extnd,
                                sum(nvl(qty_ship,0)) qty_ship,
                                sum(nvl(unfrm_grs_sls_extnd,0)) unfrm_grs_sls_extnd,
                                sum(nvl(unfrm_tagp,0)) unfrm_tagp,
                                sum(nvl(unfrm_qty_ship,0)) unfrm_qty_ship,
                                sum(nvl(sos_cnt,0)) sos_cnt,
                                MAX(NVL(cat_sold, 0)) cat_sold,
                                SUM(NVL(unfrm_grs_tgp, 0)) unfrm_grs_tgp,
                                cust_tenure_mth_actl,
                                MAX(NVL(net_acct_flg, 0)) net_acct_flg
                         FROM
                         (SELECT cust_list.cust_nbr,
                                cust_list.div_nbr,
                                cust_list.fisc_yr,
                                cust_list.fisc_mth_of_yr,
                                CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[ THEN NVL(cust_sales_ty_ly.grs_sls_extnd,0)
                                  ELSE 0
                                END sales_ty,
                                CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1 THEN NVL(cust_sales_ty_ly.grs_sls_extnd,0)
                                  ELSE 0
                                END sales_ly,
                                CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[ THEN NVL(cust_sales_ty_ly.no_cd_unfrm_grs_sls_extnd,0)
                                  ELSE 0
                                END no_cd_unfrm_sales_ty,
                                CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1 THEN NVL(cust_sales_ty_ly.no_cd_unfrm_grs_sls_extnd,0)
                                  ELSE 0
                                END no_cd_unfrm_sales_ly,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1 then cust_sales_ty_ly.nbr_wk end nbr_wk_ly,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[ then cust_sales_ty_ly.nbr_wk end nbr_wk_ty,
                                cust_list.cust_sk,
                                cust_list.fisc_yr_mth,
                                cust_list.cust_tenure_mth_actl,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[ then cust_sales_ty_ly.tagp end tagp,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[ then cust_sales_ty_ly.drops end drops,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[ then cust_sales_ty_ly.tagp_per_drop end tagp_per_drop,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[ then cust_sales_ty_ly.grs_sls_extnd end grs_sls_extnd,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[ then cust_sales_ty_ly.qty_ship end qty_ship,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[ then cust_sales_ty_ly.unfrm_grs_sls_extnd end unfrm_grs_sls_extnd,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[ then cust_sales_ty_ly.unfrm_tagp end unfrm_tagp,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[ then cust_sales_ty_ly.unfrm_qty_ship end unfrm_qty_ship,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[ then sos_cnt.sos_cnt end sos_cnt,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[ then cust_sales_ty_ly.unfrm_grs_tgp end unfrm_grs_tgp,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[ then cust_sales_ty_ly.cat_sold end cat_sold,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[ then cust_sales_ty_ly.net_acct_flg end net_acct_flg
                         FROM (SELECT c.div_nbr,
                                      c.cust_nbr,
                                      t.fisc_yr,
                                      t.fisc_mth_of_yr,
                                      t.fisc_yr_mth,
                                      c.cust_sk,
                                      (SELECT COUNT(fisc_yr_mth) - 2
                                                   FROM xdmadm.prd_time_corp
                                                  WHERE fisc_yr_mth BETWEEN c.first_rt_fisc_yr_mth AND t.fisc_yr_mth)
                                           cust_tenure_mth_actl
                               FROM ]'
         || v_cust_vw
         || q'[,
                                    (SELECT t.fisc_yr, t.fisc_mth_of_yr, t.fisc_yr_mth
                                     FROM xdmadm.time_corp t
                                     WHERE t.fisc_yr = ]'
         || v_fisc_yr
         || q'[ AND t.fisc_mth_of_yr <= ']'
         || v_fisc_mth_of_yr
         || q'[' GROUP BY t.fisc_yr, t.fisc_mth_of_yr, t.fisc_yr_mth) t) cust_list,
                                 (select cust_nbr, div_nbr, fisc_yr_mth, count(sos_id) sos_cnt
                                    from xdmadm.sos_data
                                    where inact_dt is null
                                   and fisc_yr_mth <= ']'
         || v_fisc_yr_mth
         || q'[' group by cust_nbr, div_nbr, fisc_yr_mth) sos_cnt,
                              (SELECT s.div_nbr,
                                      s.cust_nbr,
                                      t.fisc_yr,
                                      t.fisc_mth_of_yr,
                                      count(distinct t.fisc_wk_of_prd) nbr_wk,
                                      SUM (NVL (s.actl_gp, 0)) TAGP,
                                     count(distinct case when s.trans_typ = 'RT' AND pim_suprcls_id_actl <> 97 AND pim_suprcls_id_actl IS NOT NULL then s.DIV_NBR||s.CUST_NBR||INV_DT||nvl(DLVR_RTE,'')||PRCS_DT else NULL end) DROPS,
                                     case when count(distinct case when s.trans_typ = 'RT' then s.DIV_NBR||s.CUST_NBR||INV_DT||nvl(DLVR_RTE,'')||PRCS_DT else NULL end) > 0
                                          then SUM (NVL (s.actl_gp, 0)) /count(distinct case when s.trans_typ = 'RT' then s.DIV_NBR||s.CUST_NBR||INV_DT||nvl(DLVR_RTE,'')||PRCS_DT else NULL end)
                                          else 0 end TAGP_PER_DROP,
                                     SUM (grs_sls_extnd) AS GRS_SLS_EXTND,
                                     SUM(CASE
                                                WHEN s.trans_typ IN ('RT', 'VS', 'WC')
                                                 AND pim.pim_suprcls_id <> 97
                                                 AND pim.pim_suprcls_id is not null THEN
                                                   s.grs_sls_extnd
                                                ELSE
                                                   NULL
                                             END)
                                            no_cd_unfrm_grs_sls_extnd,
                                     SUM(QTY_SHIP) as QTY_SHIP,
                                     SUM(UNFRM_QTY_SHIP)UNFRM_QTY_SHIP,
                                     sum(case when pim.pim_suprcls_id <> 97
                                          and pim.pim_suprcls_id is not null
                                         then grs_sls_extnd
                                         else 0
                                         END) UNFRM_GRS_SLS_EXTND,
                                     sum(case when pim.pim_suprcls_id <> 97
                                         and pim.pim_suprcls_id is not null
                                         then actl_gp
                                          else 0
                                     END) UNFRM_TAGP,
                                    SUM(CASE
                                                WHEN pim.pim_suprcls_id <> 97
                                                 AND pim.pim_suprcls_id IS NOT NULL THEN
                                                   NVL(s.grs_sls_extnd - s.dwa_cost_extnd - (CASE WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END) + s.ttl_vndr_fnd_dvt, 0)
                                                ELSE
                                                   0
                                             END)
                                            unfrm_grs_tgp,
                                         COUNT(
                                            DISTINCT (CASE
                                                         WHEN pim.pim_suprcls_id <= ]'
         || v_net_acct_pim_suprcls_id
         || q'[ THEN
                                                            pim.pim_suprcls_id
                                                         ELSE
                                                            NULL
                                                      END))
                                            cat_sold,
                                         MAX(CASE
                                                WHEN s.trans_typ IN ('RT', 'VS', 'WC')
                                                 AND pim.pim_suprcls_id <> 97
                                                 AND pim.pim_suprcls_id IS NOT NULL THEN
                                                   'Y'
                                                ELSE
                                                   'N'
                                             END)
                                            net_acct_flg
                               FROM xdmadm.time_corp t,
                                    xdmadm.sales_corp s,
                                    xdmadm.pim_corp pim,
                                    xdmadm.div_corp d, ]'
         || v_cust_vw
         || q'[ WHERE     t.fisc_yr in (]'
         || v_fisc_yr
         || ','
         || v_fisc_yr
         || q'[-1)
                                     AND t.fisc_mth_of_yr <= ']'
         || v_fisc_mth_of_yr
         || q'[' AND t.fisc_wk_of_yr <> CASE
                                                               WHEN t.fisc_yr = (]'
         || v_fisc_yr
         || q'[-1) AND ']'
         || v_fisc_mth_of_yr
         || q'[' = '12' AND ]'
         || v_py_max_wk
         || q'[= 53 THEN 53    --*** WEEK 52-53 LOGIC *** exclude week #53 from last year if current period=12 and last year has 53 weeks
                                                               ELSE 99    -- else, include all weeks
                                                            END
                                     AND t.clndr_dt <= ']'
         || v_end_dt;

           v_ctas_stmt1 := q'[' AND s.prcs_dt = t.clndr_dt
                                     AND s.xfer_to_dt IS NULL
                                     AND s.div_nbr = c.div_nbr
                                     AND s.cust_nbr = c.cust_nbr
                                     AND s.pim_usf_std_prod_cd = pim.pim_usf_std_prod_cd
                                     AND NVL(s.sls_revenue_div_nbr, s.div_nbr) = d.div_nbr
                                     AND d.div_typ_cd <> 'CC'
								     AND  (case when NVL (d.acqstn_cmpny_nm,'USF') <> 'USF'
								    	 and NVL(s.sls_revenue_div_nbr, s.div_nbr) = d.div_nbr
									     and s.prcs_dt < NVL(d.acqstn_dt,s.prcs_dt)
									     then 'NON_USFGL' else 'USFGL' END) ='USFGL'
                                     GROUP BY s.div_nbr, s.cust_nbr, t.fisc_yr, t.fisc_mth_of_yr) cust_sales_ty_ly -- inline view to get cust/div sales this year and last year
                         WHERE     cust_list.cust_nbr = cust_sales_ty_ly.cust_nbr(+)
                               AND cust_list.div_nbr = cust_sales_ty_ly.div_nbr(+)
                               AND cust_list.fisc_mth_of_yr = cust_sales_ty_ly.fisc_mth_of_yr(+)
                               AND cust_list.fisc_yr_mth = sos_cnt.fisc_yr_mth(+)
                               AND cust_list.cust_nbr = sos_cnt.cust_nbr(+)
                               AND cust_list.div_nbr = sos_cnt.div_nbr(+))
                         GROUP by
                                cust_sk,
                                cust_nbr,
                                div_nbr,
                                fisc_yr,
                                fisc_mth_of_yr,
                                fisc_yr_mth,
                                cust_tenure_mth_actl
                               ) c,
                         (select fisc_yr, fisc_mth_of_yr, fisc_yr_mth,
                                 min(clndr_dt) fisc_mth_strt_dt,
                                 max(clndr_dt) fisc_mth_end_dt,
                                 min(clndr_dt_yrago) fisc_mth_strt_dt_yrago,
                                 max(clndr_dt_yrago) fisc_mth_end_dt_yrago
                                 from xdmadm.time_corp
                                 group by fisc_yr, fisc_mth_of_yr, fisc_yr_mth) t
                         where t.fisc_yr = c.fisc_yr
                           and t.fisc_mth_of_yr = c.fisc_mth_of_yr
                   UNION ALL
                   -- prior year reclassification
                   SELECT c.cust_nbr,
                          c.div_nbr,
                          c.fisc_yr,
                          c.fisc_mth_of_yr,
                          0 as fisc_wk_of_yr,
                            CASE
                               WHEN no_cd_unfrm_sales_ty > 0
                                AND no_cd_unfrm_sales_ly > 0 THEN
                                  'PRIOR YEAR'
                               WHEN no_cd_unfrm_sales_ty > 0
                                AND no_cd_unfrm_sales_ly <= 0 THEN
                                  'NEW'
                               WHEN no_cd_unfrm_sales_ty <= 0
                                AND no_cd_unfrm_sales_ly > 0 THEN
                                  'LOST'
                               ELSE
                                  'OTHER'
                            END
                               AS cust_clsfctn,
                          t.fisc_mth_strt_dt,
                          t.fisc_mth_end_dt,
                          t.fisc_mth_strt_dt_yrago,
                          t.fisc_mth_end_dt_yrago,
                          sysdate as crt_dt,
                          nbr_wk_ly,
                          nbr_wk_ty,
                          c.cust_sk,
                          c.fisc_yr_mth,
                          c.tagp,
                          c.drops,
                          c.tagp_per_drop,
                          c.grs_sls_extnd,
                          c.qty_ship,
                          c.unfrm_grs_sls_extnd,
                          c.unfrm_tagp,
                          c.unfrm_qty_ship,
                          c.sos_cnt as fisc_mth_sos_cnt,
                          c.cat_sold,
                          c.unfrm_grs_tgp,
                          CASE
                             WHEN c.unfrm_grs_tgp <> 0 THEN CASE WHEN drops <> 0 THEN c.unfrm_grs_tgp / c.drops ELSE 0 END
                             ELSE NULL
                          END
                             unfrm_grs_tgp_per_drop,
                          c.cust_tenure_mth_actl,
                          CASE WHEN NVL(net_acct_flg, 'N') = 'Y' THEN c.cust_sk ELSE NULL END net_acct_cust_sk
                   FROM (SELECT cust_nbr,
                                div_nbr,
                                fisc_yr,
                                fisc_mth_of_yr,
                                sum(NVL(sales_ty,0)) AS sales_ty,
                                sum(NVL(sales_ly,0)) AS sales_ly,
                                SUM(NVL(no_cd_unfrm_sales_ty, 0)) AS no_cd_unfrm_sales_ty,
                                SUM(NVL(no_cd_unfrm_sales_ly, 0)) AS no_cd_unfrm_sales_ly,
                                sum(nvl(nbr_wk_ly,0)) nbr_wk_ly,
                                sum(nvl(nbr_wk_ty,0)) nbr_wk_ty,
                                cust_sk,
                                fisc_yr_mth,
                                sum(nvl(tagp,0)) tagp,
                                sum(nvl(drops,0)) drops,
                                sum(nvl(tagp_per_drop,0)) tagp_per_drop,
                                sum(nvl(grs_sls_extnd,0)) grs_sls_extnd,
                                sum(nvl(qty_ship,0)) qty_ship,
                                sum(nvl(unfrm_grs_sls_extnd,0)) unfrm_grs_sls_extnd,
                                sum(nvl(unfrm_tagp,0)) unfrm_tagp,
                                sum(nvl(unfrm_qty_ship,0)) unfrm_qty_ship,
                                sum(nvl(sos_cnt,0)) sos_cnt,
                                MAX(NVL(cat_sold, 0)) cat_sold,
                                SUM(NVL(unfrm_grs_tgp, 0)) unfrm_grs_tgp,
                                cust_tenure_mth_actl,
                                MAX(NVL(net_acct_flg, 0)) net_acct_flg
                         FROM
                         (SELECT cust_list.cust_nbr,
                                cust_list.div_nbr,
                                cust_list.fisc_yr,
                                cust_list.fisc_mth_of_yr,
                                CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1 THEN NVL(cust_sales_ty_ly.grs_sls_extnd,0)
                                  ELSE 0
                                END sales_ty,
                                CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-2 THEN NVL(cust_sales_ty_ly.grs_sls_extnd,0)
                                  ELSE 0
                                END sales_ly,
                                CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1 THEN NVL(cust_sales_ty_ly.no_cd_unfrm_grs_sls_extnd,0)
                                  ELSE 0
                                END no_cd_unfrm_sales_ty,
                                CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-2 THEN NVL(cust_sales_ty_ly.no_cd_unfrm_grs_sls_extnd,0)
                                  ELSE 0
                                END no_cd_unfrm_sales_ly,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-2 then cust_sales_ty_ly.nbr_wk end nbr_wk_ly,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1 then cust_sales_ty_ly.nbr_wk end nbr_wk_ty,
                                cust_list.cust_sk,
                                cust_list.fisc_yr_mth,
                                cust_list.cust_tenure_mth_actl,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1 then cust_sales_ty_ly.tagp end tagp,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1 then cust_sales_ty_ly.drops end drops,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1 then cust_sales_ty_ly.tagp_per_drop end tagp_per_drop,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1 then cust_sales_ty_ly.grs_sls_extnd end grs_sls_extnd,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1 then cust_sales_ty_ly.qty_ship end qty_ship,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1 then cust_sales_ty_ly.unfrm_grs_sls_extnd end unfrm_grs_sls_extnd,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1 then cust_sales_ty_ly.unfrm_tagp end unfrm_tagp,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1 then cust_sales_ty_ly.unfrm_qty_ship end unfrm_qty_ship,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1 then sos_cnt.sos_cnt end sos_cnt,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1  then cust_sales_ty_ly.unfrm_grs_tgp end unfrm_grs_tgp,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1  then cust_sales_ty_ly.cat_sold end cat_sold,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1  then cust_sales_ty_ly.net_acct_flg end net_acct_flg
                         FROM (SELECT c.div_nbr,
                                      c.cust_nbr,
                                      t.fisc_yr,
                                      t.fisc_mth_of_yr,
                                      t.fisc_yr_mth,
                                      c.cust_sk,
                                      (SELECT COUNT(fisc_yr_mth) - 2
                                                   FROM xdmadm.prd_time_corp
                                                  WHERE fisc_yr_mth BETWEEN c.first_rt_fisc_yr_mth AND t.fisc_yr_mth)
                                           cust_tenure_mth_actl
                               FROM ]'
         || v_cust_vw
         || q'[,
                                    (SELECT t.fisc_yr, t.fisc_mth_of_yr, t.fisc_yr_mth
                                     FROM xdmadm.time_corp t
                                     WHERE t.fisc_yr = ]'
         || v_fisc_yr
         || q'[ -1
                                     GROUP BY t.fisc_yr, t.fisc_mth_of_yr, t.fisc_yr_mth) t) cust_list,
                                 (select cust_nbr, div_nbr, fisc_yr_mth, count(sos_id) sos_cnt
                                    from xdmadm.sos_data
                                    where inact_dt is null
                                   and fisc_yr_mth <= ']'
         || v_fisc_yr_mth
         || q'[' group by cust_nbr, div_nbr, fisc_yr_mth) sos_cnt,
                              (SELECT s.div_nbr,
                                      s.cust_nbr,
                                      t.fisc_yr,
                                      t.fisc_mth_of_yr,
                                      count(distinct t.fisc_wk_of_prd) nbr_wk,
                                      SUM (NVL (s.actl_gp, 0)) TAGP,
                                     count(distinct case when s.trans_typ = 'RT' AND pim_suprcls_id_actl <> 97 AND pim_suprcls_id_actl IS NOT NULL then s.DIV_NBR||s.CUST_NBR||INV_DT||nvl(DLVR_RTE,'')||PRCS_DT else NULL end) DROPS,
                                     case when count(distinct case when s.trans_typ = 'RT' then s.DIV_NBR||s.CUST_NBR||INV_DT||nvl(DLVR_RTE,'')||PRCS_DT else NULL end) > 0
                                          then SUM (NVL (s.actl_gp, 0)) /count(distinct case when s.trans_typ = 'RT' then s.DIV_NBR||s.CUST_NBR||INV_DT||nvl(DLVR_RTE,'')||PRCS_DT else NULL end)
                                          else 0 end TAGP_PER_DROP,
                                     SUM (grs_sls_extnd) AS GRS_SLS_EXTND,
                                     SUM(CASE
                                                WHEN s.trans_typ IN ('RT', 'VS', 'WC')
                                                 AND pim.pim_suprcls_id <> 97
                                                 AND pim.pim_suprcls_id is not null THEN
                                                   s.grs_sls_extnd
                                                ELSE
                                                   NULL
                                             END)
                                            no_cd_unfrm_grs_sls_extnd,
                                     SUM(QTY_SHIP) as QTY_SHIP,
                                     SUM(UNFRM_QTY_SHIP)UNFRM_QTY_SHIP,
                                     sum(case when pim.pim_suprcls_id <> 97
                                          and pim.pim_suprcls_id is not null
                                         then grs_sls_extnd
                                         else 0
                                         END) UNFRM_GRS_SLS_EXTND,
                                     sum(case when pim.pim_suprcls_id <> 97
                                         and pim.pim_suprcls_id is not null
                                         then actl_gp
                                          else 0
                                     END) UNFRM_TAGP,
                                    SUM(CASE
                                                WHEN pim.pim_suprcls_id <> 97
                                                 AND pim.pim_suprcls_id IS NOT NULL THEN
                                                   NVL(s.grs_sls_extnd - s.dwa_cost_extnd - (CASE WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END) + s.ttl_vndr_fnd_dvt, 0)
                                                ELSE
                                                   0
                                             END)
                                            unfrm_grs_tgp,
                                         COUNT(
                                            DISTINCT (CASE
                                                         WHEN pim.pim_suprcls_id <= ]'
         || v_net_acct_pim_suprcls_id
         || q'[ THEN
                                                            pim.pim_suprcls_id
                                                         ELSE
                                                            NULL
                                                      END))
                                            cat_sold,
                                         MAX(CASE
                                                WHEN s.trans_typ IN ('RT', 'VS', 'WC')
                                                 AND pim.pim_suprcls_id <> 97
                                                 AND pim.pim_suprcls_id IS NOT NULL THEN
                                                   'Y'
                                                ELSE
                                                   'N'
                                             END)
                                            net_acct_flg
                               FROM xdmadm.time_corp t,
                                    xdmadm.sales_corp s,
                                    xdmadm.pim_corp pim,
                                    xdmadm.div_corp d, ]'
         || v_cust_vw
         || q'[ WHERE     t.fisc_yr in (]'
         || v_fisc_yr
         || '-1, '
         || v_fisc_yr
         || '-2)'
         || q'[ AND t.fisc_wk_of_yr <> CASE
                                                               WHEN t.fisc_yr = ]'
         || v_fisc_yr
         || q'[-2 AND
                                                                    t.fisc_mth_of_yr = '12' AND ]'
         || v_2y_ago_max_wk
         || q'[ = 53 THEN 53    -- exclude week #53 from last year if current period=12 and last year has 53 weeks
                                                               ELSE 99    -- else, include all weeks
                                                            END
                                     AND s.prcs_dt = t.clndr_dt
                                     AND s.xfer_to_dt IS NULL
                                     AND s.div_nbr = c.div_nbr
                                     AND s.cust_nbr = c.cust_nbr
                                     AND s.pim_usf_std_prod_cd = pim.pim_usf_std_prod_cd
                                     AND NVL(s.sls_revenue_div_nbr, s.div_nbr) = d.div_nbr
                                     AND d.div_typ_cd <> 'CC'
								     AND  (case when NVL (d.acqstn_cmpny_nm,'USF') <> 'USF'
									 and NVL(s.sls_revenue_div_nbr, s.div_nbr) = d.div_nbr
									 and s.prcs_dt < NVL(d.acqstn_dt,s.prcs_dt)
									 then 'NON_USFGL' else 'USFGL' END) ='USFGL'
                                     GROUP BY s.div_nbr, s.cust_nbr, t.fisc_yr, t.fisc_mth_of_yr) cust_sales_ty_ly -- inline view to get cust/div sales this year and last year
                         WHERE     cust_list.cust_nbr = cust_sales_ty_ly.cust_nbr(+)
                               AND cust_list.div_nbr = cust_sales_ty_ly.div_nbr(+)
                               AND cust_list.fisc_mth_of_yr = cust_sales_ty_ly.fisc_mth_of_yr(+)
                               AND cust_list.fisc_yr_mth = sos_cnt.fisc_yr_mth(+)
                               AND cust_list.cust_nbr = sos_cnt.cust_nbr(+)
                               AND cust_list.div_nbr = sos_cnt.div_nbr(+))
                         GROUP by
                                cust_sk,
                                cust_nbr,
                                div_nbr,
                                fisc_yr,
                                fisc_mth_of_yr,
                                fisc_yr_mth,
                                cust_tenure_mth_actl
                               ) c,
                         (select fisc_yr, fisc_mth_of_yr,fisc_yr_mth,
                                 min(clndr_dt) fisc_mth_strt_dt,
                                 max(clndr_dt) fisc_mth_end_dt,
                                 min(clndr_dt_yrago) fisc_mth_strt_dt_yrago,
                                 max(clndr_dt_yrago) fisc_mth_end_dt_yrago
                                 from xdmadm.time_corp
                                 group by fisc_yr, fisc_mth_of_yr, fisc_yr_mth) t
                         where t.fisc_yr = c.fisc_yr
                           and t.fisc_mth_of_yr = c.fisc_mth_of_yr]';

      DBMS_OUTPUT.put_line(v_ctas_stmt);
      DBMS_OUTPUT.put_line(v_ctas_stmt1);

      EXECUTE IMMEDIATE v_ctas_stmt||' '||v_ctas_stmt1;

      COMMIT;

      DBMS_OUTPUT.put_line(
         'Table ' || v_src_schema || '.' || v_tbl_prfx || v_in_div_nbr || ' created ' || SYSTIMESTAMP);

      DBMS_OUTPUT.put_line('Start Transfered Insert');

      -- Added for sprint 7 to insert records for customers that are transfered for fisc_yr - 2
      l_trans_insert   :=
         'INSERT INTO ' || v_src_schema || '.' || v_tbl_prfx || v_in_div_nbr
         || q'[
           (SELECT c.cust_nbr,
                          c.div_nbr,
                          c.fisc_yr,
                          c.fisc_mth_of_yr,
                          0 as fisc_wk_of_yr,
                          'OTHER' cust_clsfctn,
                          t.fisc_mth_strt_dt,
                          t.fisc_mth_end_dt,
                          t.fisc_mth_strt_dt_yrago,
                          t.fisc_mth_end_dt_yrago,
                          sysdate as crt_dt,
                          NULL nbr_of_wk_ordr_last_yr_mth,
                          nbr_wk_ty as nbr_of_wk_ordr_this_yr_mth,
                          c.cust_sk,
                          c.fisc_yr_mth,
                          c.tagp,
                          c.drops,
                          c.tagp_per_drop,
                          c.grs_sls_extnd,
                          c.qty_ship,
                          c.unfrm_grs_sls_extnd,
                          c.unfrm_tagp,
                          c.unfrm_qty_ship,
                          c.sos_cnt as fisc_mth_sos_cnt,
                          c.cat_sold,
                          c.unfrm_grs_tgp,
                          CASE
                             WHEN c.unfrm_grs_tgp <> 0 THEN CASE WHEN drops <> 0 THEN c.unfrm_grs_tgp / c.drops ELSE 0 END
                             ELSE NULL
                          END
                             unfrm_grs_tgp_per_drop,
                          c.cust_tenure_mth_actl,
                          CASE WHEN NVL(net_acct_flg, 'N') = 'Y' THEN c.cust_sk ELSE NULL END net_acct_cust_sk
                   FROM (SELECT cust_nbr,
                                div_nbr,
                                fisc_yr,
                                fisc_mth_of_yr,
                                sum(nvl(nbr_wk_ty,0)) nbr_wk_ty,
                                cust_sk,
                                fisc_yr_mth,
                                sum(nvl(tagp,0)) tagp,
                                sum(nvl(drops,0)) drops,
                                sum(nvl(tagp_per_drop,0)) tagp_per_drop,
                                sum(nvl(grs_sls_extnd,0)) grs_sls_extnd,
                                sum(nvl(qty_ship,0)) qty_ship,
                                sum(nvl(unfrm_grs_sls_extnd,0)) unfrm_grs_sls_extnd,
                                sum(nvl(unfrm_tagp,0)) unfrm_tagp,
                                sum(nvl(unfrm_qty_ship,0)) unfrm_qty_ship,
                                sum(nvl(sos_cnt,0)) sos_cnt,
                                MAX(NVL(cat_sold, 0)) cat_sold,
                                SUM(NVL(unfrm_grs_tgp, 0)) unfrm_grs_tgp,
                                cust_tenure_mth_actl,
                                MAX(NVL(net_acct_flg, 0)) net_acct_flg
                         FROM
                         (SELECT cust_list.cust_nbr,
                                cust_list.div_nbr,
                                cust_list.fisc_yr,
                                cust_list.fisc_mth_of_yr,
                                cust_sales_ty_ly.nbr_wk nbr_wk_ty,
                                cust_list.cust_sk,
                                cust_list.fisc_yr_mth,
                                cust_list.cust_tenure_mth_actl,
                                cust_sales_ty_ly.tagp  tagp,
                                cust_sales_ty_ly.drops  drops,
                                cust_sales_ty_ly.tagp_per_drop tagp_per_drop,
                                cust_sales_ty_ly.grs_sls_extnd grs_sls_extnd,
                                cust_sales_ty_ly.qty_ship qty_ship,
                                cust_sales_ty_ly.unfrm_grs_sls_extnd unfrm_grs_sls_extnd,
                                cust_sales_ty_ly.unfrm_tagp unfrm_tagp,
                                cust_sales_ty_ly.unfrm_qty_ship unfrm_qty_ship,
                                sos_cnt.sos_cnt sos_cnt,
                                cust_sales_ty_ly.unfrm_grs_tgp unfrm_grs_tgp,
                                cust_sales_ty_ly.cat_sold cat_sold,
                                cust_sales_ty_ly.net_acct_flg net_acct_flg
                         FROM (SELECT c.div_nbr,
                                      c.cust_nbr,
                                      t.fisc_yr,
                                      t.fisc_mth_of_yr,
                                      t.fisc_yr_mth,
                                      c.cust_sk,
                                      (SELECT COUNT(fisc_yr_mth) - 2
                                                   FROM xdmadm.prd_time_corp
                                                  WHERE fisc_yr_mth BETWEEN c.first_rt_fisc_yr_mth AND t.fisc_yr_mth)
                                           cust_tenure_mth_actl
                               FROM ]'
         || v_cust_vw
         || q'[,
                                    (SELECT t.fisc_yr, t.fisc_mth_of_yr, t.fisc_yr_mth
                                     FROM xdmadm.time_corp t
                                     WHERE t.fisc_yr = ]'
         || v_fisc_yr
         || q'[-2]'
         || q'[ GROUP BY t.fisc_yr, t.fisc_mth_of_yr, t.fisc_yr_mth) t) cust_list,
                                 (select cust_nbr, div_nbr, fisc_yr_mth, count(sos_id) sos_cnt
                                    from xdmadm.sos_data
                                    where inact_dt is null
                                   and fisc_yr_mth <= ']'
         || v_fisc_yr_mth
         || q'[' group by cust_nbr, div_nbr, fisc_yr_mth) sos_cnt,
                              (SELECT s.div_nbr,
                                      s.cust_nbr,
                                      t.fisc_yr,
                                      t.fisc_mth_of_yr,
                                      count(distinct t.fisc_wk_of_prd) nbr_wk,
                                      SUM (NVL (s.actl_gp, 0)) TAGP,
                                     count(distinct case when s.trans_typ = 'RT' AND pim_suprcls_id_actl <> 97 AND pim_suprcls_id_actl IS NOT NULL then s.DIV_NBR||s.CUST_NBR||INV_DT||nvl(DLVR_RTE,'')||PRCS_DT else NULL end) DROPS,
                                     case when count(distinct case when s.trans_typ = 'RT' then s.DIV_NBR||s.CUST_NBR||INV_DT||nvl(DLVR_RTE,'')||PRCS_DT else NULL end) > 0
                                          then SUM (NVL (s.actl_gp, 0)) /count(distinct case when s.trans_typ = 'RT' then s.DIV_NBR||s.CUST_NBR||INV_DT||nvl(DLVR_RTE,'')||PRCS_DT else NULL end)
                                          else 0 end TAGP_PER_DROP,
                                     SUM (grs_sls_extnd) AS GRS_SLS_EXTND,
                                     SUM(CASE
                                                WHEN s.trans_typ IN ('RT', 'VS', 'WC')
                                                 AND pim.pim_suprcls_id <> 97
                                                 AND pim.pim_suprcls_id is not null THEN
                                                   s.grs_sls_extnd
                                                ELSE
                                                   NULL
                                             END)
                                            no_cd_unfrm_grs_sls_extnd,
                                     SUM(QTY_SHIP) as QTY_SHIP,
                                     SUM(UNFRM_QTY_SHIP)UNFRM_QTY_SHIP,
                                     sum(case when pim.pim_suprcls_id <> 97
                                          and pim.pim_suprcls_id is not null
                                         then grs_sls_extnd
                                         else 0
                                         END) UNFRM_GRS_SLS_EXTND,
                                     sum(case when pim.pim_suprcls_id <> 97
                                         and pim.pim_suprcls_id is not null
                                         then actl_gp
                                          else 0
                                     END) UNFRM_TAGP,
                                    SUM(CASE
                                                WHEN pim.pim_suprcls_id <> 97
                                                 AND pim.pim_suprcls_id IS NOT NULL THEN
                                                   NVL(s.grs_sls_extnd - s.dwa_cost_extnd - (CASE WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END) + s.ttl_vndr_fnd_dvt, 0)
                                                ELSE
                                                   0
                                             END)
                                            unfrm_grs_tgp,
                                         COUNT(
                                            DISTINCT (CASE
                                                         WHEN pim.pim_suprcls_id <= ]'
         || v_net_acct_pim_suprcls_id
         || q'[ THEN
                                                            pim.pim_suprcls_id
                                                         ELSE
                                                            NULL
                                                      END))
                                            cat_sold,
                                         MAX(CASE
                                                WHEN s.trans_typ IN ('RT', 'VS', 'WC')
                                                 AND pim.pim_suprcls_id <> 97
                                                 AND pim.pim_suprcls_id IS NOT NULL THEN
                                                   'Y'
                                                ELSE
                                                   'N'
                                             END)
                                            net_acct_flg
                               FROM xdmadm.time_corp t,
                                    xdmadm.sales_corp s,
                                    xdmadm.pim_corp pim,
                                    xdmadm.div_corp d, ]'
         || v_cust_vw
         || q'[ WHERE     t.fisc_yr =]'
         || v_fisc_yr
         || q'[-2 AND t.fisc_wk_of_yr <> CASE
                                                               WHEN t.fisc_yr = (]'
         || v_fisc_yr
         || q'[-2) AND ']'
         || v_fisc_mth_of_yr
         || q'[' = '12' AND ]'
         || v_py_max_wk
         || q'[= 53 THEN 53    --*** WEEK 52-53 LOGIC *** exclude week #53 from last year if current period=12 and last year has 53 weeks
                                                               ELSE 99    -- else, include all weeks
                                                            END
                                     AND t.clndr_dt <= ']'
         || v_end_dt
         || -- process only sales up to the last closed week
           q'[' AND s.prcs_dt = t.clndr_dt
                                     AND s.xfer_to_dt IS NULL
                                     AND s.div_nbr = c.div_nbr
                                     AND s.cust_nbr = c.cust_nbr
                                     AND s.pim_usf_std_prod_cd = pim.pim_usf_std_prod_cd
                                     AND NVL(s.sls_revenue_div_nbr, s.div_nbr) = d.div_nbr
                                     AND d.div_typ_cd <> 'CC'
									 AND (case when NVL (d.acqstn_cmpny_nm,'USF') <> 'USF'
									 and NVL(s.sls_revenue_div_nbr, s.div_nbr) = d.div_nbr
									 and s.prcs_dt < NVL(d.acqstn_dt,s.prcs_dt)
									 then 'NON_USFGL' else 'USFGL' END) ='USFGL'
                                     GROUP BY s.div_nbr, s.cust_nbr, t.fisc_yr, t.fisc_mth_of_yr) cust_sales_ty_ly -- inline view to get cust/div sales this year and last year
                         WHERE     cust_list.cust_nbr = cust_sales_ty_ly.cust_nbr(+)
                               AND cust_list.div_nbr = cust_sales_ty_ly.div_nbr(+)
                               AND cust_list.fisc_mth_of_yr = cust_sales_ty_ly.fisc_mth_of_yr(+)
                               AND cust_list.fisc_yr_mth = sos_cnt.fisc_yr_mth(+)
                               AND cust_list.cust_nbr = sos_cnt.cust_nbr(+)
                               AND cust_list.div_nbr = sos_cnt.div_nbr(+))
                         GROUP by
                                cust_sk,
                                cust_nbr,
                                div_nbr,
                                fisc_yr,
                                fisc_mth_of_yr,
                                fisc_yr_mth,
                                cust_tenure_mth_actl
                               ) c,
                         (select fisc_yr, fisc_mth_of_yr, fisc_yr_mth,
                                 min(clndr_dt) fisc_mth_strt_dt,
                                 max(clndr_dt) fisc_mth_end_dt,
                                 min(clndr_dt_yrago) fisc_mth_strt_dt_yrago,
                                 max(clndr_dt_yrago) fisc_mth_end_dt_yrago
                                 from xdmadm.time_corp
                                 group by fisc_yr, fisc_mth_of_yr, fisc_yr_mth) t
                         where t.fisc_yr = c.fisc_yr
                           and t.fisc_mth_of_yr = c.fisc_mth_of_yr)]';

      DBMS_OUTPUT.put_line(l_trans_insert);

      EXECUTE IMMEDIATE l_trans_insert;

      l_insert_cnt   := sql%ROWCOUNT;

      COMMIT;
      DBMS_OUTPUT.put_line(
         'Inserted ' || l_insert_cnt || ' rows in ' || TO_CHAR(ROUND((SYSDATE - l_fn_start) * 86400)) || ' seconds');

      -- merge period classification data to target table
      v_mrg_stmt     :=
         q'[MERGE INTO xdmadm.cust_clsfctn_corp tgt
           USING (select cust_nbr, div_nbr, fisc_yr, fisc_mth_of_yr, fisc_wk_of_yr, cust_clsfctn, FISC_MTH_STRT_DT, FISC_MTH_END_DT, FISC_MTH_STRT_DT_YRAGO,
                  fisc_mth_end_dt_yrago, crt_dt, nbr_of_wk_ordr_last_yr_mth, nbr_of_wk_ordr_this_yr_mth, cust_sk, fisc_yr_mth, tagp, drops, tagp_per_drop,
                  grs_sls_extnd, qty_ship, unfrm_grs_sls_extnd, unfrm_tagp, unfrm_qty_ship, fisc_mth_sos_cnt,
                  cat_sold, unfrm_grs_tgp, unfrm_grs_tgp_per_drop, cust_tenure_mth_actl, net_acct_cust_sk
                  FROM ]'
         || v_src_schema
         || '.'
         || v_tbl_prfx
         || v_in_div_nbr
         || q'[) src
           ON (tgt.cust_nbr = src.cust_nbr AND
               tgt.div_nbr = src.div_nbr AND
               tgt.fisc_yr = src.fisc_yr AND
               tgt.fisc_mth_of_yr = src.fisc_mth_of_yr AND
               tgt.fisc_wk_of_yr = src.fisc_wk_of_yr)
           WHEN MATCHED THEN UPDATE SET tgt.cust_clsfctn = src.cust_clsfctn, tgt.FISC_MTH_STRT_DT = src.FISC_MTH_STRT_DT,
                                tgt.FISC_MTH_END_DT = src.FISC_MTH_END_DT,
                                tgt.FISC_MTH_STRT_DT_YRAGO = src.FISC_MTH_STRT_DT_YRAGO,
                                tgt.FISC_MTH_END_DT_YRAGO = src.FISC_MTH_END_DT_YRAGO,
                                tgt.upd_dt = (select sysdate from dual),
                                tgt.nbr_of_wk_ordr_last_yr_mth = src.nbr_of_wk_ordr_last_yr_mth,
                                tgt.nbr_of_wk_ordr_this_yr_mth= src.nbr_of_wk_ordr_this_yr_mth,
                                tgt.tagp= src.tagp, tgt.drops= src.drops,
                                tgt.qty_ship = src.qty_ship,
                                tgt.grs_sls_extnd = src.grs_sls_extnd, tgt.unfrm_grs_sls_extnd = src.unfrm_grs_sls_extnd,
                                tgt.unfrm_tagp = src.unfrm_tagp, tgt.unfrm_qty_ship = src.unfrm_qty_ship,
                                tgt.fisc_mth_sos_cnt = src.fisc_mth_sos_cnt,
                                tgt.cat_sold = src.cat_sold,
                                tgt.unfrm_grs_tgp = src.unfrm_grs_tgp,
                                tgt.unfrm_grs_tgp_per_drop = src.unfrm_grs_tgp_per_drop,
                                tgt.cust_tenure_mth_actl = src.cust_tenure_mth_actl,
                                tgt.net_acct_cust_sk = src.net_acct_cust_sk
           WHEN NOT MATCHED THEN INSERT (cust_sk,cust_nbr, div_nbr, fisc_yr, fisc_mth_of_yr, fisc_yr_mth, fisc_wk_of_yr, cust_clsfctn, FISC_MTH_STRT_DT, FISC_MTH_END_DT,
                                         FISC_MTH_STRT_DT_YRAGO, FISC_MTH_END_DT_YRAGO, crt_dt,nbr_of_wk_ordr_last_yr_mth, nbr_of_wk_ordr_this_yr_mth,
                                         grs_sls_extnd, qty_ship, unfrm_grs_sls_extnd, unfrm_tagp, unfrm_qty_ship, fisc_mth_sos_cnt,
                                         cat_sold, unfrm_grs_tgp, unfrm_grs_tgp_per_drop, cust_tenure_mth_actl, net_acct_cust_sk)
           VALUES(src.cust_sk, src.cust_nbr, src.div_nbr, src.fisc_yr, src.fisc_mth_of_yr, src.fisc_yr_mth, src.fisc_wk_of_yr, src.cust_clsfctn, src.FISC_MTH_STRT_DT, src.FISC_MTH_END_DT,
                  src.FISC_MTH_STRT_DT_YRAGO, src.FISC_MTH_END_DT_YRAGO, src.crt_dt, src.nbr_of_wk_ordr_last_yr_mth, src.nbr_of_wk_ordr_this_yr_mth,
                  src.grs_sls_extnd, src.qty_ship, src.unfrm_grs_sls_extnd, src.unfrm_tagp, src.unfrm_qty_ship, src.fisc_mth_sos_cnt,
                  src.cat_sold, src.unfrm_grs_tgp, src.unfrm_grs_tgp_per_drop, src.cust_tenure_mth_actl, src.net_acct_cust_sk)]';

      DBMS_OUTPUT.put_line(v_mrg_stmt);

      EXECUTE IMMEDIATE v_mrg_stmt;

      COMMIT;

      DBMS_OUTPUT.put_line('Table XDMADM.CUST_CLSFCTN_CORP updated ' || SYSTIMESTAMP);

      EXECUTE IMMEDIATE 'DROP TABLE ' || v_src_schema || '.' || v_tbl_prfx || v_in_div_nbr;

      DBMS_OUTPUT.put_line(
         'Table ' || v_src_schema || '.' || v_tbl_prfx || v_in_div_nbr || ' dropped ' || SYSTIMESTAMP);
   ELSE
      DBMS_OUTPUT.put_line('No customer(s) to reclassify ' || SYSTIMESTAMP);
   END IF;

   IF v_in_cust_nbr IS NULL THEN
      -- delete customers that got transferred out
      -- check if there are any rows to delete
      SELECT COUNT( * )
        INTO v_cnt2
        FROM xdmadm.sales_corp
       WHERE div_nbr = v_in_div_nbr
         AND xfer_to_dt IS NOT NULL
         AND ldr_tm > v_in_ldr_tm;

      DBMS_OUTPUT.put_line('v_cnt2 ' || v_cnt2);

      IF v_cnt2 > 0 THEN
         DELETE FROM xdmadm.cust_clsfctn_corp
               WHERE div_nbr = v_in_div_nbr
                 AND cust_nbr IN (SELECT DISTINCT cust_nbr
                                    FROM xdmadm.sales_corp
                                   WHERE div_nbr = v_in_div_nbr
                                     AND xfer_to_dt IS NOT NULL
                                     AND ldr_tm > v_in_ldr_tm);

         COMMIT;
         DBMS_OUTPUT.put_line('Deleted customers that were transferred out ' || SYSTIMESTAMP);
      END IF;

      -- search for missing classification and insert
      -- 02-16-2012  MLeela   Modifiy: When inserting missing classifications insert zero for fisc_wk_of_yr. Change query to minus Sales_corp weekly data to cust_clsfctn_corp monthly data.
      INSERT INTO xdmadm.cust_clsfctn_corp(cust_sk, cust_nbr, div_nbr, fisc_yr, fisc_mth_of_yr, fisc_yr_mth,
                                           fisc_wk_of_yr, cust_clsfctn, fisc_mth_strt_dt, fisc_mth_end_dt, fisc_mth_strt_dt_yrago, fisc_mth_end_dt_yrago,
                                           crt_dt, tagp, drops, tagp_per_drop, cat_sold, cust_tenure_mth_actl)
         SELECT cust.cust_sk,
                cust.cust_nbr,
                cust.div_nbr,
                cust.fisc_yr,
                cust.fisc_mth_of_yr,
                cust.fisc_yr_mth,
                0 /* v_fisc_wk_of_yr*/
                 ,
                NULL,
                v_fisc_mth_strt_dt,
                v_fisc_mth_end_dt,
                v_fisc_mth_strt_dt_yrago,
                v_fisc_mth_end_dt_yrago,
                SYSDATE,
                NULL,
                NULL,
                NULL,
                0, --MN 03142013
                (SELECT COUNT(fisc_yr_mth) - 2
                   FROM xdmadm.prd_time_corp, xdmadm.cust_corp cc
                  WHERE fisc_yr_mth BETWEEN cc.first_rt_fisc_yr_mth AND v_cur_fisc_yr_mth
                    AND cc.cust_nbr = cust.cust_nbr
                    AND cc.div_nbr = cust.div_nbr)
                   cust_tenure_mth_actl --MN 06102012
           FROM (SELECT DISTINCT cc.cust_sk,
                                 s.div_nbr,
                                 s.cust_nbr,
                                 v_cur_fisc_yr AS fisc_yr,
                                 v_cur_fisc_mth_of_yr AS fisc_mth_of_yr,
                                 v_cur_fisc_yr_mth AS fisc_yr_mth
                   FROM xdmadm.time_corp t, xdmadm.sales_corp s, xdmadm.cust_corp cc
                  WHERE t.fisc_yr = v_cur_fisc_yr
                    AND t.fisc_wk_of_yr = v_fisc_wk_of_yr
                    AND s.prcs_dt = t.clndr_dt
                    AND s.div_nbr = v_in_div_nbr
                    AND s.cust_nbr = cc.cust_nbr
                    AND s.div_nbr = cc.div_nbr
                    AND s.xfer_to_dt IS NULL
                 MINUS
                 SELECT cust_sk,
                        div_nbr,
                        cust_nbr,
                        fisc_yr,
                        fisc_mth_of_yr,
                        fisc_yr_mth
                   FROM xdmadm.cust_clsfctn_corp
                  WHERE div_nbr = v_in_div_nbr
                    AND fisc_yr = v_cur_fisc_yr
                    AND fisc_mth_of_yr = v_cur_fisc_mth_of_yr) cust;
   END IF;

   DBMS_OUTPUT.put_line('v_cnt ' || v_cnt);

   IF v_cnt > 0 THEN
      OPEN tagp_drops(v_fisc_yr,
                      v_fisc_mth_of_yr,
                      v_end_dt,
                      v_in_div_nbr,
                      v_last_fisc_yr_mth,
                      v_fisc_yr_mth_three_mth_ago,
                      v_fisc_yr_mth_six_mth_ago,
                      v_prior_fisc_mth_strt_dt);

      LOOP
         EXIT WHEN tagp_drops%NOTFOUND;

         DBMS_OUTPUT.put_line('loop');

         FETCH tagp_drops
         BULK COLLECT INTO r_tagp_drops
         LIMIT 1000;

         FORALL i IN 1 .. r_tagp_drops.COUNT()
            UPDATE /*+ use_invisible_indexes */
                  xdmadm.cust_clsfctn_corp b
               SET next_fisc_mth_cust_clsfctn      = r_tagp_drops(i).next_fisc_mth_cust_clsfctn,
                   third_fisc_mth_cust_clsfctn     = r_tagp_drops(i).three_mth_cust_clsfctn,
                   sixth_fisc_mth_cust_clsfctn     = r_tagp_drops(i).six_mth_cust_clsfctn,
                   nbr_of_wk_ordr_next_fisc_mth    = r_tagp_drops(i).nbr_of_wk_ordr_next_mth,
                   next_fmth_unfrm_grs_sls_extnd   = r_tagp_drops(i).next_fmth_unfrm_grs_sls_extnd, -- Sprint 7
                   next_fmth_unfrm_tagp            = r_tagp_drops(i).next_fmth_unfrm_tagp, -- Sprint 7
                   next_fmth_unfrm_grs_tgp         = r_tagp_drops(i).next_fmth_unfrm_grs_tgp,
                   next_fmth_unfrm_qty_ship        = r_tagp_drops(i).next_fmth_unfrm_qty_ship -- Sprint 7
             WHERE b.div_nbr = r_tagp_drops(i).div_nbr
               AND b.cust_nbr = r_tagp_drops(i).cust_nbr
               AND b.fisc_mth_strt_dt = r_tagp_drops(i).fisc_mth_strt_dt
               AND b.cust_sk = r_tagp_drops(i).cust_sk;
      END LOOP;

      DBMS_OUTPUT.put_line('Rows Updated' || sql%ROWCOUNT);

      CLOSE tagp_drops;
   ELSE
      DBMS_OUTPUT.put_line('No customer(s) to update ' || SYSTIMESTAMP);
   END IF;

   COMMIT;

   -- Update tgp columns when new AP transaction are loaded
   OPEN c_ap_tgp;

   LOOP
      EXIT WHEN c_ap_tgp%NOTFOUND;

      FETCH c_ap_tgp
      BULK COLLECT INTO r_ap_tgp
      LIMIT 10000;

      FORALL i IN 1 .. r_ap_tgp.COUNT()
         UPDATE /*+ use_invisible_indexes */
               xdmadm.cust_clsfctn_corp b
            SET unfrm_grs_tgp = r_ap_tgp(i).unfrm_grs_tgp, unfrm_grs_tgp_per_drop = r_ap_tgp(i).unfrm_grs_tgp_per_drop
          WHERE b.div_nbr = r_ap_tgp(i).div_nbr
            AND b.cust_nbr = r_ap_tgp(i).cust_nbr
            AND b.fisc_mth_strt_dt = r_ap_tgp(i).fisc_mth_start_dt
            AND b.cust_sk = r_ap_tgp(i).cust_sk;

      DBMS_OUTPUT.put_line('Rows Updated' || sql%ROWCOUNT);
      COMMIT;
   END LOOP;

   CLOSE c_ap_tgp;

   RETURN 0;
EXCEPTION
   WHEN OTHERS THEN
      DBMS_OUTPUT.put_line('Error in XDMADM.FN_CUST_CLS_DLY:' || SQLCODE || ' ' || SQLERRM);
      RETURN 1;
END fn_cust_cls_dly;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_CUST_CLS_CORP_WKLY_RECLS" (v_in_odate     IN VARCHAR2,
                         v_in_ldr_tm    IN NUMBER,
                         v_in_div_nbr   IN NUMBER,
                         v_in_cust_nbr  IN VARCHAR2 DEFAULT NULL)
   RETURN NUMBER IS
   /***********************************************************************
   ** Program Name:  XDMADM.FN_CUST_CLS_CORP_WKLY_RECLS
   **
   ** Description: . This function will reclassify all transferred customers
   ** based on the division number and last loader time inputs. It will reclassifty
   ** all history (1+current) for transferred customers. Input parameter ODATE,
   ** last loader time, division number and optional customer number is passed in
   ** from the calling script DBMXDMCustClsWklyRecls.sh.
   ** When customer number is specified in the input, it will process that
   ** specific customer only regardless of the loader time. This is for special maintenance purposes.
   ** It performs a CTAS on XDMADM.CUST_CLSFCTN_WKLY_#### work table. Then data from
   ** said table is MERGED into XDMADM.CUST_CLSFCTN_WKLY_CORP target table.
   **
   ** Called by: DBMXDMCustClsWklyRecls.sh
   **
   ** Input parameter: ODATE  (YYYYMMDD), DIV_NBR, CUST_NBR (optional)
   **
   ** Output parameters :
   **
   ** Modification Log
   ** 05-19-2020  David Li   Modified GROSS_TGP to exclude Auto Shipping Charge(ASC) when ASC_ORD_APLY_IND = 'P'.
   ************************************************************************/

   -- VARIABLES
   v_odate                          DATE := TO_DATE(v_in_odate, 'YYYYMMDD');
   v_src_schema                     VARCHAR2(20) := 'XDMADM';
   v_tgt_schema                     VARCHAR2(20) := 'XDMADM';
   v_tbl_prfx                       VARCHAR2(20) := 'CUST_CLSFCTN_WKLY_';
   v_end_dt                         DATE;
   v_fisc_yr                        NUMBER(4);
   v_cur_fisc_yr                    NUMBER(4);
   v_fisc_mth_of_yr                 VARCHAR2(2);
   v_cur_fisc_mth_of_yr             VARCHAR2(2);
   v_cur_fisc_yr_mth                VARCHAR(18);
   v_fisc_wk_of_yr                  NUMBER(2);
   v_fisc_wk_strt_dt                DATE;
   v_fisc_wk_strt_dt_yrago          DATE;
   v_fisc_wk_end_dt                 DATE;
   v_fisc_wk_end_dt_yrago           DATE;
   v_fisc_mth_end_dt_yrago          DATE;
   v_fisc_wk_of_prd                 NUMBER(2);
   v_py_max_wk                      NUMBER(2);
   v_2y_ago_max_wk                  NUMBER(2);
   v_cnt                            NUMBER;
   v_cnt2                           NUMBER;
   v_ctas_stmt                      VARCHAR2(32767);
   v_mrg_stmt                       VARCHAR2(5000);
   v_cust_vw                        VARCHAR2(1000);
   v_prior_fisc_mth_strt_dt         DATE;
   v_last_fisc_mth_of_yr            NUMBER;
   v_fisc_yr_last_mth               NUMBER;
   v_fisc_mth_strt_dt_yrago         DATE;
   v_fisc_mth_strt_dt               DATE;
   v_fisc_mth_end_dt                DATE;
   v_fisc_yr_three_mth_ago          NUMBER;
   v_fisc_mth_of_yr_three_mth_ago   VARCHAR(2);
   v_fisc_yr_six_mth_ago            NUMBER;
   v_fisc_mth_of_yr_six_mth_ago     VARCHAR(2);
   v_fisc_yr_mth_six_mth_ago        VARCHAR2(18);
   v_fisc_yr_mth_three_mth_ago      VARCHAR2(18);
   v_last_fisc_yr_mth               VARCHAR2(18);
   v_fisc_yr_mth                    VARCHAR2(18);
   l_insert_cnt                     NUMBER;
   l_trans_insert                   VARCHAR2(32767);
   l_fn_start                       DATE;
   v_net_acct_pim_suprcls_id        NUMBER;

   -- curso to update grs_tgp columns when new AP transactions are loaded
   CURSOR c_ap_tgp IS
      SELECT x.cust_nbr,
             x.div_nbr,
             x.cust_sk,
             x.fisc_yr_wk,
             x.fisc_wk_strt_dt,
             x.unfrm_grs_tgp,
             CASE
                WHEN x.unfrm_grs_tgp <> 0 THEN CASE WHEN x.drop_cnt <> 0 THEN x.unfrm_grs_tgp / x.drop_cnt ELSE 0 END
                ELSE NULL
             END
                unfrm_grs_tgp_per_drop
        FROM (  SELECT s.cust_nbr,
                       s.div_nbr,
                       c.cust_sk,
                       t.fisc_yr_wk,
                       p.clndr_wk_strt_dt as fisc_wk_strt_dt,
                       SUM(CASE
                              WHEN NVL(pim.pim_suprcls_id, 1) <> 97 THEN
                                 NVL(s.grs_sls_extnd - s.dwa_cost_extnd + s.ttl_vndr_fnd_dvt
                                        - CASE
                                            WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0)
                                            ELSE 0
                                          END, 0)
                              ELSE
                                 0
                           END)
                          unfrm_grs_tgp,
                       COUNT(DISTINCT CASE
                                         WHEN NVL(pim.pim_suprcls_id, 1) <> 97
                                          AND s.trans_typ = 'RT' THEN
                                            s.div_nbr || s.cust_nbr || s.prcs_dt || s.inv_dt || s.dlvr_rte
                                         ELSE
                                            NULL
                                      END)
                          drop_cnt
                  FROM xdmadm.sales_corp s,
                       xdmadm.div_corp d,
                       xdmadm.time_corp t,
                       xdmadm.wkly_time_corp p,
                       xdmadm.pim_corp pim,
                       xdmadm.cust_corp c
                 WHERE NVL(s.sls_revenue_div_nbr, s.div_nbr) = d.div_nbr
                   AND s.prcs_dt = t.clndr_dt
                   AND s.cust_nbr = c.cust_nbr
                   AND s.div_nbr = c.div_nbr
                   AND s.pim_usf_std_prod_cd = pim.pim_usf_std_prod_cd
                   AND s.xfer_to_dt IS NULL
                   AND t.fisc_yr_wk = p.fisc_yr_wk
                   AND s.div_nbr = v_in_div_nbr
                   AND d.div_typ_cd <> 'CC'
				   AND  (case when NVL (d.acqstn_cmpny_nm,'USF') <> 'USF'
					 and NVL(s.sls_revenue_div_nbr, s.div_nbr) = d.div_nbr
					 and s.prcs_dt < NVL(d.acqstn_dt,s.prcs_dt)
					 then 'NON_USFGL' else 'USFGL' END) ='USFGL'

                   AND EXISTS (SELECT 'X'
                                 FROM xdmadm.sales_corp s2, xdmadm.time_corp t2
                                WHERE s2.prcs_dt = t2.clndr_dt
                                  AND s2.div_nbr = v_in_div_nbr
                                  AND s2.xfer_to_dt IS NULL
                                  AND s2.xfer_from_dt IS NULL
                                  AND s2.ldr_tm > v_in_ldr_tm
                                  AND s2.trans_typ = 'AP'
                                  AND s2.cust_nbr = s.cust_nbr
                                  AND s2.div_nbr = s.div_nbr
                                  AND t2.fisc_yr_wk = t.fisc_yr_wk)
              GROUP BY s.cust_nbr,
                       s.div_nbr,
                       c.cust_sk,
                       t.fisc_yr_wk,
                       p.clndr_wk_strt_dt) x;

   TYPE t_ap_tgp IS TABLE OF c_ap_tgp%ROWTYPE;

   r_ap_tgp                         t_ap_tgp;


BEGIN
   l_fn_start   := SYSDATE;

   -- Get date parameters
   -- ODATE determines the last sales record (based on prcs_dt)
   -- that will be included in the sales comparison for current year sales.


	v_end_dt   := v_odate;

   SELECT t.fisc_yr, t.fisc_mth_of_yr, t.fisc_yr_mth
     INTO v_fisc_yr, v_fisc_mth_of_yr, v_fisc_yr_mth
     FROM xdmadm.time_corp t
    WHERE t.clndr_dt = v_end_dt;

   SELECT t.fisc_yr,
          t.fisc_mth_of_yr,
          t.fisc_wk_of_yr,
          t.fisc_wk_of_prd,
          t.fisc_yr_mth
     INTO v_cur_fisc_yr,
          v_cur_fisc_mth_of_yr,
          v_fisc_wk_of_yr,
          v_fisc_wk_of_prd,
          v_cur_fisc_yr_mth
     FROM xdmadm.time_corp t
    WHERE t.clndr_dt = v_odate;

   SELECT MIN(t.clndr_dt), MIN(t.clndr_dt_yrago),MAX(t.clndr_dt),MAX(t.clndr_dt_yrago)
     INTO v_fisc_wk_strt_dt, v_fisc_wk_strt_dt_yrago ,v_fisc_wk_end_dt,v_fisc_wk_end_dt_yrago
     FROM xdmadm.time_corp t
    WHERE t.fisc_yr = v_cur_fisc_yr
      AND t.fisc_wk_of_yr = v_fisc_wk_of_yr;

   SELECT MAX(t.clndr_dt_yrago),
          MIN(clndr_dt_yrago),
          MIN(clndr_dt),
          MAX(clndr_dt)
     INTO v_fisc_mth_end_dt_yrago,
          v_fisc_mth_strt_dt_yrago,
          v_fisc_mth_strt_dt,
          v_fisc_mth_end_dt
     FROM xdmadm.time_corp t
    WHERE t.fisc_yr = v_cur_fisc_yr
      AND t.fisc_mth_of_yr = v_cur_fisc_mth_of_yr;

   SELECT MAX(t.fisc_wk_of_yr)
     INTO v_py_max_wk -- check if prior year has 53 weeks
     FROM xdmadm.time_corp t
    WHERE t.fisc_yr = v_fisc_yr - 1;

   SELECT MAX(t.fisc_wk_of_yr)
     INTO v_2y_ago_max_wk -- check if 2 years ago has 53 weeks
     FROM xdmadm.time_corp t
    WHERE t.fisc_yr = v_fisc_yr - 2;

   IF v_fisc_wk_of_prd <> 1 THEN
      v_fisc_wk_strt_dt_yrago   := NULL;
      v_fisc_mth_end_dt_yrago   := NULL;
   END IF;

   SELECT MIN(clndr_dt)
     INTO v_prior_fisc_mth_strt_dt
     FROM xdmadm.time_corp
    WHERE fisc_yr_mth IN (SELECT MAX(a.fisc_yr_mth)
                            FROM xdmadm.time_corp a
                           WHERE a.fisc_yr_mth < (SELECT a.fisc_yr_mth
                                                    FROM xdmadm.time_corp a
                                                   WHERE a.clndr_dt = v_odate));

   SELECT MAX(fisc_mth_of_yr), MAX(fisc_yr), MAX(fisc_yr_mth)
     INTO v_last_fisc_mth_of_yr, v_fisc_yr_last_mth, v_last_fisc_yr_mth
     FROM xdmadm.time_corp a
    WHERE fisc_yr_mth = (SELECT MAX(a.fisc_yr_mth) --min(fisc_mth_of_yr) fisc_mth_of_yr, max(a.fisc_yr) fisc_yr
                           FROM xdmadm.time_corp a
                          WHERE a.fisc_yr_mth < (SELECT a.fisc_yr_mth
                                                   FROM xdmadm.time_corp a
                                                  WHERE a.clndr_dt = v_odate));





   DBMS_OUTPUT.put_line('Processing year: ' || v_fisc_yr || ' period: ' || v_fisc_mth_of_yr || ' ' || SYSTIMESTAMP);

   IF v_in_cust_nbr IS NULL THEN
      -- check if there are any transfers to process
      SELECT COUNT( * )
        INTO v_cnt
        FROM xdmadm.sales_corp
       WHERE div_nbr = v_in_div_nbr
         AND xfer_from_dt IS NOT NULL
         AND ldr_tm > v_in_ldr_tm;

      -- this dictates what customers get reclassified
      -- in this scenario it will get list of customers who were transferred since the last load
      v_cust_vw   :=
         q'[(SELECT cc.cust_sk, cc.cust_nbr, cc.div_nbr, cc.first_rt_fisc_yr_mth
             FROM xdmadm.cust_corp cc
             WHERE EXISTS (SELECT 'X'
                     FROM xdmadm.sales_corp
                    WHERE div_nbr = ]'
                  || v_in_div_nbr
                  || q'[ AND xfer_from_dt IS NOT NULL
                      AND ldr_tm > ]'
                     || v_in_ldr_tm
                     || q'[ AND cust_nbr = cc.cust_nbr
                      AND div_nbr = cc.div_nbr)) c]';

   ELSE -- if cust_nbr input not null then reclassify specific customer
      -- check if valid customer#
      SELECT COUNT( * )
        INTO v_cnt
        FROM xdmadm.cust_corp
       WHERE div_nbr = v_in_div_nbr
         AND cust_nbr = v_in_cust_nbr;

      -- this dictates what customers get reclassified
      -- in this scenario it will list the one customer from the input
      v_cust_vw   :=
         '(SELECT  cust_nbr, div_nbr, cust_sk, first_rt_fisc_yr_mth FROM xdmadm.cust_corp
              WHERE   div_nbr = '
         || v_in_div_nbr
         || ' AND     cust_nbr = '''
         || v_in_cust_nbr
         || ''') c ';
   END IF;

   DBMS_OUTPUT.put_line('v_cnt ' || v_cnt);

   IF v_cnt > 0 THEN
      -- drop table
      DBMS_OUTPUT.put_line(
         'Dropping table ' || v_src_schema || '.' || v_tbl_prfx || v_in_div_nbr || ' ' || SYSTIMESTAMP);

      BEGIN
         EXECUTE IMMEDIATE 'DROP TABLE ' || v_src_schema || '.' || v_tbl_prfx || v_in_div_nbr;

         DBMS_OUTPUT.put_line(
            'Table ' || v_src_schema || '.' || v_tbl_prfx || v_in_div_nbr || ' dropped ' || SYSTIMESTAMP);
      EXCEPTION
         WHEN OTHERS THEN
            DBMS_OUTPUT.put_line(   'Table '
                                 || v_src_schema
                                 || '.'
                                 || v_tbl_prfx
                                 || v_in_div_nbr
                                 || ' does not exist. Continue processing...');
      END;

      -- build classification data
      v_ctas_stmt    :=
         'CREATE TABLE ' || v_src_schema || '.' || v_tbl_prfx || v_in_div_nbr
         || q'[ TABLESPACE SALES_TS NOLOGGING AS
                   -- current year reclassification
                   SELECT c.cust_nbr,
             c.div_nbr,
             c.fisc_yr,
             c.fisc_mth_of_yr,
			 c.fisc_yr_wk,
             c.fisc_wk_of_yr,
             CASE
                WHEN no_cd_unfrm_sales_ty > 0
                 AND no_cd_unfrm_sales_ly > 0 THEN
                   'PENETRATION'
                WHEN no_cd_unfrm_sales_ty > 0
                 AND no_cd_unfrm_sales_ly <= 0 THEN
                   'NEW'
                WHEN no_cd_unfrm_sales_ty <= 0
                 AND no_cd_unfrm_sales_ly > 0 THEN
                   'LOST'
                ELSE
                   'OTHER'
             END
                AS cust_clsfctn,
             t.fisc_wk_strt_dt,
             t.fisc_wk_end_dt,
             t.fisc_wk_strt_dt_yrago,
             t.fisc_wk_end_dt_yrago,
             SYSDATE AS crt_dt,
			 SYSDATE AS upd_dt,
             c.drops,
             c.grs_sls_extnd,
             c.qty_ship,
             c.unfrm_grs_sls_extnd,
			 c.unfrm_dwa_cost_extnd,
			 c.unfrm_ttl_vndr_fnd_dvt,
			 c.unfrm_qty_ship,
             c.unfrm_grs_tgp,
             CASE
                WHEN c.unfrm_grs_tgp <> 0 THEN CASE WHEN drops <> 0 THEN c.unfrm_grs_tgp / c.drops ELSE 0 END
                ELSE NULL
             END
                unfrm_grs_tgp_per_drop

        FROM (  SELECT cust_nbr,
                       div_nbr,
                       fisc_yr,
                       fisc_mth_of_yr,
					   fisc_yr_wk,
					   fisc_wk_of_yr,
                       SUM(NVL(sales_ty, 0)) AS sales_ty,
                       SUM(NVL(sales_ly, 0)) AS sales_ly,
                       SUM(NVL(no_cd_unfrm_sales_ty, 0)) AS no_cd_unfrm_sales_ty,
                       SUM(NVL(no_cd_unfrm_sales_ly, 0)) AS no_cd_unfrm_sales_ly,
                       SUM(NVL(drops, 0)) drops,
                       SUM(NVL(grs_sls_extnd, 0)) grs_sls_extnd,
                       SUM(NVL(qty_ship, 0)) qty_ship,
                       SUM(NVL(unfrm_grs_sls_extnd, 0)) unfrm_grs_sls_extnd,
                       SUM(NVL(unfrm_dwa_cost_extnd, 0)) unfrm_dwa_cost_extnd,
					   SUM(NVL(unfrm_ttl_vndr_fnd_dvt, 0)) unfrm_ttl_vndr_fnd_dvt,
                       SUM(NVL(unfrm_qty_ship, 0)) unfrm_qty_ship,
                       SUM(NVL(unfrm_grs_tgp, 0)) unfrm_grs_tgp
                       FROM (SELECT cust_list.cust_nbr,
                               cust_list.div_nbr,
                               cust_list.fisc_yr,
                               cust_list.fisc_mth_of_yr,
							   cust_list.fisc_yr_wk,
							   cust_list.fisc_wk_of_yr,
                                CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[ THEN NVL(cust_sales_ty_ly.grs_sls_extnd,0)
                                  ELSE 0
                                END sales_ty,
                                CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1 THEN NVL(cust_sales_ty_ly.grs_sls_extnd,0)
                                  ELSE 0
                                END sales_ly,
                                CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[ THEN NVL(cust_sales_ty_ly.no_cd_unfrm_grs_sls_extnd,0)
                                  ELSE 0
                                END no_cd_unfrm_sales_ty,
                                CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1 THEN NVL(cust_sales_ty_ly.no_cd_unfrm_grs_sls_extnd,0)
                                  ELSE 0
                                END no_cd_unfrm_sales_ly,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[ then cust_sales_ty_ly.drops end drops,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[ then cust_sales_ty_ly.grs_sls_extnd end grs_sls_extnd,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[ then cust_sales_ty_ly.qty_ship end qty_ship,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[ then cust_sales_ty_ly.unfrm_grs_sls_extnd end unfrm_grs_sls_extnd,
		                        case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[ then cust_sales_ty_ly.unfrm_dwa_cost_extnd end unfrm_dwa_cost_extnd,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[ then cust_sales_ty_ly.unfrm_ttl_vndr_fnd_dvt end unfrm_ttl_vndr_fnd_dvt,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[ then cust_sales_ty_ly.unfrm_qty_ship end unfrm_qty_ship,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[ then cust_sales_ty_ly.unfrm_grs_tgp end unfrm_grs_tgp

                         FROM (SELECT c.div_nbr,
                                      c.cust_nbr,
                                      t.fisc_yr,
                                      t.fisc_mth_of_yr,
                                      t.fisc_yr_wk,
									  t.fisc_wk_of_yr,
                                      c.cust_sk

                               FROM ]'
         || v_cust_vw
         || q'[,
                                    (SELECT t.fisc_yr, t.fisc_mth_of_yr, t.fisc_yr_wk,t.fisc_wk_of_yr
                                     FROM xdmadm.time_corp t
                                     WHERE t.fisc_yr = ]'
         || v_fisc_yr
         || q'[ AND t.fisc_wk_of_yr <= ']'
         || v_fisc_wk_of_yr
         || q'[' GROUP BY t.fisc_yr, t.fisc_mth_of_yr, t.fisc_yr_wk,t.fisc_wk_of_yr) t) cust_list,
                               (SELECT s.div_nbr,
                                      s.cust_nbr,
                                      t.fisc_yr,
                                      t.fisc_mth_of_yr,
									  t.fisc_yr_wk,
									  t.fisc_wk_of_yr,
                                      count(distinct case when s.trans_typ = 'RT' AND pim_suprcls_id_actl <> 97 AND pim_suprcls_id_actl IS NOT NULL then s.DIV_NBR||s.CUST_NBR||INV_DT||nvl(DLVR_RTE,'')||PRCS_DT else NULL end) DROPS,
                                     SUM (grs_sls_extnd) AS GRS_SLS_EXTND,
                                     SUM(CASE
                                                WHEN s.trans_typ IN ('RT', 'VS', 'WC')
                                                 AND pim.pim_suprcls_id <> 97
                                                 AND pim.pim_suprcls_id is not null THEN
                                                   s.grs_sls_extnd
                                                ELSE
                                                   NULL
                                             END)
                                            no_cd_unfrm_grs_sls_extnd,
                                     SUM(QTY_SHIP) as QTY_SHIP,
                                     SUM(UNFRM_QTY_SHIP)UNFRM_QTY_SHIP,
                                     sum(case when pim.pim_suprcls_id <> 97
                                          and pim.pim_suprcls_id is not null
                                         then grs_sls_extnd
                                         else 0
                                         END) UNFRM_GRS_SLS_EXTND,
									sum(case when pim.pim_suprcls_id <> 97
                                          and pim.pim_suprcls_id is not null
                                         then ttl_vndr_fnd_dvt
                                         else 0
                                         END) unfrm_ttl_vndr_fnd_dvt,
                                     sum(case when pim.pim_suprcls_id <> 97
                                          and pim.pim_suprcls_id is not null
                                         then dwa_cost_extnd
                                         else 0
                                         END) unfrm_dwa_cost_extnd,
                                     SUM(CASE
                                                WHEN pim.pim_suprcls_id <> 97
                                                 AND pim.pim_suprcls_id IS NOT NULL THEN
                                                   NVL(s.grs_sls_extnd - s.dwa_cost_extnd + s.ttl_vndr_fnd_dvt
                                                        - CASE
                                                            WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0)
                                                            ELSE 0
                                                          END, 0)
                                                ELSE
                                                   0
                                             END)
                                            unfrm_grs_tgp

                               FROM xdmadm.time_corp t,
                                    xdmadm.sales_corp s,
                                    xdmadm.pim_corp pim,
                                    xdmadm.div_corp d, ]'
         || v_cust_vw
         || q'[ WHERE     t.fisc_yr in (]'
         || v_fisc_yr
         || ','
         || v_fisc_yr
         || q'[-1)
                                     AND t.fisc_wk_of_yr <= ']'
         || v_fisc_wk_of_yr
         || q'[' AND t.fisc_wk_of_yr <> CASE
                                                               WHEN t.fisc_yr = (]'
         || v_fisc_yr
         || q'[-1) AND ']'
         || v_fisc_mth_of_yr
         || q'[' = '12' AND ]'
         || v_py_max_wk
         || q'[= 53 THEN 53    --*** WEEK 52-53 LOGIC *** exclude week #53 from last year if current period=12 and last year has 53 weeks
                                                               ELSE 99    -- else, include all weeks
                                                            END
                                     AND t.clndr_dt <= ']'
         || v_end_dt
         ||
           q'[' AND s.prcs_dt = t.clndr_dt
                                     AND s.xfer_to_dt IS NULL
                                     AND s.div_nbr = c.div_nbr
                                     AND s.cust_nbr = c.cust_nbr
                                     AND s.pim_usf_std_prod_cd = pim.pim_usf_std_prod_cd
                                     AND NVL(s.sls_revenue_div_nbr, s.div_nbr) = d.div_nbr
                                     AND d.div_typ_cd <> 'CC'
								     AND  (case when NVL (d.acqstn_cmpny_nm,'USF') <> 'USF'
								     and NVL(s.sls_revenue_div_nbr, s.div_nbr) = d.div_nbr
									 and s.prcs_dt < NVL(d.acqstn_dt,s.prcs_dt)
									 then 'NON_USFGL' else 'USFGL' END) ='USFGL'
                         GROUP BY s.div_nbr, s.cust_nbr, t.fisc_yr, t.fisc_mth_of_yr,t.fisc_yr_wk,t.fisc_wk_of_yr) cust_sales_ty_ly -- inline view to get cust/div sales this year and last year
                         WHERE     cust_list.cust_nbr = cust_sales_ty_ly.cust_nbr(+)
                               AND cust_list.div_nbr = cust_sales_ty_ly.div_nbr(+)
                               AND cust_list.fisc_wk_of_yr = cust_sales_ty_ly.fisc_wk_of_yr(+))

                         GROUP by
                                cust_nbr,
                                div_nbr,
                                fisc_yr,
                                fisc_mth_of_yr,
                                fisc_yr_wk,
                                fisc_wk_of_yr
                               ) c,
                         (select fisc_yr, fisc_mth_of_yr, fisc_yr_wk,fisc_wk_of_yr,
                                 min(clndr_dt) fisc_wk_strt_dt,
                                 max(clndr_dt) fisc_wk_end_dt,
                                 min(clndr_dt_yrago) fisc_wk_strt_dt_yrago,
                                 max(clndr_dt_yrago) fisc_wk_end_dt_yrago
                                 from xdmadm.time_corp
                                 group by fisc_yr, fisc_mth_of_yr, fisc_yr_wk,fisc_wk_of_yr) t
                         where t.fisc_yr = c.fisc_yr
                           and t.fisc_wk_of_yr = c.fisc_wk_of_yr
                   UNION ALL
                   -- prior year reclassification
                   SELECT c.cust_nbr,
             c.div_nbr,
             c.fisc_yr,
             c.fisc_mth_of_yr,
			 c.fisc_yr_wk,
             c.fisc_wk_of_yr,
             CASE
                WHEN no_cd_unfrm_sales_ty > 0
                 AND no_cd_unfrm_sales_ly > 0 THEN
                   'PENETRATION'
                WHEN no_cd_unfrm_sales_ty > 0
                 AND no_cd_unfrm_sales_ly <= 0 THEN
                   'NEW'
                WHEN no_cd_unfrm_sales_ty <= 0
                 AND no_cd_unfrm_sales_ly > 0 THEN
                   'LOST'
                ELSE
                   'OTHER'
             END
                AS cust_clsfctn,
             t.fisc_wk_strt_dt,
             t.fisc_wk_end_dt,
             t.fisc_wk_strt_dt_yrago,
             t.fisc_wk_end_dt_yrago,
             SYSDATE AS crt_dt,
			 SYSDATE AS upd_dt,
             c.drops,
             c.grs_sls_extnd,
             c.qty_ship,
             c.unfrm_grs_sls_extnd,
			 c.unfrm_dwa_cost_extnd,
			 c.unfrm_ttl_vndr_fnd_dvt,
			 c.unfrm_qty_ship,
             c.unfrm_grs_tgp,
             CASE
                WHEN c.unfrm_grs_tgp <> 0 THEN CASE WHEN drops <> 0 THEN c.unfrm_grs_tgp / c.drops ELSE 0 END
                ELSE NULL
             END
                unfrm_grs_tgp_per_drop

        FROM (  SELECT cust_nbr,
                       div_nbr,
                       fisc_yr,
                       fisc_mth_of_yr,
					   fisc_yr_wk,
					   fisc_wk_of_yr,
                       SUM(NVL(sales_ty, 0)) AS sales_ty,
                       SUM(NVL(sales_ly, 0)) AS sales_ly,
                       SUM(NVL(no_cd_unfrm_sales_ty, 0)) AS no_cd_unfrm_sales_ty,
                       SUM(NVL(no_cd_unfrm_sales_ly, 0)) AS no_cd_unfrm_sales_ly,
                       SUM(NVL(drops, 0)) drops,
                       SUM(NVL(grs_sls_extnd, 0)) grs_sls_extnd,
                       SUM(NVL(qty_ship, 0)) qty_ship,
                       SUM(NVL(unfrm_grs_sls_extnd, 0)) unfrm_grs_sls_extnd,
                       SUM(NVL(unfrm_dwa_cost_extnd, 0)) unfrm_dwa_cost_extnd,
					   SUM(NVL(unfrm_ttl_vndr_fnd_dvt, 0)) unfrm_ttl_vndr_fnd_dvt,
                       SUM(NVL(unfrm_qty_ship, 0)) unfrm_qty_ship,
                       SUM(NVL(unfrm_grs_tgp, 0)) unfrm_grs_tgp
                       FROM (SELECT cust_list.cust_nbr,
                               cust_list.div_nbr,
                               cust_list.fisc_yr,
                               cust_list.fisc_mth_of_yr,
							   cust_list.fisc_yr_wk,
							   cust_list.fisc_wk_of_yr,
                                CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1 THEN NVL(cust_sales_ty_ly.grs_sls_extnd,0)
                                  ELSE 0
                                END sales_ty,
                                CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-2 THEN NVL(cust_sales_ty_ly.grs_sls_extnd,0)
                                  ELSE 0
                                END sales_ly,
                                CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1 THEN NVL(cust_sales_ty_ly.no_cd_unfrm_grs_sls_extnd,0)
                                  ELSE 0
                                END no_cd_unfrm_sales_ty,
                                CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-2 THEN NVL(cust_sales_ty_ly.no_cd_unfrm_grs_sls_extnd,0)
                                  ELSE 0
                                END no_cd_unfrm_sales_ly,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1 then cust_sales_ty_ly.drops end drops,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1 then cust_sales_ty_ly.grs_sls_extnd end grs_sls_extnd,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1 then cust_sales_ty_ly.qty_ship end qty_ship,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1 then cust_sales_ty_ly.unfrm_grs_sls_extnd end unfrm_grs_sls_extnd,
		                        case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1 then cust_sales_ty_ly.unfrm_dwa_cost_extnd end unfrm_dwa_cost_extnd,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1 then cust_sales_ty_ly.unfrm_ttl_vndr_fnd_dvt end unfrm_ttl_vndr_fnd_dvt,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1 then cust_sales_ty_ly.unfrm_qty_ship end unfrm_qty_ship,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1 then cust_sales_ty_ly.unfrm_grs_tgp end unfrm_grs_tgp

                         FROM (SELECT c.div_nbr,
                                      c.cust_nbr,
                                      t.fisc_yr,
                                      t.fisc_mth_of_yr,
                                      t.fisc_yr_wk,
									  t.fisc_wk_of_yr,
                                      c.cust_sk

                               FROM ]'
         || v_cust_vw
         || q'[,
                                    (SELECT t.fisc_yr, t.fisc_mth_of_yr, t.fisc_yr_wk,t.fisc_wk_of_yr
                                     FROM xdmadm.time_corp t
                                     WHERE t.fisc_yr = ]'
         || v_fisc_yr
         || q'[-1 AND t.fisc_wk_of_yr <= ']'
         || v_fisc_wk_of_yr
         || q'[' GROUP BY t.fisc_yr, t.fisc_mth_of_yr, t.fisc_yr_wk,t.fisc_wk_of_yr) t) cust_list,
                               (SELECT s.div_nbr,
                                      s.cust_nbr,
                                      t.fisc_yr,
                                      t.fisc_mth_of_yr,
									  t.fisc_yr_wk,
									  t.fisc_wk_of_yr,
                                      count(distinct case when s.trans_typ = 'RT' AND pim_suprcls_id_actl <> 97 AND pim_suprcls_id_actl IS NOT NULL then s.DIV_NBR||s.CUST_NBR||INV_DT||nvl(DLVR_RTE,'')||PRCS_DT else NULL end) DROPS,
                                     SUM (grs_sls_extnd) AS GRS_SLS_EXTND,
                                     SUM(CASE
                                                WHEN s.trans_typ IN ('RT', 'VS', 'WC')
                                                 AND pim.pim_suprcls_id <> 97
                                                 AND pim.pim_suprcls_id is not null THEN
                                                   s.grs_sls_extnd
                                                ELSE
                                                   NULL
                                             END)
                                            no_cd_unfrm_grs_sls_extnd,
                                     SUM(QTY_SHIP) as QTY_SHIP,
                                     SUM(UNFRM_QTY_SHIP)UNFRM_QTY_SHIP,
                                     sum(case when pim.pim_suprcls_id <> 97
                                          and pim.pim_suprcls_id is not null
                                         then grs_sls_extnd
                                         else 0
                                         END) UNFRM_GRS_SLS_EXTND,
									sum(case when pim.pim_suprcls_id <> 97
                                          and pim.pim_suprcls_id is not null
                                         then ttl_vndr_fnd_dvt
                                         else 0
                                         END) unfrm_ttl_vndr_fnd_dvt,
                                     sum(case when pim.pim_suprcls_id <> 97
                                          and pim.pim_suprcls_id is not null
                                         then dwa_cost_extnd
                                         else 0
                                         END) unfrm_dwa_cost_extnd,
                                     SUM(CASE
                                                WHEN pim.pim_suprcls_id <> 97
                                                 AND pim.pim_suprcls_id IS NOT NULL THEN
                                                   NVL(s.grs_sls_extnd - s.dwa_cost_extnd + s.ttl_vndr_fnd_dvt
                                                       - CASE
                                                            WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0)
                                                            ELSE 0
                                                          END, 0)
                                                ELSE
                                                   0
                                             END)
                                            unfrm_grs_tgp

                               FROM xdmadm.time_corp t,
                                    xdmadm.sales_corp s,
                                    xdmadm.pim_corp pim,
                                    xdmadm.div_corp d, ]'
         || v_cust_vw
         || q'[ WHERE     t.fisc_yr in (]'
         || v_fisc_yr
         || '-1,'
         || v_fisc_yr
         || q'[-2)
                                     AND t.fisc_wk_of_yr <= ']'
         || v_fisc_wk_of_yr
         || q'[' AND t.fisc_wk_of_yr <> CASE
                                                               WHEN t.fisc_yr = (]'
         || v_fisc_yr
         || q'[-2) AND ']'
         || v_fisc_mth_of_yr
         || q'[' = '12' AND ]'
         || v_py_max_wk
         || q'[= 53 THEN 53    --*** WEEK 52-53 LOGIC *** exclude week #53 from last year if current period=12 and last year has 53 weeks
                                                               ELSE 99    -- else, include all weeks
                                                            END
                                     AND t.clndr_dt <= ']'
         || v_end_dt
         ||
           q'[' AND s.prcs_dt = t.clndr_dt
                                     AND s.xfer_to_dt IS NULL
                                     AND s.div_nbr = c.div_nbr
                                     AND s.cust_nbr = c.cust_nbr
                                     AND s.pim_usf_std_prod_cd = pim.pim_usf_std_prod_cd
                                     AND NVL(s.sls_revenue_div_nbr, s.div_nbr) = d.div_nbr
                                     AND d.div_typ_cd <> 'CC'
								     AND  (case when NVL (d.acqstn_cmpny_nm,'USF') <> 'USF'
								     and NVL(s.sls_revenue_div_nbr, s.div_nbr) = d.div_nbr
									 and s.prcs_dt < NVL(d.acqstn_dt,s.prcs_dt)
									 then 'NON_USFGL' else 'USFGL' END) ='USFGL'
                         GROUP BY s.div_nbr, s.cust_nbr, t.fisc_yr, t.fisc_mth_of_yr,t.fisc_yr_wk,t.fisc_wk_of_yr) cust_sales_ty_ly -- inline view to get cust/div sales this year and last year
                         WHERE     cust_list.cust_nbr = cust_sales_ty_ly.cust_nbr(+)
                               AND cust_list.div_nbr = cust_sales_ty_ly.div_nbr(+)
                               AND cust_list.fisc_wk_of_yr = cust_sales_ty_ly.fisc_wk_of_yr(+))

                         GROUP by
                                cust_nbr,
                                div_nbr,
                                fisc_yr,
                                fisc_mth_of_yr,
                                fisc_yr_wk,
                                fisc_wk_of_yr
                               ) c,
                         (select fisc_yr, fisc_mth_of_yr, fisc_yr_wk,fisc_wk_of_yr,
                                 min(clndr_dt) fisc_wk_strt_dt,
                                 max(clndr_dt) fisc_wk_end_dt,
                                 min(clndr_dt_yrago) fisc_wk_strt_dt_yrago,
                                 max(clndr_dt_yrago) fisc_wk_end_dt_yrago
                                 from xdmadm.time_corp
                                 group by fisc_yr, fisc_mth_of_yr, fisc_yr_wk,fisc_wk_of_yr) t
                         where t.fisc_yr = c.fisc_yr
                           and t.fisc_wk_of_yr = c.fisc_wk_of_yr]';

      DBMS_OUTPUT.put_line(v_ctas_stmt);

      EXECUTE IMMEDIATE v_ctas_stmt;

      COMMIT;

      DBMS_OUTPUT.put_line(
         'Table ' || v_src_schema || '.' || v_tbl_prfx || v_in_div_nbr || ' created ' || SYSTIMESTAMP);

      DBMS_OUTPUT.put_line('Start Transfered Insert');

      -- insert records for customers that are transfered for fisc_yr - 2
      l_trans_insert   :=
         'INSERT INTO ' || v_src_schema || '.' || v_tbl_prfx || v_in_div_nbr
         || q'[
           (      SELECT c.cust_nbr,
             c.div_nbr,
             c.fisc_yr,
             c.fisc_mth_of_yr,
			 c.fisc_yr_wk,
             c.fisc_wk_of_yr,
             CASE
                WHEN no_cd_unfrm_sales_ty > 0
                 AND no_cd_unfrm_sales_ly > 0 THEN
                   'PENETRATION'
                WHEN no_cd_unfrm_sales_ty > 0
                 AND no_cd_unfrm_sales_ly <= 0 THEN
                   'NEW'
                WHEN no_cd_unfrm_sales_ty <= 0
                 AND no_cd_unfrm_sales_ly > 0 THEN
                   'LOST'
                ELSE
                   'OTHER'
             END
                AS cust_clsfctn,
             t.fisc_wk_strt_dt,
             t.fisc_wk_end_dt,
             t.fisc_wk_strt_dt_yrago,
             t.fisc_wk_end_dt_yrago,
             SYSDATE AS crt_dt,
			 SYSDATE AS upd_dt,
             c.drops,
             c.grs_sls_extnd,
             c.qty_ship,
             c.unfrm_grs_sls_extnd,
			 c.unfrm_dwa_cost_extnd,
			 c.unfrm_ttl_vndr_fnd_dvt,
			 c.unfrm_qty_ship,
             c.unfrm_grs_tgp,
             CASE
                WHEN c.unfrm_grs_tgp <> 0 THEN CASE WHEN drops <> 0 THEN c.unfrm_grs_tgp / c.drops ELSE 0 END
                ELSE NULL
             END
                unfrm_grs_tgp_per_drop

        FROM (  SELECT cust_nbr,
                       div_nbr,
                       fisc_yr,
                       fisc_mth_of_yr,
					   fisc_yr_wk,
					   fisc_wk_of_yr,
                       SUM(NVL(sales_ty, 0)) AS sales_ty,
                       SUM(NVL(sales_ly, 0)) AS sales_ly,
                       SUM(NVL(no_cd_unfrm_sales_ty, 0)) AS no_cd_unfrm_sales_ty,
                       SUM(NVL(no_cd_unfrm_sales_ly, 0)) AS no_cd_unfrm_sales_ly,
                       SUM(NVL(drops, 0)) drops,
                       SUM(NVL(grs_sls_extnd, 0)) grs_sls_extnd,
                       SUM(NVL(qty_ship, 0)) qty_ship,
                       SUM(NVL(unfrm_grs_sls_extnd, 0)) unfrm_grs_sls_extnd,
                       SUM(NVL(unfrm_dwa_cost_extnd, 0)) unfrm_dwa_cost_extnd,
					   SUM(NVL(unfrm_ttl_vndr_fnd_dvt, 0)) unfrm_ttl_vndr_fnd_dvt,
                       SUM(NVL(unfrm_qty_ship, 0)) unfrm_qty_ship,
                       SUM(NVL(unfrm_grs_tgp, 0)) unfrm_grs_tgp
                       FROM (SELECT cust_list.cust_nbr,
                               cust_list.div_nbr,
                               cust_list.fisc_yr,
                               cust_list.fisc_mth_of_yr,
							   cust_list.fisc_yr_wk,
							   cust_list.fisc_wk_of_yr,
                                CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-2 THEN NVL(cust_sales_ty_ly.grs_sls_extnd,0)
                                  ELSE 0
                                END sales_ty,
                                CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-3 THEN NVL(cust_sales_ty_ly.grs_sls_extnd,0)
                                  ELSE 0
                                END sales_ly,
                                CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-2 THEN NVL(cust_sales_ty_ly.no_cd_unfrm_grs_sls_extnd,0)
                                  ELSE 0
                                END no_cd_unfrm_sales_ty,
                                CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-3 THEN NVL(cust_sales_ty_ly.no_cd_unfrm_grs_sls_extnd,0)
                                  ELSE 0
                                END no_cd_unfrm_sales_ly,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-2 then cust_sales_ty_ly.drops end drops,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-2 then cust_sales_ty_ly.grs_sls_extnd end grs_sls_extnd,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-2 then cust_sales_ty_ly.qty_ship end qty_ship,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-2 then cust_sales_ty_ly.unfrm_grs_sls_extnd end unfrm_grs_sls_extnd,
		                        case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-2 then cust_sales_ty_ly.unfrm_dwa_cost_extnd end unfrm_dwa_cost_extnd,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-2 then cust_sales_ty_ly.unfrm_ttl_vndr_fnd_dvt end unfrm_ttl_vndr_fnd_dvt,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-2 then cust_sales_ty_ly.unfrm_qty_ship end unfrm_qty_ship,
                                case when cust_sales_ty_ly.fisc_yr = ]'
         || v_fisc_yr
         || q'[-2 then cust_sales_ty_ly.unfrm_grs_tgp end unfrm_grs_tgp

                         FROM (SELECT c.div_nbr,
                                      c.cust_nbr,
                                      t.fisc_yr,
                                      t.fisc_mth_of_yr,
                                      t.fisc_yr_wk,
									  t.fisc_wk_of_yr,
                                      c.cust_sk

                               FROM ]'
         || v_cust_vw
         || q'[,
                                    (SELECT t.fisc_yr, t.fisc_mth_of_yr, t.fisc_yr_wk,t.fisc_wk_of_yr
                                     FROM xdmadm.time_corp t
                                     WHERE t.fisc_yr = ]'
         || v_fisc_yr
         || q'[-2 AND t.fisc_wk_of_yr <= ']'
         || v_fisc_wk_of_yr
         || q'[' GROUP BY t.fisc_yr, t.fisc_mth_of_yr, t.fisc_yr_wk,t.fisc_wk_of_yr) t) cust_list,
                               (SELECT s.div_nbr,
                                      s.cust_nbr,
                                      t.fisc_yr,
                                      t.fisc_mth_of_yr,
									  t.fisc_yr_wk,
									  t.fisc_wk_of_yr,
                                      count(distinct case when s.trans_typ = 'RT' AND pim_suprcls_id_actl <> 97 AND pim_suprcls_id_actl IS NOT NULL then s.DIV_NBR||s.CUST_NBR||INV_DT||nvl(DLVR_RTE,'')||PRCS_DT else NULL end) DROPS,
                                     SUM (grs_sls_extnd) AS GRS_SLS_EXTND,
                                     SUM(CASE
                                                WHEN s.trans_typ IN ('RT', 'VS', 'WC')
                                                 AND pim.pim_suprcls_id <> 97
                                                 AND pim.pim_suprcls_id is not null THEN
                                                   s.grs_sls_extnd
                                                ELSE
                                                   NULL
                                             END)
                                            no_cd_unfrm_grs_sls_extnd,
                                     SUM(QTY_SHIP) as QTY_SHIP,
                                     SUM(UNFRM_QTY_SHIP)UNFRM_QTY_SHIP,
                                     sum(case when pim.pim_suprcls_id <> 97
                                          and pim.pim_suprcls_id is not null
                                         then grs_sls_extnd
                                         else 0
                                         END) UNFRM_GRS_SLS_EXTND,
									sum(case when pim.pim_suprcls_id <> 97
                                          and pim.pim_suprcls_id is not null
                                         then ttl_vndr_fnd_dvt
                                         else 0
                                         END) unfrm_ttl_vndr_fnd_dvt,
                                     sum(case when pim.pim_suprcls_id <> 97
                                          and pim.pim_suprcls_id is not null
                                         then dwa_cost_extnd
                                         else 0
                                         END) unfrm_dwa_cost_extnd,
                                     SUM(CASE
                                                WHEN pim.pim_suprcls_id <> 97
                                                 AND pim.pim_suprcls_id IS NOT NULL THEN
                                                   NVL(s.grs_sls_extnd - s.dwa_cost_extnd + s.ttl_vndr_fnd_dvt
                                                       - CASE
                                                            WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0)
                                                            ELSE 0
                                                          END, 0)
                                                ELSE
                                                   0
                                             END)
                                            unfrm_grs_tgp

                               FROM xdmadm.time_corp t,
                                    xdmadm.sales_corp s,
                                    xdmadm.pim_corp pim,
                                    xdmadm.div_corp d, ]'
         || v_cust_vw
         || q'[ WHERE     t.fisc_yr in (]'
         || v_fisc_yr
         || '-2,'
         || v_fisc_yr
         || q'[-3)
                                     AND t.fisc_wk_of_yr <= ']'
         || v_fisc_wk_of_yr
         || q'[' AND t.fisc_wk_of_yr <> CASE
                                                               WHEN t.fisc_yr = (]'
         || v_fisc_yr
         || q'[-3) AND ']'
         || v_fisc_mth_of_yr
         || q'[' = '12' AND ]'
         || v_py_max_wk
         || q'[= 53 THEN 53    --*** WEEK 52-53 LOGIC *** exclude week #53 from last year if current period=12 and last year has 53 weeks
                                                               ELSE 99    -- else, include all weeks
                                                            END
                                     AND t.clndr_dt <= ']'
         || v_end_dt
         ||
           q'[' AND s.prcs_dt = t.clndr_dt
                                     AND s.xfer_to_dt IS NULL
                                     AND s.div_nbr = c.div_nbr
                                     AND s.cust_nbr = c.cust_nbr
                                     AND s.pim_usf_std_prod_cd = pim.pim_usf_std_prod_cd
                                     AND NVL(s.sls_revenue_div_nbr, s.div_nbr) = d.div_nbr
                                     AND d.div_typ_cd <> 'CC'
								     AND  (case when NVL (d.acqstn_cmpny_nm,'USF') <> 'USF'
								     and NVL(s.sls_revenue_div_nbr, s.div_nbr) = d.div_nbr
									 and s.prcs_dt < NVL(d.acqstn_dt,s.prcs_dt)
									 then 'NON_USFGL' else 'USFGL' END) ='USFGL'
                         GROUP BY s.div_nbr, s.cust_nbr, t.fisc_yr, t.fisc_mth_of_yr,t.fisc_yr_wk,t.fisc_wk_of_yr) cust_sales_ty_ly -- inline view to get cust/div sales this year and last year
                         WHERE     cust_list.cust_nbr = cust_sales_ty_ly.cust_nbr(+)
                               AND cust_list.div_nbr = cust_sales_ty_ly.div_nbr(+)
                               AND cust_list.fisc_wk_of_yr = cust_sales_ty_ly.fisc_wk_of_yr(+))

                         GROUP by
                                cust_nbr,
                                div_nbr,
                                fisc_yr,
                                fisc_mth_of_yr,
                                fisc_yr_wk,
                                fisc_wk_of_yr
                               ) c,
                         (select fisc_yr, fisc_mth_of_yr, fisc_yr_wk,fisc_wk_of_yr,
                                 min(clndr_dt) fisc_wk_strt_dt,
                                 max(clndr_dt) fisc_wk_end_dt,
                                 min(clndr_dt_yrago) fisc_wk_strt_dt_yrago,
                                 max(clndr_dt_yrago) fisc_wk_end_dt_yrago
                                 from xdmadm.time_corp
                                 group by fisc_yr, fisc_mth_of_yr, fisc_yr_wk,fisc_wk_of_yr) t
                         where t.fisc_yr = c.fisc_yr
                           and t.fisc_wk_of_yr = c.fisc_wk_of_yr)]';

      DBMS_OUTPUT.put_line(l_trans_insert);

      EXECUTE IMMEDIATE l_trans_insert;

      l_insert_cnt   := sql%ROWCOUNT;

      COMMIT;
      DBMS_OUTPUT.put_line(
         'Inserted ' || l_insert_cnt || ' rows in ' || TO_CHAR(ROUND((SYSDATE - l_fn_start) * 86400)) || ' seconds');

      -- merge period classification data to target table
      v_mrg_stmt     :=
         q'[MERGE INTO xdmadm.cust_clsfctn_wkly_corp tgt
           USING (select cust_nbr, div_nbr, fisc_yr, fisc_mth_of_yr,fisc_yr_wk, fisc_wk_of_yr, cust_clsfctn,
                  fisc_wk_strt_dt, fisc_wk_end_dt, fisc_wk_strt_dt_yrago, fisc_wk_end_dt_yrago, crt_dt, upd_dt, drops, grs_sls_extnd,
                  qty_ship,unfrm_grs_sls_extnd, unfrm_dwa_cost_extnd, unfrm_ttl_vndr_fnd_dvt, unfrm_qty_ship, unfrm_grs_tgp, unfrm_grs_tgp_per_drop
                  FROM ]'
         || v_src_schema
         || '.'
         || v_tbl_prfx
         || v_in_div_nbr
         || q'[) src
           ON (tgt.cust_nbr = src.cust_nbr
           AND tgt.div_nbr = src.div_nbr
           AND tgt.fisc_yr = src.fisc_yr
           AND tgt.fisc_mth_of_yr = src.fisc_mth_of_yr
           AND tgt.fisc_wk_of_yr = src.fisc_wk_of_yr)
   WHEN MATCHED THEN
      UPDATE SET tgt.cust_clsfctn                 = src.cust_clsfctn,
                 tgt.fisc_wk_strt_dt             = src.fisc_wk_strt_dt,
                 tgt.fisc_wk_end_dt              = src.fisc_wk_end_dt,
                 tgt.fisc_wk_strt_dt_yrago       = src.fisc_wk_strt_dt_yrago,
                 tgt.fisc_wk_end_dt_yrago        = src.fisc_wk_end_dt_yrago,
                 tgt.upd_dt                       = (    SELECT SYSDATE FROM DUAL),
                 tgt.drops                        = src.drops,
                 tgt.grs_sls_extnd                = src.grs_sls_extnd,
                 tgt.qty_ship                     = src.qty_ship,
                 tgt.unfrm_grs_sls_extnd          = src.unfrm_grs_sls_extnd,
				 tgt.unfrm_dwa_cost_extnd         = src.unfrm_dwa_cost_extnd,
				 tgt.unfrm_ttl_vndr_fnd_dvt       = src.unfrm_ttl_vndr_fnd_dvt,
                 tgt.unfrm_qty_ship               = src.unfrm_qty_ship,
                 tgt.unfrm_grs_tgp                = src.unfrm_grs_tgp,
                 tgt.unfrm_grs_tgp_per_drop       = src.unfrm_grs_tgp_per_drop
           WHEN NOT MATCHED THEN INSERT  ( cust_nbr, div_nbr, fisc_yr, fisc_mth_of_yr, fisc_yr_wk,
                         fisc_wk_of_yr, cust_clsfctn, fisc_wk_strt_dt, fisc_wk_end_dt, fisc_wk_strt_dt_yrago, fisc_wk_end_dt_yrago,
                         crt_dt,  drops, grs_sls_extnd, qty_ship, unfrm_grs_sls_extnd, unfrm_dwa_cost_extnd,unfrm_ttl_vndr_fnd_dvt, unfrm_qty_ship,
                          unfrm_grs_tgp, unfrm_grs_tgp_per_drop )
           VALUES ( src.cust_nbr, src.div_nbr, src.fisc_yr,src.fisc_mth_of_yr,src.fisc_yr_wk, src.fisc_wk_of_yr, src.cust_clsfctn, src.fisc_wk_strt_dt,
                  src.fisc_wk_end_dt, src.fisc_wk_strt_dt_yrago,src.fisc_wk_end_dt_yrago,src.crt_dt, 0, src.grs_sls_extnd, src.qty_ship, src.unfrm_grs_sls_extnd,
				  src.unfrm_dwa_cost_extnd,src.unfrm_ttl_vndr_fnd_dvt, src.unfrm_qty_ship, src.unfrm_grs_tgp, src.unfrm_grs_tgp_per_drop)]';

      DBMS_OUTPUT.put_line(v_mrg_stmt);

      EXECUTE IMMEDIATE v_mrg_stmt;

      COMMIT;

      DBMS_OUTPUT.put_line('Table XDMADM.CUST_CLSFCTN_WKLY_CORP updated ' || SYSTIMESTAMP);

      EXECUTE IMMEDIATE 'DROP TABLE ' || v_src_schema || '.' || v_tbl_prfx || v_in_div_nbr;

      DBMS_OUTPUT.put_line(
         'Table ' || v_src_schema || '.' || v_tbl_prfx || v_in_div_nbr || ' dropped ' || SYSTIMESTAMP);
   ELSE
      DBMS_OUTPUT.put_line('No customer(s) to reclassify ' || SYSTIMESTAMP);
   END IF;

   IF v_in_cust_nbr IS NULL THEN
      -- delete customers that got transferred out
      -- check if there are any rows to delete
      SELECT COUNT( * )
        INTO v_cnt2
        FROM xdmadm.sales_corp
       WHERE div_nbr = v_in_div_nbr
         AND xfer_to_dt IS NOT NULL
         AND ldr_tm > v_in_ldr_tm;

      DBMS_OUTPUT.put_line('v_cnt2 ' || v_cnt2);

      IF v_cnt2 > 0 THEN
         DELETE FROM xdmadm.CUST_CLSFCTN_WKLY_CORP
               WHERE div_nbr = v_in_div_nbr
                 AND cust_nbr IN (SELECT DISTINCT cust_nbr
                                    FROM xdmadm.sales_corp
                                   WHERE div_nbr = v_in_div_nbr
                                     AND xfer_to_dt IS NOT NULL
                                     AND ldr_tm > v_in_ldr_tm);

         COMMIT;
         DBMS_OUTPUT.put_line('Deleted customers that were transferred out ' || SYSTIMESTAMP);
      END IF;



   COMMIT;

   -- Update tgp columns when new AP transaction are loaded
   OPEN c_ap_tgp;

   LOOP
      EXIT WHEN c_ap_tgp%NOTFOUND;

      FETCH c_ap_tgp
      BULK COLLECT INTO r_ap_tgp
      LIMIT 10000;

      FORALL i IN 1 .. r_ap_tgp.COUNT()
         UPDATE /*+ use_invisible_indexes */
               xdmadm.cust_clsfctn_wkly_corp b
            SET unfrm_grs_tgp = r_ap_tgp(i).unfrm_grs_tgp, unfrm_grs_tgp_per_drop = r_ap_tgp(i).unfrm_grs_tgp_per_drop
          WHERE b.div_nbr = r_ap_tgp(i).div_nbr
            AND b.cust_nbr = r_ap_tgp(i).cust_nbr
            AND b.fisc_wk_strt_dt = r_ap_tgp(i).fisc_wk_strt_dt;


      DBMS_OUTPUT.put_line('Rows Updated' || sql%ROWCOUNT);
      COMMIT;
   END LOOP;

   CLOSE c_ap_tgp;

   RETURN 0;


   END IF;
   EXCEPTION
WHEN OTHERS THEN
      DBMS_OUTPUT.put_line('Error in XDMADM.FN_CUST_CLS_CORP_WKLY_RECLS:' || SQLCODE || ' ' || SQLERRM);
      RETURN 1;

END FN_CUST_CLS_CORP_WKLY_RECLS;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_CRT_SYNONYM"
   (p_syn_nm IN VARCHAR2, p_tbl_owner VARCHAR2 , p_tbl_nm VARCHAR2 )
      RETURN NUMBER
   AS
   v_dyn_sql    VARCHAR2(500);
BEGIN

    v_dyn_sql := 'CREATE OR REPLACE SYNONYM '||p_syn_nm ||' FOR '||p_tbl_owner||'.'||p_tbl_nm;
    DBMS_OUTPUT.PUT_LINE (v_dyn_sql);
    execute immediate v_dyn_sql;
    return 0;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE ('error in xdmadm.fn_crt_synonym while creating the '||p_syn_nm||' synonym on '||p_tbl_owner||'.'||p_tbl_nm);
        DBMS_OUTPUT.put_line ('ERROR:' || SQLCODE || ',' || SQLERRM);
        RETURN 1;
END;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_ACQSTN_SLS_EXCLUDE_VPD" (p_schema       IN VARCHAR2,
                                                        p_objname      IN VARCHAR2)
   RETURN VARCHAR2 AS
   /***********************************************************************
   * Name: FN_ALL_DIV_ACTIVE_VPD
   * Type: Function
   * Description: VPD Function to exclude inactive divisions.
   *  REVISIONS:
   *  Ver        Date        Author           Description
   *  ---------  ----------  ---------------  ------------------------------------
   *  1.0        10/29/2015  p1a0168       Created this function
   ************************************************************************/
   c_start                CONSTANT NUMBER := DBMS_UTILITY.get_time;
   c_fn_nm                CONSTANT VARCHAR2(30) := 'FN_ACQSTN_SLS_EXCLUDE_VPD';
   l_security_predicate   VARCHAR2(4000) DEFAULT NULL;
   l_cur_sql              VARCHAR2(4000) := SYS_CONTEXT('USERENV', 'CURRENT_SQL');
   l_sbjct_area           VARCHAR2(100) := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_sbjct_area_attr);
   l_vpd_exempt           VARCHAR2(1) := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_exempt_attr);
   l_all_divs             VARCHAR2(1) := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_alldivs_attr);

   l_div_count            NUMBER := 0;
   l_first                BOOLEAN := TRUE;

   CURSOR all_divs_c IS
      SELECT /*+ NOPARALLEL */
            dc.div_nbr
        FROM xdmadm.div_corp dc
       WHERE nvl(ACQSTN_CMPNY_NM,'USF') <> 'USF' ;

   all_divs_rec           all_divs_c%ROWTYPE;
BEGIN
   --If no subject area context is set then return predicate filtering all data

   IF l_sbjct_area IS NULL THEN
      l_security_predicate   := '1=2';
      ctladm.pkg_vpd_debug_util.vpd_debug('NO SA',
                                          c_fn_nm,
                                          USER,
                                          p_schema,
                                          p_objname,
                                          l_sbjct_area,
                                          l_vpd_exempt,
                                          l_all_divs,
                                          l_cur_sql,
                                          l_security_predicate,
                                          (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   -- Check if user is exempt based on current subject area context
   -- If so, return predicate without any filter

   IF l_vpd_exempt = 'Y' THEN
      l_security_predicate   := '1=1';
      ctladm.pkg_vpd_debug_util.vpd_debug('EXEMPT',
                                          c_fn_nm,
                                          USER,
                                          p_schema,
                                          p_objname,
                                          l_sbjct_area,
                                          l_vpd_exempt,
                                          l_all_divs,
                                          l_cur_sql,
                                          l_security_predicate,
                                          (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   -- Check if user has all division access based on current subject area context
   -- If so, return predicate that excludes inactive divisions

   SELECT COUNT( * )
     INTO l_div_count
     FROM xdmadm.div_corp dc
    WHERE nvl(ACQSTN_CMPNY_NM,'USF') <> 'USF' ;

   IF l_div_count > 0 THEN
      l_first                := TRUE;

      OPEN all_divs_c;

      LOOP
         FETCH all_divs_c INTO all_divs_rec;

         EXIT WHEN all_divs_c%NOTFOUND;

         IF l_first THEN
            l_security_predicate   := 'SLS_REVENUE_DIV_NBR NOT IN (' || all_divs_rec.div_nbr;
            l_first                := FALSE;
         ELSE
            l_security_predicate   := l_security_predicate || ',' || all_divs_rec.div_nbr;
         END IF;
      END LOOP;

      CLOSE all_divs_c;

      l_security_predicate   := l_security_predicate || ')';
   ELSE
      l_security_predicate   := '1=1';
   END IF;

   ctladm.pkg_vpd_debug_util.vpd_debug('ALL DIVS',
                                       c_fn_nm,
                                       USER,
                                       p_schema,
                                       p_objname,
                                       l_sbjct_area,
                                       l_vpd_exempt,
                                       l_all_divs,
                                       l_cur_sql,
                                       l_security_predicate,
                                       (DBMS_UTILITY.get_time - c_start) / 100);

   RETURN l_security_predicate;
EXCEPTION
   WHEN OTHERS THEN
      l_security_predicate   := '1=2';
      ctladm.pkg_vpd_debug_util.vpd_debug(SQLCODE || '-' || SQLERRM,
                                          c_fn_nm,
                                          USER,
                                          p_schema,
                                          p_objname,
                                          l_sbjct_area,
                                          l_vpd_exempt,
                                          NULL,
                                          l_cur_sql,
                                          l_security_predicate,
                                          (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
END fn_acqstn_sls_exclude_vpd;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_FWB_CYCLE_LOAD" (p_odate VARCHAR2)
   RETURN NUMBER IS
   /******************************************************************************
      NAME: XDMADM.FN_FWB_CYCLE_LOAD
      TYPE: FUNCTION

      USAGE:XDMADM.FN_FWB_CYCLE_LOAD (p_odate varchar2)

      PURPOSE:   This function will MERGE data into XDMADM.FWB_CYCLE table. The source is XDMADM.FWB_MDL.
                 FWB_CYCLE table will store all distinct cycles and deals from FWB_MDL.


      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        05/07/2011  Vikas Wadhwa     Created this function.

      1.1        10/17/2011  Vikas Wadhwa     Processed date fields with TRUNC()
                                              to pull true distinct values

      1.2        10/21/2011  Vikas Wadhwa     Change MERGE statement to join on name fields
                                              and update date fields

      1.3        10/21/2011  Vikas Wadhwa       1. Changed all references to "dbms_output.put_line("
                                                   to "dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||"
                                                   to include timestamp in output

      1.31       01/17/2011  Vikas Wadhwa       1. Changed MERGE to instead only key on FWB_CYC_ID and set relevant and
                                                   user-updateable columns

      Tables referenced:  XDMADM.FWB_MDL


      Outputs a success message upon inserting rows into a table or error message on failure

      ERROR HANDLING:
      When an error occurs, error message is displayed by dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||)

   ******************************************************************************/


   con_process_name   CONSTANT VARCHAR2(40) := 'FN_FWB_CYCLE_LOAD';
   con_prrty_severe   CONSTANT INTEGER := 1;
   con_prrty_warn     CONSTANT INTEGER := 2;
   con_prrty_info     CONSTANT INTEGER := 3;
   con_prrty_debug    CONSTANT INTEGER := 4;
   con_err_lvl        CONSTANT INTEGER := 3;
   v_prcs_err_cd      NUMBER;
   v_prcs_err_msg     VARCHAR2(500);
   v_prcs_nm          VARCHAR2(30);
   v_prcs_stp         VARCHAR2(500);

   v_dba_func_msg     VARCHAR2(2000) := 'oXo';
   v_sql_string       VARCHAR2(32767);
   v_table_owner      VARCHAR2(40) := 'XDMADM'; -- hardcoded value
   v_table_name       VARCHAR2(40) := 'FWB_CYCLE';

   v_odate_str        VARCHAR2(8) := p_odate;
   v_fwb_mdl_rec      xdmadm.fwb_mdl%ROWTYPE;
BEGIN
   v_prcs_nm    := con_process_name;
   v_prcs_stp   := 'Start Process';
   DBMS_OUTPUT.put_line(TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS     ') || v_prcs_stp);

   BEGIN
      /********************************************************
      ** check to verify that FWB_CYCLE table exists,
      ** if not, then exit
      *********************************************************/
      v_prcs_stp   := 'Verify ' || v_table_owner || '.' || v_table_name || ' exists';
      DBMS_OUTPUT.put_line(TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS     ') || v_prcs_stp);

      IF NOT (usfdba.table_pkg.table_exists(v_dba_func_msg,
                                            v_table_owner,
                                            v_table_name,
                                            NULL,
                                            NULL)) THEN
         v_prcs_err_msg   := ': Table ' || v_table_owner || '.' || v_table_name || ' does not exist';
         v_prcs_err_cd    := SQLCODE;
         DBMS_OUTPUT.put_line(TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS     ') || 'Error Message: ' || v_prcs_err_msg);
         DBMS_OUTPUT.put_line(TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS     ') || 'Error Code: ' || v_prcs_err_cd);
         RETURN 2;
      END IF;
   EXCEPTION
      WHEN OTHERS THEN
         v_prcs_err_msg   := SQLERRM;
         v_prcs_err_cd    := SQLCODE;
         DBMS_OUTPUT.put_line(
            TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS     ') || '**********ERROR IN TABLE VERIFY BLOCK**********');
         DBMS_OUTPUT.put_line(TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS     ') || 'Error Message: ' || v_prcs_err_msg);
         DBMS_OUTPUT.put_line(TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS     ') || 'Error Code: ' || v_prcs_err_cd);
         DBMS_OUTPUT.put_line(
            TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS     ') || '***********************************************');
         RETURN 3;
   END;

   /************************************************************
   ** v1.31 Vikas Wadhwa
   **      - Adding delete statement
   **      - Removing FWB_CYC_NM,FWB_RECMD_NM, and DEAL_NM
   **      from MERGE key and made them updateable
   *************************************************************/

   BEGIN
      v_prcs_stp   := 'Beginning MERGE...';
      DBMS_OUTPUT.put_line(TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS     ') || v_prcs_stp);

      MERGE INTO xdmadm.fwb_cycle tgt
           USING (  SELECT fwb_cyc_id,
                           fwb_cyc_typ,
                           fwb_cyc_nm,
                           fwb_recmd_nm,
                           --DEAL_NM,

                           MIN(strt_dt) strt_dt,
                           MAX(eff_dt) eff_dt,
                           TRUNC(crt_dt) crt_dt,
                           crt_userid
                      FROM xdmadm.fwb_mdl
                     WHERE eff_dt >= TO_DATE(v_odate_str, 'YYYYMMDD')
                       AND inact_dt IS NULL
                  GROUP BY fwb_cyc_id,
                           fwb_cyc_typ,
                           fwb_cyc_nm,
                           fwb_recmd_nm,
                           --DEAL_NM,
                           TRUNC(crt_dt),
                           crt_userid) src
              ON (tgt.fwb_cyc_id = src.fwb_cyc_id
              AND tgt.fwb_cyc_typ = src.fwb_cyc_typ)
      WHEN MATCHED THEN
         UPDATE SET tgt.fwb_recmd_nm   = src.fwb_recmd_nm,
                    --TGT.DEAL_NM      = SRC.DEAL_NM,
                    tgt.strt_dt        = src.strt_dt,
                    tgt.eff_dt         = src.eff_dt,
                    tgt.crt_dt         = src.crt_dt,
                    tgt.crt_userid     = src.crt_userid
      WHEN NOT MATCHED THEN
         INSERT            (fwb_cyc_id, fwb_cyc_typ, fwb_cyc_nm, fwb_recmd_nm, --DEAL_NM,
                                                                              strt_dt, eff_dt,
                            crt_dt, crt_userid)
             VALUES (src.fwb_cyc_id,
                     src.fwb_cyc_typ,
                     src.fwb_cyc_nm,
                     src.fwb_recmd_nm,
                     --SRC.DEAL_NM,
                     src.strt_dt,
                     src.eff_dt,
                     src.crt_dt,
                     src.crt_userid);
   /************************************************************
   ** END v1.31 Vikas Wadhwa
   *************************************************************/


   EXCEPTION
      WHEN OTHERS THEN
         v_prcs_err_msg   := SQLERRM;
         v_prcs_err_cd    := SQLCODE;
         DBMS_OUTPUT.put_line(
            TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS     ') || '**********ERROR IN MERGE BLOCK**********');
         DBMS_OUTPUT.put_line(TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS     ') || 'Error Message: ' || v_prcs_err_msg);
         DBMS_OUTPUT.put_line(TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS     ') || 'Error Code: ' || v_prcs_err_cd);
         DBMS_OUTPUT.put_line(
            TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS     ') || '****************************************');
         ROLLBACK;
         RETURN 4;
   END;

   v_prcs_stp   := 'Function Completed Successfully:  ' || sql%ROWCOUNT || ' rows merged';
   DBMS_OUTPUT.put_line(TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS     ') || v_prcs_stp);

   COMMIT;
   RETURN 0;
EXCEPTION
   WHEN OTHERS THEN
      v_prcs_err_msg   := SQLERRM;
      v_prcs_err_cd    := SQLCODE;
      DBMS_OUTPUT.put_line(TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS     ') || '**********GENERAL ERROR**********');
      DBMS_OUTPUT.put_line(TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS     ') || 'Error Message: ' || v_prcs_err_msg);
      DBMS_OUTPUT.put_line(TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS     ') || 'Error Code: ' || v_prcs_err_cd);
      DBMS_OUTPUT.put_line(TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS     ') || '*********************************');

      ROLLBACK;

      RETURN 5;
END fn_fwb_cycle_load;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_ACQSTN_AGGR_LOAD" (odate IN DATE)
   RETURN NUMBER IS
   /***********************************************************************************
      * Name: fn_acqstn_aggr_load
      * Type: Function
      * Description: This function loads the ACQSTN_AGGR table in XDMADM.
   ************************************************************************************
      *  REVISIONS:
      *  Ver    Date(dd/mm/yyyy)  Author               Description
      *  -----  ----------        ---------------      --------------------------------
      *  1.0    06/29/2017        Sucoor Velu          Created this procedure.
      *  2.0    05/19/2020        David Li             Modified GROSS_TGP to exclude Auto Shipping Charge(ASC) when ASC_ORD_APLY_IND = 'P'.
   ************************************************************************************/
   con_process_name    CONSTANT VARCHAR2(40) := 'FN_ACQSTN_AGGR_LOAD';
   v_table_owner       VARCHAR2(40) := 'XDMADM';
   v_table_nm          VARCHAR2(40) := 'ACQSTN_AGGR';
   v_prcs_nm           VARCHAR2(100);
   v_prcs_stp          VARCHAR2(100);
   v_out_msg           VARCHAR2(256);
   v_truncate_tbl      NUMBER(3);
   v_acqstn_corp_cnt   NUMBER := 0;
   v_acqstn_aggr_cnt   NUMBER := 0;
   v_base_cnt          NUMBER := 0;
   v_base_cases_cnt    NUMBER;
   v_base_sales        NUMBER;
   v_aggr_cases_cnt    NUMBER;
   v_aggr_sales        NUMBER;
   v_curr_yr           NUMBER(4);
   v_curr_yr_minus1yr  NUMBER(4);
   v_return_code       NUMBER := 0;
   l_aggr_insert       VARCHAR2(32000);
   l_insert_cnt        NUMBER;
   l_insert_shrd_cnt   NUMBER;
   l_fn_start          DATE;
   l_fisc_yr_wk        VARCHAR2(18 BYTE);
   e_analyze_table exception;
   all_exceptions exception;
--******************************************************************************
--* Program Start                                                              *
--******************************************************************************

BEGIN
   v_prcs_nm        := con_process_name;
   v_prcs_stp       := 'Start Process';
   DBMS_OUTPUT.put_line('Start Time:' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));

   --******************************************************************************
   --* Truncate the Acquisition Aggregate Table                                   *
   --******************************************************************************

   DBMS_OUTPUT.put_line('Truncating/Deleting records from XDMADM.acqstn_aggr');

   v_truncate_tbl   := usfdba.table_pkg.truncate_table(v_out_msg, v_table_owner, v_table_nm);

   DBMS_OUTPUT.put_line(v_out_msg);

   IF v_truncate_tbl != 0 THEN
      DBMS_OUTPUT.put_line('Error in Truncating the ' || v_table_nm || ' table');
      RAISE all_exceptions;
   END IF;

   DBMS_OUTPUT.put_line('XDMADM.acqstn_aggr table truncated successfully');

   --******************************************************************************
   --* Retrieve the variables for the Start and End Dates                         *
   --******************************************************************************

   -- End date will be set from the ODATE
   l_fn_start       := SYSDATE;

   --- Current Year
   -- MN - 062514 - Commented out this code to determine fiscal year and added fiscal year to following query
   -- v_curr_yr        := TO_CHAR(odate, 'YYYY');

   SELECT fisc_yr,fisc_yr-1
   INTO  v_curr_yr,v_curr_yr_minus1yr
     FROM xdmadm.time_corp
    WHERE clndr_dt =  odate;

   DBMS_OUTPUT.put_line('v_curr_yr = ' || v_curr_yr);

  -- DBMS_OUTPUT.put_line('fisc_yr_wk = ' || l_fisc_yr_wk);
   DBMS_OUTPUT.put_line('v_curr_yr_minus1yr = ' || v_curr_yr_minus1yr);

   --******************************************************************************
   --* Prepare SQL and execute it for Loading Target Consumption Table            *
   --******************************************************************************

   BEGIN
      DBMS_OUTPUT.put_line('Inserting Rows into XDMADM.acqstn_aggr table');

      INSERT /*+ append */
            INTO xdmadm.acqstn_aggr(div_nbr, prcs_dt, pyr_seg_cd, cust_acqstn_stat_actl, cust_acqstn_div_nbr,
                                    unfrm_qty_ship,
                                                 unfrm_qty_ship_ly,
                                                          grs_tgp,
                                                                  grs_tgp_ly)
 WITH base_sls
     AS (  SELECT /*+ use_hash (div,sls) */
                  div.div_nbr,
                  cust.cust_nbr,
                  tm.CLNDR_DT,
                  tm.clndr_dt_yrago,
                  NVL (rev_div.acqstn_cmpny_nm, 'USF') sls_org,
                  SUM (sls.UNFRM_QTY_SHIP) AS base_UNFRM_QTY_SHIP,
                  SUM(NVL((sls.grs_sls_extnd - sls.dwa_cost_extnd) - (CASE WHEN sls.ASC_ORD_APLY_IND = 'P' THEN NVL(sls.ASC_EXTND_AMT,0) ELSE 0 END) + (sls.ttl_vndr_fnd_dvt), 0)) base_grs_tgp
             FROM XDMADM.SYN_DIV_CORP div,
                  XDMADM.PIM_CORP pim,
                  XDMADM.DIV_CORP acq_div,
                  XDMADM.DIV_CORP rev_div,
                  XDMADM.CUST_CORP cust,
                  XDMADM.TIME_CORP tm,
                  XDMADM.SALES_CORP sls
            WHERE     rev_div.DIV_TYP_CD NOT IN ('CC')
                  AND rev_div.DIV_NBR =
                         NVL (sls.SLS_REVENUE_DIV_NBR, sls.DIV_NBR)
                  AND sls.PIM_USF_STD_PROD_CD = pim.PIM_USF_STD_PROD_CD
                  AND sls.PRCS_DT = tm.CLNDR_DT_yrago
                  AND sls.CUST_NBR = cust.CUST_NBR
                  AND sls.DIV_NBR = cust.DIV_NBR
                  AND sls.DIV_NBR = div.DIV_NBR
                  AND sls.xfer_to_dt IS NULL
                  AND acq_div.DIV_NBR =
                         NVL (cust.CUST_ACQSTN_DIV_NBR, cust.DIV_NBR)
                  AND cust.CUST_ACQSTN_STAT_ACTL IN ('NEW/SHARED', 'SHARED')
                  AND cust.TRD_CLS = '1'
                  AND div.DIV_TYP_CD = 'USF'
                  AND (pim.PIM_SUPRCLS_ID <> 97 OR pim.PIM_SUPRCLS_ID IS NULL)
                  AND tm.fisc_yr = v_curr_yr_minus1yr
                  AND NVL (rev_div.acqstn_cmpny_nm, 'USF') = 'USF'
         GROUP BY div.div_nbr,
                  cust.cust_nbr,
                  tm.CLNDR_DT,
                  tm.clndr_dt_yrago,
                  NVL (rev_div.acqstn_cmpny_nm, 'USF')
                  ),
     ly_Sls
     AS (  SELECT /*+ use_hash (div,sls) */
                 div.div_nbr,
                  cust.cust_nbr,
                  tm.CLNDR_DT,
                  tm.clndr_dt_yrago,
                  NVL (rev_div.acqstn_cmpny_nm, 'USF') sls_org,
                  SUM (UNFRM_QTY_SHIP) AS UNFRM_QTY_SHIP,
                  SUM (case when cust.cust_acqstn_stat_actl in ('SHARED','NEW/SHARED') and NVL (rev_div.acqstn_cmpny_nm, 'USF') = 'USF' then UNFRM_QTY_SHIP else 0 end) AS SU_UNFRM_QTY_SHIP,
                  SUM(NVL((sls.grs_sls_extnd - sls.dwa_cost_extnd) - (CASE WHEN sls.ASC_ORD_APLY_IND = 'P' THEN NVL(sls.ASC_EXTND_AMT,0) ELSE 0 END) + (sls.ttl_vndr_fnd_dvt), 0)) grs_tgp,
                  SUM(case when cust.cust_acqstn_stat_actl in ('SHARED','NEW/SHARED') and NVL (rev_div.acqstn_cmpny_nm, 'USF') = 'USF' then NVL((sls.grs_sls_extnd - sls.dwa_cost_extnd) - (CASE WHEN sls.ASC_ORD_APLY_IND = 'P' THEN NVL(sls.ASC_EXTND_AMT,0) ELSE 0 END) + (sls.ttl_vndr_fnd_dvt), 0) else 0 end ) su_grs_tgp
             FROM XDMADM.SYN_DIV_CORP div
                                         ,
                  XDMADM.PIM_CORP pim
                                     ,
                  XDMADM.DIV_CORP acq_div
                                         ,
                  XDMADM.DIV_CORP rev_div
                                         ,
                  XDMADM.CUST_CORP cust
                                       ,
                  XDMADM.TIME_CORP tm
                                     ,
                  XDMADM.SALES_CORP sls
            WHERE     rev_div.DIV_TYP_CD NOT IN ('CC')
                  AND rev_div.DIV_NBR =
                         NVL (sls.SLS_REVENUE_DIV_NBR, sls.DIV_NBR)
                  AND sls.PIM_USF_STD_PROD_CD = pim.PIM_USF_STD_PROD_CD
                  AND sls.PRCS_DT = tm.CLNDR_DT_yrago
                  AND sls.CUST_NBR = cust.CUST_NBR
                  AND sls.DIV_NBR = cust.DIV_NBR
                  AND sls.DIV_NBR = div.DIV_NBR
                  AND sls.xfer_to_dt IS NULL
                  AND acq_div.DIV_NBR =
                         NVL (cust.CUST_ACQSTN_DIV_NBR, cust.DIV_NBR)
                  AND cust.TRD_CLS = '1'
                  AND div.DIV_TYP_CD = 'USF'
                  AND (pim.PIM_SUPRCLS_ID <> 97 OR pim.PIM_SUPRCLS_ID IS NULL)
                  AND tm.fisc_yr = v_curr_yr
                  AND NVL (acq_div.acqstn_cmpny_nm, 'USF') <> 'USF'
                  AND cust.CUST_ACQSTN_STAT_ACTL IN ('NEW/SHARED',
                                                     'SHARED',
                                                     'NEW')
         GROUP BY div.div_nbr,
                  cust.cust_nbr,
                  tm.CLNDR_DT,
                  tm.clndr_dt_yrago,
                  NVL (rev_div.acqstn_cmpny_nm, 'USF')),

     ly_sls_base
     AS (  SELECT NVL (ls.div_nbr, bs.div_nbr) div_nbr,
                  NVL (ls.cust_nbr, bs.cust_nbr) cust_nbr,
                  NVL (ls.CLNDR_DT_yrago, bs.clndr_dt) clndr_dt_yrago,
                  NVL (ls.CLNDR_DT, t.clndr_dt) clndr_dt,
                  NVL (ls.sls_org, bs.sls_org) sls_org,
                  nvl(SUM (ls.UNFRM_QTY_SHIP),0) UNFRM_QTY_SHIP,
                  nvl(SUM (ls.su_UNFRM_QTY_SHIP),0) su_UNFRM_QTY_SHIP,
                  nvl(SUM (bs.base_UNFRM_QTY_SHIP),0) base_UNFRM_QTY_SHIP,
                  nvl(sum(ls.grs_tgp),0) grs_tgp,
                   nvl(sum(ls.su_grs_tgp),0) su_grs_tgp,
                  nvl(sum(bs.base_grs_tgp),0) base_grs_tgp
             FROM ly_sls ls
                  FULL OUTER JOIN base_sls bs
                     ON (    ls.div_nbr = bs.div_nbr
                         AND ls.cust_nbr = bs.cust_nbr
                         AND ls.CLNDR_DT_yrago = bs.clndr_dt
                         AND ls.sls_org = bs.sls_org
                         ) , xdmadm.time_corp t
                                where nvl(bs.clndr_dt,ls.CLNDR_DT_yrago) = t.clndr_dt_yrago
         GROUP BY NVL (ls.div_nbr, bs.div_nbr),
                  NVL (ls.cust_nbr, bs.cust_nbr),
                  NVL (ls.CLNDR_DT_yrago, bs.clndr_dt),
                  NVL (ls.CLNDR_DT, t.clndr_dt),
                  NVL (ls.sls_org, bs.sls_org)),

     TY_SLS
     AS (  SELECT /*+ use_hash (div,sls) */
                 div.div_nbr,
                  cust.cust_nbr,
                  tm.CLNDR_DT,
                  tm.clndr_dt_yrago,
                  NVL (rev_div.acqstn_cmpny_nm, 'USF') sls_org,
                  SUM (UNFRM_QTY_SHIP) AS UNFRM_QTY_SHIP,
                  SUM(NVL((sls.grs_sls_extnd - sls.dwa_cost_extnd) - (CASE WHEN sls.ASC_ORD_APLY_IND = 'P' THEN NVL(sls.ASC_EXTND_AMT,0) ELSE 0 END) + (sls.ttl_vndr_fnd_dvt), 0)) grs_tgp
             FROM XDMADM.SYN_DIV_CORP div
                                         ,
                  XDMADM.PIM_CORP pim
                                     ,
                  XDMADM.DIV_CORP acq_div
                                         ,
                  XDMADM.DIV_CORP rev_div
                                         ,
                  XDMADM.CUST_CORP cust
                                       ,
                  XDMADM.TIME_CORP tm
                                     ,
                  XDMADM.SALES_CORP sls
            WHERE     rev_div.DIV_TYP_CD NOT IN ('CC')
                  AND rev_div.DIV_NBR =
                         NVL (sls.SLS_REVENUE_DIV_NBR, sls.DIV_NBR)
                  AND sls.PIM_USF_STD_PROD_CD = pim.PIM_USF_STD_PROD_CD
                  AND sls.PRCS_DT = tm.CLNDR_DT
                  AND sls.CUST_NBR = cust.CUST_NBR
                  AND sls.DIV_NBR = cust.DIV_NBR
                  AND sls.DIV_NBR = div.DIV_NBR
                  AND sls.xfer_to_dt IS NULL
                  AND acq_div.DIV_NBR =
                         NVL (cust.CUST_ACQSTN_DIV_NBR, cust.DIV_NBR)
                  AND cust.TRD_CLS = '1'
                  AND div.DIV_TYP_CD = 'USF'
                  AND (pim.PIM_SUPRCLS_ID <> 97 OR pim.PIM_SUPRCLS_ID IS NULL)
                  AND tm.clndr_dt <= odate
                  AND tm.fisc_yr = v_curr_yr
                  AND NVL (acq_div.acqstn_cmpny_nm, 'USF') <> 'USF'
                  AND cust.CUST_ACQSTN_STAT_ACTL IN ('NEW/SHARED',
                                                     'SHARED',
                                                     'NEW')
         GROUP BY div.div_nbr,
                  cust.cust_nbr,
                  tm.CLNDR_DT,
                  tm.clndr_dt_yrago,
                  NVL (rev_div.acqstn_cmpny_nm, 'USF')
                  )
  SELECT NVL (lsb.div_nbr, ts.div_nbr) div_nbr,
         NVL (lsb.CLNDR_DT, ts.clndr_dt) clndr_dt,
         cust.pyr_seg_cd,
         cust.cust_acqstn_stat_actl,
         cust.cust_acqstn_div_nbr,
         SUM (case when cust.cust_acqstn_conv_dt is not null and NVL (ts.CLNDR_DT, lsb.clndr_dt) > cust.cust_acqstn_dt+365 then nvl(ts.UNFRM_QTY_SHIP,0) - nvl(lsb.base_UNFRM_QTY_SHIP,0) else case when NVL(lsb.CLNDR_DT, ts.clndr_dt) >= cust.cust_acqstn_conv_dt then nvl(ts.UNFRM_QTY_SHIP,0) - nvl(lsb.su_UNFRM_QTY_SHIP,0) else case when nvl(ts.sls_org,lsb.sls_org) <> 'USF' then nvl(ts.UNFRM_QTY_SHIP,0) else 0 end end end) UNFRM_QTY_SHIP,
         SUM (case when cust.cust_acqstn_conv_dt < nvl(lsb.clndr_dt_yrago,ts.clndr_dt_yrago) then nvl(lsb.UNFRM_QTY_SHIP,0) - nvl(lsb.base_UNFRM_QTY_SHIP,0) else case when nvl(lsb.sls_org,ts.sls_org) <> 'USF' then nvl(lsb.UNFRM_QTY_SHIP,0) else 0 end end) UNFRM_QTY_SHIP_LY,
         SUM (case when cust.cust_acqstn_conv_dt is not null and nvl(ts.clndr_dt,lsb.clndr_dt) > cust.cust_acqstn_dt+365 then nvl(ts.grs_tgp,0) - nvl(lsb.base_grs_tgp,0) else case when NVL(lsb.CLNDR_DT, ts.clndr_dt) >= cust.cust_acqstn_conv_dt then nvl(ts.grs_tgp,0) - nvl(lsb.su_grs_tgp,0) else case when nvl(ts.sls_org,lsb.sls_org) <> 'USF' then nvl(ts.grs_tgp,0) else 0 end end end) grs_tgp,
         SUM (case when cust.cust_acqstn_conv_dt < nvl(lsb.clndr_dt_yrago,ts.clndr_dt_yrago) then nvl(lsb.grs_tgp,0) - nvl(lsb.base_grs_tgp,0) else case when nvl(lsb.sls_org,ts.sls_org) <> 'USF' then nvl(lsb.grs_tgp,0) else 0 end end) grs_tgp_LY
   FROM ly_sls_base lsb
         FULL OUTER JOIN ty_sls ts
            ON (    lsb.div_nbr = ts.div_nbr
                AND lsb.cust_nbr = ts.cust_nbr
                AND lsb.CLNDR_DT = ts.clndr_dt
                AND lsb.sls_org = ts.sls_org
               ) , xdmadm.cust_corp cust
                where cust.div_nbr = NVL (lsb.div_nbr, ts.div_nbr)
                  and cust.cust_nbr = NVL(lsb.cust_nbr,ts.cust_nbr)
GROUP BY NVL (lsb.div_nbr, ts.div_nbr),
         NVL (lsb.CLNDR_DT, ts.clndr_dt),
         cust.pyr_seg_cd,
         cust.cust_acqstn_stat_actl,
         cust.cust_acqstn_div_nbr;

      l_insert_cnt        := sql%ROWCOUNT;
      DBMS_OUTPUT.put_line(
         'Inserted ' || l_insert_cnt || ' rows in ' || TO_CHAR(ROUND((SYSDATE - l_fn_start) * 86400)) || ' seconds');


      COMMIT;
      RETURN 0;
   END;

  --******************************************************************************
  --* Wrap Program                                                               *
  --******************************************************************************
  <<Wrap_Program>>
   DBMS_OUTPUT.put_line('End Time:' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));

   v_prcs_stp       := 'Final Commit';

   COMMIT;

   RETURN 0;
--******************************************************************************
--* Exception  Handling                                                        *
--******************************************************************************
EXCEPTION
   WHEN OTHERS THEN
      DBMS_OUTPUT.put_line('Error in XDMADM.fn_acqstn_aggr_load:' || SQLCODE || ' ' || SQLERRM);
      RETURN 1;
END;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_XDM_SALES_MKTPLUS_AGGR_LOAD" (
   odate           IN VARCHAR2,
   v_tbl_to_load   IN VARCHAR2
)
   RETURN NUMBER
/*
*    Name: FN_XDM_SALES_MKTPLUS_AGGR_LOAD
*
*    Description: Load Sales and Market Plus Data into a
*                 table summarized by Fiscal Yr/Mth for the
*                 last 2 years plus the current period.
*
*    USAGE: FN_XDM_SALES_MKTPLUS_AGGR_LOAD(odate);
*
*    Author: Ajay Mallela
*    Date  : August 02, 2012
*    $Rev:: 217                                                    $:
*    $Author:: Ajay                                                $:
*    $Date:: 2012-08-02 17:38:50 -0500 (Mon, 02 Aug 2012)          $:

*  REVISIONS:
*  Ver        Date        Author           Description
*  ---------  ----------  ---------------  -----------------------------
*  1.0        05/19/2020  David Li         Modified GROSS_TGP to exclude Auto Shipping Charge(ASC) when ASC_ORD_APLY_IND = 'P'.
*/
AS
   max_fisc_yr_mth     XDMADM.time_corp.fisc_yr_mth%TYPE;
   min_fisc_yr_mth     XDMADM.time_corp.fisc_yr_mth%TYPE;
   FISC_YR_MTH_F       XDMADM.time_corp.fisc_yr_mth%TYPE;
   net_sls_lwr_lmt     XDMADM.param_value.param_value_nbr%TYPE;
   net_sls_upr_lmt     XDMADM.param_value.param_value_nbr%TYPE;
   cogs_lwr_lmt        XDMADM.param_value.param_value_nbr%TYPE;
   cogs_upr_lmt        XDMADM.param_value.param_value_nbr%TYPE;
   p_start_date        XDMADM.time_corp.clndr_dt%TYPE;
   p_end_date          XDMADM.time_corp.clndr_dt%TYPE;
   p_min_fisc_yr_mth   XDMADM.time_corp.fisc_yr_mth%TYPE;
   p_max_fisc_yr_mth   XDMADM.time_corp.fisc_yr_mth%TYPE;
   newest_mp_data      XDMADM.cust_mktplus_corp.fisc_yr_mth%TYPE;
   oldest_mp_data      XDMADM.cust_mktplus_corp.fisc_yr_mth%TYPE;
   v_sql               VARCHAR2 (32767);
   v_schema_nm         VARCHAR2 (10) := 'XDMADM';
   v_prspct_tbl_inactv VARCHAR2 (40 BYTE);
   v_prspct_syn_nm CTLADM.SYN_TBL_MAP.synonym_nm%TYPE
         := 'CUST_PLUS_PRSPCT_CORP' ;
BEGIN
   EXECUTE IMMEDIATE 'alter session  set NLS_DATE_FORMAT=''YYYYMMDD''';

   SELECT   MIN (fisc_yr_mth), MAX (fisc_yr_mth)
     INTO   min_fisc_yr_mth, max_fisc_yr_mth
     FROM   xdmadm.cust_mktplus_corp;

     SELECT   tbl_nm
     INTO   v_prspct_tbl_inactv
     FROM   ctladm.syn_tbl_map
    WHERE   synonym_nm = v_prspct_syn_nm AND actv_ind = 'N';

   SELECT   param_value_nbr
     INTO   net_sls_lwr_lmt
     FROM   xdmadm.param_value
    WHERE   param_type = 'AR_GL_ACCT_LOWER_LMT'
            AND param_code = 'NET_SLS_AR_GL_LWR_LMT';

   SELECT   param_value_nbr
     INTO   net_sls_upr_lmt
     FROM   xdmadm.param_value
    WHERE   param_type = 'AR_GL_ACCT_UPPER_LMT'
            AND param_code = 'NET_SLS_AR_GL_UPR_LMT';

   SELECT   param_value_nbr
     INTO   cogs_lwr_lmt
     FROM   xdmadm.param_value
    WHERE   param_type = 'AR_GL_ACCT_LOWER_LMT'
            AND param_code = 'COGS_AR_GL_LWR_LMT';

   SELECT   param_value_nbr
     INTO   cogs_upr_lmt
     FROM   xdmadm.param_value
    WHERE   param_type = 'AR_GL_ACCT_UPPER_LMT'
            AND param_code = 'COGS_AR_GL_UPR_LMT';

   SELECT   MAX (fisc_yr_mth), MIN (fisc_yr_mth)
     INTO   newest_mp_data, oldest_mp_data
     FROM   xdmadm.cust_mktplus_corp;

SELECT MIN (start_date), MAX (end_date)
 INTO p_start_date, p_end_date
FROM ( SELECT fisc_yr_mth,
MIN (clndr_dt) start_date,
MAX (clndr_dt) end_date
FROM xdmadm.time_corp t1
WHERE t1.clndr_dt >=
(SELECT MIN (clndr_dt) dt
FROM xdmadm.time_corp
WHERE fisc_yr =
(SELECT fisc_yr - 2
FROM xdmadm.time_corp
WHERE clndr_dt =
TO_DATE (odate, 'YYYYMMDD')))
-- AND t1.clndr_dt <= TO_DATE (SYSDATE, 'YYYYMMDD')
GROUP BY fisc_yr_mth)
WHERE end_date <= TO_DATE (odate, 'YYYYMMDD');

SELECT MIN (fisc_yr_mth), MAX (fisc_yr_mth)
 INTO p_min_fisc_yr_mth, p_max_fisc_yr_mth
FROM ( SELECT fisc_yr_mth,
MIN (clndr_dt) start_date,
MAX (clndr_dt) end_date
FROM xdmadm.time_corp t1
WHERE t1.clndr_dt >=
(SELECT MIN (clndr_dt) dt
FROM xdmadm.time_corp
WHERE fisc_yr =
(SELECT fisc_yr - 2
FROM xdmadm.time_corp
WHERE clndr_dt =
TO_DATE (odate, 'YYYYMMDD')))
-- AND t1.clndr_dt <= TO_DATE (SYSDATE, 'YYYYMMDD')
--AND fisc_yr_mth <= TO_CHAR (TO_NUMBER (clndr_yr_mth) - 1)
GROUP BY fisc_yr_mth)
where end_date <= TO_DATE (odate, 'YYYYMMDD');
   --Insert all records from CHD file with sales records for month.  Default logic for CHD records without info for match sales yr-momth.
   v_sql :=
         'INSERT
      /*+ append */
    INTO '
      || v_schema_nm
      || '.'
      || v_tbl_to_load
      || ' SELECT CUST_PLUS_PRSPCT_SK,
      FISC_YR_MTH,
      MP_CHD_ID,
      MP_US_FOODS_ID,
      div_nbr,
      cust_nbr,
      CURR_IND_VAL ,
      NVL(LDR_TM_VAL, to_char(sysdate, ''YYYYMMDDHH24MISS'')) ,
      MP_MSTR_ID_VAL ,
      RES_TYP_IND_VAL ,
      MP_FOOD_BVRG_DSPSBL_PRCH,
      MP_FOOD_DSPSBL_PRCH ,
      MP_TTL_CAT_DRY,
      MP_TTL_CAT_FRSH,
      MP_TTL_CAT_FRZ ,
      MP_TTL_CAT_PROTN ,
      MP_TTL_CAT_BVRG ,
      MP_TTL_CAT_DSPSBL ,
      MP_TTL_CAT_FRSH_FRZ ,
      NVL(ROUND( MP_FOOD_BVRG_DSPSBL_PRCH / 12, 4), 0),
      NVL(ROUND( mp_food_dspsbl_prch / 12, 4), 0),
      NVL(ROUND( mp_ttl_cat_dry      / 12, 4), 0),
      NVL(ROUND( mp_ttl_cat_frsh     / 12, 4), 0),
      NVL(ROUND( mp_ttl_cat_frz      / 12, 4), 0),
      NVL(ROUND( mp_ttl_cat_protn    / 12, 4), 0),
      NVL(ROUND( mp_ttl_cat_bvrg     / 12, 4), 0),
      NVL(ROUND( mp_ttl_cat_dspsbl   / 12, 4), 0),
      NVL(ROUND(mp_ttl_cat_frsh_frz  / 12, 4), 0),
      gross_sales_extended,
      lnd_actl_gp,
      net_weight_shipped,
      dvt_cost_extnd,
      prod_alw,
      net_sls_extnd,
      dwa_cost_extnd,
      nid,
      lid,
      natl_vndr_fnd_dvt,
      loc_vndr_fnd_dvt,
      ttl_loc_alwnc,
      ttl_natl_alwnc,
      natl_prom_alwnc_pgms,
      natl_one_tm,
      loc_prom_alwnc_pgms,
      loc_mrktng_alwnc_pgms,
      loc_one_tm,
      natl_mrktng_alwnc_pgms,
      inv_actl_gp,
      cases,
      tagp,
      drops,
      gross_sales_extended + alwnc_chg - rebates net_sales,
      tagp                 + alwnc_chg - rebates - cogs_alwnc_chg net_tagp,
      gross_tgp,
      (gross_sales_extended + alwnc_chg - rebates) - dwa_cost_extnd + natl_vndr_fnd_dvt + loc_vndr_fnd_dvt + cogs_alwnc_chg net_tgp,
      sagp,
      pas,
      alwnc_chg,
      rebates,
      cogs_alwnc_chg
    FROM
      (SELECT CUST_PLUS_PRSPCT_SK,
        agg.FISC_YR_MTH,
        agg.MP_CHD_ID,
        NVL(agg.MP_US_FOODS_ID, ''999999999'') MP_US_FOODS_ID,
        agg.div_nbr,
        agg.cust_nbr,
        CASE
          WHEN agg.FISC_YR_MTH >= '''
      || min_fisc_yr_mth
      || '''
          AND agg.FISC_YR_MTH  <= '''
      || max_fisc_yr_mth
      || '''
          THEN CURR_IND
          WHEN agg.FISC_YR_MTH < '''
      || min_fisc_yr_mth
      || '''
          THEN ''H''
          WHEN agg.FISC_YR_MTH > '''
      || max_fisc_yr_mth
      || '''
          THEN ''F''
        END CURR_IND_VAL ,
        CASE
          WHEN agg.FISC_YR_MTH >= '''
      || min_fisc_yr_mth
      || '''
          AND agg.FISC_YR_MTH  <= '''
      || max_fisc_yr_mth
      || '''
          THEN NVL(LDR_TM, to_char(sysdate, ''YYYYMMDDHH24MISS''))
          WHEN agg.FISC_YR_MTH < '''
      || min_fisc_yr_mth
      || '''
            AND '''
      || min_fisc_yr_mth
      || ''' =  FISC_YR_MTH_F
          THEN NVL(LDR_TM_F, to_char(sysdate, ''YYYYMMDDHH24MISS''))
          WHEN agg.FISC_YR_MTH > '''
      || max_fisc_yr_mth
      || '''
          THEN NVL(LDR_TM_L, to_char(sysdate, ''YYYYMMDDHH24MISS''))
            ELSE to_char(sysdate, ''YYYYMMDDHH24MISS'')
        END LDR_TM_VAL ,
        CASE
          WHEN agg.FISC_YR_MTH >= '''
      || min_fisc_yr_mth
      || '''
          AND agg.FISC_YR_MTH  <= '''
      || max_fisc_yr_mth
      || '''
          THEN MP_MSTR_ID
          WHEN agg.FISC_YR_MTH < '''
      || min_fisc_yr_mth
      || '''
            AND '''
      || min_fisc_yr_mth
      || ''' =  FISC_YR_MTH_F
          THEN MP_MSTR_ID_F
          WHEN agg.FISC_YR_MTH > '''
      || max_fisc_yr_mth
      || '''
          THEN MP_MSTR_ID_L
        END MP_MSTR_ID_VAL ,
        CASE
          WHEN agg.FISC_YR_MTH >= '''
      || min_fisc_yr_mth
      || '''
          AND agg.FISC_YR_MTH  <= '''
      || max_fisc_yr_mth
      || '''
          THEN RES_TYP_IND
          WHEN agg.FISC_YR_MTH < '''
      || min_fisc_yr_mth
      || '''
            AND '''
      || min_fisc_yr_mth
      || ''' =  FISC_YR_MTH_F
          THEN RES_TYP_IND_F
          WHEN agg.FISC_YR_MTH > '''
      || max_fisc_yr_mth
      || '''
          THEN RES_TYP_IND_L
        END RES_TYP_IND_VAL ,
        CASE
          WHEN agg.FISC_YR_MTH >= '''
      || min_fisc_yr_mth
      || '''
          AND agg.FISC_YR_MTH  <= '''
      || max_fisc_yr_mth
      || '''
          THEN NVL(chd_H.MP_FOOD_BVRG_DSPSBL_PRCH,0)
          WHEN agg.FISC_YR_MTH < '''
      || min_fisc_yr_mth
      || '''
          AND '''
      || min_fisc_yr_mth
      || ''' =  FISC_YR_MTH_F
          THEN NVL(agg.MP_FOOD_BVRG_DSPSBL_PRCH_F,0)
          WHEN agg.FISC_YR_MTH > '''
      || max_fisc_yr_mth
      || '''
          THEN NVL(agg.MP_FOOD_BVRG_DSPSBL_PRCH_L,0)
          ELSE 0
        END MP_FOOD_BVRG_DSPSBL_PRCH ,
        CASE
          WHEN agg.FISC_YR_MTH >= '''
      || min_fisc_yr_mth
      || '''
          AND agg.FISC_YR_MTH  <= '''
      || max_fisc_yr_mth
      || '''
          THEN NVL(chd_H.MP_FOOD_DSPSBL_PRCH,0)
          WHEN agg.FISC_YR_MTH < '''
      || min_fisc_yr_mth
      || '''
           AND '''
      || min_fisc_yr_mth
      || ''' =  FISC_YR_MTH_F
          THEN NVL(agg.MP_FOOD_DSPSBL_PRCH_F,0)
          WHEN agg.FISC_YR_MTH > '''
      || max_fisc_yr_mth
      || '''
          THEN NVL(agg.MP_FOOD_DSPSBL_PRCH_L,0)
          ELSE 0
        END MP_FOOD_DSPSBL_PRCH ,
        CASE
          WHEN agg.FISC_YR_MTH >= '''
      || min_fisc_yr_mth
      || '''
          AND agg.FISC_YR_MTH  <= '''
      || max_fisc_yr_mth
      || '''
          THEN NVL(chd_H.MP_TTL_CAT_DRY,0)
          WHEN agg.FISC_YR_MTH < '''
      || min_fisc_yr_mth
      || '''
           AND '''
      || min_fisc_yr_mth
      || ''' =  FISC_YR_MTH_F
          THEN NVL(agg.MP_TTL_CAT_DRY_F,0)
          WHEN agg.FISC_YR_MTH > '''
      || max_fisc_yr_mth
      || '''
          THEN NVL(agg.MP_TTL_CAT_DRY_L,0)
          ELSE 0
        END MP_TTL_CAT_DRY,
        CASE
          WHEN agg.FISC_YR_MTH >= '''
      || min_fisc_yr_mth
      || '''
           AND agg.FISC_YR_MTH  <= '''
      || max_fisc_yr_mth
      || '''
           THEN NVL(chd_H.MP_TTL_CAT_FRSH,0)
           WHEN agg.FISC_YR_MTH < '''
      || min_fisc_yr_mth
      || '''
            AND '''
      || min_fisc_yr_mth
      || ''' =  FISC_YR_MTH_F
           THEN NVL(agg.MP_TTL_CAT_FRSH_F,0)
          WHEN agg.FISC_YR_MTH > '''
      || max_fisc_yr_mth
      || '''
           THEN NVL(agg.MP_TTL_CAT_FRSH_L,0)
          ELSE 0
        END MP_TTL_CAT_FRSH,
        CASE
          WHEN agg.FISC_YR_MTH >= '''
      || min_fisc_yr_mth
      || '''
           AND agg.FISC_YR_MTH  <= '''
      || max_fisc_yr_mth
      || '''
           THEN NVL(chd_H.MP_TTL_CAT_FRZ,0)
          WHEN agg.FISC_YR_MTH < '''
      || min_fisc_yr_mth
      || '''
           AND '''
      || min_fisc_yr_mth
      || ''' =  FISC_YR_MTH_F
           THEN NVL(agg.MP_TTL_CAT_FRZ_F,0)
          WHEN agg.FISC_YR_MTH > '''
      || max_fisc_yr_mth
      || '''
           THEN NVL(agg.MP_TTL_CAT_FRZ_L,0)
          ELSE 0
        END MP_TTL_CAT_FRZ ,
        CASE
          WHEN agg.FISC_YR_MTH >= '''
      || min_fisc_yr_mth
      || '''
           AND agg.FISC_YR_MTH  <= '''
      || max_fisc_yr_mth
      || '''
           THEN NVL(chd_H.MP_TTL_CAT_PROTN,0)
          WHEN agg.FISC_YR_MTH < '''
      || min_fisc_yr_mth
      || '''
           AND '''
      || min_fisc_yr_mth
      || ''' =  FISC_YR_MTH_F
           THEN NVL(agg.MP_TTL_CAT_PROTN_F,0)
          WHEN agg.FISC_YR_MTH > '''
      || max_fisc_yr_mth
      || '''
           THEN NVL(agg.MP_TTL_CAT_PROTN_L,0)
            ELSE 0
        END MP_TTL_CAT_PROTN ,
        CASE
          WHEN agg.FISC_YR_MTH >= '''
      || min_fisc_yr_mth
      || '''
           AND agg.FISC_YR_MTH  <= '''
      || max_fisc_yr_mth
      || '''
           THEN NVL(chd_H.MP_TTL_CAT_BVRG ,0)
          WHEN agg.FISC_YR_MTH < '''
      || min_fisc_yr_mth
      || '''
           AND '''
      || min_fisc_yr_mth
      || ''' =  FISC_YR_MTH_F
           THEN NVL(agg.MP_TTL_CAT_BVRG_F,0)
          WHEN agg.FISC_YR_MTH > '''
      || max_fisc_yr_mth
      || '''
           THEN NVL(agg.MP_TTL_CAT_BVRG_L,0)
            ELSE 0
        END MP_TTL_CAT_BVRG ,
        CASE
          WHEN agg.FISC_YR_MTH >= '''
      || min_fisc_yr_mth
      || '''
           AND agg.FISC_YR_MTH  <= '''
      || max_fisc_yr_mth
      || '''
           THEN NVL(chd_H.MP_TTL_CAT_DSPSBL ,0)
          WHEN agg.FISC_YR_MTH < '''
      || min_fisc_yr_mth
      || '''
           AND '''
      || min_fisc_yr_mth
      || ''' =  FISC_YR_MTH_F
           THEN NVL(agg.MP_TTL_CAT_DSPSBL_F,0)
          WHEN agg.FISC_YR_MTH > '''
      || max_fisc_yr_mth
      || '''
           THEN NVL(agg.MP_TTL_CAT_DSPSBL_L,0)
          ELSE 0
        END MP_TTL_CAT_DSPSBL ,
        CASE
          WHEN agg.FISC_YR_MTH >= '''
      || min_fisc_yr_mth
      || '''
           AND agg.FISC_YR_MTH  <= '''
      || max_fisc_yr_mth
      || '''
           THEN NVL(chd_H.MP_TTL_CAT_FRSH_FRZ,0)
          WHEN agg.FISC_YR_MTH < '''
      || min_fisc_yr_mth
      || '''
           AND '''
      || min_fisc_yr_mth
      || ''' =  FISC_YR_MTH_F
           THEN NVL(agg.MP_TTL_CAT_FRSH_FRZ_F,0)
          WHEN agg.FISC_YR_MTH > '''
      || max_fisc_yr_mth
      || '''
           THEN NVL(agg.MP_TTL_CAT_FRSH_FRZ_L,0)
          ELSE 0
        END MP_TTL_CAT_FRSH_FRZ ,
        gross_sales_extended,
        lnd_actl_gp,
        net_weight_shipped,
        dvt_cost_extnd,
        prod_alw,
        net_sls_extnd,
        dwa_cost_extnd,
        natl_vndr_fnd_dvt,
        loc_vndr_fnd_dvt,
        ttl_loc_alwnc,
        ttl_natl_alwnc,
        loc_prom_alwnc_pgms,
        loc_mrktng_alwnc_pgms,
        natl_mrktng_alwnc_pgms,
        loc_one_tm,
        natl_prom_alwnc_pgms,
        inv_actl_gp,
        cases,
        tagp,
        drops,
        gross_tgp,
        sagp,
        pas,
        alwnc_chg,
        rebates,
        cogs_alwnc_chg,
        natl_one_tm,
        nid,
        lid
      FROM
        (SELECT a1.*,
          NVL(FISC_YR_MTH_S,0) FISC_YR_MTH,
          gross_sales_extended,
          net_weight_shipped,
          dwa_cost_extnd,
          cases,
          tagp,
          lnd_actl_gp,
          dvt_cost_extnd,
          prod_alw,
          net_sls_extnd,
          natl_vndr_fnd_dvt,
          loc_vndr_fnd_dvt,
          ttl_loc_alwnc,
          ttl_natl_alwnc,
          natl_prom_alwnc_pgms,
          natl_one_tm,
          loc_prom_alwnc_pgms,
          loc_mrktng_alwnc_pgms,
          loc_one_tm,
          natl_mrktng_alwnc_pgms,
          inv_actl_gp,
          drops,
          alwnc_chg,
          rebates,
          cogs_alwnc_chg,
          gross_tgp,
          tagp + alwnc_chg - rebates - cogs_alwnc_chg AS net_tgp,
          sagp,
          pas,
          lid,
          nid
        FROM '
      || v_schema_nm
      || '.'
      || v_prspct_tbl_inactv || ' a1
        INNER JOIN
          (SELECT s.div_nbr,
            cust_nbr,
            T.FISC_YR_MTH FISC_YR_MTH_S ,
            SUM(s.lnd_actl_gp) AS lnd_actl_gp,
            SUM(dwa_cost_extnd) dwa_cost_extnd,
            SUM(s.dvt_cost_extnd)         AS dvt_cost_extnd,
            SUM(s.prod_alw)               AS prod_alw ,
            SUM(s.net_sls_extnd)          AS net_sls_extnd ,
            SUM(s.natl_vndr_fnd_dvt)      AS natl_vndr_fnd_dvt ,
            SUM(s.loc_vndr_fnd_dvt)       AS loc_vndr_fnd_dvt ,
            SUM(s.ttl_loc_alwnc)          AS ttl_loc_alwnc ,
            SUM(s.ttl_natl_alwnc)         AS ttl_natl_alwnc ,
            SUM(s.natl_prom_alwnc_pgms)   AS natl_prom_alwnc_pgms ,
            SUM(s.natl_one_tm)            AS natl_one_tm ,
            SUM(s.loc_prom_alwnc_pgms)    AS loc_prom_alwnc_pgms ,
            SUM(s.loc_mrktng_alwnc_pgms)  AS loc_mrktng_alwnc_pgms ,
            SUM(s.loc_one_tm)             AS loc_one_tm,
            SUM(s.natl_mrktng_alwnc_pgms) AS natl_mrktng_alwnc_pgms ,
            SUM(s.inv_actl_gp)            AS inv_actl_gp ,
            COUNT (DISTINCT DECODE(s.trans_typ, ''RT'', s.div_nbr
            || s.cust_nbr
            || s.inv_dt
            || s.prcs_dt
            || s.dlvr_rte) ) AS drops ,
            SUM(
            CASE
              WHEN s.before_price_ac_ind <> ''Y''
              AND s.ar_gl_acct BETWEEN '
      || net_sls_lwr_lmt
      || ' AND '
      || net_sls_upr_lmt
      || ' THEN NVL(s.prod_alw, 0) + NVL(s.prod_chrg, 0) + NVL(s.non_prod_alwnc, 0) + NVL(s.non_prod_chrg, 0)
              ELSE 0
            END)                                                                                                                      AS alwnc_chg,
            SUM(NVL(s.rbt_loc_accrl_amt, 0) + NVL(s.rbt_natl_accrl_amt, 0) + NVL(s.rbt_loc_exp_amt, 0) + NVL(s.rbt_natl_exp_amt, 0) ) AS rebates ,
            SUM(
            CASE
              WHEN s.before_price_ac_ind <> ''Y''
              AND s.ar_gl_acct BETWEEN '
      || cogs_lwr_lmt
      || ' AND '
      || cogs_upr_lmt
      || '
              THEN NVL(s.prod_alw, 0) + NVL(s.prod_chrg, 0) + NVL(s.non_prod_alwnc, 0) + NVL(s.non_prod_chrg, 0)
              ELSE 0
            END )                                                        AS cogs_alwnc_chg ,
            SUM(s.grs_sls_extnd)                                         AS gross_sales_extended,
            SUM(s.unfrm_qty_ship )                                       AS cases,
            SUM(NVL(s.actl_gp, 0) )                                      AS tagp,
            SUM(s.grs_sls_extnd - s.dwa_cost_extnd - (CASE WHEN s.ASC_ORD_APLY_IND = ''P'' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END) + s.ttl_vndr_fnd_dvt) AS gross_tgp ,
            SUM(s.lnd_actl_gp   + (s.extnd_fctr * s.comm_bsis_amt))      AS sagp,
            SUM(s.net_wt_ship)                                           AS net_weight_shipped,
            SUM(s.ttl_loc_alwnc + s.ttl_natl_alwnc)                      AS pas,
            SUM(s.dwa_cost_extnd)                                        AS true_cost_extended,
            SUM(s.natl_int_dvt)                                          AS nid,
            SUM(s.loc_int_dvt)                                           AS lid
          FROM xdmadm.sales_corp s,
            xdmadm.time_corp t,
            xdmadm.div_corp d
          WHERE s.div_nbr      = d.div_nbr
          AND s.prcs_dt        = t.clndr_dt
          AND prcs_dt         >= '''
      || p_start_date
      || '''
           AND prcs_dt         <= '''
      || p_end_date
      || '''
           AND S.XFER_TO_DT    IS NULL
          AND CONV_TO_DIV_NBR IS NULL
          AND BRNCH_CD        <> ''-999''
          GROUP BY s.div_nbr,
            cust_nbr,
            T.FISC_YR_MTH
          )b
        ON a1.cust_nbr = b.cust_nbr
        AND a1.div_nbr = b.div_nbr
        ) AGG
      LEFT OUTER JOIN xdmadm.cust_mktplus_corp chd_h
      ON AGG.mp_chd_id       = chd_h.mp_chd_id
      AND agg.div_nbr        = chd_h.div_nbr
      AND agg.mp_us_foods_id = chd_h.mp_us_foods_id
      AND agg.fisc_yr_mth    = chd_h.fisc_yr_mth
      ) a';
   --DBMS_OUTPUT.put_line (v_sql);

   EXECUTE IMMEDIATE v_sql;

   DBMS_OUTPUT.put_line ('Rows processed: ' || SQL%ROWCOUNT);
   COMMIT;
   v_sql :=
         'INSERT /*+ append */
    INTO '
      || v_schema_nm
      || '.'
      || v_tbl_to_load
      || ' SELECT CUST_PLUS_PRSPCT_SK,
      MTH,
      MP_CHD_ID,
      MP_US_FOODS_ID,
      div_nbr,
      cust_nbr,
      ''F'' CURR_IND_L ,
      NVL(LDR_TM_L, to_char(sysdate, ''YYYYMMDDHH24MISS'')) ,
      MP_MSTR_ID_L ,
      RES_TYP_IND_L ,
      MP_FOOD_BVRG_DSPSBL_PRCH_L,
      MP_FOOD_DSPSBL_PRCH_L ,
      MP_TTL_CAT_DRY_L,
      MP_TTL_CAT_FRSH_L,
      MP_TTL_CAT_FRZ_L ,
      MP_TTL_CAT_PROTN_L ,
      MP_TTL_CAT_BVRG_L ,
      MP_TTL_CAT_DSPSBL_L ,
      MP_TTL_CAT_FRSH_FRZ_L ,
      NVL(ROUND( MP_FOOD_BVRG_DSPSBL_PRCH_L / 12, 4), 0),
      NVL(ROUND( mp_food_dspsbl_prch_L / 12, 4), 0),
      NVL(ROUND( mp_ttl_cat_dry_L      / 12, 4), 0),
      NVL(ROUND( mp_ttl_cat_frsh_L     / 12, 4), 0),
      NVL(ROUND( mp_ttl_cat_frz_L      / 12, 4), 0),
      NVL(ROUND( mp_ttl_cat_protn_L    / 12, 4), 0),
      NVL(ROUND( mp_ttl_cat_bvrg_L     / 12, 4), 0),
      NVL(ROUND( mp_ttl_cat_dspsbl_L   / 12, 4), 0),
      NVL(ROUND(mp_ttl_cat_frsh_frz_L  / 12, 4), 0),
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    FROM
      (SELECT a1.* ,
        mth
      FROM '
      || v_schema_nm
      || '.'
      || v_prspct_tbl_inactv || ' a1 ,
        (SELECT DISTINCT t.fisc_yr_mth MTH
        FROM XDMADM.TIME_CORP t,
          xdmadm.cust_mktplus_corp cp --Find disitnct fisc_yr_mnt > last CHD fisc_yr_mnth
        WHERE t.fisc_yr_mth > (select max(fisc_yr_mth) from xdmadm.cust_mktplus_corp)
        AND t.fisc_yr_mth   <= '
      || p_max_fisc_yr_mth
      || '
        ) mth
        where fisc_yr_mth_l = '
      || max_fisc_yr_mth
      || '
      ) agg --Add parm value  MAx CHD value + tcurrent date
    WHERE NOT EXISTS
      (SELECT 1
      FROM '
      || v_schema_nm
      || '.'
      || v_tbl_to_load
      || ' CHD_H
      WHERE -- Look for any CHD /Fisc yr mth not found in table already
        AGG.mp_chd_id        = chd_h.mp_chd_id
      AND agg.div_nbr        = chd_h.div_nbr
      AND agg.mp_us_foods_id = chd_h.mp_us_foods_id
      AND agg.mth            = chd_h.fisc_yr_mth
      )';
   DBMS_OUTPUT.put_line (v_sql);

   EXECUTE IMMEDIATE v_sql;

   DBMS_OUTPUT.put_line ('Rows processed: ' || SQL%ROWCOUNT);
   COMMIT;
   v_sql :=
         'INSERT /*+ append */
    INTO '
      || v_schema_nm
      || '.'
      || v_tbl_to_load
      || ' SELECT CUST_PLUS_PRSPCT_SK,
      MTH,
      MP_CHD_ID,
      MP_US_FOODS_ID,
      div_nbr,
      cust_nbr,
      ''H'' CURR_IND_F ,
      NVL(LDR_TM_F, to_char(sysdate, ''YYYYMMDDHH24MISS'')) ,
      MP_MSTR_ID_F ,
      RES_TYP_IND_F ,
      MP_FOOD_BVRG_DSPSBL_PRCH_F,
      MP_FOOD_DSPSBL_PRCH_F ,
      MP_TTL_CAT_DRY_F,
      MP_TTL_CAT_FRSH_F,
      MP_TTL_CAT_FRZ_F ,
      MP_TTL_CAT_PROTN_F ,
      MP_TTL_CAT_BVRG_F ,
      MP_TTL_CAT_DSPSBL_F ,
      MP_TTL_CAT_FRSH_FRZ_F ,
      NVL(ROUND( MP_FOOD_BVRG_DSPSBL_PRCH_F / 12, 4), 0),
      NVL(ROUND( mp_food_dspsbl_prch_f / 12, 4), 0),
      NVL(ROUND( mp_ttl_cat_dry_f      / 12, 4), 0),
      NVL(ROUND( mp_ttl_cat_frsh_f     / 12, 4), 0),
      NVL(ROUND( mp_ttl_cat_frz_f      / 12, 4), 0),
      NVL(ROUND( mp_ttl_cat_protn_f    / 12, 4), 0),
      NVL(ROUND( mp_ttl_cat_bvrg_f     / 12, 4), 0),
      NVL(ROUND( mp_ttl_cat_dspsbl_f   / 12, 4), 0),
      NVL(ROUND(mp_ttl_cat_frsh_frz_f  / 12, 4), 0),
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    FROM
      (SELECT a1.* ,
        mth
      FROM '
      || v_schema_nm
      || '.'
      || v_prspct_tbl_inactv || ' a1 ,
        (SELECT DISTINCT t.fisc_yr_mth MTH
        FROM XDMADM.TIME_CORP t,
          xdmadm.cust_mktplus_corp cp --Find disitnct fisc_yr_mnt < first CHD fisc_yr_mnth
        WHERE t.fisc_yr_mth <= cp.fisc_yr_mth
        AND t.fisc_yr_mth >='
      || p_min_fisc_yr_mth
      || ' AND t.fisc_yr_mth < '
      || min_fisc_yr_mth
      || '
        ) mth
        where fisc_yr_mth_f = '
      || min_fisc_yr_mth
      || '
      ) agg
      --Add parm value  2+ years back through min CHD value
    WHERE NOT EXISTS
      (SELECT 1
      FROM '
      || v_schema_nm
      || '.'
      || v_tbl_to_load
      || ' CHD_H
      WHERE -- Look for any CHD /Fisc yr mth not found in table already
        AGG.mp_chd_id        = chd_h.mp_chd_id
      AND agg.div_nbr        = chd_h.div_nbr
      AND agg.mp_us_foods_id = chd_h.mp_us_foods_id
      AND agg.mth            = chd_h.fisc_yr_mth
      )';
   DBMS_OUTPUT.put_line (v_sql);

   EXECUTE IMMEDIATE v_sql;

   DBMS_OUTPUT.put_line ('Rows processed: ' || SQL%ROWCOUNT);
   COMMIT;
   v_sql :=
         'INSERT /*+ append */
    INTO '
      || v_schema_nm
      || '.'
      || v_tbl_to_load
      || ' SELECT CUST_PLUS_PRSPCT_SK,
      fisc_yr_MTH,
      MP_CHD_ID,
      MP_US_FOODS_ID,
      div_nbr,
      cust_nbr,
      CURR_IND ,
      NVL(LDR_TM, to_char(sysdate, ''YYYYMMDDHH24MISS'')) ,
      MP_MSTR_ID ,
      RES_TYP_IND ,
      MP_FOOD_BVRG_DSPSBL_PRCH,
      MP_FOOD_DSPSBL_PRCH ,
      MP_TTL_CAT_DRY,
      MP_TTL_CAT_FRSH,
      MP_TTL_CAT_FRZ ,
      MP_TTL_CAT_PROTN ,
      MP_TTL_CAT_BVRG ,
      MP_TTL_CAT_DSPSBL ,
      MP_TTL_CAT_FRSH_FRZ ,
      NVL(ROUND( MP_FOOD_BVRG_DSPSBL_PRCH / 12, 4), 0),
      NVL(ROUND( mp_food_dspsbl_prch / 12, 4), 0),
      NVL(ROUND( mp_ttl_cat_dry      / 12, 4), 0),
      NVL(ROUND( mp_ttl_cat_frsh     / 12, 4), 0),
      NVL(ROUND( mp_ttl_cat_frz      / 12, 4), 0),
      NVL(ROUND( mp_ttl_cat_protn    / 12, 4), 0),
      NVL(ROUND( mp_ttl_cat_bvrg     / 12, 4), 0),
      NVL(ROUND( mp_ttl_cat_dspsbl   / 12, 4), 0),
      NVL(ROUND(mp_ttl_cat_frsh_frz  / 12, 4), 0),
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    FROM
      (SELECT a1.CUST_PLUS_PRSPCT_SK ,
        a1.MP_CHD_ID ,
        a1.MP_US_FOODS_ID ,
        a1.CUST_NBR ,
        a1.DIV_NBR,
        fisc_yr_mth,
        CURR_IND ,
        LDR_TM ,
        MP_MSTR_ID ,
        RES_TYP_IND ,
        MP_FOOD_BVRG_DSPSBL_PRCH,
        MP_FOOD_DSPSBL_PRCH ,
        MP_TTL_CAT_DRY,
        MP_TTL_CAT_FRSH,
        MP_TTL_CAT_FRZ ,
        MP_TTL_CAT_PROTN ,
        MP_TTL_CAT_BVRG ,
        MP_TTL_CAT_DSPSBL ,
        MP_TTL_CAT_FRSH_FRZ
      FROM '
      || v_schema_nm
      || '.'
      || v_prspct_tbl_inactv || ' a1
      INNER JOIN xdmadm.cust_mktplus_corp chd --Check for current CHD value by Fiscal Month
      ON a1.mp_chd_id       = chd.mp_chd_id
      AND a1.div_nbr        = chd.div_nbr
      AND a1.mp_us_foods_id = chd.mp_us_foods_id
      WHERE NOT EXISTS
        (SELECT 1
        FROM '
      || v_schema_nm
      || '.'
      || v_tbl_to_load
      || ' CHD_H
        WHERE -- Look for any CHD /Fisc yr mth not found in table already
          a1.mp_chd_id        = chd_h.mp_chd_id
        AND a1.div_nbr        = chd_h.div_nbr
        AND a1.mp_us_foods_id = chd_h.mp_us_foods_id
        AND chd.fisc_yr_mth   = chd_h.fisc_yr_mth
        )
      )';
   DBMS_OUTPUT.put_line (v_sql);

   EXECUTE IMMEDIATE v_sql;

   DBMS_OUTPUT.put_line ('Rows processed: ' || SQL%ROWCOUNT);
   COMMIT;

   EXECUTE IMMEDIATE 'alter session  set NLS_DATE_FORMAT=''DD-MON-YY''';

   RETURN 0;
EXCEPTION
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.put_line (SQLERRM);
      RETURN SQLCODE;
END fn_xdm_sales_mktplus_aggr_load;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_SLS_SUMM_CLNDRMO_RFRSH"
   (p_prcs_dt IN VARCHAR2)
      RETURN NUMBER
   AS
--******************************************************************************
--* Name          : FN_SLS_SUMM_CLNDRMO_RFRSH                                  *
--* Usage         : FN_SLS_SUMM_CLNDRMO_RFRSH V_PRCS_DT                        *
--******************************************************************************
--* DESCRIPTION                                                                *
--* -----------                                                                *
--* This Procedure Loads XDMADM.SALES_SUMM_CLNDRMO_CORP table from             *
--*                    XDMADM.SALES_CORP                                       *
--*                    XDMADM.TIME_CORP                                        *
--*                    XDMADM.PIM_CORP                                         *
--*----------------------------------------------------------------------------*
--* PARM Used:V_PRCS_DT  - Load date                                           *
--* -------------------------------------------------------------------------- *
--*  INPUT:            XDMADM.SALES_CORP                                       *
--*                    XDMADM.TIME_CORP                                        *
--*                    XDMADM.PIM_CORP                                         *
--* -------------------------------------------------------------------------- *
--*  Target  :XDMADM.FN_DCOM_SALES_SUMM_CLNDRMO                                *
--* -------------------------------------------------------------------------- *
--*  Return Code : 0 Successful, Others - Load Failed                          *
--******************************************************************************
--*  Ver  Date        User Id     Changes Description                          *
--*  ===  ======== =======       ==============================================*
--*  1.0  23-MAR-2011 S.Manocha       Initial release of this procedure.       *
--*  1.1  08-MAY-2011 S.Manocha       Fixed validation failed while re-run     *
--                                                                             *

--*  2.0  28-JUL-2011 qcl6026         ----Dotcom1.3B-------------------
--                                    Added AP vendor column                   *
---                                   Eliminated transaction type 'AP'         *
--                                    Start Date to go back 2 yrs               *
--                                    Delete the LOG table instead of a truncate*
-- 2.1  14-SEP-2011 qcl6026         ----Dotcom1.3B-------------------
--                                    Removed AP vendor column
--                                    Added  TRUE_MFR   column   NUMBER(6)     *
--                                    As part of Security Project Changed a VPD policy
--                                    function  to go
--                                    against xdmadm.fact_load_stat table as opposed to
--                                    ctladm.actv_usf_org_hier table earlier.
--*3.0 10/19/2015  p1a0168            Modified for Acquisition
--*4.0 02/16/2021  h4n6026            Modified to add columns in SALES_SUMM_CLNDRMO_CORP_A/B
--                                    Columns added 1. TTL_UNFRM_QTY_ORD 2. TTL_UNFRM_QTY_SUBBED
--                                    3. TTL_UNFRM_QTY_ORIG
--
--******************************************************************************
--* EIW Standard Variables                                                     *
--******************************************************************************
  CON_PROCESS_NAME  CONSTANT varchar2(40) := 'FN_SLS_SUMM_CLNDRMO_RFRSH';
  CON_PRRTY_SEVERE  CONSTANT INTEGER := 1;
  CON_PRRTY_WARN    CONSTANT INTEGER := 2;
  CON_PRRTY_INFO    CONSTANT INTEGER := 3;
  CON_PRRTY_DEBUG   CONSTANT INTEGER := 4;
  CON_ERR_LVL       CONSTANT INTEGER := 3;
  CON_REC_LIMIT     CONSTANT NUMBER := 500;
  CON_COMM_LIMIT    CONSTANT NUMBER := 1000;
--******************************************************************************
--* Program Variables                                                          *
--******************************************************************************
      v_fisc_yr_mth    varchar2 (06);
      n_syn_count      number(1) := -1;
      v_syn_tbl_nm     varchar2(100);
      n_re_run         number(2) := -1;
      d_run_frm_dt     date;
      d_run_to_dt      date;
      d_prcs_dt        date := to_date(p_prcs_dt,'YYYYMMDD');
      b_trunc_allow    boolean;
      n_trunc_ret           number(3);
      d_first_day_curr_run  date;
      d_last_day_curr_run   date;
      n_insert_start_flag   number(1) :=-1;
      n_rows_inserted       number(15);
      n_tot_rows_inserted   number(15) := 0;
      i                     number(15);  -- loop counter
      n_no_of_periods_frm_log     number(2);
      n_tot_rows_inserted_frm_log number(15);
      v_synonym_nm      varchar2(50) := 'SALES_SUMM_CLNDRMO_CORP';
      v_usr_div_date    varchar2 (20)       DEFAULT NULL;
      v_sales_vpd       varchar2 (4000)     DEFAULT NULL;
      v_div_vpd         varchar2 (4000)     DEFAULT NULL;
--******************************************************************************
--* Define Variables for publishing Run details in EIW process log             *
--******************************************************************************
   v_prcs_nm            varchar(100);
   v_prcs_stp           varchar(100);
   v_prcs_pram          varchar(100);
   v_prcs_err_cd        varchar(200);
   v_prcs_err_msg       varchar(200);
   v_dba_func_msg       varchar(200);
--******************************************************************************
--* Define Cursor to load data by period. For each period, AGG data is loaded  *
--******************************************************************************
   v_compress_retval    varchar(200);
   v_dis_ind_retval     varchar(200);
   v_enb_ind_retval     varchar(200);
   v_trunc_ret_cd       varchar(200);
   v_tbl_prt_name       varchar(60);
   v_out_msg            varchar(200);
   v_dyn_sql_stmt       varchar(32767);
   v_tgt_table_owner    varchar2(30):='XDMADM';
   v_tgt_table_name     varchar2(30):='ERROR_IN_TBL_NAME';
--******************************************************************************
--* Define User Defined Exceptions                                             *
--******************************************************************************
   ALL_EXCEPTIONS       EXCEPTION;

--******************************************************************************
--* Cusrsors                                                                   *
--******************************************************************************
    -- for getting the month wise date range
    CURSOR c_get_dt_range (p_dt_frm date, p_dt_to date) IS
        SELECT clndr_yr_qtr, MIN(clndr_dt) dt_frm, MAX(clndr_dt) dt_to
        FROM xdmadm.time_corp
        WHERE
        clndr_dt BETWEEN p_dt_frm AND p_dt_to
        GROUP BY clndr_yr_qtr  ORDER BY 2 ASC;

    TYPE  rt_get_dt_range IS TABLE OF c_get_dt_range%ROWTYPE;
    rec_get_dt_range    rt_get_dt_range;
--******************************************************************************
--* Program Start                                                              *
--******************************************************************************
   BEGIN
        dbms_output.put_line('Start Process '||CON_PROCESS_NAME);
        dbms_output.put_line('Start Time:'||TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS'));
        v_prcs_nm  := CON_PROCESS_NAME ;
        v_prcs_pram:= '   PARAM1 = '||p_prcs_dt;
        v_prcs_stp := 'Start Process '||CON_PROCESS_NAME;
--******************************************************************************
--* Select Inactive table, which will be loaded
--******************************************************************************
   <<SELECT_INCT_TABLE>>
   v_prcs_stp := 'Select Inactive table to load';
   SELECT tbl_nm INTO v_tgt_table_name FROM ctladm.syn_tbl_map WHERE actv_ind = 'N' AND synonym_nm = v_synonym_nm;
   dbms_output.put_line('Inactive Table which will be loaded:'||v_tgt_table_name);
--******************************************************************************
--* Validate if synonym is not pointing to selected table                      *
--******************************************************************************

   <<VALIDATE_TABLE>>
   v_prcs_stp := 'Validate if synonym is pointing to active table only';
   SELECT count(*) INTO n_syn_count
   FROM ALL_SYNONYMS
   WHERE   owner = 'XDMADM'
   AND     synonym_name = v_synonym_nm
   AND     table_name   = (SELECT tbl_nm
                              FROM   ctladm.syn_tbl_map
                              WHERE  actv_ind = 'Y'
                              AND    synonym_nm = v_synonym_nm
                          );

   IF n_syn_count > 0 THEN
        dbms_output.put_line('Synonym verified');
   ELSE
        dbms_output.put_line('Synonym Verification Failed');
        RAISE ALL_EXCEPTIONS;
   END IF;

--******************************************************************************
--* Check if current execution is Re-Run and calculate the Start Date for execution
--******************************************************************************
   <<FIND_RUN_FROM_AND_TO_DATE>>
   v_prcs_stp := 'Check if current execution is Re-Run';
   DBMS_OUTPUT.put_line ('Fetching data from ctladm.dcom_sales_summ_load_log to check if this is Re-run');

   SELECT count(*) INTO n_re_run
        FROM ctladm.dcom_sales_summ_load_log
        WHERE 1=1
        AND prcs_date = d_prcs_dt
       AND tbl_nm like 'SALES_SUMM_CLNDRMO_CORP%' ---added this 2.0
        AND ld_status  <> 'SUCCESS'
        AND ld_status  <> 'VLD-FAIL';

   DBMS_OUTPUT.put_line ('Records successfully fetched from ctladm.dcom_sales_summ_load_log');
   DBMS_OUTPUT.put_line ('Calculating Dates');

   d_run_to_dt  := LAST_DAY(TO_DATE(p_prcs_dt,'YYYYMMDD'));

   --commented as part of 2.0
   --SELECT min(prcs_dt) INTO d_first_day_curr_run FROM xdmadm.sales_corp;
       select
       to_date(case when FISC_YR < clndr_yr then to_char(add_months(trunc(d_prcs_dt, 'YYYY'), -36))  else to_char(add_months(trunc(d_prcs_dt, 'YYYY'), -24))  end )
        into d_first_day_curr_run
       from xdmadm.time_corp  where clndr_dt = trunc(d_prcs_dt);


   DBMS_OUTPUT.put_line ('Calculating Dates Completed ');

   DBMS_OUTPUT.put_line ('Checking Re-Run');
   IF n_re_run > 0 THEN      -- If this is Re-run
        select min(ld_dt_rng_frm) INTO d_run_frm_dt
          from ctladm.dcom_sales_summ_load_log
         where prcs_date = to_date(d_prcs_dt)
           and tbl_nm like 'SALES_SUMM_CLNDRMO_CORP%' ---added this 2.0
           and ld_status  <> 'SUCCESS'
           and ld_status  <> 'VLD-FAIL';

        DBMS_OUTPUT.put_line ('It is Re-run from date '||d_run_frm_dt);
   ELSE
        d_run_frm_dt := d_first_day_curr_run;
        DBMS_OUTPUT.put_line ('It is a new run from date '||d_run_frm_dt);
   END IF;
   DBMS_OUTPUT.put_line ('Checking Re-Run Completed');


--******************************************************************************
--* Retrieve the Qtr List need to load during current run
--******************************************************************************
   <<GET_QTR_LIST>>
   v_prcs_stp := 'Retrieve the Months List need to load during current run';
   DBMS_OUTPUT.put_line ('Opeing Cursor p_dt_frm:'||d_run_frm_dt||'   p_dt_to:'||d_run_to_dt);
   OPEN c_get_dt_range(d_run_frm_dt, d_run_to_dt);
   FETCH c_get_dt_range BULK COLLECT INTO rec_get_dt_range;
   CLOSE c_get_dt_range;
   DBMS_OUTPUT.put_line ('Closing Cursor');
   DBMS_OUTPUT.put_line ('No of Periods will be loaded in this Run: '||rec_get_dt_range.count);

--******************************************************************************
--* Load the dcom_sales_summ_load_log Table with blank enteries
--******************************************************************************
   <<LOAD_BLANK_REC_IN_LOG_TABLE>>
   v_prcs_stp := 'Loading the dcom_sales_summ_load_log Table with blank entries';
   IF NOT n_re_run > 0 THEN -- If It is not re-run, then Truncate and load the dcom_sales_summ_load_log Table with blank enteries
       DBMS_OUTPUT.put_line (v_prcs_stp);
       DELETE FROM ctladm.dcom_sales_summ_load_log WHERE tbl_nm like 'SALES_SUMM_CLNDRMO_CORP%' ; --2.0
       --commit;
       DBMS_OUTPUT.PUT_LINE('Deleting from CTLADM.DCOM_SALES_SUMM_LOAD_LOG table' );

       --below commented out in 2.0
           -- WHEN OTHERS THEN
              -- DBMS_OUTPUT.PUT_LINE('Error in Deleting from table CTLADM.DCOM_SALES_SUMM_LOAD_LOG table');
              --  RAISE ALL_EXCEPTIONS;


       DBMS_OUTPUT.PUT_LINE('CTLADM.DCOM_SALES_SUMM_LOAD_LOG table deleted successfully');

/*----2.0
       --execute immediate 'DELETE FROM ctladm.dcom_sales_summ_load_log';
       DBMS_OUTPUT.PUT_LINE('truncateing CTLADM.DCOM_SALES_SUMM_LOAD_LOG table');
       b_trunc_allow := USFDBA.TABLE_PKG.ALLOW_TRUNCATE_TABLE (v_out_msg, 'CTLADM','DCOM_SALES_SUMM_LOAD_LOG');
        DBMS_OUTPUT.PUT_LINE(v_out_msg);
        IF b_trunc_allow = TRUE THEN
            n_trunc_ret := USFDBA.TABLE_PKG.TRUNCATE_TABLE(v_out_msg, 'CTLADM','DCOM_SALES_SUMM_LOAD_LOG');
            DBMS_OUTPUT.PUT_LINE(v_out_msg);
            IF n_trunc_ret != 0 THEN
                DBMS_OUTPUT.PUT_LINE('Error in Truncating the CTLADM.DCOM_SALES_SUMM_LOAD_LOG table');
                RAISE ALL_EXCEPTIONS;
            END IF;
        ELSE
            DBMS_OUTPUT.PUT_LINE('USFDBA Security doesn''t allow to truncate CTLADM.DCOM_SALES_SUMM_LOAD_LOG table');
            DBMS_OUTPUT.PUT_LINE('     Check entry in USFDBA.USF_TABLE_SCRTY table for CTLADM.DCOM_SALES_SUMM_LOAD_LOG table');
            RAISE ALL_EXCEPTIONS;
        END IF;
       DBMS_OUTPUT.PUT_LINE('CTLADM.DCOM_SALES_SUMM_LOAD_LOG table truncated successfully');
*/
       FOR i IN rec_get_dt_range.first..rec_get_dt_range.last
       LOOP
            INSERT INTO ctladm.dcom_sales_summ_load_log
            VALUES (d_prcs_dt,
                    v_tgt_table_name,
                    rec_get_dt_range(i).dt_frm,
                    rec_get_dt_range(i).dt_to,
                    'NT-STRTD',
                    null,
                    null,
                    null,
                    null,
                    sysdate
                    );
       END LOOP;
       COMMIT;
       DBMS_OUTPUT.put_line ('Completed '||v_prcs_stp);
   END IF;

--******************************************************************************
--* Truncating the target Table      *
--******************************************************************************
   <<TRUNCATE_TARGET_TABLE>>
   v_prcs_stp := 'Truncating/Deleting records from the target Table';
   -- Ii NOT a Re-Run truncate all the records. If it is re-run, no need to delete any record as we COMMIT only successfull prcoessed records
   IF NOT n_re_run > 0 THEN -- If this is Re-run
        b_trunc_allow := usfdba.table_pkg.allow_truncate_table (v_out_msg, v_tgt_table_owner,v_tgt_table_name);
        DBMS_OUTPUT.PUT_LINE(v_out_msg);
        IF b_trunc_allow = TRUE THEN
            n_trunc_ret := usfdba.table_pkg.truncate_table(v_out_msg, v_tgt_table_owner,v_tgt_table_name);
            DBMS_OUTPUT.PUT_LINE(v_out_msg);
            IF n_trunc_ret != 0 THEN
                DBMS_OUTPUT.PUT_LINE('Error in Truncating the '||v_tgt_table_name||' table');
                RAISE ALL_EXCEPTIONS;
            END IF;
        ELSE
            DBMS_OUTPUT.PUT_LINE('USFDBA Security doesn''t allow to truncate '||v_tgt_table_name||' table');
            DBMS_OUTPUT.PUT_LINE('     Check entry in USFDBA.USF_TABLE_SCRTY table for '||v_tgt_table_name||' table');
            RAISE ALL_EXCEPTIONS;
        END IF;

    END IF;


--******************************************************************************
--* VPD Policies*
--******************************************************************************
   <<SALES_VPD>>

    BEGIN


           /*   SELECT TO_CHAR(MIN(div_load_ts), 'YYYYMMDDHH24MISS')
                INTO v_usr_div_date
                FROM ctladm.actv_usf_org_hier uoh
               WHERE div_load_stat = 0;
*/
              SELECT TO_CHAR(MIN(div_load_ts), 'YYYYMMDDHH24MISS')
                INTO v_usr_div_date
                FROM xdmadm.fact_load_stat
               WHERE div_load_stat = 0
                    AND fact_table = 'SALES_CORP';

              IF v_usr_div_date IS NOT NULL
                THEN
                  v_sales_vpd := ' and TO_DATE(to_char(NVL(s.orig_ldr_tm,s.ldr_tm)),''YYYYMMDDHH24MISS'') <  TO_DATE('''||v_usr_div_date||''',''YYYYMMDDHH24MISS'')';
                  v_sales_vpd := v_sales_vpd || ' and s.xfer_to_dt IS NULL';
              ELSE
                  v_sales_vpd := ' and s.xfer_to_dt is null';
              END IF;
    END;

   <<DIV_VPD>>

           v_div_vpd :=  '                AND ( d.conv_to_div_nbr IS NULL OR d.conv_on_date > SYSDATE)';

--******************************************************************************
--* Using Cursor Load the AGG Table by period                                  *
--* Load sales data into Partition                                             *
--******************************************************************************

   <<LOAD_DCOM_SALES_AGG_TABLE>>

   BEGIN

       v_prcs_stp := 'Insert data into target table';

       FOR i IN rec_get_dt_range.first..rec_get_dt_range.last
       LOOP
           BEGIN
                n_insert_start_flag := 1;
                v_prcs_stp := 'Inserting for Period '||rec_get_dt_range(i).clndr_yr_qtr;
                DBMS_OUTPUT.put_line (v_prcs_stp);


                UPDATE ctladm.dcom_sales_summ_load_log
                SET ld_status = 'INS-STRT',
                    prcs_step  = v_prcs_stp,
                    last_updt = sysdate
                WHERE prcs_date = d_prcs_dt
                AND   tbl_nm = v_tgt_table_name
                AND   ld_dt_rng_frm = to_date(rec_get_dt_range(i).dt_frm)
                AND   ld_dt_rng_to = to_date(rec_get_dt_range(i).dt_to);

                COMMIT;


                ---ap_vndr_nbr_actl added below 2.0
                ----transaction type not in AP added as where clause.

                v_dyn_sql_stmt:=
                   ' INSERT /*+ append */ INTO '
             || v_tgt_table_owner||'.'||v_tgt_table_name||' NOLOGGGING  '
             ||' SELECT
             s.cust_nbr,
             s.div_nbr,
             s.prod_nbr,
             t.clndr_yr_mth,
             p.pim_usf_std_prod_cd,
             nvl(s.true_mfr,0),
             trunc(t.clndr_dt,''MON''),
             last_day(t.clndr_dt),
             sum(s.each_ship),
             sum(s.unit_ship),
             sum(s.qty_ship),
             sum(s.unfrm_qty_ship),
             sum(s.net_wt_ship),
             sum(s.each_ord),
             sum(s.unit_ord),
             sum(s.qty_ord),
             sum(s.actl_extnd),
             sum(s.grs_sls_extnd),
             sum(s.prod_alw),
             sum(s.prod_chrg),
             sum(s.unfrm_qty_ord),
             sum(s.unfrm_qty_subbed),
             sum(s.unfrm_qty_orig)
              FROM xdmadm.sales_corp s,
             xdmadm.time_corp t,
             xdmadm.pim_corp p,
             xdmadm.div_corp d,
             xdmadm.div_corp rev_div
             WHERE 1=1   '
             ||      v_sales_vpd   ||
           ' AND s.prcs_dt= t.clndr_dt
             AND s.div_sk = d.div_sk
             AND s.pim_sk = p.pim_sk
             AND s.trans_typ not in (''AP'') '
             || v_div_vpd      ||
           ' AND t.clndr_dt between :dt_frm and :dt_to
             AND NVL (D.ACQSTN_CMPNY_NM,''USF'') = ''USF''
             And NVL (S.SLS_REVENUE_DIV_NBR, S.DIV_NBR) = rev_div.DIV_NBR
             GROUP BY s.cust_nbr,
             s.div_nbr,
             s.prod_nbr,
             t.clndr_yr_mth,
             p.pim_usf_std_prod_cd,
             nvl(s.true_mfr,0),
             trunc(t.clndr_dt,''MON''),
             last_day(t.clndr_dt)   '
             ;



              EXECUTE IMMEDIATE v_dyn_sql_stmt USING rec_get_dt_range(i).dt_frm, rec_get_dt_range(i).dt_to;

              n_rows_inserted := SQL%ROWCOUNT;

              n_tot_rows_inserted := n_tot_rows_inserted + n_rows_inserted;

              UPDATE ctladm.dcom_sales_summ_load_log
                SET ld_status = 'SUCCESS',
                    prcs_step  = v_prcs_stp,
                    recs_insrtd = n_rows_inserted,
                    last_updt = sysdate
                WHERE prcs_date = d_prcs_dt
                AND   tbl_nm = v_tgt_table_name
                AND   ld_dt_rng_frm = to_date(rec_get_dt_range(i).dt_frm)
                AND   ld_dt_rng_to  = to_date(rec_get_dt_range(i).dt_to);

              COMMIT;
              DBMS_OUTPUT.put_line ('Rows Inserted for '||rec_get_dt_range(i).clndr_yr_qtr||' period: ' || n_rows_inserted);

            EXCEPTION
              WHEN OTHERS THEN
                ROLLBACK;-- TO do_insert;
                UPDATE ctladm.dcom_sales_summ_load_log
                SET ld_status = 'LD-FAIL',
                    prcs_step  = v_prcs_stp,
                    last_updt = sysdate
                WHERE prcs_date = d_prcs_dt
                AND   tbl_nm = v_tgt_table_name
                AND   ld_dt_rng_frm = to_date(rec_get_dt_range(i).dt_frm)
                AND   ld_dt_rng_to  = to_date(rec_get_dt_range(i).dt_to);
                COMMIT;
                RAISE;
            END;
        END LOOP;
   END;

   DBMS_OUTPUT.PUT_LINE (v_dyn_sql_stmt);

   DBMS_OUTPUT.put_line ('Total Rows Inserted : '|| n_tot_rows_inserted);

--******************************************************************************
--* Retrieve the Months List need to load during current run
--******************************************************************************
   v_prcs_stp := 'Retrieve the total list of all Months loaded';
   DBMS_OUTPUT.put_line ('Opeing Cursor p_dt_frm:'||d_run_frm_dt||'   p_dt_to:'||d_run_to_dt);
   OPEN c_get_dt_range(d_first_day_curr_run, d_run_to_dt);
   FETCH c_get_dt_range BULK COLLECT INTO rec_get_dt_range;
   CLOSE c_get_dt_range;
   DBMS_OUTPUT.put_line ('Closing Cursor');
   DBMS_OUTPUT.put_line ('Total No of Periods should be loaded : '||rec_get_dt_range.count);

--******************************************************************************
--* Validate Inserts                                                    *
--******************************************************************************

    SELECT count(*) INTO n_no_of_periods_frm_log
                        FROM ctladm.dcom_sales_summ_load_log
                        WHERE ld_status = 'SUCCESS'
                     AND   tbl_nm = v_tgt_table_name
                        group by prcs_date;

    IF rec_get_dt_range.count <> n_no_of_periods_frm_log THEN
        DBMS_OUTPUT.put_line ('Validation Failed for Number of Periods');
        DBMS_OUTPUT.put_line ('No of Periods ('||rec_get_dt_range.count||') <> No of Periods from Log ('||n_no_of_periods_frm_log||')');
        UPDATE ctladm.dcom_sales_summ_load_log
           SET ld_status = 'VLD-FAIL'
         WHERE prcs_date = to_date(d_prcs_dt)
         AND   tbl_nm = v_tgt_table_name;
        COMMIT;
        RAISE ALL_EXCEPTIONS;
    ELSE
        DBMS_OUTPUT.put_line ('No of Periods ('||rec_get_dt_range.count||') = No of Periods from Log ('||n_no_of_periods_frm_log||')');
    END IF;

--******************************************************************************
--* Wrap Program                                                               *
--******************************************************************************
  <<Wrap_Program>>

      v_prcs_stp := 'Final Commit';

      COMMIT;

      dbms_output.put_line('End Process '||CON_PROCESS_NAME);
      dbms_output.put_line('End Time:'||TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS'));

      RETURN 0;
--******************************************************************************
--* Exception Handling                                                         *
--******************************************************************************
   EXCEPTION
      WHEN ALL_EXCEPTIONS
      THEN
         ROLLBACK;
         DBMS_OUTPUT.put_line ('error raised at step:');
         DBMS_OUTPUT.put_line ('******'||v_prcs_stp);
         RETURN 1;
      WHEN OTHERS
      THEN
          ROLLBACK;
         DBMS_OUTPUT.put_line ('ERROR:' || SQLCODE || ',' || SQLERRM);
         DBMS_OUTPUT.put_line (v_dyn_sql_stmt);
         DBMS_OUTPUT.PUT_LINE(       v_prcs_nm
                            ||' - '||v_prcs_stp
                            ||' - '||v_prcs_pram);
         RETURN 2;
   END FN_SLS_SUMM_CLNDRMO_RFRSH;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_PYR_SLS_SYN_SWAP" (odate IN DATE)
   RETURN NUMBER AS
   /***********************************************************************
    * Name: fn_pyr_sls_syn_swap
    * Type: Function
    * Description: This will be called after the aggregate data
                   processing is complete. It will change the synonym to make
                   the latest data live and truncate the old data.
                   It also updates the synonym table map table and fact
                   control table.
    *  REVISIONS:
    *  Ver        Date        Author           Description
    *  ---------  ----------  ---------------  ----------------------------
    *  1.0        12/12/2011  Sandeep Manocha      Created this procedure.
    *  1.1.       12/29/2011  Manisha Singh        Added code to switch Pyramid Projection Synonym SALES_SUMM_PYR_PRJ for Executive Summary 1.2.4
    *  1.2.       06/12/2013  Madhu Veerapaneni    Added code to switch Synonyms for Sales Merchandising Aggregate tables
    *  1.3.       07/15/2013  Madhu Veerapaneni    Added code to switch Synonyms for ES Customer and PIM Dimemsions
    *  1.4.       07/23/2013  Wes Holbert          Added code to set the date in the FACT_LOAD_STAT table to SAT if it is SUN, so Briefing Books will be produced as of the previous week.
    *  1.5.       12/02/2013  Madhu Veerapaneni    Removed code to switch Synonyms for projections
    ************************************************************************/

   --  SALES Summ Pyr Tables
   l_aggr_active_tbl        VARCHAR2(30);
   l_aggr_inactive_tbl      VARCHAR2(30);
   v_clndr_day_nm           VARCHAR2(30);  --1.4
   v_sat                    DATE;          --1.4

 -- ES Dimension Tables

   l_cust_pyr_active_tbl    VARCHAR2(30);  -- 1.3
   l_cust_pyr_inactive_tbl  VARCHAR2(30);  -- 1.3
   l_pim_pyr_active_tbl     VARCHAR2(30);  -- 1.3
   l_pim_pyr_inactive_tbl   VARCHAR2(30);  -- 1.3

-- Merchandising Tables
   l_sls_mrch_active_tbl    VARCHAR2(30);  -- 1.2
   l_sls_mrch_inactive_tbl  VARCHAR2(30);  -- 1.2
   l_pim_mrch_active_tbl    VARCHAR2(30);  -- 1.2
   l_pim_mrch_inactive_tbl  VARCHAR2(30);  -- 1.2

   v_prcs_stp               VARCHAR2(256);
   l_active_vw              VARCHAR2(30);
   l_inactive_vw            VARCHAR2(30);
   l_return_code            NUMBER := 0;
   l_object_nm              VARCHAR2(30);
   l_out_msg                VARCHAR2(256);
   e_create_synonym exception;
   e_truncate_table exception;
BEGIN


------------------------- Sales Pyramid Aggregate ------------------------------

v_prcs_stp := 'Start Process - Sales Pyramid Aggregate Table';

   ---Get active and inactive aggregate table names from the map table

   l_aggr_active_tbl     := pkg_sls_pyr.fn_get_tbl_nm(pkg_sls_pyr.c_aggr_syn_nm, 'Y');
   l_aggr_inactive_tbl   := pkg_sls_pyr.fn_get_tbl_nm(pkg_sls_pyr.c_aggr_syn_nm, 'N');

   --- Switch the active flags on the synonym table for Sales Pyramid Aggregate tables

   pkg_sls_pyr.set_syn_tbl(l_aggr_active_tbl, 'N');
   pkg_sls_pyr.set_syn_tbl(l_aggr_inactive_tbl, 'Y');

   --- Replace the synonym to point to the recent loaded Sales Pyramid Aggregate table

   l_return_code         := fn_crt_synonym(pkg_sls_pyr.c_aggr_syn_nm, pkg_sls_pyr.c_schema_nm, l_aggr_inactive_tbl);

   IF (l_return_code <> 0) THEN
      l_object_nm   := pkg_sls_pyr.c_aggr_syn_nm;
      RAISE e_create_synonym;
   END IF;

   --- Truncate the previously loaded Sales Pyramid Aggregate table
   l_return_code         := usfdba.table_pkg.truncate_table(l_out_msg, pkg_sls_pyr.c_schema_nm, l_aggr_active_tbl);

   IF (l_return_code <> 0) THEN
      l_object_nm   := l_aggr_active_tbl;
      RAISE e_truncate_table;
   END IF;

   DBMS_OUTPUT.put_line('Previous active aggregate table: ' || l_aggr_active_tbl);
   DBMS_OUTPUT.put_line('New active aggregate table: ' || l_aggr_inactive_tbl);
   DBMS_OUTPUT.put_line('Truncated table: ' || l_aggr_active_tbl);

v_prcs_stp := 'End Process - Sales Pyramid Aggregate Table';


/*********  1.3 Added code below to switch Synonyms for ES Customer and PIM Dimemsions ************/

------------------------ Exec Summ Customer Dimension --------------------------

   v_prcs_stp := 'Start Process - Exec Summ Customer Dimension Table';

  ---Get active and inactive Exec Summ Customer Dimension Table names from the map table

   l_cust_pyr_active_tbl      := pkg_sls_pyr.fn_get_tbl_nm(pkg_sls_pyr.c_cust_pyr_syn_nm, 'Y');
   l_cust_pyr_inactive_tbl    := pkg_sls_pyr.fn_get_tbl_nm(pkg_sls_pyr.c_cust_pyr_syn_nm, 'N');

   --- Switch the active flags on the synonym table for the Customer Dimension Tables
   pkg_sls_pyr.set_syn_tbl(l_cust_pyr_active_tbl, 'N');
   pkg_sls_pyr.set_syn_tbl(l_cust_pyr_inactive_tbl, 'Y');

   -- Replace the synonym to point to the recent loaded Customer Dimension Table
   l_return_code         := fn_crt_synonym(pkg_sls_pyr.c_cust_pyr_syn_nm, pkg_sls_pyr.c_schema_nm, l_cust_pyr_inactive_tbl);

   IF (l_return_code <> 0) THEN
      l_object_nm   := pkg_sls_pyr.c_cust_pyr_syn_nm;
      RAISE e_create_synonym;
   END IF;

  -- Truncate the previously loaded Customer Dimension Table
   l_return_code         := usfdba.table_pkg.truncate_table(l_out_msg, pkg_sls_pyr.c_schema_nm, l_cust_pyr_active_tbl);

   IF (l_return_code <> 0) THEN
      l_object_nm   := l_cust_pyr_active_tbl;
      RAISE e_truncate_table;
   END IF;

   DBMS_OUTPUT.put_line('Previous active Cust Merchandising table: ' || l_cust_pyr_active_tbl);
   DBMS_OUTPUT.put_line('New active Cust Merchandising table: ' || l_cust_pyr_inactive_tbl);
   DBMS_OUTPUT.put_line('Truncated Cust Merchandising table: ' || l_cust_pyr_active_tbl);

   v_prcs_stp := 'End Process - Exec Summ Customer Dimension Table';

--------------------------- Exec Summ PIM Dimension ----------------------------

   v_prcs_stp := 'Start Process - Exec Summ PIM Dimension Table';

   ---Get active and inactive ES - PIM Dimension table names from the map table

   l_pim_pyr_active_tbl      := pkg_sls_pyr.fn_get_tbl_nm(pkg_sls_pyr.c_pim_pyr_syn_nm, 'Y');
   l_pim_pyr_inactive_tbl    := pkg_sls_pyr.fn_get_tbl_nm(pkg_sls_pyr.c_pim_pyr_syn_nm, 'N');

   -- Switch the active flags on the synonym table for PIM Dimension tables
   pkg_sls_pyr.set_syn_tbl(l_pim_pyr_active_tbl, 'N');
   pkg_sls_pyr.set_syn_tbl(l_pim_pyr_inactive_tbl, 'Y');

   --- Replace the synonym to point to the recent loaded PIM Dimension table
   l_return_code         := fn_crt_synonym(pkg_sls_pyr.c_pim_pyr_syn_nm, pkg_sls_pyr.c_schema_nm, l_pim_pyr_inactive_tbl);

   IF (l_return_code <> 0) THEN
      l_object_nm   := pkg_sls_pyr.c_pim_pyr_syn_nm;
      RAISE e_create_synonym;
   END IF;

  --- Truncate the previously loaded PIM Dimension table
   l_return_code         := usfdba.table_pkg.truncate_table(l_out_msg, pkg_sls_pyr.c_schema_nm, l_pim_pyr_active_tbl);

   IF (l_return_code <> 0) THEN
      l_object_nm   := l_pim_pyr_active_tbl;
      RAISE e_truncate_table;
   END IF;

   DBMS_OUTPUT.put_line('Previous active Cust Merchandising table: ' || l_pim_pyr_active_tbl);
   DBMS_OUTPUT.put_line('New active Cust Merchandising table: ' || l_pim_pyr_inactive_tbl);
   DBMS_OUTPUT.put_line('Truncated Cust Merchandising table: ' || l_pim_pyr_active_tbl);

   v_prcs_stp := 'End Process - Exec Summ PIM Dimension Table';

   /*********  1.3 END -- Added code below to switch Synonyms for ES Customer and PIM Dimemsions ********/


--------------------- Sales Merchandising Aggregate ----------------------------

/*********  1.2 Added code below to switch Synonyms for the Merchandising Aggregate tables ************/

   v_prcs_stp := 'Start Process - Sales Merchandising Aggregate Table';

   --- Get active and inactive Sales Merchandising table names from the map table
   l_sls_mrch_active_tbl      := pkg_sls_pyr.fn_get_tbl_nm(pkg_sls_pyr.c_merch_syn_nm, 'Y');
   l_sls_mrch_inactive_tbl    := pkg_sls_pyr.fn_get_tbl_nm(pkg_sls_pyr.c_merch_syn_nm, 'N');

   --- Switch the active flags on the synonym table for Sales Merchandising Aggregate tables
   pkg_sls_pyr.set_syn_tbl(l_sls_mrch_active_tbl, 'N');
   pkg_sls_pyr.set_syn_tbl(l_sls_mrch_inactive_tbl, 'Y');

   --- Replace the synonym to point to the recent loaded Sales Merchandising Aggregate table
   l_return_code         := fn_crt_synonym(pkg_sls_pyr.c_merch_syn_nm, pkg_sls_pyr.c_schema_nm, l_sls_mrch_inactive_tbl);

   IF (l_return_code <> 0) THEN
      l_object_nm   := pkg_sls_pyr.c_merch_syn_nm;
      RAISE e_create_synonym;
   END IF;

  --- Truncate the previously loaded Sales Merchandising Aggregate table
   l_return_code         := usfdba.table_pkg.truncate_table(l_out_msg, pkg_sls_pyr.c_schema_nm, l_sls_mrch_active_tbl);

   IF (l_return_code <> 0) THEN
      l_object_nm   := l_sls_mrch_active_tbl;
      RAISE e_truncate_table;
   END IF;

   DBMS_OUTPUT.put_line('Previous active Sales Merchandising table: ' || l_sls_mrch_active_tbl);
   DBMS_OUTPUT.put_line('New active Sales Merchandising table: ' || l_sls_mrch_inactive_tbl);
   DBMS_OUTPUT.put_line('Truncated Sales Merchandising table: ' || l_sls_mrch_active_tbl);

   v_prcs_stp := 'End Process - Sales Merchandising Aggregate Table';


------------------------ Merchandising PIM Dimension ---------------------------

v_prcs_stp := 'Start Process - Merchandising PIM Dimension Table';

   --- Get active and inactive Merchandising - PIM Dimension Table names from the map table

   l_pim_mrch_active_tbl      := pkg_sls_pyr.fn_get_tbl_nm(pkg_sls_pyr.c_pim_merch_syn_nm, 'Y');
   l_pim_mrch_inactive_tbl    := pkg_sls_pyr.fn_get_tbl_nm(pkg_sls_pyr.c_pim_merch_syn_nm, 'N');

   --- Switch the active flags on the synonym table for the Merchandising PIM Dimension Tables
   pkg_sls_pyr.set_syn_tbl(l_pim_mrch_active_tbl, 'N');
   pkg_sls_pyr.set_syn_tbl(l_pim_mrch_inactive_tbl, 'Y');

  --- Replace the synonym to point to the recent loaded Merchandising PIM Dimension Table
   l_return_code         := fn_crt_synonym(pkg_sls_pyr.c_pim_merch_syn_nm, pkg_sls_pyr.c_schema_nm, l_pim_mrch_inactive_tbl);

   IF (l_return_code <> 0) THEN
      l_object_nm   := pkg_sls_pyr.c_merch_syn_nm;
      RAISE e_create_synonym;
   END IF;

  --- Truncate the previously loaded Merchandising PIM Dimension Table
   l_return_code         := usfdba.table_pkg.truncate_table(l_out_msg, pkg_sls_pyr.c_schema_nm, l_pim_mrch_active_tbl);

   IF (l_return_code <> 0) THEN
      l_object_nm   := l_pim_mrch_active_tbl;
      RAISE e_truncate_table;
   END IF;

   DBMS_OUTPUT.put_line('Previous active PIM Merchandising table: ' || l_pim_mrch_active_tbl);
   DBMS_OUTPUT.put_line('New active PIM Merchandising table: ' || l_pim_mrch_inactive_tbl);
   DBMS_OUTPUT.put_line('Truncated PIM Merchandising table: ' || l_pim_mrch_active_tbl);

v_prcs_stp := 'End Process - Merchandising PIM Dimension Table';


----------- Update the FACT LOAD STAT table after the Swap is complete ---------

     --Update fact table with odate to indicate succesful processing of Merchandising sales agg
   UPDATE xdmadm.fact_load_stat
      SET div_load_stat = 1, div_load_ts = TRUNC(odate)
    WHERE fact_table = pkg_sls_pyr.c_merch_syn_nm;

   --If row in fact table was not updated then create the row
   IF (sql%ROWCOUNT = 0) THEN
      INSERT INTO xdmadm.fact_load_stat(fact_table, div_nbr, fact_table_dsply_nm, fact_typ_desc, latest_prcs_dt,
                                        div_load_stat, div_load_ts, prcs_dt, load_freq, rpt_dsply_ind)
          VALUES (pkg_sls_pyr.c_merch_syn_nm, 0, 'Sales Merchandising', 'Sales Merchandising Aggregate', SYSDATE, 1,
                  TRUNC(odate), TRUNC(odate) + 1, 'DAILY', 'Y'); --Use last closed day
   END IF;

   COMMIT;

/*********  1.2 Added code below to switch Synonyms for the Merchandising Aggregate tables  END ************/
      --Update fact table with odate to indicate succesful processing of Sales Pyramid agg

   BEGIN   --1.4  -Get Saturdays Date if processing with Sunday ODATE
           select clndr_day_nm into v_clndr_day_nm from xdmadm.time_corp where clndr_dt = TRUNC(odate);
           if v_clndr_day_nm='SUNDAY' THEN
                   dbms_output.put_line('Sunday process date. Update with Saturday date.');
                   v_sat := odate -1;
                   UPDATE xdmadm.fact_load_stat
                   SET div_load_stat = 1, div_load_ts = TRUNC(v_sat) -- Update with SAT Date
                   WHERE fact_table = pkg_sls_pyr.c_aggr_syn_nm;

                   --If row in fact table was not updated then create the row
                   IF (sql%ROWCOUNT = 0) THEN
                      INSERT INTO xdmadm.fact_load_stat(fact_table, div_nbr, fact_table_dsply_nm, fact_typ_desc, latest_prcs_dt,
                                                        div_load_stat, div_load_ts, prcs_dt, load_freq, rpt_dsply_ind)
                          VALUES (pkg_sls_pyr.c_aggr_syn_nm, 0, 'Pyramid Segmentation', 'Pyramid Segmentation', SYSDATE, 1,
                                  TRUNC(v_sat), TRUNC(v_sat) + 1, 'DAILY', 'Y');
                    END IF;
           ELSE    --1.4
                  dbms_output.put_line('It is not a Sunday Date');
                  -- This was the original code before adding Sat/Sun logic
                    UPDATE xdmadm.fact_load_stat
                    SET div_load_stat = 1, div_load_ts = TRUNC(odate)
                    WHERE fact_table = pkg_sls_pyr.c_aggr_syn_nm;

                   --If row in fact table was not updated then create the row
                   IF (sql%ROWCOUNT = 0) THEN
                      INSERT INTO xdmadm.fact_load_stat(fact_table, div_nbr, fact_table_dsply_nm, fact_typ_desc, latest_prcs_dt,
                                                        div_load_stat, div_load_ts, prcs_dt, load_freq, rpt_dsply_ind)
                          VALUES (pkg_sls_pyr.c_aggr_syn_nm, 0, 'Pyramid Segmentation', 'Pyramid Segmentation', SYSDATE, 1,
                                  TRUNC(odate), TRUNC(odate) + 1, 'DAILY', 'Y'); --Use last closed day
                   END IF;
           END IF;
   END;        --1.4
   COMMIT;




   DBMS_OUTPUT.put_line('Previous active view: ' || l_active_vw);
   DBMS_OUTPUT.put_line('New active view: ' || l_inactive_vw);
   RETURN pkg_sls_pyr.c_success;
EXCEPTION
   WHEN e_create_synonym THEN
      DBMS_OUTPUT.put_line('Error Swapping Synonym: ' || l_object_nm || '. Requires manual update.');
      RETURN pkg_sls_pyr.c_error;
   WHEN e_truncate_table THEN
      DBMS_OUTPUT.put_line('Error Truncating Table: ' || l_object_nm || '. Requires manual update.');
      DBMS_OUTPUT.put_line(l_out_msg);
      RETURN pkg_sls_pyr.c_error;
   WHEN OTHERS THEN
      ROLLBACK;
      DBMS_OUTPUT.put_line('Unexpected Error In Synonym Swap Procedure. Requires manual update.');
      DBMS_OUTPUT.put_line(SQLCODE || ': ' || SQLERRM);
      RETURN pkg_sls_pyr.c_error;
END;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_XDM_CUST_PRSPCT_LOAD"
    (
      odate IN VARCHAR2,
      v_tbl_to_load IN VARCHAR2
    )
    RETURN NUMBER
    /*
    *    Name: FN_XDM_CUST_PRSPCT_LOAD
    *
    *    Description: Load all customers and prospects into a
    *                 factless fact table.
    *
    *    USAGE: FN_XDM_CUST_PRSPCT_LOAD
    *
    *    Author: Ajay Mallela
    *    Date  : August 02, 2012
    *    $Rev:: 217                                                    $:
    *    $Author:: Ajay                                                $:
    *    $Date:: 2012-08-02 17:38:50 -0500 (Mon, 02 Aug 2012)          $:
    *
    *
    */
  AS
con_process_name CONSTANT VARCHAR2(40) := 'FN_XDM_CUST_PRSPCT_LOAD';
v_schema_nm        VARCHAR2(30) := 'XDMADM';
v_tbl_cnt NUMBER       := 0;
v_return_code      NUMBER       := 0;
v_object_nm        VARCHAR2(30);
v_out_msg          VARCHAR2(256);
e_truncate_table   EXCEPTION;
ALL_EXCEPTIONS   EXCEPTION;
v_ret_val     NUMBER;
v_sql              VARCHAR2(32767);
v_odate            date;
BEGIN
dbms_output.put_line('Start Process '||con_process_name);
dbms_output.put_line('Start Time: '||TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS'));
EXECUTE immediate 'alter session  set NLS_DATE_FORMAT=''DD-MON-YY''';
v_sql := 'INSERT
    INTO ' || v_schema_nm || '.' || v_tbl_to_load ||
      '(
        CUST_PLUS_PRSPCT_SK,
        MP_CHD_ID,
        MP_US_FOODS_ID,
        CUST_NBR,
        DIV_NBR,
        FISC_YR_MTH_F,
        CURR_IND_F,
        LDR_TM_F,
        MP_MSTR_ID_F,
        RES_TYP_IND_F,
        MP_FOOD_DSPSBL_PRCH_F,
        MP_TTL_CAT_DRY_F,
        MP_TTL_CAT_FRSH_F,
        MP_TTL_CAT_FRZ_F,
        MP_TTL_CAT_PROTN_F,
        MP_TTL_CAT_BVRG_F,
        MP_TTL_CAT_DSPSBL_F,
        MP_TTL_CAT_FRSH_FRZ_F,
        MP_CHD_ID_F,
        MP_US_FOODS_ID_F,
        FISC_YR_MTH_L,
        CURR_IND_L,
        LDR_TM_L,
        MP_MSTR_ID_L,
        RES_TYP_IND_L,
        MP_FOOD_DSPSBL_PRCH_L,
        MP_TTL_CAT_DRY_L,
        MP_TTL_CAT_FRSH_L,
        MP_TTL_CAT_FRZ_L,
        MP_TTL_CAT_PROTN_L,
        MP_TTL_CAT_BVRG_L,
        MP_TTL_CAT_DSPSBL_L,
        MP_TTL_CAT_FRSH_FRZ_L,
        MP_CHD_ID_L,
        MP_US_FOODS_ID_L,
        MP_FOOD_BVRG_DSPSBL_PRCH_F,
        MP_FOOD_BVRG_DSPSBL_PRCH_L
      )
    SELECT ' || v_schema_nm || '.' || 'cust_plus_prspct_seq.NEXTVAL CUST_PLUS_PRSPCT_SK,
      MP_CHD_ID,
      MP_US_FOODS_ID,
      CUST_NBR,
      DIV_NBR,
      FISC_YR_MTH_F,
      CURR_IND_F,
      LDR_TM_F,
      MP_MSTR_ID_F,
      RES_TYP_IND_F,
      MP_FOOD_DSPSBL_PRCH_F,
      MP_TTL_CAT_DRY_F,
      MP_TTL_CAT_FRSH_F,
      MP_TTL_CAT_FRZ_F,
      MP_TTL_CAT_PROTN_F,
      MP_TTL_CAT_BVRG_F,
      MP_TTL_CAT_DSPSBL_F,
      MP_TTL_CAT_FRSH_FRZ_F,
      MP_CHD_ID_F,
      MP_US_FOODS_ID_F,
      FISC_YR_MTH_L,
      CURR_IND_L,
      LDR_TM_L,
      MP_MSTR_ID_L,
      RES_TYP_IND_L,
      MP_FOOD_DSPSBL_PRCH_L,
      MP_TTL_CAT_DRY_L,
      MP_TTL_CAT_FRSH_L,
      MP_TTL_CAT_FRZ_L,
      MP_TTL_CAT_PROTN_L,
      MP_TTL_CAT_BVRG_L,
      MP_TTL_CAT_DSPSBL_L,
      MP_TTL_CAT_FRSH_FRZ_L,
      MP_CHD_ID_L,
      MP_US_FOODS_ID_L,
      MP_FOOD_BVRG_DSPSBL_PRCH_F,
      MP_FOOD_BVRG_DSPSBL_PRCH_L
    FROM
      (WITH two_yago AS
      (SELECT MIN(clndr_dt) dt
      FROM xdmadm.time_corp
      WHERE fisc_yr =
        (SELECT fisc_yr -2
        FROM xdmadm.time_corp
        WHERE clndr_dt = TRUNC(to_date(''' || odate || '''' || ',' || '''YYYYMMDD''))
        )
      ),
      usf_cust AS
      (SELECT c.mp_chd_id,
        c.mp_us_foods_id,
        c.cust_nbr,
        d.div_nbr,
        NVL(d.inact_dt, ''31-DEC-4700'') inact_dt,
        NVL(c.dt_last_ord, ''01-JAN-1980'') dt_last_ord
      FROM xdmadm.cust_corp c,
        xdmadm.div_corp d
      WHERE d.conv_to_div_nbr IS NULL
      AND d.rgn_cd            != ''-999''
      AND d.zone_nbr          != ''-999''
      AND d.div_nbr            = c.div_nbr
      AND c.XFER_to_CUST_NBR  IS NULL
      ),
      latest_chd_cust AS
      (SELECT mp_chd_id,
        mp_us_foods_id,
        cust_nbr,
        div_nbr
      FROM xdmadm.cust_mktplus_corp mp
      WHERE mp.curr_ind = ''Y''
      and (mp.cust_nbr is null or exists
      (select 1 from usf_cust))
      )
    SELECT COALESCE(c2.mp_chd_id, NVL(c1.mp_chd_id, ''999999999''))      AS mp_chd_id,
      COALESCE(c2.mp_us_foods_id, NVL(c1.mp_us_foods_id, ''999999999'')) AS mp_us_foods_id,
      COALESCE(c1.cust_nbr, c2.cust_nbr)                               AS cust_nbr,
      COALESCE(c1.div_nbr, c2.div_nbr)                                 AS div_nbr
    FROM
      (SELECT mp_chd_id,
        mp_us_foods_id,
        cust_nbr,
        div_nbr
      FROM usf_cust,
        two_yago
      WHERE usf_cust.inact_dt  > two_yago.dt
      AND usf_cust.dt_last_ord > two_yago.dt
      ) c1
    FULL OUTER JOIN latest_chd_cust c2
    ON c2.cust_nbr = c1.cust_nbr
    AND c2.div_nbr = c1.div_nbr
      ) q1
    LEFT OUTER JOIN
      (SELECT frst.*,
        lst.*
      FROM
        (SELECT *
        FROM
          (SELECT cust_nbr CUST_NBR_F,
            div_nbr DIV_NBR_F,
            fisc_yr_mth FISC_YR_MTH_F,
            CURR_IND CURR_IND_F,
            LDR_TM LDR_TM_F,
            MP_MSTR_ID MP_MSTR_ID_F,
            RES_TYP_IND RES_TYP_IND_F,
            MP_FOOD_DSPSBL_PRCH MP_FOOD_DSPSBL_PRCH_F,
            MP_TTL_CAT_DRY MP_TTL_CAT_DRY_F,
            MP_TTL_CAT_FRSH MP_TTL_CAT_FRSH_F,
            MP_TTL_CAT_FRZ MP_TTL_CAT_FRZ_F,
            MP_TTL_CAT_PROTN MP_TTL_CAT_PROTN_F,
            MP_TTL_CAT_BVRG MP_TTL_CAT_BVRG_F,
            MP_TTL_CAT_DSPSBL MP_TTL_CAT_DSPSBL_F,
            MP_TTL_CAT_FRSH_FRZ MP_TTL_CAT_FRSH_FRZ_F,
            mp_chd_id MP_CHD_ID_F,
            mp_us_foods_id MP_US_FOODS_ID_F,
            MP_FOOD_BVRG_DSPSBL_PRCH      MP_FOOD_BVRG_DSPSBL_PRCH_F,
            row_number() OVER (PARTITION BY mp_chd_id, div_nbr, mp_us_foods_id ORDER BY fisc_yr_mth) RNK_F
          FROM xdmadm.cust_mktplus_corp
          ) CHD1
        WHERE rnk_f = 1
        ) frst,
        (SELECT *
        FROM
          (SELECT cust_nbr CUST_NBR_L,
            div_nbr DIV_NBR_L,
            fisc_yr_mth FISC_YR_MTH_L,
            CURR_IND CURR_IND_L,
            LDR_TM LDR_TM_L,
            MP_MSTR_ID MP_MSTR_ID_L,
            RES_TYP_IND RES_TYP_IND_L,
            MP_FOOD_DSPSBL_PRCH MP_FOOD_DSPSBL_PRCH_L,
            MP_TTL_CAT_DRY MP_TTL_CAT_DRY_L,
            MP_TTL_CAT_FRSH MP_TTL_CAT_FRSH_L,
            MP_TTL_CAT_FRZ MP_TTL_CAT_FRZ_L,
            MP_TTL_CAT_PROTN MP_TTL_CAT_PROTN_L,
            MP_TTL_CAT_BVRG MP_TTL_CAT_BVRG_L,
            MP_TTL_CAT_DSPSBL MP_TTL_CAT_DSPSBL_L,
            MP_TTL_CAT_FRSH_FRZ MP_TTL_CAT_FRSH_FRZ_L,
            mp_chd_id MP_CHD_ID_L,
            mp_us_foods_id MP_US_FOODS_ID_L,
            MP_FOOD_BVRG_DSPSBL_PRCH      MP_FOOD_BVRG_DSPSBL_PRCH_L,
            row_number() OVER (PARTITION BY mp_chd_id, div_nbr, mp_us_foods_id ORDER BY fisc_yr_mth DESC) RNK_L
          FROM xdmadm.cust_mktplus_corp
          ) CHD2
        WHERE rnk_l = 1
        ) Lst
      WHERE lst.mp_chd_id_l    = frst.mp_chd_id_f
      AND frst.div_nbr_f       = lst.div_nbr_l
      AND lst.mp_us_foods_id_l = frst.mp_us_foods_id_f
      ) q2
    ON q1.mp_chd_id       = q2.mp_chd_id_f
    AND q1.div_nbr        = q2.div_nbr_f
    AND q1.mp_us_foods_id = q2.mp_us_foods_id_f';
    --dbms_output.put_line(v_sql);
    Execute immediate v_sql;
    dbms_output.put_line('Rows processed: ' || SQL%rowcount);
    dbms_output.put_line('End Time: '||TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS'));
    COMMIT;
v_sql := 'INSERT
    INTO ' || v_schema_nm || '.' || v_tbl_to_load ||
      '(
        CUST_PLUS_PRSPCT_SK,
        MP_CHD_ID,
        MP_US_FOODS_ID,
        CUST_NBR,
        DIV_NBR,
        FISC_YR_MTH_F,
        CURR_IND_F,
        LDR_TM_F,
        MP_MSTR_ID_F,
        RES_TYP_IND_F,
        MP_FOOD_DSPSBL_PRCH_F,
        MP_TTL_CAT_DRY_F,
        MP_TTL_CAT_FRSH_F,
        MP_TTL_CAT_FRZ_F,
        MP_TTL_CAT_PROTN_F,
        MP_TTL_CAT_BVRG_F,
        MP_TTL_CAT_DSPSBL_F,
        MP_TTL_CAT_FRSH_FRZ_F,
        MP_CHD_ID_F,
        MP_US_FOODS_ID_F,
        FISC_YR_MTH_L,
        CURR_IND_L,
        LDR_TM_L,
        MP_MSTR_ID_L,
        RES_TYP_IND_L,
        MP_FOOD_DSPSBL_PRCH_L,
        MP_TTL_CAT_DRY_L,
        MP_TTL_CAT_FRSH_L,
        MP_TTL_CAT_FRZ_L,
        MP_TTL_CAT_PROTN_L,
        MP_TTL_CAT_BVRG_L,
        MP_TTL_CAT_DSPSBL_L,
        MP_TTL_CAT_FRSH_FRZ_L,
        MP_CHD_ID_L,
        MP_US_FOODS_ID_L,
        MP_FOOD_BVRG_DSPSBL_PRCH_F,
        MP_FOOD_BVRG_DSPSBL_PRCH_L
      )
    SELECT ' || v_schema_nm || '.' || 'cust_plus_prspct_seq.NEXTVAL CUST_PLUS_PRSPCT_SK,
MP_CHD_ID_F,
MP_US_FOODS_ID_F,
CUST_NBR_F,
DIV_NBR_F,
FISC_YR_MTH_F,
CURR_IND_F,
LDR_TM_F,
MP_MSTR_ID_F,
RES_TYP_IND_F,
MP_FOOD_DSPSBL_PRCH_F,
MP_TTL_CAT_DRY_F,
MP_TTL_CAT_FRSH_F,
MP_TTL_CAT_FRZ_F,
MP_TTL_CAT_PROTN_F,
MP_TTL_CAT_BVRG_F,
MP_TTL_CAT_DSPSBL_F,
MP_TTL_CAT_FRSH_FRZ_F,
MP_CHD_ID_F,
MP_US_FOODS_ID_F,
FISC_YR_MTH_L,
CURR_IND_L,
LDR_TM_L,
MP_MSTR_ID_L,
RES_TYP_IND_L,
MP_FOOD_DSPSBL_PRCH_L,
MP_TTL_CAT_DRY_L,
MP_TTL_CAT_FRSH_L,
MP_TTL_CAT_FRZ_L,
MP_TTL_CAT_PROTN_L,
MP_TTL_CAT_BVRG_L,
MP_TTL_CAT_DSPSBL_L,
MP_TTL_CAT_FRSH_FRZ_L,
MP_CHD_ID_L,
MP_US_FOODS_ID_L,
MP_FOOD_BVRG_DSPSBL_PRCH_F,
MP_FOOD_BVRG_DSPSBL_PRCH_L
from
(SELECT cust_nbr CUST_NBR_F,
            div_nbr DIV_NBR_F,
            fisc_yr_mth FISC_YR_MTH_F,
            CURR_IND CURR_IND_F,
            LDR_TM LDR_TM_F,
            MP_MSTR_ID MP_MSTR_ID_F,
            RES_TYP_IND RES_TYP_IND_F,
            MP_FOOD_DSPSBL_PRCH MP_FOOD_DSPSBL_PRCH_F,
            MP_TTL_CAT_DRY MP_TTL_CAT_DRY_F,
            MP_TTL_CAT_FRSH MP_TTL_CAT_FRSH_F,
            MP_TTL_CAT_FRZ MP_TTL_CAT_FRZ_F,
            MP_TTL_CAT_PROTN MP_TTL_CAT_PROTN_F,
            MP_TTL_CAT_BVRG MP_TTL_CAT_BVRG_F,
            MP_TTL_CAT_DSPSBL MP_TTL_CAT_DSPSBL_F,
            MP_TTL_CAT_FRSH_FRZ MP_TTL_CAT_FRSH_FRZ_F,
            mp_chd_id MP_CHD_ID_F,
            mp_us_foods_id MP_US_FOODS_ID_F,
            MP_FOOD_BVRG_DSPSBL_PRCH      MP_FOOD_BVRG_DSPSBL_PRCH_F,
            rnk rnk_f
from
(select frst.*, row_number() over (partition by mp_chd_id order by summ asc nulls last) rnk from
(select chd.*, (MP_TTL_CAT_DRY +
    NVL(MP_TTL_CAT_FRSH, 0) +
    NVL(MP_TTL_CAT_FRZ, 0) +
    NVL(MP_TTL_CAT_PROTN, 0) +
    NVL(MP_TTL_CAT_BVRG, 0) +
    NVL(MP_TTL_CAT_DSPSBL, 0) +
    NVL(MP_TTL_CAT_FRSH_FRZ, 0)) summ
from xdmadm.cust_mktplus_corp chd
where curr_ind = ''Y'' and not exists
(select 1  from ' || v_schema_nm || '.' || v_tbl_to_load || ' p where chd.mp_chd_id = p.mp_chd_id)) frst) where rnk = 1) chd1,
(SELECT cust_nbr CUST_NBR_L,
            div_nbr DIV_NBR_L,
            fisc_yr_mth FISC_YR_MTH_L,
            CURR_IND CURR_IND_L,
            LDR_TM LDR_TM_L,
            MP_MSTR_ID MP_MSTR_ID_L,
            RES_TYP_IND RES_TYP_IND_L,
            MP_FOOD_DSPSBL_PRCH MP_FOOD_DSPSBL_PRCH_L,
            MP_TTL_CAT_DRY MP_TTL_CAT_DRY_L,
            MP_TTL_CAT_FRSH MP_TTL_CAT_FRSH_L,
            MP_TTL_CAT_FRZ MP_TTL_CAT_FRZ_L,
            MP_TTL_CAT_PROTN MP_TTL_CAT_PROTN_L,
            MP_TTL_CAT_BVRG MP_TTL_CAT_BVRG_L,
            MP_TTL_CAT_DSPSBL MP_TTL_CAT_DSPSBL_L,
            MP_TTL_CAT_FRSH_FRZ MP_TTL_CAT_FRSH_FRZ_L,
            mp_chd_id MP_CHD_ID_L,
            mp_us_foods_id MP_US_FOODS_ID_L,
            MP_FOOD_BVRG_DSPSBL_PRCH      MP_FOOD_BVRG_DSPSBL_PRCH_L,
            rnk rnk_l
from
(select lst.*, row_number() over (partition by mp_chd_id order by summ desc) rnk from
(select chd.*, (MP_TTL_CAT_DRY +
    NVL(MP_TTL_CAT_FRSH, 0) +
    NVL(MP_TTL_CAT_FRZ, 0) +
    NVL(MP_TTL_CAT_PROTN, 0) +
    NVL(MP_TTL_CAT_BVRG, 0) +
    NVL(MP_TTL_CAT_DSPSBL, 0) +
    NVL(MP_TTL_CAT_FRSH_FRZ, 0)) summ
from xdmadm.cust_mktplus_corp chd
where curr_ind = ''Y'' and not exists
(select 1  from ' || v_schema_nm || '.' || v_tbl_to_load || ' p where chd.mp_chd_id = p.mp_chd_id)) lst) where rnk = 1) chd2
     WHERE chd1.mp_chd_id_f    = chd2.mp_chd_id_l
      /*AND chd1.div_nbr_f       = chd2.div_nbr_l
      AND chd1.mp_us_foods_id_f = chd2.mp_us_foods_id_l*/';
    --dbms_output.put_line(v_sql);
    Execute immediate v_sql;
    dbms_output.put_line('Rows processed: ' || SQL%rowcount);
    dbms_output.put_line('End Time: '||TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS'));
    COMMIT;
    EXECUTE immediate 'alter session  set NLS_DATE_FORMAT=''MM/DD/YYYY''';
    RETURN 0;
  EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.put_line('Error inserting into cust_plus_prspct_corp');
    DBMS_OUTPUT.put_line(SQLCODE || ': ' || SQLERRM);
    RETURN 1;
  END FN_XDM_CUST_PRSPCT_LOAD;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_CUST_WK_AGGR_SYN" (odate IN DATE)
   RETURN NUMBER AS
   /***********************************************************************
   * Name: FN_CUST_WK_AGGR_SYN
   * Type: Function
   * Description: Swap synonym on customer week aggregate in XDMADM.
   * Revisions:
   *  Ver        Date        Author           Description
   *  ---------  ----------  ---------------  -----------------------------
   *  1.0        10/16/2012  Matt Nicol       Created this function
   ************************************************************************/
   c_success            CONSTANT NUMBER := 0;
   c_error              CONSTANT NUMBER := 0;
   c_schema             CONSTANT VARCHAR2(30) := 'XDMADM';
   c_aggr_tbl_syn_nm    CONSTANT VARCHAR2(30) := 'CUST_WK_AGGR';
   c_aggr_load_syn_nm   CONSTANT VARCHAR2(30) := 'CUST_WK_AGGR_LOAD';
   l_return_code        NUMBER;
   l_out_msg            VARCHAR2(256);

   l_aggr_tbl_nm        VARCHAR2(30);
   l_load_tbl_nm        VARCHAR2(30);
BEGIN
   -- Validate input parameters
   IF (odate IS NULL) THEN
      DBMS_OUTPUT.put_line('Error: Invalid Parameters: Date is required');
      RETURN c_error;
   END IF;

   -- Get current synonym tables
   EXECUTE IMMEDIATE 'SELECT table_name FROM user_synonyms WHERE synonym_name = ''' || c_aggr_tbl_syn_nm || ''''
      INTO l_aggr_tbl_nm;

   EXECUTE IMMEDIATE 'SELECT table_name FROM user_synonyms WHERE synonym_name = ''' || c_aggr_load_syn_nm || ''''
      INTO l_load_tbl_nm;

   DBMS_OUTPUT.put_line('Aggr Table: ' || l_aggr_tbl_nm);
   DBMS_OUTPUT.put_line('Load Table: ' || l_load_tbl_nm);

   -- Analyze customer weekly aggregate table
   l_return_code   := xdmadm.fn_getstat_tbl(c_schema, l_load_tbl_nm);
   DBMS_OUTPUT.put_line('Analyze Return: ' || l_return_code);

   IF (l_return_code <> 0) THEN
      DBMS_OUTPUT.put_line('Error: Failed to analyze table');
      RETURN c_error;
   END IF;

   -- Swap synonyms
   l_return_code   := xdmadm.fn_crt_synonym(c_aggr_tbl_syn_nm, c_schema, l_load_tbl_nm);
   DBMS_OUTPUT.put_line(
      'Create synonym ' || c_aggr_tbl_syn_nm || ' for ' || c_schema || '.' || l_load_tbl_nm || ': ' || l_return_code);

   IF (l_return_code <> 0) THEN
      DBMS_OUTPUT.put_line('Error: Failed to create synonym for aggregate table');
      RETURN c_error;
   END IF;

   l_return_code   := xdmadm.fn_crt_synonym(c_aggr_load_syn_nm, c_schema, l_aggr_tbl_nm);
   DBMS_OUTPUT.put_line(
      'Create synonym ' || c_aggr_load_syn_nm || ' for ' || c_schema || '.' || l_aggr_tbl_nm || ': ' || l_return_code);

   IF (l_return_code <> 0) THEN
      DBMS_OUTPUT.put_line('Error: Failed to create synonym for aggregate table');
      RETURN c_error;
   END IF;

   -- Truncate new load table
   l_return_code   := usfdba.table_pkg.truncate_table(l_out_msg, c_schema, l_aggr_tbl_nm);
   DBMS_OUTPUT.put_line('Truncate Prev Aggr Table Return: ' || l_return_code || ' - ' || l_out_msg);

   IF (l_return_code <> 0) THEN
      DBMS_OUTPUT.put_line('Error: Failed to truncate table');
      RETURN c_error;
   END IF;

   RETURN c_success;
EXCEPTION
   WHEN OTHERS THEN
      DBMS_OUTPUT.put_line('Unexepected error');
      DBMS_OUTPUT.put_line(SQLCODE || ': ' || SQLERRM);
      RETURN c_error;
END;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_RGN_SLS_SYN_SWAP" (odate IN DATE)
   RETURN NUMBER AS
   /***********************************************************************
    * Name: FN_RGN_SLS_SYN_SWAP
    * Type: Function
    * Description: This will be called after the aggregate and projection data
                   processing is complete. It will change the synonym to make
                   the latest data live and truncate the old data.
                   It also updates the synonym table map table and fact
                   control table.
    *  REVISIONS:
    *  Ver        Date        Author           Description
    *  ---------  ----------  ---------------  ----------------------------
    *  1.0        04/29/2011  Matt Nicol       Created this procedure.
    *  1.1        07/05/2011  Matt Nicol       Removed view synonyms
    ************************************************************************/
   l_aggr_active_tbl     VARCHAR2(30);
   l_aggr_inactive_tbl   VARCHAR2(30);
   l_prj_active_tbl      VARCHAR2(30);
   l_prj_inactive_tbl    VARCHAR2(30);
   l_active_vw           VARCHAR2(30);
   l_inactive_vw         VARCHAR2(30);
   l_return_code         NUMBER := 0;
   l_object_nm           VARCHAR2(30);
   l_out_msg             VARCHAR2(256);
   e_create_synonym exception;
   e_truncate_table exception;
BEGIN
   --Get active and inactive aggregate table names from map table
   l_aggr_active_tbl     := pkg_sls_rgn.fn_get_tbl_nm(pkg_sls_rgn.c_aggr_syn_nm, 'Y');
   l_aggr_inactive_tbl   := pkg_sls_rgn.fn_get_tbl_nm(pkg_sls_rgn.c_aggr_syn_nm, 'N');

   --Switch the active flags on the synonym table for aggregate tables
   pkg_sls_rgn.set_syn_tbl(l_aggr_active_tbl, 'N');
   pkg_sls_rgn.set_syn_tbl(l_aggr_inactive_tbl, 'Y');

   --Replace synonym
   l_return_code         := fn_crt_synonym(pkg_sls_rgn.c_aggr_syn_nm, pkg_sls_rgn.c_schema_nm, l_aggr_inactive_tbl);

   IF (l_return_code <> 0) THEN
      l_object_nm   := pkg_sls_rgn.c_prj_syn_nm;
      RAISE e_create_synonym;
   END IF;

   l_return_code         := usfdba.table_pkg.truncate_table(l_out_msg, pkg_sls_rgn.c_schema_nm, l_aggr_active_tbl);

   IF (l_return_code <> 0) THEN
      l_object_nm   := l_aggr_active_tbl;
      RAISE e_truncate_table;
   END IF;

   DBMS_OUTPUT.put_line('Previous active aggregate table: ' || l_aggr_active_tbl);
   DBMS_OUTPUT.put_line('New active aggregate table: ' || l_aggr_inactive_tbl);
   DBMS_OUTPUT.put_line('Truncated table: ' || l_aggr_active_tbl);

   --Get active and inactive projection table names from map table
   l_prj_active_tbl      := pkg_sls_rgn.fn_get_tbl_nm(pkg_sls_rgn.c_prj_syn_nm, 'Y');
   l_prj_inactive_tbl    := pkg_sls_rgn.fn_get_tbl_nm(pkg_sls_rgn.c_prj_syn_nm, 'N');

   --Switch the active flags on the synonym table for projection tables
   pkg_sls_rgn.set_syn_tbl(l_prj_active_tbl, 'N');
   pkg_sls_rgn.set_syn_tbl(l_prj_inactive_tbl, 'Y');

   --Replace synonym
   l_return_code         := fn_crt_synonym(pkg_sls_rgn.c_prj_syn_nm, pkg_sls_rgn.c_schema_nm, l_prj_inactive_tbl);

   IF (l_return_code <> 0) THEN
      l_object_nm   := pkg_sls_rgn.c_prj_syn_nm;
      RAISE e_create_synonym;
   END IF;

   l_return_code         := usfdba.table_pkg.truncate_table(l_out_msg, pkg_sls_rgn.c_schema_nm, l_prj_active_tbl);

   IF (l_return_code <> 0) THEN
      l_object_nm   := l_prj_inactive_tbl;
      RAISE e_truncate_table;
   END IF;

   DBMS_OUTPUT.put_line('Previous active projection table: ' || l_prj_active_tbl);
   DBMS_OUTPUT.put_line('New active projection table: ' || l_prj_inactive_tbl);
   DBMS_OUTPUT.put_line('Truncated table: ' || l_prj_active_tbl);

   --Update fact table with odate to indicate succesful processing
   UPDATE xdmadm.fact_load_stat
      SET div_load_stat = 1,
			                    div_load_ts = TRUNC(odate),
													latest_prcs_dt = sysdate
    WHERE fact_table = pkg_sls_rgn.c_aggr_syn_nm;

   --If row in fact table was not updated then create the row
   IF (sql%ROWCOUNT = 0) THEN
      INSERT INTO xdmadm.fact_load_stat(fact_table, div_nbr, fact_table_dsply_nm, fact_typ_desc, latest_prcs_dt, div_load_stat, div_load_ts, prcs_dt, load_freq, rpt_dsply_ind)
          VALUES (pkg_sls_rgn.c_aggr_syn_nm,  0, 'EXECUTIVE VIEWS','EXECUTIVE VIEWS',sysdate,1, TRUNC(odate),TRUNC(odate) +1, 'DAILY', 'Y' ); --Use last closed day
   END IF;

   COMMIT;
   DBMS_OUTPUT.put_line('Previous active view: ' || l_active_vw);
   DBMS_OUTPUT.put_line('New active view: ' || l_inactive_vw);
   RETURN pkg_sls_rgn.c_success;
EXCEPTION
   WHEN e_create_synonym THEN
      DBMS_OUTPUT.put_line('Error Swapping Synonym: ' || l_object_nm || '. Requires manual update.');
      RETURN pkg_sls_rgn.c_error;
   WHEN e_truncate_table THEN
      DBMS_OUTPUT.put_line('Error Truncating Table: ' || l_object_nm || '. Requires manual update.');
      DBMS_OUTPUT.put_line(l_out_msg);
      RETURN pkg_sls_rgn.c_error;
   WHEN OTHERS THEN
      ROLLBACK;
      DBMS_OUTPUT.put_line('Unexpected Error In Synonym Swap Procedure. Requires manual update.');
      DBMS_OUTPUT.put_line(SQLCODE || ': ' || SQLERRM);
      RETURN pkg_sls_rgn.c_error;
END;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_CASES_AND_DOLLARS_TEMP_LOAD" (p_in_odate IN VARCHAR2)
   RETURN NUMBER IS
   /******************************************************************************
     NAME: XDMADM.FN_CASES_AND_DOLLARS_TEMP_LOAD
     TYPE: Function
     USAGE:XDMADM.FN_CASES_AND_DOLLARS_TEMP_LOAD (P_IN_ODATE )

     PURPOSE:  Function Inserts the  into CASES_AND_DOLLARS_TEMP

     REVISIONS:
     Ver        Date                    Description
     ---------  --------------------------------------------------

     1.         11/04/2013              Initial Development
     2.         07/21/2014              Updated to use USF fiscal calendar

    ******************************************************************************/

   /***************************
   * Variables declaration    *
   ****************************/
   v_const          NUMBER := 2;
   v_end_dt         DATE;
   v_strt_dt        DATE;
   v_odate          DATE := TO_DATE(p_in_odate, 'YYYYMMDD');
   v_param_date     DATE;
   v_prcs_stp       VARCHAR2(2000);
   v_ldr_tm         NUMBER(20);
   v_out_msg        VARCHAR2(256);

   v_dba_func_msg   VARCHAR2(2000) := 'oXo';
   dml_err_cnt      NUMBER;
   v_brnch_cd       VARCHAR2(5) := NULL;
   v_div_nbr        NUMBER(5) := NULL;

   l_start          NUMBER;
   l_end            NUMBER;
   v_table_owner    VARCHAR2(40) := 'XDMADM'; /*-- hardcoded value*/
   v_table_name1    VARCHAR2(40) := 'CASES_AND_DOLLARS_TEMP';
   v_table_name2    VARCHAR2(40) := 'DOLLARS_BY_PYR_SEG'; /*-- hardcoded value*/
   v_table_name3    VARCHAR2(40) := 'CASES_AND_RVNUE_BY_GL_ACCT'; /*-- hardcoded value*/
   v_truncate_tbl   NUMBER(3);

   CURSOR c_get_dts(p_strt_dt       DATE,
                    p_end_dt        DATE) IS
      SELECT fisc_mth_start_dt, fisc_mth_end_dt
        FROM xdmadm.prd_time_corp
       WHERE fisc_mth_start_dt BETWEEN p_strt_dt AND p_end_dt;
BEGIN
   -- Override odate with end date from param value table if it exists

   BEGIN
      SELECT param_value_dt
        INTO v_param_date
        FROM xdmadm.param_value
       WHERE app_name = 'HYP_PLANNING'
         AND param_type = 'MTH_EXTRACT'
         AND param_code = 'END_DATE';

      IF v_param_date IS NOT NULL THEN
         v_odate   := v_param_date;

         DBMS_OUTPUT.put_line('Override ODATE with param date: ' || TO_CHAR(v_param_date, 'DD-MON-YYYY'));
      END IF;
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
         NULL;
   END;

   ----Truncating Table 1.....

   BEGIN
      v_prcs_stp       := 'Truncating Table XDMADM.CASES_AND_DOLLARS_TEMP..... ';

      DBMS_OUTPUT.put_line('Truncating/Deleting records from CASES_AND_DOLLARS_TEMP');
      v_truncate_tbl   := usfdba.table_pkg.truncate_table(v_out_msg, v_table_owner, v_table_name1);
      DBMS_OUTPUT.put_line(v_out_msg);

      IF v_truncate_tbl != 0 THEN
         DBMS_OUTPUT.put_line('Error in Truncating the ' || v_table_name1 || ' table');
         RETURN 500;
      END IF;

      DBMS_OUTPUT.put_line('XDMADM.CASES_AND_DOLLARS_TEMP table truncated successfully');
   END;

   ----Truncating Table 2.....

   BEGIN
      v_prcs_stp       := 'Truncating Table XDMADM.DOLLARS_BY_PYR_SEG..... ';

      DBMS_OUTPUT.put_line('Truncating/Deleting records from DOLLARS_BY_PYR_SEG');
      v_truncate_tbl   := usfdba.table_pkg.truncate_table(v_out_msg, v_table_owner, v_table_name2);
      DBMS_OUTPUT.put_line(v_out_msg);

      IF v_truncate_tbl != 0 THEN
         DBMS_OUTPUT.put_line('Error in Truncating the ' || v_table_name2 || ' table');
         RETURN 500;
      END IF;

      DBMS_OUTPUT.put_line('XDMADM.DOLLARS_BY_PYR_SEG table truncated successfully');
   END;

   ----Truncating Table 3.....

   BEGIN
      v_prcs_stp       := 'Truncating Table XDMADM.CASES_AND_RVNUE_BY_GL_ACCT..... ';

      DBMS_OUTPUT.put_line('Truncating/Deleting records from CASES_AND_RVNUE_BY_GL_ACCT');
      v_truncate_tbl   := usfdba.table_pkg.truncate_table(v_out_msg, v_table_owner, v_table_name3);
      DBMS_OUTPUT.put_line(v_out_msg);

      IF v_truncate_tbl != 0 THEN
         DBMS_OUTPUT.put_line('Error in Truncating the ' || v_table_name3 || ' table');
         RETURN 500;
      END IF;

      DBMS_OUTPUT.put_line('XDMADM.CASES_AND_RVNUE_BY_GL_ACCT table truncated successfully');
   END;

   BEGIN
      v_prcs_stp   := 'GET THE VARIABLES ASSIGNED ';

      -- Retreive  Start and End Date

      -- MN - Change to USF Calendar
      /*
      SELECT MIN(clndr_dt)
        INTO v_strt_dt
        FROM xdmadm.time_corp
       WHERE fisc_yr IN (SELECT fisc_yr - v_const
                               FROM xdmadm.time_corp
                              WHERE clndr_dt = (SELECT clndr_dt_wkago
                                                  FROM xdmadm.time_corp
                                                 WHERE clndr_dt = v_odate));
    */
    SELECT MIN(clndr_dt)
        INTO v_strt_dt
        FROM xdmadm.time_corp
       WHERE fisc_yr IN (SELECT fisc_yr - (Select param_value_nbr FROM xdmadm.param_value
 WHERE app_name = 'HYP_PLANNING' and PARAM_TYPE = 'DATE_RANGE' and param_code = 'NOOFYRS'  )
                               FROM xdmadm.time_corp
                              WHERE clndr_dt = (SELECT clndr_dt_wkago
                                                  FROM xdmadm.time_corp
                                                 WHERE clndr_dt = v_odate));
      --- to get the end date . date of last closed fiscal week of the year

      -- MN - Change to USF Calendar
      SELECT MAX(clndr_dt)
        INTO v_end_dt
        FROM xdmadm.time_corp
       WHERE fisc_yr_wk = (SELECT fisc_yr_wk
                                 FROM xdmadm.time_corp
                                WHERE clndr_dt = (SELECT clndr_dt_wkago
                                                    FROM xdmadm.time_corp
                                                   WHERE clndr_dt = v_odate));

      DBMS_OUTPUT.put_line('Start Date is:' || v_strt_dt);
      DBMS_OUTPUT.put_line('End Date is:' || v_end_dt);
      DBMS_OUTPUT.put_line('Run Date is:' || v_odate);

      -- Get LDR_TM

      SELECT TO_NUMBER(TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')) INTO v_ldr_tm FROM DUAL;

      DBMS_OUTPUT.put_line('LDR_TM is :' || v_ldr_tm);
   EXCEPTION
      WHEN OTHERS THEN
         DBMS_OUTPUT.put_line('Error in v_prcs_stp : ' || v_prcs_stp);

         RETURN 900;
   END;

   --******************************************************************************
   --* INSERT INTO XDMADM.CASES_AND_DOLLARS_TEMP                                *
   --******************************************************************************
   BEGIN
      v_prcs_stp   := 'INSERT INTO table starts ';
      l_start      := DBMS_UTILITY.get_time;

      DBMS_OUTPUT.put_line('TIME ' || TO_CHAR(SYSDATE, 'yyyymmdd hh24:mi:ss'));

      FOR r_get_dts IN c_get_dts(v_strt_dt, v_end_dt) LOOP
         INSERT /*+ append */
               INTO xdmadm.cases_and_dollars_temp(sls_div_nbr, div_nbr, div_typ_cd, fisc_yr, fisc_mth_of_yr, pyr_seg_cd,
                                                  gl_acct_cd, cust_acctblty_flg, cust_natl_mngd_flg, delivered_type, unfrm_qty_ship, grs_sls_extnd,
                                                  dwa_cost_extnd, natl_one_tm, natl_prom_alwnc_pgms, loc_mrktng_alwnc_pgms, loc_one_tm, loc_prom_alwnc_pgms,
                                                  natl_mrktng_alwnc_pgms, rbt_loc_accrl_amt, rbt_natl_accrl_amt, rbt_loc_exp_amt, rbt_natl_exp_amt, loc_int_dvt,
                                                  loc_vndr_fnd_dvt, natl_int_dvt, natl_vndr_fnd_dvt, ttl_ac, ldr_tm)
            SELECT *
              FROM (  SELECT CASE WHEN d.div_typ_cd = 'CC' THEN NVL(s.sls_revenue_div_nbr, s.div_nbr) ELSE s.div_nbr END
                                sls_div_nbr,
                             s.div_nbr,
                             d.div_typ_cd,
                             t.fisc_yr,
                             t.fisc_mth_of_yr,
                             c.pyr_seg_cd,
                             CASE
                                WHEN (s.ar_gl_acct IN (SELECT DISTINCT param_value_chr
                                                         FROM xdmadm.param_value
                                                        WHERE app_name = 'HYP_PLANNING'
                                                          AND param_type LIKE '%AR_GL_ACCT_CD')) THEN
                                   CASE WHEN s.before_price_ac_ind <> 'Y' THEN s.ar_gl_acct ELSE NULL END
                                ELSE
                                   0
                             END
                                gl_acct_cd,
                             c.cust_acctblty_flg,
                             c.cust_natl_mngd_flg,
                             CASE WHEN NVL(s.sls_revenue_div_nbr, s.div_nbr) = s.div_nbr THEN 'Y' ELSE 'N' END
                                delivered_type,
                             SUM(unfrm_qty_ship) unfrm_qty_ship,
                             SUM(NVL(grs_sls_extnd, 0)) grs_sls_extnd,
                             SUM(NVL(dwa_cost_extnd, 0)) dwa_cost_extnd,
                             SUM(NVL(natl_one_tm, 0)) natl_one_tm,
                             SUM(NVL(natl_prom_alwnc_pgms, 0)) natl_prom_alwnc_pgms,
                             SUM(NVL(loc_mrktng_alwnc_pgms, 0)) loc_mrktng_alwnc_pgms,
                             SUM(NVL(loc_one_tm, 0)) loc_one_tm,
                             SUM(NVL(loc_prom_alwnc_pgms, 0)) loc_prom_alwnc_pgms,
                             SUM(NVL(natl_mrktng_alwnc_pgms, 0)) natl_mrktng_alwnc_pgms,
                             SUM(NVL(rbt_loc_accrl_amt, 0)) rbt_loc_accrl_amt,
                             SUM(NVL(rbt_natl_accrl_amt, 0)) rbt_natl_accrl_amt,
                             SUM(NVL(rbt_loc_exp_amt, 0)) rbt_loc_exp_amt,
                             SUM(NVL(rbt_natl_exp_amt, 0)) rbt_natl_exp_amt,
                             SUM(CASE WHEN s.trans_typ = 'AP' THEN loc_int_dvt ELSE 0 END) loc_int_dvt,
                             SUM(CASE WHEN s.trans_typ = 'AP' THEN loc_vndr_fnd_dvt ELSE 0 END) loc_vndr_fnd_dvt,
                             SUM(CASE WHEN s.trans_typ = 'AP' THEN natl_int_dvt ELSE 0 END) natl_int_dvt,
                             SUM(CASE WHEN s.trans_typ = 'AP' THEN natl_vndr_fnd_dvt ELSE 0 END) natl_vndr_fnd_dvt,
                             SUM(CASE
                                    WHEN s.ar_gl_acct IN (SELECT DISTINCT param_value_chr
                                                            FROM xdmadm.param_value
                                                           WHERE app_name = 'HYP_PLANNING'
                                                             AND param_type LIKE '%AR_GL_ACCT_CD') THEN
                                       CASE
                                          WHEN s.before_price_ac_ind <> 'Y' THEN
                                             (  (NVL(s.prod_alw, 0))
                                              + (NVL(s.prod_chrg, 0))
                                              + (NVL(s.non_prod_alwnc, 0))
                                              + (NVL(s.non_prod_chrg, 0)))
                                          ELSE
                                             0
                                       END
                                    ELSE
                                       0
                                 END)
                                ttl_ac,
                             v_ldr_tm
                        FROM xdmadm.sales_corp s,
                             xdmadm.cust_corp c,
                             xdmadm.div_corp d,
                             xdmadm.time_corp t,
                             xdmadm.pim_corp p
                       WHERE s.prcs_dt BETWEEN r_get_dts.fisc_mth_start_dt AND r_get_dts.fisc_mth_end_dt
                         AND s.prcs_dt <= v_end_dt
                         AND s.prcs_dt = t.clndr_dt
                         AND s.cust_nbr = c.cust_nbr
                         AND c.div_nbr = d.div_nbr
                         AND s.pim_usf_std_prod_cd = p.pim_usf_std_prod_cd
                         AND CASE
                                WHEN (NVL(s.sls_revenue_div_nbr, s.div_nbr) = 0) THEN s.div_nbr
                                ELSE NVL(s.sls_revenue_div_nbr, s.div_nbr)
                             END = d.div_nbr
                         AND d.conv_to_div_nbr IS NULL
                         AND s.xfer_to_dt IS NULL
                         AND c.trd_cls <> '2'
                         AND p.pim_suprcls_id <> 97
                    GROUP BY CASE
                                WHEN d.div_typ_cd = 'CC' THEN NVL(s.sls_revenue_div_nbr, s.div_nbr)
                                ELSE s.div_nbr
                             END,
                             s.div_nbr,
                             d.div_typ_cd,
                             t.fisc_yr,
                             t.fisc_mth_of_yr,
                             c.pyr_seg_cd,
                             CASE
                                WHEN (s.ar_gl_acct IN (SELECT DISTINCT param_value_chr
                                                         FROM xdmadm.param_value
                                                        WHERE app_name = 'HYP_PLANNING'
                                                          AND param_type LIKE '%AR_GL_ACCT_CD')) THEN
                                   CASE WHEN s.before_price_ac_ind <> 'Y' THEN s.ar_gl_acct ELSE NULL END
                                ELSE
                                   0
                             END,
                             c.cust_acctblty_flg,
                             c.cust_natl_mngd_flg,
                             CASE WHEN NVL(s.sls_revenue_div_nbr, s.div_nbr) = s.div_nbr THEN 'Y' ELSE 'N' END);

         DBMS_OUTPUT.put_line('NO OF ROWS INSERTED:' || sql%ROWCOUNT);

         COMMIT;
      END LOOP;

      l_end        := DBMS_UTILITY.get_time;

      DBMS_OUTPUT.put_line(ROUND((l_end - l_start) / 100, 2) || ' seconds...');
      COMMIT;
      RETURN 0;
   EXCEPTION
      WHEN OTHERS THEN
         DBMS_OUTPUT.put_line('Error in v_prcs_stp:' || v_prcs_stp || SQLCODE || SQLERRM);

         RETURN 701;
   END;
--******************************************************************************
--* Exception Handling                                                         *
--******************************************************************************

EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      DBMS_OUTPUT.put_line(SQLCODE);
      DBMS_OUTPUT.put_line(SQLERRM);

      DBMS_OUTPUT.put_line('Error in function FN_CASES_AND_DOLLARS_TEMP_LOAD');
      RETURN 600;
END fn_cases_and_dollars_temp_load;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_CASES_BY_GL_ACCT_LOAD_WK" (p_in_odate IN VARCHAR2)
   RETURN NUMBER IS
   /******************************************************************************
     NAME: XDMADM.FN_CASES_BY_GL_ACCT_LOAD_WK
     TYPE: Function
     USAGE:XDMADM.FN_CASES_BY_GL_ACCT_LOAD_WK (P_IN_ODATE )

     PURPOSE:  Function Inserts the  into CASES_AND_RVNUE_BY_GL_ACCT_WK

     REVISIONS:
     Ver        Date                    Description
     ---------  --------------------------------------------------

     1.         07/14/2014              Initial Development

    ******************************************************************************/

   /***************************
   * Variables declaration    *
   ****************************/



   v_const          NUMBER := 2;
   v_end_dt         DATE;
   v_strt_dt        DATE;
   v_odate          DATE := TO_DATE(p_in_odate, 'YYYYMMDD');
   v_prcs_stp       VARCHAR2(2000);
   v_ldr_tm         NUMBER(20);
   v_out_msg        VARCHAR2(256);

   v_dba_func_msg   VARCHAR2(2000) := 'oXo';
   dml_err_cnt      NUMBER;

   l_start          NUMBER;
   l_end            NUMBER;
   v_table_owner    VARCHAR2(40) := 'XDMADM'; /*-- hardcoded value*/
   v_table_name     VARCHAR2(40) := 'CASES_AND_RVNUE_BY_GL_ACCT_WK'; /*-- hardcoded value*/
   v_truncate_tbl   NUMBER(3);
BEGIN
   --******************************************************************************
   --* iNSERT INTO XDMADM.CASES_AND_RVNUE_BY_GL_ACCT                                 *
   --******************************************************************************
   BEGIN
      v_prcs_stp   := 'INSERT INTO table starts ';
      l_start      := DBMS_UTILITY.get_time;

      DBMS_OUTPUT.put_line('TIME ' || TO_CHAR(SYSDATE, 'yyyymmdd hh24:mi:ss'));

      INSERT /*+ append */
            INTO xdmadm.cases_and_rvnue_by_gl_acct_wk
         (  SELECT brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   fisc_wk_of_prd,
                   acct,
                   gl_account,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg,
                   ROUND(SUM(unfrm_qty_ship), 2) data_value
              FROM (SELECT x3.brnch_cd, --jc
                           x1.div_nbr,
                           x1.div_typ_cd,
                           x1.fisc_yr,
                           x1.fisc_mth_of_yr,
                           x1.fisc_wk_of_prd,
                           NVL(x2.pyr_seg_cd_actl, 'UNK') pyr_seg_cd,
                           x2.acct,
                           x1.sls_div_nbr,
                           CASE
                              WHEN x1.div_nbr = x1.sls_div_nbr
                               AND x1.div_typ_cd = 'CC'
                               AND x2.delivered_type = 'N' THEN
                                 '9010220'
                              ELSE
                                 x2.gl_account
                           END
                              gl_account,
                           x1.cust_acctblty_flg,
                           x1.cust_natl_mngd_flg,
                           x1.unfrm_qty_ship,
                           x2.descr,
                           x2.delivered_type
                      FROM       (  SELECT sls_div_nbr,
                                           div_nbr,
                                           div_typ_cd,
                                           fisc_yr,
                                           fisc_mth_of_yr,
                                           fisc_wk_of_prd,
                                           pyr_seg_cd,
                                           gl_acct_cd,
                                           cust_acctblty_flg,
                                           cust_natl_mngd_flg,
                                           delivered_type,
                                           SUM(unfrm_qty_ship) unfrm_qty_ship
                                      FROM xdmadm.cases_and_dollars_temp_wk
                                  GROUP BY sls_div_nbr,
                                           div_nbr,
                                           div_typ_cd,
                                           fisc_yr,
                                           fisc_mth_of_yr,
                                           fisc_wk_of_prd,
                                           pyr_seg_cd,
                                           gl_acct_cd,
                                           cust_acctblty_flg,
                                           cust_natl_mngd_flg,
                                           delivered_type) x1
                              LEFT OUTER JOIN
                                 xdmadm.gl_acct_by_pyr_seg x2
                              ON x1.pyr_seg_cd = x2.pyr_seg_cd_actl
                             AND x1.delivered_type = x2.delivered_type --jc
                           INNER JOIN
                              xdmadm.div_corp x3
                           ON x2.div_typ_cd = x3.div_typ_cd
                          AND NVL(x1.sls_div_nbr, x1.div_nbr) = x3.div_nbr)
          GROUP BY brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   fisc_wk_of_prd,
                   acct,
                   gl_account,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg);

      l_end        := DBMS_UTILITY.get_time;

      DBMS_OUTPUT.put_line('NO OF ROWS INSERTED:' || sql%ROWCOUNT);

      DBMS_OUTPUT.put_line(ROUND((l_end - l_start) / 100, 2) || ' seconds...');
      COMMIT;
      RETURN 0;
   EXCEPTION
      WHEN OTHERS THEN
         DBMS_OUTPUT.put_line('Error in v_prcs_stp:' || v_prcs_stp || SQLCODE || SQLERRM);

         RETURN 701;
   END;
--******************************************************************************
--* Exception Handling                                                         *
--******************************************************************************

EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      DBMS_OUTPUT.put_line(SQLCODE);
      DBMS_OUTPUT.put_line(SQLERRM);

      DBMS_OUTPUT.put_line('Error in function FN_CASES_BY_GL_ACCT_LOAD');
      RETURN 600;
END fn_cases_by_gl_acct_load_wk;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_PIM_CORP_AGGR_LOAD"
   RETURN NUMBER IS
   /***********************************************************************
    * Name: FN_PIM_CORP_AGGR_LOAD
    * Type: Function
    * Description: This function loads the PIM_CORP_AGGR table in XDMADM XIWPRD.
    *  REVISIONS:
    *  Ver        Date        Author             Description
    *  ---------  ----------  ---------------    -------------------------------
    *  1.0        04/29/2011  Corrie Kaczmarek   Created this procedure.
    *  1.1        06/04/2012  Matt Nicol         Added space for PIM superclass
    *  1.2        07/15/2013  Madhu Veerapaneni  1. Added code to use Active and
    *                                              Inactive tables for loading data.
    *                                            2. Modified to load from Sales Pyramid Agg
    *  1.3        03/19/2014  Madhu Veerapaneni  1. Added code to use Active and Inactive tables for loading data.
    *                                            2. Modified to load from Sales Pyramid Agg
    *  1.4        03/17/2014  Madhu Veerapaneni  Removed Dynamic SQL
    ************************************************************************/

   l_fn_start                   DATE;
   pim_corp_aggr_tbl_cnt        NUMBER := 0;
   v_pim_corp_cnt               NUMBER := 0;
   l_load_tbl_cnt               NUMBER := 0;
   l_return_code                NUMBER := 0;
   l_object_nm                  VARCHAR2(30);
   l_out_msg                    VARCHAR2(256);
   l_load_tbl_nm                VARCHAR2(30);

   c_success                 CONSTANT NUMBER := 0;
   c_error                   CONSTANT NUMBER := 1;
   c_schema                  CONSTANT VARCHAR2(30) := 'XDMADM';
   c_aggr_tbl_syn_nm         CONSTANT VARCHAR2(30) := 'PIM_CORP_AGGR';
   c_aggr_load_syn_nm        CONSTANT VARCHAR2(30) := 'PIM_CORP_AGGR_LOAD';


   all_exceptions exception; /*User Define Exception*/
   e_truncate_table exception;
   e_analyze_table exception;
   e_syn exception;
BEGIN


 ---- **************** Truncate the table before load  **************** -----

   EXECUTE IMMEDIATE 'SELECT table_name FROM user_synonyms WHERE synonym_name = ''' || c_aggr_load_syn_nm || ''''
      INTO l_load_tbl_nm;

-- Check if the main synonym is pointing to the load table to be loaded and raise exception

   IF (c_aggr_tbl_syn_nm = l_load_tbl_nm) THEN
      RAISE e_syn;
   END IF;

      --Check if data exists in aggregate table and truncate if so
   EXECUTE IMMEDIATE 'SELECT count(1) FROM ' || l_load_tbl_nm INTO l_load_tbl_cnt;

   IF (l_load_tbl_cnt > 0) THEN
      DBMS_OUTPUT.put_line('Load aggregate table has ' || l_load_tbl_nm || ' records in it');

      l_return_code   := usfdba.table_pkg.truncate_table(l_out_msg, c_schema, l_load_tbl_nm);

      DBMS_OUTPUT.put_line('Truncate table Return: ' || l_return_code || ' - ' || l_out_msg);

      IF (l_return_code <> 0) THEN
         l_object_nm   := l_load_tbl_nm;
         RAISE e_truncate_table;
      END IF;

      DBMS_OUTPUT.put_line('Load aggregate table ' || l_load_tbl_nm ||' truncated');

   END IF;

   ---- ************* End Truncate the table before load  **************** -----

   ---- ************* Load the Sales Pyramid Aggregate table ************* -----

    l_fn_start       := SYSDATE;

 /*  Count the number of Distinct rows from sls pyr agg for Pim attributes. */
    SELECT COUNT(1) INTO v_pim_corp_cnt
    FROM (
         SELECT   DISTINCT
                  a.pim_cls_id,
                  a.pim_suprcls_id_crnt,
                  a.pim_brnd_typ
    FROM   xdmadm.SALES_SUMM_MRCH_AGGR_LOAD a) ;

   DBMS_OUTPUT.put_line('Distinct PIM attributes in the Sales Pyramid Agg: '||v_pim_corp_cnt );

   DBMS_OUTPUT.put_line('Inserting Rows into PIM_CORP_AGGR_LOAD');

         INSERT INTO PIM_CORP_AGGR_LOAD (
                             pim_cls_id,
                             pim_cls_desc,
                             pim_cls_desc_id,
                             pim_suprcls_id,
                             pim_suprcls_desc,
                             pim_suprcls_desc_id,
                             pim_brnd_typ,
                             pim_brnd_typ_desc)
        SELECT DISTINCT
                             pim_cls_id,
                             pim_cls_desc,
                             pim_cls_desc_id,
                             pim_suprcls_id_crnt,
                             pim_suprcls_desc,
                             pim_suprcls_desc_id,
                             pim_brnd_typ,
                             pim_brnd_typ_desc
        FROM
             xdmadm.SALES_SUMM_MRCH_AGGR_LOAD agg;

         DBMS_OUTPUT.put_line(
             'Inserted ' || sql%ROWCOUNT || ' rows in ' || sql%ROWCOUNT || TO_CHAR(ROUND((SYSDATE - l_fn_start) * 86400)) || ' seconds');

        COMMIT;

   /*  Count the number of rows inserted into pim_corp_aggr */
  SELECT count(1) INTO pim_corp_aggr_tbl_cnt FROM PIM_CORP_AGGR_LOAD;
 DBMS_OUTPUT.put_line('Number of records inserted into PIM_CORP_AGGR_LOAD is ' || pim_corp_aggr_tbl_cnt);


 --Analyze TABLE

   DBMS_OUTPUT.put_line('Analyze the Load aggregate table ' || l_load_tbl_nm);
   l_return_code    := xdmadm.fn_getstat_tbl(c_schema, l_load_tbl_nm);

   IF (l_return_code <> 0) THEN
      l_object_nm   := l_load_tbl_nm;
      RAISE e_analyze_table;
   END IF;


 /* The number of distinct PIM attributes in sales pyrmaid should match the number of rows inserted into pim_corp_aggr */
 -- Return 1 if counts do not match.
    If v_pim_corp_cnt = pim_corp_aggr_tbl_cnt
       THEN
       DBMS_OUTPUT.PUT_LINE('Distinct record count match the number of records inserted into PIM_CORP_AGGR_LOAD.');
       RETURN 0;
       ELSE
       DBMS_OUTPUT.PUT_LINE('Distinct record count does not match the number of records inserted into PIM_CORP_AGGR_LOAD.');
       RETURN 1;
       END IF;
EXCEPTION
   WHEN e_syn THEN
      DBMS_OUTPUT.put_line(
         'Synonym currently points to Load table: ' || c_aggr_load_syn_nm || '. Requires manual update.');
      DBMS_OUTPUT.put_line('Verify the ' ||c_aggr_load_syn_nm|| ' and ' ||c_aggr_load_syn_nm|| ' synonyms');
      RETURN pkg_sls_pyr.c_error;
   WHEN e_truncate_table THEN
      DBMS_OUTPUT.put_line('Error Truncating Table: ' || l_load_tbl_nm || '. Requires manual update.');
      DBMS_OUTPUT.put_line('Verify '||l_load_tbl_nm||' table has any records');
      DBMS_OUTPUT.put_line(l_out_msg);
      RETURN pkg_sls_pyr.c_error;
   WHEN e_analyze_table THEN
      DBMS_OUTPUT.put_line('Error Analyzing Table: ' || l_load_tbl_nm || '. Requires manual update.');
      DBMS_OUTPUT.put_line(l_out_msg);
      RETURN pkg_sls_pyr.c_error;
   WHEN OTHERS THEN
      DBMS_OUTPUT.put_line('Error in XDMADM.PIM_CORP_AGGR:' || SQLCODE || ' ' || SQLERRM);
      RETURN 1;
END;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_PYR_SLS_AGGR_LOAD" (
   odate          IN DATE,
   p_start_date   IN DATE DEFAULT NULL ,
   p_prev_years   IN NUMBER DEFAULT NULL
)
   RETURN NUMBER
AS
   /*******************************************************************************
       * Name: FN_PYR_SLS_AGGR_LOAD
       * Type: Function
       * Description: Populate sales pyramid aggregate table in XDMADM.
       *  REVISIONS:
       *  Ver        Date        Author             Description
       *  ---------  ----------  ---------------    -----------------------------
       *  1.0        07/09/2013  Madhu Veerapaneni  Re Created this function.
       *  1.1        08/05/2013  Madhu Veerapaneni  Changed the Column Mapping for
       *                                            Investment Spend Columns
       *                                           (The columms in Sales pyr Agg -  ttl_int_vndr_fnd_dvt,comm_bsis_amt_extnd and dond
       *                                            are used for the Investment Spend calc and should have the credits excluded and
       *                                            should mapped to the Investment Spend columns in the Merchandising Aggregate table -
       *                                            ttl_int_vndr_fnd_dvt_IS, comm_bsis_amt_extnd_IS, and dond_IS
       *                                            Though these columns in Sales Pyr Agg are not suffixed with "_IS" referring to Inv. spend
       *                                            the value for these columns is expected to have the Inv spend version
       *                                            In future, the sales Pyramid table should have 3 additional columns for these metrics
       *                                            suffixed as '_IS " as in the Merch agg and that should be mapped to the "_IS" columns
       *                                            in Merch Agg and the existing metrics without the "suffix - "_IS" should be remapped to
       *                                            measures from the Base table (Non IS version wihtout excluding credits) )
       *  1.2        03/12/2014  Madhu Veerapaneni  Made the changes below:
       *                                            > Remove dynamic SQL
       *                                            > Replaced load to synonym
       *                                            > Removed prj flg and acct typ cd
       * 1.3        10/06/2015  p1a0168            Modified for Acquisition
       * 1.4        03/14/2017  p1a0168            Modified for Acquisition R3
   *******************************************************************************/
   l_start_date                  DATE;
   l_fn_start                    DATE;
   l_load_tbl_cnt                NUMBER := 0;
   l_insert_cnt                  NUMBER;
   v_parm_dt                     DATE;
   v_ly_fisc_yr_wk               VARCHAR2 (06);
   v_ly_day_of_wk                NUMBER (1);
   v_cy_fisc_yr_wk               VARCHAR2 (06);
   v_cy_day_of_wk                NUMBER (1);

   c_success CONSTANT            NUMBER := 0;
   c_error CONSTANT              NUMBER := 1;
   c_schema CONSTANT             VARCHAR2 (30) := 'XDMADM';
   c_aggr_tbl_syn_nm CONSTANT    VARCHAR2 (30) := 'SALES_SUMM_PYR_WKLY';
   c_aggr_load_syn_nm CONSTANT   VARCHAR2 (30) := 'SALES_SUMM_PYR_WKLY_LOAD';

   l_load_tbl_nm                 VARCHAR2 (30);
   l_object_nm                   VARCHAR2 (30);
   l_return_code                 NUMBER;
   l_out_msg                     VARCHAR2 (256);

   v_base_cases_cnt              NUMBER;
   v_base_sales                  NUMBER;
   v_aggr_cases_cnt              NUMBER;
   v_aggr_sales                  NUMBER;
   e_truncate_table exception;
   e_analyze_table exception;
   e_syn exception;
   e_lookup_range exception;
BEGIN
   v_parm_dt := TRUNC (odate);

   -- Get day of current Fiscal Week

   SELECT   fisc_yr_wk, clndr_day_of_wk
     INTO   v_cy_fisc_yr_wk, v_cy_day_of_wk
     FROM   xdmadm.time_corp
    WHERE   clndr_dt = v_parm_dt;

   -- Get Last year Fiscal Week

   SELECT   tc.fisc_yr_wk, tc.clndr_day_of_wk
     INTO   v_ly_fisc_yr_wk, v_ly_day_of_wk
     FROM   xdmadm.time_corp tc, xdmadm.time_corp tc2
    WHERE   tc.tm_sk = tc2.tm_sk_yrago AND tc2.clndr_dt = v_parm_dt;

   DBMS_OUTPUT.put_line ('Current Fiscal year week:' || v_cy_fisc_yr_wk);
   DBMS_OUTPUT.put_line ('Last Fiscal year week:' || v_ly_fisc_yr_wk);
   DBMS_OUTPUT.put_line (
      'Day of current Fiscal year week:' || v_cy_day_of_wk
   );
   DBMS_OUTPUT.put_line ('ODate:' || v_parm_dt);


 ---- **************** Truncate the table before load  **************** -----

   EXECUTE IMMEDIATE 'SELECT table_name FROM user_synonyms WHERE synonym_name = ''' || c_aggr_load_syn_nm || ''''
      INTO l_load_tbl_nm;

-- Check if the main synonym is pointing to the load table to be loaded and raise exception

   IF (c_aggr_tbl_syn_nm = l_load_tbl_nm) THEN
      RAISE e_syn;
   END IF;

      --Check if data exists in aggregate table and truncate if so
   EXECUTE IMMEDIATE 'SELECT count(1) FROM ' || l_load_tbl_nm INTO l_load_tbl_cnt;

   IF (l_load_tbl_cnt > 0) THEN
      DBMS_OUTPUT.put_line('Load aggregate table has ' || l_load_tbl_nm || ' records in it');

      l_return_code   := usfdba.table_pkg.truncate_table(l_out_msg, c_schema, l_load_tbl_nm);

      DBMS_OUTPUT.put_line('Truncate table Return: ' || l_return_code || ' - ' || l_out_msg);

      IF (l_return_code <> 0) THEN
         l_object_nm   := l_load_tbl_nm;
         RAISE e_truncate_table;
      END IF;

      DBMS_OUTPUT.put_line('Load aggregate table ' || l_load_tbl_nm ||' truncated');

   END IF;

   ---- ************* End Truncate the table before load  **************** -----

   ---- ************* Load the Sales Pyramid Aggregate table ************* -----

   l_fn_start := SYSDATE;

--- Load all recs except Last Year Week

   IF v_cy_day_of_wk <> 7
   THEN
         INSERT /*+ append */ INTO xdmadm.SALES_SUMM_PYR_WKLY_LOAD
                    ( div_nbr,
                      fisc_yr_wk,
                      ly_wtd,
                      pim_cls_id,
                      pim_suprcls_id_crnt,
                      pim_suprcls_id_actl,
                      trd_cls,
                      pyr_seg_cd,
                      corp_mlt_unit_nbr,
                      prnt_mlt_unit_cd,
                      pim_brnd_typ,
                      cust_cntrct_flg,
                      cust_natl_mngd_flg,
                      sls_revenue_div_nbr,
                      cust_acctblty_flg,
                      grs_sls_extnd,
                      unfrm_qty_ship,
                      actl_gp,
                      ttl_alwnc,
                      grs_tgp,
                      net_sls,
                      net_tgp,
                      dwa_cost_extnd,
                      rbt_loc_accrl_amt,
                      rbt_natl_accrl_amt,
                      rbt_loc_exp_amt,
                      rbt_natl_exp_amt,
                      ttl_int_vndr_fnd_dvt,
                      comm_bsis_amt_extnd,
                      dond,
                      ttl_vndr_fnd_dvt,
                      fixed_sell,
                      n_prime_sis,
                      prc_apprvl,
                      dwo,
                      invst_cs_prtcpt,
                      net_non_prod_chrg,
                      net_prod_chrg,
                      net_non_prod_alwnc,
                      net_prod_alwnc,
                      usf_gl_ind,
                      cust_acqstn_stat_crnt,
                      cust_acqstn_stat_actl,
                      cust_acqstn_div_nbr,
                      cust_acqstn_conv_ind_ty,
                      cust_acqstn_conv_ind_ly,
                      cust_acqstn_orgnc_ind_ty,
                      cust_acqstn_orgnc_ind_ly)
         (  SELECT   div_nbr,
                     fisc_yr_wk,
                     ly_wtd,
                     pim_cls_id,
                     pim_suprcls_id_crnt,
                     pim_suprcls_id_actl,
                     trd_cls,
                     pyr_seg_cd,
                     corp_mlt_unit_nbr,
                     prnt_mlt_unit_cd,
                     pim_brnd_typ,
                     cust_cntrct_flg,
                     cust_natl_mngd_flg,
                     sls_revenue_div_nbr,
                     cust_acctblty_flg,
                     SUM (grs_sls_extnd) grs_sls_extnd,
                     SUM (unfrm_qty_ship) unfrm_qty_ship,
                     SUM (actl_gp) actl_gp,
                     SUM (ttl_alwnc) ttl_alwnc,
                     SUM (grs_tgp) grs_tgp,
                     SUM (net_sls) net_sls,
                     SUM (net_tgp) net_tgp,
                     SUM (dwa_cost_extnd) dwa_cost_extnd,
                     SUM (rbt_loc_accrl_amt) rbt_loc_accrl_amt,
                     SUM (rbt_natl_accrl_amt) rbt_natl_accrl_amt,
                     SUM (rbt_loc_exp_amt) rbt_loc_exp_amt,
                     SUM (rbt_natl_exp_amt) rbt_natl_exp_amt,
                     SUM (ttl_int_vndr_fnd_dvt_IS) ttl_int_vndr_fnd_dvt,  -- Check comments on Change version - 1.1
                     SUM (comm_bsis_amt_extnd_IS) comm_bsis_amt_extnd,    -- Check comments on Change version - 1.1
                     SUM (dond_IS) dond,                                  -- Check comments on Change version - 1.1
                     SUM (ttl_vndr_fnd_dvt) ttl_vndr_fnd_dvt,
                     SUM (fixed_sell) fixed_sell,
                     SUM (n_prime_sis) n_prime_sis,
                     SUM (prc_apprvl) prc_apprvl,
                     SUM (dwo) dwo,
                     SUM (invst_cs_prtcpt) invst_cs_prtcpt,
                     SUM (net_non_prod_chrg) net_non_prod_chrg,
                     SUM (net_prod_chrg) net_prod_chrg,
                     SUM (net_non_prod_alwnc) net_non_prod_alwnc,
                     SUM (net_prod_alwnc) net_prod_alwnc,
                     usf_gl_ind,
                     cust_acqstn_stat_crnt,
                     cust_acqstn_stat_actl,
                     cust_acqstn_div_nbr,
                     cust_acqstn_conv_ind_ty,
                     cust_acqstn_conv_ind_ly,
                     cust_acqstn_orgnc_ind_ty,
                     cust_acqstn_orgnc_ind_ly
              FROM   xdmadm.SALES_SUMM_MRCH_AGGR_LOAD
             WHERE   FISC_YR_WK <> v_ly_fisc_yr_wk
          GROUP BY   div_nbr,
                     fisc_yr_wk,
                     ly_wtd,
                     pim_cls_id,
                     pim_suprcls_id_crnt,
                     pim_suprcls_id_actl,
                     trd_cls,
                     pyr_seg_cd,
                     corp_mlt_unit_nbr,
                     prnt_mlt_unit_cd,
                     pim_brnd_typ,
                     cust_cntrct_flg,
                     cust_natl_mngd_flg,
                     sls_revenue_div_nbr,
                     cust_acctblty_flg,
                     usf_gl_ind,
                     cust_acqstn_stat_crnt,
                     cust_acqstn_stat_actl,
                     cust_acqstn_div_nbr,
                     cust_acqstn_conv_ind_ty,
                     cust_acqstn_conv_ind_ly,
                     cust_acqstn_orgnc_ind_ty,
                     cust_acqstn_orgnc_ind_ly);

      COMMIT;

--- Load Last year partial week with LY_WTD = 'Y'

      INSERT /*+ append */ INTO xdmadm.SALES_SUMM_PYR_WKLY_LOAD
                    ( div_nbr,
                      fisc_yr_wk,
                      ly_wtd,
                      pim_cls_id,
                      pim_suprcls_id_crnt,
                      pim_suprcls_id_actl,
                      trd_cls,
                      pyr_seg_cd,
                      corp_mlt_unit_nbr,
                      prnt_mlt_unit_cd,
                      pim_brnd_typ,
                      cust_cntrct_flg,
                      cust_natl_mngd_flg,
                      sls_revenue_div_nbr,
                      cust_acctblty_flg,
                      grs_sls_extnd,
                      unfrm_qty_ship,
                      actl_gp,
                      ttl_alwnc,
                      grs_tgp,
                      net_sls,
                      net_tgp,
                      dwa_cost_extnd,
                      rbt_loc_accrl_amt,
                      rbt_natl_accrl_amt,
                      rbt_loc_exp_amt,
                      rbt_natl_exp_amt,
                      ttl_int_vndr_fnd_dvt,
                      comm_bsis_amt_extnd,
                      dond,
                      ttl_vndr_fnd_dvt,
                      fixed_sell,
                      n_prime_sis,
                      prc_apprvl,
                      dwo,
                      invst_cs_prtcpt,
                      net_non_prod_chrg,
                      net_prod_chrg,
                      net_non_prod_alwnc,
                      net_prod_alwnc,
                      usf_gl_ind,
                      cust_acqstn_stat_crnt,
                      cust_acqstn_stat_actl,
                      cust_acqstn_div_nbr,
                      cust_acqstn_conv_ind_ty,
                      cust_acqstn_conv_ind_ly,
                      cust_acqstn_orgnc_ind_ty,
                      cust_acqstn_orgnc_ind_ly)
         (  SELECT   div_nbr,
                     fisc_yr_wk,
                     ly_wtd,
                     pim_cls_id,
                     pim_suprcls_id_crnt,
                     pim_suprcls_id_actl,
                     trd_cls,
                     pyr_seg_cd,
                     corp_mlt_unit_nbr,
                     prnt_mlt_unit_cd,
                     pim_brnd_typ,
                     cust_cntrct_flg,
                     cust_natl_mngd_flg,
                     sls_revenue_div_nbr,
                     cust_acctblty_flg,
                     SUM (grs_sls_extnd) grs_sls_extnd,
                     SUM (unfrm_qty_ship) unfrm_qty_ship,
                     SUM (actl_gp) actl_gp,
                     SUM (ttl_alwnc) ttl_alwnc,
                     SUM (grs_tgp) grs_tgp,
                     SUM (net_sls) net_sls,
                     SUM (net_tgp) net_tgp,
                     SUM (dwa_cost_extnd) dwa_cost_extnd,
                     SUM (rbt_loc_accrl_amt) rbt_loc_accrl_amt,
                     SUM (rbt_natl_accrl_amt) rbt_natl_accrl_amt,
                     SUM (rbt_loc_exp_amt) rbt_loc_exp_amt,
                     SUM (rbt_natl_exp_amt) rbt_natl_exp_amt,
                     SUM (ttl_int_vndr_fnd_dvt_IS) ttl_int_vndr_fnd_dvt,  -- Check comments on Change version - 1.1
                     SUM (comm_bsis_amt_extnd_IS) comm_bsis_amt_extnd,    -- Check comments on Change version - 1.1
                     SUM (dond_IS) dond,                                  -- Check comments on Change version - 1.1
                     SUM (ttl_vndr_fnd_dvt) ttl_vndr_fnd_dvt,
                     SUM (fixed_sell) fixed_sell,
                     SUM (n_prime_sis) n_prime_sis,
                     SUM (prc_apprvl) prc_apprvl,
                     SUM (dwo) dwo,
                     SUM (invst_cs_prtcpt) invst_cs_prtcpt,
                     SUM (net_non_prod_chrg) net_non_prod_chrg,
                     SUM (net_prod_chrg) net_prod_chrg,
                     SUM (net_non_prod_alwnc) net_non_prod_alwnc,
                     SUM (net_prod_alwnc) net_prod_alwnc,
                     usf_gl_ind,
                     cust_acqstn_stat_crnt,
                     cust_acqstn_stat_actl,
                     cust_acqstn_div_nbr,
                     cust_acqstn_conv_ind_ty,
                     cust_acqstn_conv_ind_ly,
                     cust_acqstn_orgnc_ind_ty,
                     cust_acqstn_orgnc_ind_ly
              FROM   xdmadm.SALES_SUMM_MRCH_AGGR_LOAD
             WHERE   LY_WTD = 'Y' and FISC_YR_WK = v_ly_fisc_yr_wk
          GROUP BY   div_nbr,
                     fisc_yr_wk,
                     ly_wtd,
                     pim_cls_id,
                     pim_suprcls_id_crnt,
                     pim_suprcls_id_actl,
                     trd_cls,
                     pyr_seg_cd,
                     corp_mlt_unit_nbr,
                     prnt_mlt_unit_cd,
                     pim_brnd_typ,
                     cust_cntrct_flg,
                     cust_natl_mngd_flg,
                     sls_revenue_div_nbr,
                     cust_acctblty_flg,
                     usf_gl_ind,
                     cust_acqstn_stat_crnt,
                     cust_acqstn_stat_actl,
                     cust_acqstn_div_nbr,
                      cust_acqstn_conv_ind_ty,
                      cust_acqstn_conv_ind_ly,
                      cust_acqstn_orgnc_ind_ty,
                      cust_acqstn_orgnc_ind_ly);

COMMIT;

--- Load Last year partial week with LY_WTD = 'N'

      INSERT /*+ append */ INTO xdmadm.SALES_SUMM_PYR_WKLY_LOAD
                    ( div_nbr,
                      fisc_yr_wk,
                      ly_wtd,
                      pim_cls_id,
                      pim_suprcls_id_crnt,
                      pim_suprcls_id_actl,
                      trd_cls,
                      pyr_seg_cd,
                      corp_mlt_unit_nbr,
                      prnt_mlt_unit_cd,
                      pim_brnd_typ,
                      cust_cntrct_flg,
                      cust_natl_mngd_flg,
                      sls_revenue_div_nbr,
                      cust_acctblty_flg,
                      grs_sls_extnd,
                      unfrm_qty_ship,
                      actl_gp,
                      ttl_alwnc,
                      grs_tgp,
                      net_sls,
                      net_tgp,
                      dwa_cost_extnd,
                      rbt_loc_accrl_amt,
                      rbt_natl_accrl_amt,
                      rbt_loc_exp_amt,
                      rbt_natl_exp_amt,
                      ttl_int_vndr_fnd_dvt,
                      comm_bsis_amt_extnd,
                      dond,
                      ttl_vndr_fnd_dvt,
                      fixed_sell,
                      n_prime_sis,
                      prc_apprvl,
                      dwo,
                      invst_cs_prtcpt,
                      net_non_prod_chrg,
                      net_prod_chrg,
                      net_non_prod_alwnc,
                      net_prod_alwnc,
                      usf_gl_ind,
                      cust_acqstn_stat_crnt,
                      cust_acqstn_stat_actl,
                      cust_acqstn_div_nbr,
                      cust_acqstn_conv_ind_ty,
                      cust_acqstn_conv_ind_ly,
                      cust_acqstn_orgnc_ind_ty,
                      cust_acqstn_orgnc_ind_ly)
         (  SELECT   div_nbr,
                     fisc_yr_wk,
                     'N' ly_wtd,
                     pim_cls_id,
                     pim_suprcls_id_crnt,
                     pim_suprcls_id_actl,
                     trd_cls,
                     pyr_seg_cd,
                     corp_mlt_unit_nbr,
                     prnt_mlt_unit_cd,
                     pim_brnd_typ,
                     cust_cntrct_flg,
                     cust_natl_mngd_flg,
                     sls_revenue_div_nbr,
                     cust_acctblty_flg,
                     SUM (grs_sls_extnd) grs_sls_extnd,
                     SUM (unfrm_qty_ship) unfrm_qty_ship,
                     SUM (actl_gp) actl_gp,
                     SUM (ttl_alwnc) ttl_alwnc,
                     SUM (grs_tgp) grs_tgp,
                     SUM (net_sls) net_sls,
                     SUM (net_tgp) net_tgp,
                     SUM (dwa_cost_extnd) dwa_cost_extnd,
                     SUM (rbt_loc_accrl_amt) rbt_loc_accrl_amt,
                     SUM (rbt_natl_accrl_amt) rbt_natl_accrl_amt,
                     SUM (rbt_loc_exp_amt) rbt_loc_exp_amt,
                     SUM (rbt_natl_exp_amt) rbt_natl_exp_amt,
                     SUM (ttl_int_vndr_fnd_dvt_IS) ttl_int_vndr_fnd_dvt,  -- Check comments on Change version - 1.1
                     SUM (comm_bsis_amt_extnd_IS) comm_bsis_amt_extnd,    -- Check comments on Change version - 1.1
                     SUM (dond_IS) dond,                                  -- Check comments on Change version - 1.1
                     SUM (ttl_vndr_fnd_dvt) ttl_vndr_fnd_dvt,
                     SUM (fixed_sell) fixed_sell,
                     SUM (n_prime_sis) n_prime_sis,
                     SUM (prc_apprvl) prc_apprvl,
                     SUM (dwo) dwo,
                     SUM (invst_cs_prtcpt) invst_cs_prtcpt,
                     SUM (net_non_prod_chrg) net_non_prod_chrg,
                     SUM (net_prod_chrg) net_prod_chrg,
                     SUM (net_non_prod_alwnc) net_non_prod_alwnc,
                     SUM (net_prod_alwnc) net_prod_alwnc,
                      usf_gl_ind,
                      cust_acqstn_stat_crnt,
                      cust_acqstn_stat_actl,
                      cust_acqstn_div_nbr,
                      cust_acqstn_conv_ind_ty,
                      cust_acqstn_conv_ind_ly,
                      cust_acqstn_orgnc_ind_ty,
                      cust_acqstn_orgnc_ind_ly
              FROM   xdmadm.SALES_SUMM_MRCH_AGGR_LOAD
             WHERE   FISC_YR_WK = v_ly_fisc_yr_wk
          GROUP BY   div_nbr,
                     fisc_yr_wk,
                     'N',--ly_wtd,
                     pim_cls_id,
                     pim_suprcls_id_crnt,
                     pim_suprcls_id_actl,
                     trd_cls,
                     pyr_seg_cd,
                     corp_mlt_unit_nbr,
                     prnt_mlt_unit_cd,
                     pim_brnd_typ,
                     cust_cntrct_flg,
                     cust_natl_mngd_flg,
                     sls_revenue_div_nbr,
                     cust_acctblty_flg,
                      usf_gl_ind,
                      cust_acqstn_stat_crnt,
                      cust_acqstn_stat_actl,
                      cust_acqstn_div_nbr,
                      cust_acqstn_conv_ind_ty,
                      cust_acqstn_conv_ind_ly,
                      cust_acqstn_orgnc_ind_ty,
                      cust_acqstn_orgnc_ind_ly);
COMMIT;

--- Load Last year partial week with LY_WTD = 'N'

      INSERT /*+ append */ INTO xdmadm.SALES_SUMM_PYR_WKLY_LOAD
                    ( div_nbr,
                      fisc_yr_wk,
                      ly_wtd,
                      pim_cls_id,
                      pim_suprcls_id_crnt,
                      pim_suprcls_id_actl,
                      trd_cls,
                      pyr_seg_cd,
                      corp_mlt_unit_nbr,
                      prnt_mlt_unit_cd,
                      pim_brnd_typ,
                      cust_cntrct_flg,
                      cust_natl_mngd_flg,
                      sls_revenue_div_nbr,
                      cust_acctblty_flg,
                      grs_sls_extnd,
                      unfrm_qty_ship,
                      actl_gp,
                      ttl_alwnc,
                      grs_tgp,
                      net_sls,
                      net_tgp,
                      dwa_cost_extnd,
                      rbt_loc_accrl_amt,
                      rbt_natl_accrl_amt,
                      rbt_loc_exp_amt,
                      rbt_natl_exp_amt,
                      ttl_int_vndr_fnd_dvt,
                      comm_bsis_amt_extnd,
                      dond,
                      ttl_vndr_fnd_dvt,
                      fixed_sell,
                      n_prime_sis,
                      prc_apprvl,
                      dwo,
                      invst_cs_prtcpt,
                      net_non_prod_chrg,
                      net_prod_chrg,
                      net_non_prod_alwnc,
                      net_prod_alwnc,
                      usf_gl_ind,
                      cust_acqstn_stat_crnt,
                      cust_acqstn_stat_actl,
                      cust_acqstn_div_nbr,
                      cust_acqstn_conv_ind_ty,
                      cust_acqstn_conv_ind_ly,
                      cust_acqstn_orgnc_ind_ty,
                      cust_acqstn_orgnc_ind_ly)
         (  SELECT   div_nbr,
                     fisc_yr_wk,
                     'N' ly_wtd,
                     pim_cls_id,
                     pim_suprcls_id_crnt,
                     pim_suprcls_id_actl,
                     trd_cls,
                     pyr_seg_cd,
                     corp_mlt_unit_nbr,
                     prnt_mlt_unit_cd,
                     pim_brnd_typ,
                     cust_cntrct_flg,
                     cust_natl_mngd_flg,
                     sls_revenue_div_nbr,
                     cust_acctblty_flg,
                     SUM (grs_sls_extnd) grs_sls_extnd,
                     SUM (unfrm_qty_ship) unfrm_qty_ship,
                     SUM (actl_gp) actl_gp,
                     SUM (ttl_alwnc) ttl_alwnc,
                     SUM (grs_tgp) grs_tgp,
                     SUM (net_sls) net_sls,
                     SUM (net_tgp) net_tgp,
                     SUM (dwa_cost_extnd) dwa_cost_extnd,
                     SUM (rbt_loc_accrl_amt) rbt_loc_accrl_amt,
                     SUM (rbt_natl_accrl_amt) rbt_natl_accrl_amt,
                     SUM (rbt_loc_exp_amt) rbt_loc_exp_amt,
                     SUM (rbt_natl_exp_amt) rbt_natl_exp_amt,
                     SUM (ttl_int_vndr_fnd_dvt_IS) ttl_int_vndr_fnd_dvt,  -- Check comments on Change version - 1.1
                     SUM (comm_bsis_amt_extnd_IS) comm_bsis_amt_extnd,    -- Check comments on Change version - 1.1
                     SUM (dond_IS) dond,                                  -- Check comments on Change version - 1.1
                     SUM (ttl_vndr_fnd_dvt) ttl_vndr_fnd_dvt,
                     SUM (fixed_sell) fixed_sell,
                     SUM (n_prime_sis) n_prime_sis,
                     SUM (prc_apprvl) prc_apprvl,
                     SUM (dwo) dwo,
                     SUM (invst_cs_prtcpt) invst_cs_prtcpt,
                     SUM (net_non_prod_chrg) net_non_prod_chrg,
                     SUM (net_prod_chrg) net_prod_chrg,
                     SUM (net_non_prod_alwnc) net_non_prod_alwnc,
                     SUM (net_prod_alwnc) net_prod_alwnc,
                      usf_gl_ind,
                      cust_acqstn_stat_crnt,
                      cust_acqstn_stat_actl,
                      cust_acqstn_div_nbr,
                      cust_acqstn_conv_ind_ty,
                      cust_acqstn_conv_ind_ly,
                      cust_acqstn_orgnc_ind_ty,
                      cust_acqstn_orgnc_ind_ly
              FROM   xdmadm.SALES_SUMM_MRCH_AGGR_LOAD
             WHERE   FISC_YR_WK = v_cy_fisc_yr_wk and pim_suprcls_id_crnt <> '-99'
          GROUP BY   div_nbr,
                     fisc_yr_wk,
                     'N',--ly_wtd,
                     pim_cls_id,
                     pim_suprcls_id_crnt,
                     pim_suprcls_id_actl,
                     trd_cls,
                     pyr_seg_cd,
                     corp_mlt_unit_nbr,
                     prnt_mlt_unit_cd,
                     pim_brnd_typ,
                     cust_cntrct_flg,
                     cust_natl_mngd_flg,
                     sls_revenue_div_nbr,
                     cust_acctblty_flg,
                      usf_gl_ind,
                      cust_acqstn_stat_crnt,
                      cust_acqstn_stat_actl,
                      cust_acqstn_div_nbr,
                      cust_acqstn_conv_ind_ty,
                      cust_acqstn_conv_ind_ly,
                      cust_acqstn_orgnc_ind_ty,
                      cust_acqstn_orgnc_ind_ly);

COMMIT;

ELSE

   ----- Load the current year fisc wk again with a LY_WTD as 'N'

 --  IF (v_cy_day_of_wk <> 7) THEN

       INSERT /*+ append */ INTO xdmadm.SALES_SUMM_PYR_WKLY_LOAD
              (div_nbr,
               fisc_yr_wk,
               ly_wtd,
               pim_cls_id,
               pim_suprcls_id_crnt,
               pim_suprcls_id_actl,
               trd_cls,
               pyr_seg_cd,
               corp_mlt_unit_nbr,
               prnt_mlt_unit_cd,
               pim_brnd_typ,
               cust_cntrct_flg,
               cust_natl_mngd_flg,
               sls_revenue_div_nbr,
               cust_acctblty_flg,
               grs_sls_extnd,
               unfrm_qty_ship,
               actl_gp,
               ttl_alwnc,
               grs_tgp,
               net_sls,
               net_tgp,
               dwa_cost_extnd,
               rbt_loc_accrl_amt,
               rbt_natl_accrl_amt,
               rbt_loc_exp_amt,
               rbt_natl_exp_amt,
               ttl_int_vndr_fnd_dvt,
               comm_bsis_amt_extnd,
               dond,
               ttl_vndr_fnd_dvt,
               fixed_sell,
               n_prime_sis,
               prc_apprvl,
               dwo,
               invst_cs_prtcpt,
               net_non_prod_chrg,
               net_prod_chrg,
               net_non_prod_alwnc,
               net_prod_alwnc,
               usf_gl_ind,
               cust_acqstn_stat_crnt,
               cust_acqstn_stat_actl,
               cust_acqstn_div_nbr,
                      cust_acqstn_conv_ind_ty,
                      cust_acqstn_conv_ind_ly,
                      cust_acqstn_orgnc_ind_ty,
                      cust_acqstn_orgnc_ind_ly)
               (
               SELECT
                  div_nbr,
                  fisc_yr_wk,
                  ly_wtd,
                  pim_cls_id,
                  pim_suprcls_id_crnt,
                  pim_suprcls_id_actl,
                  trd_cls,
                  pyr_seg_cd,
                  corp_mlt_unit_nbr,
                  prnt_mlt_unit_cd,
                  pim_brnd_typ,
                  cust_cntrct_flg,
                  cust_natl_mngd_flg,
                  sls_revenue_div_nbr,
                  cust_acctblty_flg,
                  SUM (grs_sls_extnd) grs_sls_extnd,
                  SUM (unfrm_qty_ship) unfrm_qty_ship,
                  SUM (actl_gp) actl_gp,
                  SUM (ttl_alwnc) ttl_alwnc,
                  SUM (grs_tgp) grs_tgp,
                  SUM (net_sls) net_sls,
                  SUM (net_tgp) net_tgp,
                  SUM (dwa_cost_extnd) dwa_cost_extnd,
                  SUM (rbt_loc_accrl_amt) rbt_loc_accrl_amt,
                  SUM (rbt_natl_accrl_amt) rbt_natl_accrl_amt,
                  SUM (rbt_loc_exp_amt) rbt_loc_exp_amt,
                  SUM (rbt_natl_exp_amt) rbt_natl_exp_amt,
                  SUM (ttl_int_vndr_fnd_dvt_IS) ttl_int_vndr_fnd_dvt,              -- Check comments on Change version - 1.1
                  SUM (comm_bsis_amt_extnd_IS) comm_bsis_amt_extnd,                -- Check comments on Change version - 1.1
                  SUM (dond_IS) dond,                                              -- Check comments on Change version - 1.1
                  SUM (ttl_vndr_fnd_dvt) ttl_vndr_fnd_dvt,
                  SUM (fixed_sell) fixed_sell,
                  SUM (n_prime_sis) n_prime_sis,
                  SUM (prc_apprvl) prc_apprvl,
                  SUM (dwo) dwo,
                  SUM (invst_cs_prtcpt) invst_cs_prtcpt,
                  SUM (net_non_prod_chrg) net_non_prod_chrg,
                  SUM (net_prod_chrg) net_prod_chrg,
                  SUM (net_non_prod_alwnc) net_non_prod_alwnc,
                  SUM (net_prod_alwnc) net_prod_alwnc,
                  usf_gl_ind,
                  cust_acqstn_stat_crnt,
                  cust_acqstn_stat_actl,
                  cust_acqstn_div_nbr,
                      cust_acqstn_conv_ind_ty,
                      cust_acqstn_conv_ind_ly,
                      cust_acqstn_orgnc_ind_ty,
                      cust_acqstn_orgnc_ind_ly
           FROM   xdmadm.SALES_SUMM_MRCH_AGGR_LOAD
          -- WHERE  fisc_yr_wk = v_cy_fisc_yr_wk
       GROUP BY   div_nbr,
                  fisc_yr_wk,
                  ly_wtd,
                  pim_cls_id,
                  pim_suprcls_id_crnt,
                  pim_suprcls_id_actl,
                  trd_cls,
                  pyr_seg_cd,
                  corp_mlt_unit_nbr,
                  prnt_mlt_unit_cd,
                  pim_brnd_typ,
                  cust_cntrct_flg,
                  cust_natl_mngd_flg,
                  sls_revenue_div_nbr,
                  cust_acctblty_flg,
                  usf_gl_ind,
                  cust_acqstn_stat_crnt,
                  cust_acqstn_stat_actl,
                  cust_acqstn_div_nbr,
                      cust_acqstn_conv_ind_ty,
                      cust_acqstn_conv_ind_ly,
                      cust_acqstn_orgnc_ind_ty,
                      cust_acqstn_orgnc_ind_ly
            );

   DBMS_OUTPUT.put_line('Inserted Rows in Load Table for Curr year: ' || sql%ROWCOUNT);

   END IF;

   COMMIT;

---*********************  Analyze TABLE

   DBMS_OUTPUT.put_line('Analyze the Load aggregate table ' || l_load_tbl_nm);
   l_return_code    := xdmadm.fn_getstat_tbl(c_schema, l_load_tbl_nm);

   IF (l_return_code <> 0) THEN
      l_object_nm   := l_load_tbl_nm;
      RAISE e_analyze_table;
   END IF;

   ---****************************** Validation *******************************---

   --Retrieve Base values for comparison to what was inserted into aggregate table
   SELECT   SUM (unfrm_qty_ship), SUM (grs_sls_extnd)
     INTO   v_base_cases_cnt, v_base_sales
     FROM   (  SELECT   div_nbr,
                        fisc_yr_wk,
                        ly_wtd,
                        pim_cls_id,
                        pim_suprcls_id_crnt,
                        pim_suprcls_id_actl,
                        trd_cls,
                        pyr_seg_cd,
                        corp_mlt_unit_nbr,
                        prnt_mlt_unit_cd,
                        pim_brnd_typ,
                        cust_cntrct_flg,
                        cust_natl_mngd_flg,
                        sls_revenue_div_nbr,
                        cust_acctblty_flg,
                        SUM (unfrm_qty_ship) unfrm_qty_ship,
                        SUM (grs_sls_extnd) grs_sls_extnd,
                        usf_gl_ind,
                        cust_acqstn_stat_crnt,
                        cust_acqstn_stat_actl,
                        cust_acqstn_div_nbr
                 FROM   xdmadm.SALES_SUMM_MRCH_AGGR_LOAD
                 WHERE  fisc_yr_wk not in (v_ly_fisc_yr_wk,v_cy_fisc_yr_wk)
             GROUP BY   div_nbr,
                        fisc_yr_wk,
                        ly_wtd,
                        pim_cls_id,
                        pim_suprcls_id_crnt,
                        pim_suprcls_id_actl,
                        trd_cls,
                        pyr_seg_cd,
                        corp_mlt_unit_nbr,
                        prnt_mlt_unit_cd,
                        pim_brnd_typ,
                        cust_cntrct_flg,
                        cust_natl_mngd_flg,
                        sls_revenue_div_nbr,
                        cust_acctblty_flg,
                        usf_gl_ind,
                        cust_acqstn_stat_crnt,
                        cust_acqstn_stat_actl,
                        cust_acqstn_div_nbr);

    DBMS_OUTPUT.put_line('Base Cases = ' || v_base_cases_cnt);
    DBMS_OUTPUT.put_line('Base Sales = ' || v_base_sales);

   --Calculate aggregate variables for comparison to what was inserted into base variables
   SELECT  NVL(SUM(unfrm_qty_ship),0),  NVL(SUM(grs_sls_extnd),0)
           INTO v_aggr_cases_cnt, v_aggr_sales
   FROM  SALES_SUMM_PYR_WKLY_LOAD
    WHERE  (fisc_yr_wk not in (v_ly_fisc_yr_wk,v_cy_fisc_yr_wk) );

   DBMS_OUTPUT.put_line('Aggregate Cases = ' || v_aggr_cases_cnt);
   DBMS_OUTPUT.put_line('Aggregate Sales = ' || v_aggr_sales);

   --Compare base and aggregate counts and return success for failure.
   IF v_base_cases_cnt = v_aggr_cases_cnt  AND v_base_sales = v_aggr_sales THEN
      DBMS_OUTPUT.put_line('Success: Base and aggregate numbers for cases and sales match');
      RETURN pkg_sls_pyr.c_success;
   ELSE
      DBMS_OUTPUT.put_line('Error: Base and aggregate numbers for cases and sales do not match');
      RETURN pkg_sls_pyr.c_error;
   END IF;


   --- ***************************** End Validation ************************** ---


   RETURN c_success;
EXCEPTION
    WHEN e_syn THEN
      DBMS_OUTPUT.put_line(
         'Synonym currently points to Load table: ' || c_aggr_load_syn_nm || '. Requires manual update.');
      DBMS_OUTPUT.put_line('Verify the ' ||c_aggr_load_syn_nm|| ' and ' ||c_aggr_load_syn_nm|| ' synonyms');
      RETURN pkg_sls_pyr.c_error;
   WHEN e_truncate_table THEN
      DBMS_OUTPUT.put_line('Error Truncating Table: ' || l_load_tbl_nm || '. Requires manual update.');
      DBMS_OUTPUT.put_line('Verify '||l_load_tbl_nm||' table has any records');
      DBMS_OUTPUT.put_line(l_out_msg);
      RETURN pkg_sls_pyr.c_error;
   WHEN e_analyze_table THEN
      DBMS_OUTPUT.put_line('Error Analyzing Table: ' || l_load_tbl_nm || '. Requires manual update.');
      DBMS_OUTPUT.put_line(l_out_msg);
      RETURN pkg_sls_pyr.c_error;
   WHEN OTHERS THEN
      DBMS_OUTPUT.put_line('Error creating Sales Pyramid aggregate data');
      DBMS_OUTPUT.put_line(SQLCODE || ': ' || SQLERRM);
      RETURN pkg_sls_pyr.c_error;
END;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_USR_DIV_ALL_VPD" (p_schema       IN VARCHAR2,
                                              p_objname      IN VARCHAR2)
   RETURN VARCHAR2 AS
   /***********************************************************************
   * Name: FN_USR_DIV_ALL_VPD
   * Type: Function
   * Description: VPD Function to limit divisions based only on the user role
   *              role data. Will not exclude inactive divisions.
   *  REVISIONS:
   *  Ver        Date        Author           Description
   *  ---------  ----------  ---------------  ------------------------------------
   *  1.0        09/01/2011  Matt Nicol       Created this function
   ************************************************************************/
   c_start                CONSTANT NUMBER := DBMS_UTILITY.get_time;
   c_fn_nm                CONSTANT VARCHAR2(30) := 'FN_USR_DIV_ALL_VPD';
   l_security_predicate   VARCHAR2(4000) DEFAULT NULL;
   l_cur_sql              VARCHAR2(4000) := SYS_CONTEXT('USERENV', 'CURRENT_SQL');
   l_sbjct_area VARCHAR2(100)
         := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_sbjct_area_attr);
   l_vpd_exempt VARCHAR2(1)
         := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_exempt_attr);
   l_all_divs VARCHAR2(1)
         := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_alldivs_attr);
   l_usr_div_all          VARCHAR2(5);
   l_div_count            NUMBER := 0;
   l_usr_div_date         VARCHAR2(11);
   l_spcl_hndling         VARCHAR2(20) DEFAULT NULL;
   l_div_nbr              NUMBER := 0;
   l_first                BOOLEAN := TRUE;

   CURSOR divs_c(p_user          VARCHAR2,
                 p_sbjct_area    VARCHAR2) IS
      SELECT ud.div_nbr
        FROM ctladm.vw_usr_to_div ud, xdmadm.div_corp dc
       WHERE ud.div_nbr = dc.div_nbr
         AND UPPER(usr_nm) = p_user
         AND sbjct_area IN (p_sbjct_area, 'ALL');

   divs_rec               divs_c%ROWTYPE;
BEGIN
   --If no subject area context is set then return predicate filtering all data
   IF l_sbjct_area IS NULL THEN
      l_security_predicate   := '1=2';
      ctladm.pkg_vpd_debug_util.vpd_debug('NO SA', c_fn_nm, USER, p_schema, p_objname, l_sbjct_area, l_vpd_exempt,
      l_all_divs, l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   -- Check if user is exempt based on current subject area context
   -- If so, return predicate without any filter
   IF l_vpd_exempt = 'Y' THEN
      l_security_predicate   := '1=1';
      ctladm.pkg_vpd_debug_util.vpd_debug('EXEMPT', c_fn_nm, USER, p_schema, p_objname, l_sbjct_area, l_vpd_exempt,
      l_all_divs, l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   -- Check if user has all division access based on current subject area context
   -- If so, return predicate without any filter
   IF l_all_divs = 'Y' THEN
      l_security_predicate   := '1=1';
      ctladm.pkg_vpd_debug_util.vpd_debug('ALL DIVS', c_fn_nm, USER, p_schema, p_objname, l_sbjct_area, l_vpd_exempt,
      l_all_divs, l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   SELECT COUNT( * )
     INTO l_div_count
     FROM ctladm.vw_usr_to_div ud, xdmadm.div_corp dc
    WHERE ud.div_nbr = dc.div_nbr
      AND ud.usr_nm = USER
      AND ud.sbjct_area IN (l_sbjct_area, 'ALL')
      AND ud.div_nbr IS NOT NULL;

   IF l_div_count > 0 THEN
      l_first                := TRUE;

      OPEN divs_c(USER, l_sbjct_area);

      LOOP
         FETCH divs_c INTO divs_rec;

         EXIT WHEN divs_c%NOTFOUND;

         IF l_first THEN
            l_security_predicate   := 'DIV_NBR IN (' || divs_rec.div_nbr;
            l_first                := FALSE;
         ELSE
            l_security_predicate   := l_security_predicate || ',' || divs_rec.div_nbr;
         END IF;
      END LOOP;

      CLOSE divs_c;

      l_security_predicate   := l_security_predicate || ')';
   ELSE
      --User has access to no divisions
      l_security_predicate   := '1=2';
   END IF;

   ctladm.pkg_vpd_debug_util.vpd_debug('USR DIVS', c_fn_nm, USER, p_schema, p_objname, l_sbjct_area, l_vpd_exempt,
   l_all_divs, l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

   RETURN l_security_predicate;
EXCEPTION
   WHEN OTHERS THEN
      l_security_predicate   := '1=2';
      ctladm.pkg_vpd_debug_util.vpd_debug(SQLCODE || '-' || SQLERRM, c_fn_nm, USER, p_schema, p_objname, l_sbjct_area,
      l_vpd_exempt, NULL, l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
END fn_usr_div_all_vpd;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_SYN_SWAP" (p_param_type VARCHAR2, odate IN DATE)
   RETURN NUMBER AS
 /***********************************************************************
    * Name: FN_SYN_SWAP
    * Type: Function
    * Description: This function will be called in order to swap active and load
	*				synonyms after load processes have completed. It will change
	*				the synonyms to make the latest data live and truncate old data.
    *  REVISIONS:
    *  Ver        Date        Author            Description
    *  ---------  ----------  ---------------   ----------------------------
    *  1.0       03/17/2014  Ankur Patel        initial development
    ************************************************************************/

   v_clndr_day_nm           VARCHAR2(30);  --1.4
   v_sat                    DATE;          --1.4

   l_curr_tbl				VARCHAR2(30);
   l_load_tbl				VARCHAR2(30);
   l_tbl_desc				VARCHAR2(300);

   l_return_code			NUMBER := 0;
   l_object_nm				VARCHAR2(30);
   l_out_msg				VARCHAR2(256);

   e_create_synonym exception;
   e_truncate_table exception;

   CURSOR c_get_tbls IS
   SELECT param_code tbl_nm, param_value_chr description
   FROM xdmadm.param_value
   WHERE app_name = 'ALL'
   AND param_type = p_param_type;
BEGIN
   FOR r_get_tbls IN c_get_tbls LOOP
      -- Get current synonym tables
      EXECUTE IMMEDIATE 'SELECT table_name FROM user_synonyms WHERE synonym_name = ''' || r_get_tbls.tbl_nm || '''' INTO l_curr_tbl;

      EXECUTE IMMEDIATE 'SELECT table_name FROM user_synonyms WHERE synonym_name = ''' || r_get_tbls.tbl_nm || '_LOAD''' INTO l_load_tbl;

      DBMS_OUTPUT.put_line('Currently Active Table: ' || l_curr_tbl);
      DBMS_OUTPUT.put_line('Newly Loaded Table: ' || l_load_tbl);

      -- Swap synonyms
      l_return_code   := xdmadm.fn_crt_synonym(r_get_tbls.tbl_nm, pkg_sls_pyr.c_schema_nm, l_load_tbl);
      DBMS_OUTPUT.put_line('Create synonym ' || r_get_tbls.tbl_nm || ' for ' || pkg_sls_pyr.c_schema_nm || '.' || l_load_tbl || ': ' || l_return_code);

      IF (l_return_code <> 0) THEN
		l_object_nm := r_get_tbls.tbl_nm;
		RAISE e_create_synonym;
      END IF;

      l_return_code   := xdmadm.fn_crt_synonym(r_get_tbls.tbl_nm || '_LOAD', pkg_sls_pyr.c_schema_nm, l_curr_tbl);
      DBMS_OUTPUT.put_line('Create synonym ' || r_get_tbls.tbl_nm || '_LOAD' || ' for ' || pkg_sls_pyr.c_schema_nm || '.' || l_curr_tbl || ': ' || l_return_code);

      IF (l_return_code <> 0) THEN
		l_object_nm := r_get_tbls.tbl_nm || '_LOAD';
		RAISE e_create_synonym;
      END IF;

      -- Truncate table that was currently active at the start of this function call.
      l_return_code   := usfdba.table_pkg.truncate_table(l_out_msg, pkg_sls_pyr.c_schema_nm, l_curr_tbl);
      DBMS_OUTPUT.put_line('Truncate Prev Aggr Table Return: ' || l_return_code || ' - ' || l_out_msg);

      IF (l_return_code <> 0) THEN
		l_object_nm := l_curr_tbl;
		RAISE e_truncate_table;
      END IF;

	  --Update fact table with odate to indicate successful processing of this table
	  UPDATE xdmadm.fact_load_stat
	  SET div_load_stat = 1, div_load_ts = TRUNC(odate)
	  WHERE fact_table = r_get_tbls.tbl_nm;

	  --If row in fact table was not updated then create the row
	  IF (sql%ROWCOUNT = 0) THEN
		INSERT INTO xdmadm.fact_load_stat(fact_table, div_nbr, fact_table_dsply_nm, fact_typ_desc, latest_prcs_dt,
			div_load_stat, div_load_ts, prcs_dt, load_freq, rpt_dsply_ind)
		VALUES (r_get_tbls.tbl_nm, 0, r_get_tbls.description, r_get_tbls.description, SYSDATE, 1, TRUNC(odate), TRUNC(odate) + 1, 'DAILY', 'Y'); --Use last closed day
	  END IF;
	  COMMIT;
   --END LOOP;

         --Update fact tables with odate to indicate succesful processing of Merch and Sales Pyramid aggs

   BEGIN   --1.4  -Get Saturdays Date if processing with Sunday ODATE
           select clndr_day_nm into v_clndr_day_nm from xdmadm.time_corp where clndr_dt = TRUNC(odate);
           IF v_clndr_day_nm='SUNDAY' THEN
                   dbms_output.put_line('Sunday process date. Update with Saturday date.');
                   v_sat := odate -1;
                   UPDATE xdmadm.fact_load_stat
                   SET div_load_stat = 1, div_load_ts = TRUNC(v_sat) -- Update with SAT Date
                   WHERE fact_table = r_get_tbls.tbl_nm;

                   --If row in fact table was not updated then create the row
                   IF (sql%ROWCOUNT = 0) THEN
                      INSERT INTO xdmadm.fact_load_stat(fact_table, div_nbr, fact_table_dsply_nm, fact_typ_desc, latest_prcs_dt,
                                                        div_load_stat, div_load_ts, prcs_dt, load_freq, rpt_dsply_ind)
                          VALUES (pkg_sls_pyr.c_aggr_syn_nm, 0, 'Pyramid Aggs', 'Pyramid Aggs', SYSDATE, 1,
                                  TRUNC(v_sat), TRUNC(v_sat) + 1, 'DAILY', 'Y');
                    END IF;
           ELSE    --1.4
                  dbms_output.put_line('It is not a Sunday Date');
                  -- This was the original code before adding Sat/Sun logic
                    UPDATE xdmadm.fact_load_stat
                    SET div_load_stat = 1, div_load_ts = TRUNC(odate)
                    WHERE fact_table = r_get_tbls.tbl_nm;

                   -- If row in fact table was not updated then create the row
                   IF (sql%ROWCOUNT = 0) THEN
                      INSERT INTO xdmadm.fact_load_stat(fact_table, div_nbr, fact_table_dsply_nm, fact_typ_desc, latest_prcs_dt,
                                                        div_load_stat, div_load_ts, prcs_dt, load_freq, rpt_dsply_ind)
                          VALUES (r_get_tbls.tbl_nm, 0, 'Pyramid Aggs', 'Pyramid Aggs', SYSDATE, 1,
                                  TRUNC(odate), TRUNC(odate) + 1, 'DAILY', 'Y'); --Use last closed day
                   END IF;
           END IF;
   END;        --1.4
   COMMIT;

   END LOOP;

   RETURN pkg_sls_pyr.c_success;

EXCEPTION
   WHEN e_create_synonym THEN
      DBMS_OUTPUT.put_line('Error Creating Synonym: ' || l_object_nm || '. Requires manual update.');
      RETURN pkg_sls_pyr.c_error;
   WHEN e_truncate_table THEN
      DBMS_OUTPUT.put_line('Error Truncating Table: ' || l_object_nm || '. Requires manual update.');
      DBMS_OUTPUT.put_line(l_out_msg);
      RETURN pkg_sls_pyr.c_error;
   WHEN OTHERS THEN
      ROLLBACK;
      DBMS_OUTPUT.put_line('Unexpected Error In Synonym Swap Procedure. Requires manual update.');
      DBMS_OUTPUT.put_line(SQLCODE || ': ' || SQLERRM);
      RETURN pkg_sls_pyr.c_error;
END;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_FWB_MDL_BRIDGE_LOAD" (p_odate IN VARCHAR2, p_abort_flg IN VARCHAR2)
RETURN NUMBER IS

/****************************************************************************************************************************
    NAME:       XDMADM.FN_FWB_MDL_BRIDGE_LOAD
    TYPE: Function

    PURPOSE:   This Function is used to Load data into FWB_MDL_BRIDGE table
               It will be scheduled to run daily twice a day at 3:30 am and 5:30am central.

             This job will run prior to the FWB_MDL calculation job and it will only
             contain second POs

             2nd PO Rules:
             If PO is the 2nd PO based on order type
                1. Order Date: Effective Date <= PO order date <= Effective Date + 8 weeks (56 days)
                2. Requested Delivery Date: Effective Date <= PO scheduled arrival date <= Effective Date + 8 weeks (56 days)
                3. Scheduled Delivery Date: Effective Date <= PO scheduled arrival date <= Effective Date + 8 weeks (56 days)
                4. Ship Date:
                   - If Ship Date field is populated, Effective Date <= PO Ship Date must be <= Effective Date + 8 weeks (56 days)
                   - If Ship Date field is missing and Received Date field is populated,
                        Effective Date <= (Received Date - 2 days) must be <= Effective Date + 8 weeks (56 days)
                   - If Ship Date field is missing and Received Date field is missing,
                        Effective Date <= (Order Date + 10 days) must be <= Effective Date + 8 weeks (56 days)

              NOTE EXCEPTION TO THE 56 DAY RULE FOR OPOs: 56 days are not needed, actual lic_wed_dt is used instead

       PARAMETER USAGE: 1. The operation date.  It will be supplied when executing the UNIX script .
                   The format is : YYYYMMDD
                   2.  Pass/Fail flag.
                       This flag is used to determine if the OPEN POs have not completed on the
                       first execution of the day, the received POs should still load. If the
                       OPEN POs STILL haven't completed by the second run, then we want to completely fail the job

                       p_abort_flg should equal to 'N' on the first run 3:30am.
                       p_abort_flg should equal to 'Y' on the second run 5:30am.




        REVISIONS:
        Ver        Date        Author                   Description
        ---------  ----------  ---------------          ------------------------------------------------------------------------------
        1.0        05/20/2011  Barbara Resendiz         1. Created this Function.
        1.1        07/07/2011  Vikas Wadhwa             1. Modified the deletion of INCOMPLETE records
                                                          before loading
        1.2        07/09/2011  Vikas Wadhwa             1. Modified confirmation and completion flags
                                                            to include ORDER TYPE logic
        1.3        07/15/2011  Vikas Wadhwa             1. Need to add INVENTORY GAIN FLAG = 'N' back to
                                                            logic for Received PO retrieval
        1.4        07/20/2011  Vikas Wadhwa             1. Changed order of Received and Open po retrievel
                                                            and added deletion block so as to not see multiple
                                                            records for Comliant records
        1.5        07/27/2011  Vikas Wadhwa             1. Confirmed on time needs to evaluate based
                                                           on confirmation date, not other dates
        1.6        08/10/2011  Vikas Wadhwa             1. Added constraints on order type date to not exceed
                                                           LIC wednesday
        1.7        08/18/2011  Vikas Wadhwa             1. Removed lower EFF_DT constraint on confirmed on time flag
        1.8        09/20/2011  Corrie Kaczmarek         1. Changed fact_div_load_stat to fact_load_stat
        ------------------------------------------------------------------------------------------------------------------------------
        2.1        10/01/2011  Barbara Resendiz         1. Forward Release 2 changes :
                                                           - Removal of unecessary R1 code.
                                                           - Inclusion of PARAM_VALUE table
                                                           - Inclusion of new columns in the FWB MDL for Forward Date Rules
                                                           - PO Section will now use NEW columns on XDMADM.FWB_MDL
                                                                XIW.XDMADM.FWB_MDL.REVAL_STRT_DT,
                                                                XIW.XDMADM.FWB_MDL.REVAL_PO_END_DT,
                                                                XIW.XDMADM.FWB_MDL.REVAL_ARVL_END_DT

                                                           - OPO Section will now use NEW columns on XDMADM.FWB_MDL
                                                                XIW.XDMADM.FWB_MDL.REVAL_STRT_DT,
                                                                XIW.XDMADM.FWB_MDL.reval_opo_end_dt,
                                                                XIW.XDMADM.FWB_MDL.REVAL_ARVL_END_DT
                                                                XIW.XDMADM.FWB_MDL.BUILD_STRT_DT,
                                                                XIW.XDMADM.FWB_MDL.BUILD_END_DT
                                                           - The use of these columns will be included for FWB_MDL_BRIDGE columns
                                                                PO_STAT and PO_CNFRM_ON_TM.
                                                           - Suggested during code review to remove the + NOPARALLEL hint.

        2.2        10/20/2011    Vikas Wadhwa
                                                        1. Cleaned code to conform to names/parameters of XDMADM.FN_FWB_MDL_UPDT
                                                        2. Changed the Open PO deletion to look for values <= REVAL_OPO_END_DT rather
                                                           than just less than REVAL_OPO_END_DT
                                                        3. Updated the check on FACT_LOAD_STAT to include a check of XDMADM.PARAM_VALUE
                                                           so that tables that do not load every day will have a check of lastest_prcs_dt
                                                           that corresponds the the last usual run.
                                                        4. Moved the type='PR' filter on Received PO query to the PO join clause
                                                           rather than the WHERE clause
                                                        5. Added filter to check that fstat.fact_typ_cd = 'RG' on FACT_LOAD_STAT join
                                                           on Received PO query
                                                        6. Change error handling to only have 1 BEGIN/END block with exceptions below.
                                                           There were errors being caught and the process moved forward, we want an entire
                                                           rollback for any errors.
        2.3        10/21/2011    Vikas Wadhwa           1. Changed all references to "dbms_output.put_line("
                                                           to "dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||"
                                                           to include timestamp in output

        2.4        10/21/2011    Vikas Wadhwa           1. Removed excessive filter in logic to delete multiple COMPLETE records

        2.5        11/16/2011    Vikas Wadhwa           1. Change PO_STAT constraints for OPO records to not have an upper bound.
        2.51       11/17/2011    Vikas Wadhwa           1. Change PO_STAT constraints for PO records to not have an upper bound.

        2.52       01/03/2012    Vikas Wadhwa           1. Updated third WHERE clause of incomplete deletion to use v_odate rather
                                                           prcs_dt
        2.53       01/16/2011    Vikas Wadhwa           1. Updated incomplete opo DELETE logic to alias table being deleted from.


        2.6         04/28/2016    Roger Karas           1. Added filter to check po_spcl_buy_ind and excptn_cost_ind = 'N' when inserting
                                                           records into xdmadm.fwb_mdl_bridge.  These fields are in po_corp and opo_corp.


    -------------------------------------------------------------------------------

    Input Tables :  XDMADM.FWB_MDL
                    XDMADM.FWB_MDL_BRIDGE
                    XDMADM.OPO_CORP
                    XDMADM.PO_CORP
                    XDMADM.TIME_CORP
                    XDMADM.FACT_LOAD_STAT
                    XDMADM.PARAM_VALUE


   The runs:
   Run #1 the p_abort_flg = 'N'
   Run #2 the p_abort_flg = 'Y' since this indicates the fact load status
   may have failed from the End of Day process to reset the flags.
   The parameter, p_abort_flg := 'Y'

   ERROR HANDLING:
   WHEN an error occurs, error message is displayed by SQLERRM function and return 1.


     p_odate VARCHAR2(8) :='20110921';
     p_abort_flg VARCHAR2(1) :='N';
****************************************************************************************************************************/


        CON_PROCESS_NAME   CONSTANT      VARCHAR2(40) := 'FN_FWB_MDL_BRIDGE_LOAD';  -- used for logging messages

        v_prcs_err_cd                    NUMBER;
        v_prcs_err_msg                   VARCHAR2(500);
        v_prcs_stp                       VARCHAR2(500);

        v_ddm_owner                      VARCHAR2(40) := 'XDMADM' ;   -- hardcoded value
        v_ddm_tbl_nm                     VARCHAR2(40) := 'FWB_MDL_BRIDGE';   -- hardcoded value
        v_dba_func_msg                   VARCHAR2(2000) := 'oXo';
        v_in_str                         VARCHAR2(4000);

        v_excp                          EXCEPTION;
        opo_no_rows                     EXCEPTION;

        v_opo_corp_stat                 NUMBER;
        v_odate                         DATE := to_date(p_odate,'yyyymmdd');

        v_gain_end_days                 NUMBER;
        v_reval_ship_dt_null_days       NUMBER;
        v_reval_po_lbound_days               NUMBER;

        v_opo_corp_schedule             VARCHAR2(3);
        v_po_corp_schedule              VARCHAR2(3);
        v_inventory_schedule            VARCHAR2(3);


        int_delete_counter              PLS_INTEGER := 0;




BEGIN

    /*****************************************************************************************************
    ** Populate PARAM_VALUE values for this function
    ******************************************************************************************************/
    dbms_output.put_line(' ');
    v_prcs_stp := 'Populating forward buy values from the xdmadm.PARAM_VALUE table';
    dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||v_prcs_stp);

       SELECT param_code
       INTO v_gain_end_days
       FROM xdmadm.param_value
       WHERE app_name = 'FORWARD_BUY'
       AND param_type = 'GAIN_END_DAYS';


       SELECT param_code
       INTO v_reval_ship_dt_null_days
       FROM xdmadm.param_value
       WHERE app_name = 'FORWARD_BUY'
       AND param_type = 'REVAL_SHIP_DT_NULL_DAYS';

       SELECT param_code
       INTO v_reval_po_lbound_days
       FROM xdmadm.param_value
       WHERE app_name = 'FORWARD_BUY'
       AND param_type = 'REVAL_PO_LBOUND_DAYS';

       SELECT param_code
       INTO v_opo_corp_schedule
       FROM xdmadm.param_value
       WHERE app_name = 'FORWARD_BUY'
       AND param_type = 'OPO_CORP_SCHEDULE';


       SELECT param_code
       INTO v_po_corp_schedule
       FROM xdmadm.param_value
       WHERE app_name = 'FORWARD_BUY'
       AND param_type = 'PO_CORP_SCHEDULE';


       SELECT param_code
       INTO v_inventory_schedule
       FROM xdmadm.param_value
       WHERE app_name = 'FORWARD_BUY'
       AND param_type = 'INVENTORY_SCHEDULE';





    /****************************************************************************************************
    ** Being MERGE of received POs
    *****************************************************************************************************/

    v_prcs_stp := 'Merging new RECEIVED POs into XDMADM.FWB_MDL_BRIDGE';
    dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||v_prcs_stp);

         MERGE INTO xdmadm.fwb_mdl_bridge d
          USING
          (

                  SELECT
                       po.div_nbr,
                       po.po_rcvd_dt,
                       po.po_nbr,
                       po.prod_nbr,
                       po.line_nbr,
                       po.prcs_dt,
                       fwb.fwb_cyc_id,
                       fwb.eff_dt,
                       p.pim_usf_std_prod_cd,
                       p.prch_from_vndr_nbr,
                       po.po_cnfrm_ind,
                       po.arvl_dt,
                       'PO_CORP' fwb_trans_typ,
                       v_odate fwb_last_updt_dt,
                       null inact_dt,

                       TO_NUMBER(TO_CHAR (SYSDATE, 'yyyymmddhh24miss')) ldr_tm,
                       nvl(po.cnfrm_qty_ord,0) cnfrm_qty_ord,

                       CASE
                          WHEN (     po.po_cnfrm_ind='Y'
                                 AND po.cnfrm_dt <= fwb.reval_po_end_dt -- R2
                                )
                             THEN 'Y'
                          ELSE 'N'
                       END PO_CNFRM_ON_TM,


                       CASE
                          WHEN po.po_cnfrm_ind='Y' AND po.arvl_dt <= fwb.reval_arvl_end_dt
                             THEN
                                CASE WHEN
                                        CASE
                                          WHEN fwb.ord_typ ='ORDER DATE'
                                             THEN po.ord_dt
                                          WHEN ( fwb.ord_typ ='REQUESTED DELIVERY DATE' OR fwb.ord_typ='SCHEDULED DELIVERY DATE')
                                             THEN po.arvl_dt
                                          WHEN fwb.ord_typ ='SHIP DATE'
                                             THEN NVL(po.ship_dt, NVL(po.po_rcvd_dt, po.ord_dt + v_reval_ship_dt_null_days))
                                        END
                                        >= fwb.reval_strt_dt
                                     THEN 'COMPLETE'
                                ELSE 'INCOMPLETE'
                                END
                          ELSE 'INCOMPLETE'
                       END PO_STAT -- R2


                     FROM   xdmadm.fwb_mdl fwb

                            JOIN xdmadm.po_corp po
                              ON po.div_nbr=fwb.div_nbr
                             AND po.prod_nbr=fwb.prod_nbr
                             AND po.trans_typ='PR'
                             AND NVL(po.po_spcl_buy_ind, 'N') = 'N'
                             AND NVL(po.excptn_cost_ind, 'N') = 'N'

                            JOIN xdmadm.prod_corp p
                              ON p.div_nbr=po.div_nbr
                             AND p.div_nbr=fwb.div_nbr
                             AND p.prod_nbr=fwb.prod_nbr
                             AND P.PROD_NBR=PO.PROD_NBR

                     WHERE
                            NVL(fwb.fwb_frz_ind, 'N') = 'N'
                        AND NVL(fwb.fwb_invnty_gain_ind, 'N') = 'N'
                        AND fwb.inact_dt IS NULL

                        AND po.div_nbr IN (SELECT fstat.div_nbr
                                           FROM xdmadm.fact_load_stat fstat
                                           WHERE fstat.div_load_stat > 0
                                             AND fstat.fact_table = 'PO_CORP'
                                             AND fstat.fact_typ_cd = 'RG'
                                           )

                        AND po.prcs_dt > (v_odate - v_reval_po_lbound_days)  -- R2
                        AND fwb.fwb_cyc_typ = 'MONTHLY'   -- R2

                        AND -- R2
                        (
                            CASE
                              WHEN fwb.ord_typ ='ORDER DATE'
                                 THEN po.ord_dt
                              WHEN (fwb.ord_typ ='REQUESTED DELIVERY DATE' OR fwb.ord_typ='SCHEDULED DELIVERY DATE')
                                 THEN po.arvl_dt
                              WHEN fwb.ord_typ ='SHIP DATE'
                                 THEN NVL(po.ship_dt, NVL(po.po_rcvd_dt, po.ord_dt + v_reval_ship_dt_null_days))
                            END
                                >= fwb.reval_strt_dt
                        )
        ) s


        on (        d.div_nbr = s.div_nbr
                and d.prod_nbr = s.prod_nbr
                and d.po_nbr = s.po_nbr
                and d.po_rcvd_dt = s.po_rcvd_dt
                and d.line_nbr = s.line_nbr
                and d.prcs_dt = s.prcs_dt
                and d.fwb_cyc_id = s.fwb_cyc_id
            )

         WHEN MATCHED THEN UPDATE SET
                                 d.eff_dt=s.eff_dt,
                                 d.pim_usf_std_prod_cd=s.pim_usf_std_prod_cd,
                                 d.prch_from_vndr_nbr=s.prch_from_vndr_nbr,
                                 d.ldr_tm=s.ldr_tm

         WHEN NOT MATCHED THEN INSERT
                                ( div_nbr,
                                  po_rcvd_dt,
                                  po_nbr,
                                  prod_nbr,
                                  line_nbr,
                                  prcs_dt,
                                  fwb_cyc_id,
                                  eff_dt,
                                  pim_usf_std_prod_cd,
                                  prch_from_vndr_nbr,
                                  po_cnfrm_ind,
                                  arvl_dt,
                                  po_cnfrm_on_tm,
                                  cnfrm_qty_ord,
                                  fwb_trans_typ,
                                  fwb_last_updt_dt,
                                  po_stat,
                                  inact_dt,
                                  ldr_tm
                                )

                                values
                                (
                                        s.div_nbr,
                                        s.po_rcvd_dt,
                                        s.po_nbr,
                                        s.prod_nbr,
                                        s.line_nbr,
                                        s.prcs_dt,
                                        s.fwb_cyc_id,
                                        s.eff_dt,
                                        s.pim_usf_std_prod_cd,
                                        s.prch_from_vndr_nbr,
                                        s.po_cnfrm_ind,
                                        s.arvl_dt,
                                        s.po_cnfrm_on_tm,
                                        s.cnfrm_qty_ord,
                                        s.fwb_trans_typ,
                                        s.fwb_last_updt_dt,
                                        s.po_stat,
                                        s.inact_dt,
                                        s.ldr_tm
                                );

             dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'     Merge complete. ' || sql%ROWCOUNT || '  rows merged.');


    /****************************************************************************************************
    ** Beginning Open PO section
    *****************************************************************************************************/
        /****************************************************************************************************
        ** This function runs twice per day. If there is nothing to process the first run (abort_flag = 'N')
        ** this program exits without error. If there is nothing to process the second time,
        ** (abort flag ='Y') then the program raises an error and aborts.
        ** The inventory and Open PO's run earlier thus the timestamp check for the same day.
        *****************************************************************************************************/



    /****************************************************************************************************
    ** Checking OPO load status
    *****************************************************************************************************/
        v_prcs_stp := 'Checking Open PO Status';
        dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||v_prcs_stp);

        /************************
        ** v2.2  Vikas Wadhwa
        *************************/
        SELECT div_load_stat
          INTO v_opo_corp_stat
          FROM xdmadm.fact_load_stat
         WHERE fact_table = 'OPO_CORP'
           AND ROWNUM = 1
           AND TRUNC(latest_prcs_dt) = CASE
                                          WHEN v_opo_corp_schedule = '1-7'
                                             THEN v_odate
                                          WHEN v_opo_corp_schedule = '1-6'
                                             THEN CASE WHEN TO_CHAR(v_odate,'D') = 7 THEN v_odate - 1
                                                  ELSE v_odate END
                                          WHEN v_opo_corp_schedule = '2-6'
                                             THEN CASE WHEN TO_CHAR(v_odate,'D') = 6 THEN v_odate - 1
                                                       WHEN TO_CHAR(v_odate,'D') = 7 THEN v_odate - 2
                                                  ELSE v_odate END
                                       ELSE v_odate
                                       END;

        /************************
        ** END v2.2  Vikas Wadhwa
        *************************/

        dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'     Open PO status is '||v_opo_corp_stat);




          IF  v_opo_corp_stat > 0 THEN

                      /****************************************************************************************************
                      ** DELETING from XDMADM.FWB_MDL_BRIDGE where POs are complete or have hit REVAL_END_DT
                      *****************************************************************************************************/
                      v_prcs_stp := 'Deleting INCOMPLETEs from XDMADM.FWB_MDL_BRIDGE';
                      dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||v_prcs_stp);



                      /************************************************************************
                      ** v2.53  Vikas Wadhwa
                      **        Changing DELETE logic to alias the table being deleted from
                      ************************************************************************

                      DELETE FROM xdmadm.fwb_mdl_bridge

                      WHERE (po_stat <> 'COMPLETE' OR po_cnfrm_on_tm <> 'Y')
                            AND fwb_trans_typ = 'OPO_CORP'
                            AND v_odate <= (SELECT fwb.reval_opo_end_dt
                                             FROM xdmadm.fwb_mdl fwb
                                            WHERE fwb.eff_dt = eff_dt
                                              AND fwb.div_nbr = div_nbr
                                              AND fwb.prod_nbr= prod_nbr
                                              AND fwb.fwb_cyc_id = fwb_cyc_id
                                              AND fwb.fwb_cyc_typ <> 'DEALS'
                                              AND ROWNUM=1
                                           ); -- R2

                      ************************************************************************
                      ** END v2.53
                      ************************************************************************/

                     DELETE FROM xdmadm.fwb_mdl_bridge b
                     WHERE (b.po_stat <> 'COMPLETE' OR b.po_cnfrm_on_tm <> 'Y')
                           AND b.fwb_trans_typ = 'OPO_CORP'
                           AND EXISTS  (SELECT 1
                                            FROM xdmadm.fwb_mdl fwb
                                           WHERE fwb.eff_dt = b.eff_dt
                                             AND fwb.div_nbr = b.div_nbr
                                             AND fwb.prod_nbr= b.prod_nbr
                                             AND fwb.fwb_cyc_id = b.fwb_cyc_id
                                             AND fwb.reval_opo_end_dt >= v_odate
                                             AND fwb.fwb_cyc_typ = 'MONTHLY'
                                          );

                      dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'     Deletion complete. ' || sql%ROWCOUNT || '  rows deleted.');




                      /****************************************************************************************************
                      ** INSERTING Open PO records into the bridge when Model shows the div/apn as not completed
                      *****************************************************************************************************/
                      v_prcs_stp := 'Inserting new Open POs into XDMADM.FWB_MDL_BRIDGE';
                      dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||v_prcs_stp);

                      INSERT INTO xdmadm.fwb_mdl_bridge

                      SELECT
                       opo.div_nbr,
                       TO_DATE('01-01-1900','DD-MM-YYYY') po_rcvd_dt, --Default because column cannot be null
                       opo.po_nbr,
                       opo.prod_nbr,
                       opo.line_nbr,
                       opo.prcs_dt,
                       fwb.fwb_cyc_id,
                       fwb.eff_dt,
                       p.pim_usf_std_prod_cd,
                       p.prch_from_vndr_nbr,
                       opo.po_cnfrm_ind,
                       opo.arvl_dt,

                      CASE
                          WHEN (      opo.po_cnfrm_ind='Y'
                                  AND opo.cnfrm_dt <= fwb.reval_opo_end_dt
                                )
                                  THEN 'Y'
                          ELSE 'N'
                       END po_cnfrm_on_tm, -- R2



                       nvl(OPO.cnfrm_qty_ord,0) cnfrm_qty_ord,
                       'OPO_CORP' fwb_trans_typ,
                       v_odate fwb_last_updt_dt,


                       CASE
                          WHEN opo.po_cnfrm_ind='Y' AND opo.arvl_dt <= fwb.reval_arvl_end_dt
                             THEN
                                CASE WHEN
                                        CASE
                                          WHEN fwb.ord_typ ='ORDER DATE'
                                             THEN opo.ord_dt
                                          WHEN ( fwb.ord_typ ='REQUESTED DELIVERY DATE' OR fwb.ord_typ='SCHEDULED DELIVERY DATE')
                                             THEN opo.arvl_dt
                                          WHEN fwb.ord_typ ='SHIP DATE'
                                             THEN NVL(opo.ship_dt, opo.ord_dt + v_reval_ship_dt_null_days)
                                        END
                                        >= fwb.reval_strt_dt
                                     THEN 'COMPLETE'
                                ELSE 'INCOMPLETE'
                                END
                          ELSE 'INCOMPLETE'
                       END PO_STAT, -- R2

                       null inact_dt,
                       TO_NUMBER(TO_CHAR (SYSDATE, 'yyyymmddhh24miss')) ldr_trm,
                       NULL, --invnty_gain_loss
                       NULL, --ord_dt
                       NULL --po_cnfrm_dt

                     FROM   xdmadm.fwb_mdl fwb
                            JOIN xdmadm.opo_corp opo
                              ON opo.div_nbr=fwb.div_nbr
                             AND opo.prod_nbr=fwb.prod_nbr
                             AND NVL(opo.po_spcl_buy_ind, 'N') = 'N'
                             AND NVL(opo.excptn_cost_ind, 'N') = 'N'

                            JOIN xdmadm.prod_corp p
                              ON p.div_nbr=opo.div_nbr
                             AND p.div_nbr=fwb.div_nbr
                             AND p.prod_nbr=fwb.prod_nbr
                             AND p.prod_nbr=opo.prod_nbr

                     WHERE fwb.fwb_cyc_typ IN ('MONTHLY', 'DEALS')
                      AND NVL(fwb.prod_nbr_po_stat, 'NO PO') <> 'COMPLETE'
                      AND NVL(fwb.fwb_invnty_gain_ind, 'N') = 'N'
                      AND NVL(fwb.fwb_frz_ind, 'N') = 'N'
                      AND fwb.inact_dt IS NULL
                      AND fwb.reval_opo_end_dt >= v_odate -- R2

                      AND NOT EXISTS (SELECT 1
                                        FROM xdmadm.fwb_mdl_bridge completed
                                       WHERE completed.div_nbr = fwb.div_nbr
                                         AND completed.prod_nbr = fwb.prod_nbr
                                         AND COMPLETED.EFF_DT = fwb.EFF_DT
                                         AND completed.fwb_cyc_id=fwb.fwb_cyc_id -- R2
                                         AND completed.fwb_trans_typ = 'PO_CORP'
                                     )

                      AND
                      (    opo.ord_dt BETWEEN fwb.reval_strt_dt AND fwb.reval_opo_end_dt -- R2
                        OR
                            (
                                  (fwb.ord_typ ='REQUESTED DELIVERY DATE' OR fwb.ord_typ='SCHEDULED DELIVERY DATE')
                              AND opo.arvl_dt >= fwb.reval_strt_dt
                            )
                        OR
                            (      fwb.ord_typ ='SHIP DATE'
                              AND NVL(opo.ship_dt, (opo.ord_dt + v_reval_ship_dt_null_days)) >= fwb.reval_strt_dt
                            )
                      ) -- END of outer parenthesis of all ORD_TYPES check

                      ;

                      dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'     Insert complete. ' || sql%ROWCOUNT || '  rows inserted.');


          ELSIF p_abort_flg = 'Y' THEN
               --return and invalid return because this is the 2nd run and the OPOs STILL did not complete.
               RAISE opo_no_rows;
               ROLLBACK;
               RETURN 1;

          ELSIF p_abort_flg = 'N' THEN
               -- p_abort_flg = 'N' means it's the first run, so continue.
               NULL;
          END IF;





            /*************************************************************************
            ** Logic for deletion of multiple COMPLETE records:
            **      * If there are only COMPLETE OPEN PO records, keep only one
            **      * If there is a COMBO of COMPLETED OPEN and RECEIVED POs
            **        then keep the first RECEIVED PO
            **
            ** Vikas Wadhwa  07/20/2011
            **************************************************************************/

                v_prcs_stp := 'DELETION of multiple completed cycles from XDMADM.FWB_MDL_BRIDGE';
                dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||v_prcs_stp);

                FOR c_bridge IN

                (
                SELECT fmb.div_nbr, fmb.prod_nbr, fmb.fwb_cyc_id
                FROM xdmadm.fwb_mdl_bridge fmb, xdmadm.fwb_mdl mdl
                WHERE fmb.eff_dt = mdl.eff_dt
                AND fmb.div_nbr = mdl.div_nbr
                AND fmb.prod_nbr= mdl.prod_nbr
                AND fmb.fwb_cyc_id = mdl.fwb_cyc_id
                AND mdl.fwb_cyc_typ IN ('MONTHLY', 'DEALS')
                GROUP BY fmb.div_nbr, fmb.prod_nbr, fmb.fwb_cyc_id
                HAVING SUM(CASE WHEN fmb.po_stat = 'COMPLETE' AND fmb.po_cnfrm_on_tm ='Y' THEN 1 ELSE 0 END) > 0
                 --AND SUM(CASE WHEN po_stat = 'COMPLETE' AND po_cnfrm_on_tm ='Y' THEN 1 ELSE 0 END) < COUNT(DISTINCT po_nbr)
                )


                LOOP
                   v_prcs_stp := '     Deleting multiple COMPLETED for cycle: '||c_bridge.div_nbr||', division: '||c_bridge.div_nbr||', product: '||c_bridge.prod_nbr;
                   --dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||v_prcs_stp);


                   DELETE
                   FROM xdmadm.fwb_mdl_bridge a
                   WHERE a.div_nbr=c_bridge.div_nbr
                   AND a.prod_nbr=c_bridge.prod_nbr
                   AND a.fwb_cyc_id=c_bridge.fwb_cyc_id
                   AND rowid IN
                   (
                    SELECT rowid
                      FROM
                        (
                        SELECT rowid,
                               row_number() over (partition by div_nbr, prod_nbr, fwb_cyc_id order by fwb_trans_typ desc, po_stat, po_cnfrm_on_tm desc) rownumber
                        FROM xdmadm.fwb_mdl_bridge b
                                WHERE b.div_nbr = c_bridge.div_nbr
                                  AND b.prod_nbr = c_bridge.prod_nbr
                                  AND b.fwb_cyc_id = c_bridge.fwb_cyc_id
                        )
                      where rownumber > 1
                   );


                   int_delete_counter := int_delete_counter + sql%ROWCOUNT;

                END LOOP;


                dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'     Deletions complete. ' || int_delete_counter || '  rows deleted.');



      COMMIT;
      dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'PROCESS COMMITED');
      RETURN 0;


EXCEPTION

WHEN no_data_found THEN
        dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'*****NO DATA FOUND ERROR!*****');
        dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'ERROR IN STEP:  ' || v_prcs_stp);
        v_prcs_err_msg:= ' SQLERRM: '||Sqlerrm||' Sqlcode: '||SQLCODE;
        dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'Messages: '||v_prcs_err_msg);
        ROLLBACK;
        Return 1;


WHEN OTHERS THEN
        dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'*****GENERAL ERROR!*****');
        dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'ERROR IN STEP:  ' || v_prcs_stp);
        v_prcs_err_msg:= ' SQLERRM: '||Sqlerrm||' Sqlcode: '||SQLCODE;
        dbms_output.put_line(TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS     ')||'Messages: '||v_prcs_err_msg);
        ROLLBACK;
        RETURN 1;
END;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_FWB_PURGE"
   (ODATE IN VARCHAR2)
      RETURN NUMBER
   AS
--******************************************************************************
--* Name          : FN_FWB_PURGE                                               *
--* Usage         : FN_FWB_PURGE ODATE                                         *
--******************************************************************************
--* DESCRIPTION              This will drop the oldest week partitions of         *
--*                      XDMADM.INVNTY_TRK_CORP_DLY,                           *
--*                      XDMADM.FWB_MDL,                                       *
--*                       XDMADM.FWB_MDL_BRIDGE                                *
--*----------------------------------------------------------------------------*
--* PARM Used:ODATE  - OPERATION DATE - Format YYYYMMDD                        *
--* -------------------------------------------------------------------------- *
--*  Return Code : 0 Successful, Others - Load Failed                          *
--******************************************************************************
--*  Ver  Date        User Id     Changes Description                          *
--*  ===  ========     =======   ==============================================*
--*  1.0  08-10-2011   VF06026    Initial release of this function             *
--
--******************************************************************************
--* EIW Standard Variables                                                     *
--******************************************************************************
  CON_PROCESS_NAME  CONSTANT varchar2(40) := 'FN_FWB_PURGE';
--******************************************************************************
--* Program Variables                                                          *
--******************************************************************************
    V_SUNDAY                  VARCHAR2 (10):= 'SUNDAY';
    V_FISC_YR_WK_MIN_20       VARCHAR2(10);
    V_INV_PARTITION_NAME      VARCHAR2(100);
    V_MDL_PARTITION_NAME      VARCHAR2(100);
    V_BRIDGE_PARTITION_NAME   VARCHAR2(100);
    V_PART_DT                 VARCHAR2(25);
    V_INV_CODE                NUMBER;
    V_MDL_CODE                NUMBER;
    V_BRIDGE_CODE             NUMBER;
    V_OUT_MSG                 VARCHAR2(255);
    V_MINUS_140               DATE;
    V_CLNDR_DT                DATE;
    V_STRT_DT                 DATE;
    V_END_DT                  DATE;
    V_OPER_DT                 DATE := TO_DATE(ODATE,'YYYYMMDD');
    V_SUBOBJECT_NAME          VARCHAR2(255);
    V_SEVEN_DAYS              NUMBER:=7;
    V_ONE_DAY                 NUMBER:=1;
    V_140_DAYS                NUMBER:=140;
    --******************************************************************************
    --* Define Source and Target Schema and Table Names as variables for USFDBA PKG*
    --******************************************************************************
     V_OWNER                   VARCHAR2(40) := 'XDMADM' ;
     V_FWB_TABLE_NAME          VARCHAR2(40) := 'FWB_MDL';
     V_BRIDGE_TABLE_NAME       VARCHAR2(40) := 'FWB_MDL_BRIDGE';
     V_INV_TABLE_NAME          VARCHAR2(40) := 'INVNTY_TRK_CORP_DLY';
     V_TGT_TABLE_OWNER         VARCHAR2(30):='XDMADM';
     V_TGT_TABLE_NAME          VARCHAR2(30):='ERROR_IN_TBL_NAME';

--******************************************************************************
--* Define Variables for publishing Run details in EIW process log             *
--******************************************************************************
   V_PRCS_NM            VARCHAR(100);
   v_prcs_stp           varchar(125);
   v_prcs_pram          varchar(100);
   v_prcs_err_cd        varchar(200);
   v_prcs_err_msg       varchar(200);
--******************************************************************************
--* Define User Defined Exceptions                                             *
--******************************************************************************
   ALL_EXCEPTIONS       EXCEPTION;

--******************************************************************************
--* Program Start                                                              *
--******************************************************************************
   BEGIN
        V_PRCS_STP := 'Start Process '||CON_PROCESS_NAME;
        DBMS_OUTPUT.PUT_LINE (V_PRCS_STP);
        V_PRCS_STP := 'Start Time:'||TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS');
        DBMS_OUTPUT.PUT_LINE (V_PRCS_STP);
        V_PRCS_NM  := CON_PROCESS_NAME ;
        DBMS_OUTPUT.PUT_LINE (V_PRCS_NM);
        V_PRCS_PRAM:= '   ODATE = '||ODATE;
        DBMS_OUTPUT.PUT_LINE (V_PRCS_PRAM);


--******************************************************************************
--* GET FISC WK YR from TIME CORP, account for previous year check
--******************************************************************************

   V_MINUS_140 :=V_OPER_DT-V_140_DAYS;

   V_PRCS_STP :='ODATE - 140 DAYS= '||V_MINUS_140;
   DBMS_OUTPUT.PUT_LINE (V_PRCS_STP);

    IF V_OPER_DT > SYSDATE THEN
        V_PRCS_STP := 'Error: ODATE is greater than sysdate: '||V_OPER_DT;
        DBMS_OUTPUT.PUT_LINE (V_PRCS_STP);
        RETURN 1;
     END IF;

/****** get the fiscal week minus 20 weeks or 140 days to account for previous year ******/
    SELECT FISC_YR_WK
    INTO V_FISC_YR_WK_MIN_20
    FROM XDMADM.TIME_CORP
    WHERE CLNDR_DT=V_MINUS_140;

    --DBMS_OUTPUT.PUT_LINE ('V_FISC_YR_WK_MIN_20 = '||V_FISC_YR_WK_MIN_20);


    SELECT CLNDR_DT
    INTO V_CLNDR_DT
    FROM XDMADM.TIME_CORP
    WHERE FISC_YR_WK=V_FISC_YR_WK_MIN_20
    AND FISC_DAY_NM=V_SUNDAY;

    --DBMS_OUTPUT.PUT_LINE ('V_CLNDR_DT to use for date calc = '||V_CLNDR_DT);
    --DBMS_OUTPUT.PUT_LINE ('V_SEVEN_DAYS = '||V_SEVEN_DAYS);

    V_STRT_DT:=V_CLNDR_DT-V_SEVEN_DAYS;
    --DBMS_OUTPUT.PUT_LINE ('V_STRT_DT, start date = '||V_STRT_DT);

    V_END_DT:=V_CLNDR_DT-V_ONE_DAY;

    --DBMS_OUTPUT.PUT_LINE ('V_END_DT, end date = '||V_END_DT);


--******************************************************************************
--* Get partition name to be dropped from the 3 tables
--*  and call USFDBA.TABLE_PKG.DROP_PARTITION for each TABLE
--******************************************************************************
       V_PRCS_STP := 'Begin drop partition process ';
        DBMS_OUTPUT.PUT_LINE (V_PRCS_STP);

       ---DAILY INVENTORY TABLE
     BEGIN
        SELECT SUBOBJECT_NAME
         INTO V_INV_PARTITION_NAME
         FROM XDMADM.INVNTY_TRK_CORP_DLY M,
          (SELECT DATA_OBJECT_ID, SUBOBJECT_NAME FROM ALL_OBJECTS
            WHERE OWNER = V_OWNER AND
                  OBJECT_NAME = V_INV_TABLE_NAME AND
                  OBJECT_TYPE = 'TABLE PARTITION') PARTS
            WHERE M.INVNTY_DT BETWEEN V_STRT_DT AND V_END_DT
            AND ROWNUM = 1
            AND DATA_OBJECT_ID = DBMS_MVIEW.PMARKER(M.ROWID);

        v_prcs_stp := 'Dly Inv partition name dropped '||V_INV_PARTITION_NAME;
        DBMS_OUTPUT.PUT_LINE (V_PRCS_STP);

         --- DROP PARTITON TO DAILY INVENTORY TABLE -----------------


       --DBMS_OUTPUT.PUT_LINE ('CALL TO DROP INV PARTITION function');
       V_INV_CODE:= USFDBA.TABLE_PKG.DROP_PARTITION(V_OUT_MSG
                                                    ,V_OWNER
                                                    ,V_INV_TABLE_NAME
                                                    ,V_INV_PARTITION_NAME);

      --DBMS_OUTPUT.PUT_LINE ('DROP INV PARTITION function executed');
      --DBMS_OUTPUT.PUT_LINE ('V_INV_CODE:= '||V_INV_CODE);
      --DBMS_OUTPUT.PUT_LINE ('INV - USFDBA.TABLE_PK.DROP_PARTITION out_msg= '||V_OUT_MSG);

     EXCEPTION
     WHEN NO_DATA_FOUND THEN
          V_PRCS_STP :='INV Partition not found, Do not fail ,SQLCODE:  ' || SQLCODE || ' , ' || SQLERRM;
          DBMS_OUTPUT.PUT_LINE (V_PRCS_STP);
     END;


     BEGIN
        ---FORWARD BUY MODEL TABLE
         SELECT SUBOBJECT_NAME
         INTO V_MDL_PARTITION_NAME
         FROM XDMADM.FWB_MDL M,
               (SELECT DATA_OBJECT_ID, SUBOBJECT_NAME FROM ALL_OBJECTS
                WHERE OWNER = V_OWNER AND
                      OBJECT_NAME = V_FWB_TABLE_NAME AND
                      OBJECT_TYPE = 'TABLE PARTITION') PARTS
          WHERE M.STRT_DT BETWEEN V_STRT_DT AND V_END_DT
          AND ROWNUM = 1
          AND DATA_OBJECT_ID = DBMS_MVIEW.PMARKER(M.ROWID);

        V_PRCS_STP := 'FWB_MDL  partition name to be dropped '||V_MDL_PARTITION_NAME;
        DBMS_OUTPUT.PUT_LINE (V_PRCS_STP);

        --- DROP PARTITON TO FWB_MDL TABLE ---------------


       --DBMS_OUTPUT.PUT_LINE ('CALL TO DROP FWB_MDL PARTITION function');
       V_MDL_CODE:= USFDBA.TABLE_PKG.DROP_PARTITION(V_OUT_MSG
                                                    ,V_OWNER
                                                    ,V_FWB_TABLE_NAME
                                                    ,V_MDL_PARTITION_NAME);

      --DBMS_OUTPUT.PUT_LINE ('DROP FWB_MDL PARTITION function executed');
      --DBMS_OUTPUT.PUT_LINE ('V_MDL_CODE:= '||V_MDL_CODE);
      --DBMS_OUTPUT.PUT_LINE (' FWB_MDL/USFDBA.TABLE_PK.DROP_PARTITION out_msg= '||V_OUT_MSG);

    EXCEPTION
     WHEN NO_DATA_FOUND THEN
         v_prcs_stp :='FWB_MDL Partition not found, Do not fail , SQLCODE: ' || SQLCODE || ' , ' || SQLERRM;
         DBMS_OUTPUT.PUT_LINE (V_PRCS_STP);
     END;

    BEGIN
        ---FORWARD BUY BRIDGE  TABLE
         SELECT SUBOBJECT_NAME
         INTO V_BRIDGE_PARTITION_NAME
         FROM XDMADM.FWB_MDL_BRIDGE M,
               (SELECT DATA_OBJECT_ID, SUBOBJECT_NAME FROM ALL_OBJECTS
                WHERE OWNER = V_OWNER AND
                      OBJECT_NAME = V_BRIDGE_TABLE_NAME AND
                      OBJECT_TYPE = 'TABLE PARTITION') PARTS
          WHERE M.PRCS_DT BETWEEN V_STRT_DT AND V_END_DT
          AND ROWNUM = 1
          AND DATA_OBJECT_ID = DBMS_MVIEW.PMARKER(M.ROWID);

        V_PRCS_STP := 'FWB_MDL_BRIDGE  partition name to be dropped '||V_BRIDGE_PARTITION_NAME;
        DBMS_OUTPUT.PUT_LINE (V_PRCS_STP);


         -- DROP PARTITON TO FWB_MDL_BRIDGE TABLE ---

       --DBMS_OUTPUT.PUT_LINE ('CALL TO DROP FWB_MDL_BRIDGE PARTITION function');
       V_BRIDGE_CODE:= USFDBA.TABLE_PKG.DROP_PARTITION(V_OUT_MSG
                                                      ,V_OWNER
                                                      ,V_BRIDGE_TABLE_NAME
                                                      ,V_BRIDGE_PARTITION_NAME);

      --DBMS_OUTPUT.PUT_LINE ('DROP FWB_MDL BRIDGE PARTITION function executed');
      --DBMS_OUTPUT.PUT_LINE ('V_BRIDGE_CODE:= '||V_BRIDGE_CODE);
      --DBMS_OUTPUT.PUT_LINE ('bridge - USFDBA.TABLE_PK.DROP_PARTITION out_msg= '||V_OUT_MSG);

    EXCEPTION
     WHEN NO_DATA_FOUND THEN
         V_PRCS_STP :='BRIDGE Partition not found, Do not fail , SQLCODE: ' || SQLCODE || ' , ' || SQLERRM;
         DBMS_OUTPUT.PUT_LINE (V_PRCS_STP);
     END;

  --******************************************************************************
  --* end of Get partition name and call to  USFDB PACKAGE for each TABLE
  --******************************************************************************

      V_PRCS_STP :='End Process: '||CON_PROCESS_NAME;
      DBMS_OUTPUT.PUT_LINE (V_PRCS_STP);
      V_PRCS_STP :='End Time:'||TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS');
      DBMS_OUTPUT.PUT_LINE (V_PRCS_STP);

      RETURN 0;
--******************************************************************************
--* Exception Handling, TRAP ALL ERROR EXCEPT FOR NO DATA FOUND                 *
--******************************************************************************
   EXCEPTION
      WHEN OTHERS
      THEN
         V_PRCS_STP :='Catch all - SQLCODE , SQLERRM :' || SQLCODE || ' , ' || SQLERRM;
          DBMS_OUTPUT.PUT_LINE (V_PRCS_STP);
          V_PRCS_STP :=V_PRCS_NM||' - '||V_PRCS_PRAM;
          DBMS_OUTPUT.PUT_LINE (V_PRCS_STP);
         return 1;
   END;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_RNK_EXCLUDE_VPD" (p_schema       IN VARCHAR2,
                                                     p_objname      IN VARCHAR2)
   RETURN VARCHAR2 AS
   /***********************************************************************
   * Name: FN_RNK_EXCLUDE_VPD
   * Type: Function
   * Description: VPD Function to exclude users belonging to specific divisions from
   *              seeing data in the sales ranking reports.
   *  REVISIONS:
   *  Ver        Date        Author           Description
   *  ---------  ----------  ---------------  ------------------------------------
   *  1.0        01/16/2014  Matt Nicol       Created this function
   ************************************************************************/
   c_start                CONSTANT NUMBER := DBMS_UTILITY.get_time;
   c_fn_nm                CONSTANT VARCHAR2(30) := 'FN_RNK_EXCLUDE_VPD';
   l_security_predicate   VARCHAR2(4000) DEFAULT NULL;
   l_cur_sql              VARCHAR2(4000) := SYS_CONTEXT('USERENV', 'CURRENT_SQL');
   l_sbjct_area           VARCHAR2(100) := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_sbjct_area_attr);
   l_vpd_exempt           VARCHAR2(1) := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_exempt_attr);
   l_all_divs             VARCHAR2(1) := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_alldivs_attr);
   l_exclude_cnt          NUMBER;
BEGIN
   --If no subject area context is set then return predicate filtering all data
   IF l_sbjct_area IS NULL THEN
      l_security_predicate   := '1=2';
      ctladm.pkg_vpd_debug_util.vpd_debug('NO SA',
                                          c_fn_nm,
                                          USER,
                                          p_schema,
                                          p_objname,
                                          l_sbjct_area,
                                          l_vpd_exempt,
                                          l_all_divs,
                                          l_cur_sql,
                                          l_security_predicate,
                                          (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   -- Check if user is exempt based on current subject area context
   -- If so, return predicate without any filter
   IF l_vpd_exempt = 'Y' THEN
      l_security_predicate   := '1=1';
      ctladm.pkg_vpd_debug_util.vpd_debug('EXEMPT',
                                          c_fn_nm,
                                          USER,
                                          p_schema,
                                          p_objname,
                                          l_sbjct_area,
                                          l_vpd_exempt,
                                          l_all_divs,
                                          l_cur_sql,
                                          l_security_predicate,
                                          (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   -- Check if user has all division access based on current subject area context
   -- If so, return predicate without any filter
   IF l_all_divs = 'Y' THEN
      l_security_predicate   := '1=1';
      ctladm.pkg_vpd_debug_util.vpd_debug('ALL DIVS',
                                          c_fn_nm,
                                          USER,
                                          p_schema,
                                          p_objname,
                                          l_sbjct_area,
                                          l_vpd_exempt,
                                          l_all_divs,
                                          l_cur_sql,
                                          l_security_predicate,
                                          (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   SELECT COUNT( * )
     INTO l_exclude_cnt
     FROM xdmadm.obiee_user_ad_group ad
    WHERE username = USER
      AND EXISTS (SELECT 'X'
                    FROM xdmadm.param_value
                   WHERE app_name = 'SLS_RNK'
                     AND param_type = 'EXCLUDE_BRNCH_CD'
                     AND param_value_chr = ad.brnch_cd);

   IF (l_exclude_cnt > 0) THEN
      l_security_predicate   := '1=2';
      ctladm.pkg_vpd_debug_util.vpd_debug('EXCLUDE BRNCH',
                                          c_fn_nm,
                                          USER,
                                          p_schema,
                                          p_objname,
                                          l_sbjct_area,
                                          l_vpd_exempt,
                                          l_all_divs,
                                          l_cur_sql,
                                          l_security_predicate,
                                          (DBMS_UTILITY.get_time - c_start) / 100);
      RETURN l_security_predicate;
   ELSE
      l_security_predicate   := '1=1';
      ctladm.pkg_vpd_debug_util.vpd_debug('NO EXCLUDE',
                                          c_fn_nm,
                                          USER,
                                          p_schema,
                                          p_objname,
                                          l_sbjct_area,
                                          l_vpd_exempt,
                                          l_all_divs,
                                          l_cur_sql,
                                          l_security_predicate,
                                          (DBMS_UTILITY.get_time - c_start) / 100);
      RETURN l_security_predicate;
   END IF;
EXCEPTION
   WHEN OTHERS THEN
      l_security_predicate   := '1=2';
      ctladm.pkg_vpd_debug_util.vpd_debug(SQLCODE || '-' || SQLERRM,
                                          c_fn_nm,
                                          USER,
                                          p_schema,
                                          p_objname,
                                          l_sbjct_area,
                                          l_vpd_exempt,
                                          NULL,
                                          l_cur_sql,
                                          l_security_predicate,
                                          (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
END fn_rnk_exclude_vpd;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_CUST_CLSFCTN_CORP_WKLY" (v_in_odate IN VARCHAR2)
   RETURN NUMBER IS
   /***********************************************************************
   ** Program Name:  XDMADM.FN_CUST_CLSFCTN_CORP_WKLY
   **
   ** Description: . This function will reclassify all customers in the
   ** current week by comparing current week sales to same week
   ** last year sales. It truncates and loads XDMADM.CUST_CLSFCTN work table.
   ** Then data from said table is MERGED into XDMADM.CUST_CLSFCTN_WKLY_CORP
   ** target table.
   **
   ** Called by: DBMXDMCustClsfctinWkly.sh
   **
   ** Input parameter: ODATE  (YYYYMMDD)
   **
   ** Output parameters :
   **
   ** Modification Log:
   ** 05/19/2020  David Li   Modified GROSS_TGP to exclude Auto Shipping Charge(ASC) when ASC_ORD_APLY_IND = 'P'.
   ************************************************************************/

   -- VARIABLES
   v_odate                        DATE := TO_DATE(v_in_odate, 'YYYYMMDD');
   v_end_dt                       DATE;
   v_fisc_mth_strt_dt             DATE;
   v_fisc_mth_end_dt              DATE;
   v_fisc_wk_strt_dt_yrago        DATE;
   v_fisc_wk_end_dt_yrago         DATE;
   v_fisc_mth_strt_dt_yrago       DATE;
   v_fisc_mth_end_dt_yrago        DATE;
   v_fisc_yr                      NUMBER(4);
   v_fisc_mth_of_yr               VARCHAR2(2);
   v_fisc_wk_of_yr                NUMBER(2);
   v_py_max_wk                    NUMBER(2);
   v_last_fisc_mth_of_yr          NUMBER;
   v_fisc_yr_last_mth             NUMBER;
   v_last_fisc_mth_strt_dt        DATE;
   v_fisc_yr_mth                  NUMBER;
   v_prd_strt_dt                  DATE;
   v_prd_end_dt                   DATE;
   v_fisc_wk_strt_dt              DATE;
   v_fisc_wk_end_dt               DATE;
   v_fisc_yr_wk                   NUMBER;


BEGIN
   -- Get date parameters
   -- ODATE should be a date which determines the last sales record (based on prcs_dt)
   -- that will be included in the sales comparison for current year sales.
   -- Whatever week the date falls on is the processing week.

         v_end_dt   := v_odate;

    SELECT t.fisc_yr, t.fisc_wk_of_yr, t.fisc_yr_wk
     INTO v_fisc_yr, v_fisc_wk_of_yr, v_fisc_yr_wk
     FROM xdmadm.time_corp t
    WHERE t.clndr_dt = v_end_dt;

   SELECT  t.fisc_mth_of_yr, t.fisc_yr_mth
     INTO  v_fisc_mth_of_yr, v_fisc_yr_mth
     FROM xdmadm.time_corp t
    WHERE t.clndr_dt = v_end_dt;

   SELECT MIN(clndr_dt), MAX(clndr_dt)
     INTO v_prd_strt_dt, v_prd_end_dt
     FROM xdmadm.time_corp
    WHERE fisc_yr_mth = v_fisc_yr_mth;

   SELECT MIN(t.clndr_dt),
          MAX(t.clndr_dt),
		  MIN(clndr_dt_yrago),
          MAX(clndr_dt_yrago)
     INTO v_fisc_wk_strt_dt,
	      v_fisc_wk_end_dt,
		  v_fisc_wk_strt_dt_yrago,
	      v_fisc_wk_end_dt_yrago
     FROM xdmadm.time_corp t
    WHERE t.fisc_yr_wk IN (SELECT fisc_yr_wk
                             FROM xdmadm.time_corp
                            WHERE clndr_dt = v_end_dt);


   SELECT MIN(clndr_dt),
          MAX(clndr_dt),
          MIN(clndr_dt_yrago),
          MAX(clndr_dt_yrago)
     INTO v_fisc_mth_strt_dt,
          v_fisc_mth_end_dt,
          v_fisc_mth_strt_dt_yrago,
          v_fisc_mth_end_dt_yrago
     FROM xdmadm.time_corp t
    WHERE t.fisc_yr = v_fisc_yr
      AND t.fisc_mth_of_yr = v_fisc_mth_of_yr;

   SELECT MAX(t.fisc_wk_of_yr)
     INTO v_py_max_wk -- check if prior year has 53 weeks
     FROM xdmadm.time_corp t
    WHERE t.fisc_yr = v_fisc_yr - 1;

   SELECT MAX(fisc_mth_of_yr), MAX(fisc_yr), MIN(clndr_dt)
     INTO v_last_fisc_mth_of_yr, v_fisc_yr_last_mth, v_last_fisc_mth_strt_dt
     FROM xdmadm.time_corp a
    WHERE fisc_yr_mth = (SELECT MAX(a.fisc_yr_mth) --min(fisc_mth_of_yr) fisc_mth_of_yr, max(a.fisc_yr) fisc_yr
                           FROM xdmadm.time_corp a
                          WHERE a.fisc_yr_mth < (SELECT a.fisc_yr_mth
                                                   FROM xdmadm.time_corp a
                                                  WHERE a.clndr_dt = v_end_dt));


   -- truncate table
   EXECUTE IMMEDIATE 'TRUNCATE TABLE CUST_CLSFCTN_WKLY_WRK';

   DBMS_OUTPUT.put_line('Table xdmadm.CUST_CLSFCTN_WKLY_WRK truncated ' || SYSTIMESTAMP);

   -- build period classification data
   INSERT INTO xdmadm.CUST_CLSFCTN_WKLY_WRK(cust_nbr, div_nbr, fisc_yr, fisc_mth_of_yr,fisc_yr_wk, fisc_wk_of_yr, cust_clsfctn,
                                   fisc_wk_strt_dt, fisc_wk_end_dt, fisc_wk_strt_dt_yrago, fisc_wk_end_dt_yrago, crt_dt, upd_dt, drops, grs_sls_extnd,
                                   qty_ship,unfrm_grs_sls_extnd, unfrm_dwa_cost_extnd, unfrm_ttl_vndr_fnd_dvt, unfrm_qty_ship, unfrm_grs_tgp, unfrm_grs_tgp_per_drop)
      SELECT c.cust_nbr,
             c.div_nbr,
             c.fisc_yr,
             c.fisc_mth_of_yr,
			 c.fisc_yr_wk,
             c.fisc_wk_of_yr,
             CASE
                WHEN no_cd_unfrm_sales_ty > 0
                 AND no_cd_unfrm_sales_ly > 0 THEN
                   'PENETRATION'
                WHEN no_cd_unfrm_sales_ty > 0
                 AND no_cd_unfrm_sales_ly <= 0 THEN
                   'NEW'
                WHEN no_cd_unfrm_sales_ty <= 0
                 AND no_cd_unfrm_sales_ly > 0 THEN
                   'LOST'
                ELSE
                   'OTHER'
             END
                AS cust_clsfctn,
             v_fisc_wk_strt_dt,
             v_fisc_wk_end_dt,
             v_fisc_wk_strt_dt_yrago,
             v_fisc_wk_end_dt_yrago,
             SYSDATE AS crt_dt,
			 SYSDATE AS upd_dt,
             c.drops,
             c.grs_sls_extnd,
             c.qty_ship,
             c.unfrm_grs_sls_extnd,
			 c.unfrm_dwa_cost_extnd,
			 c.unfrm_ttl_vndr_fnd_dvt,
			 c.unfrm_qty_ship,
             c.unfrm_grs_tgp,
             CASE
                WHEN c.unfrm_grs_tgp <> 0 THEN CASE WHEN drops <> 0 THEN c.unfrm_grs_tgp / c.drops ELSE 0 END
                ELSE NULL
             END
                unfrm_grs_tgp_per_drop

        FROM (  SELECT cust_nbr,
                       div_nbr,
                       fisc_yr,
                       fisc_mth_of_yr,
					   fisc_yr_wk,
					   fisc_wk_of_yr,
                       SUM(NVL(sales_ty, 0)) AS sales_ty,
                       SUM(NVL(sales_ly, 0)) AS sales_ly,
                       SUM(NVL(no_cd_unfrm_sales_ty, 0)) AS no_cd_unfrm_sales_ty,
                       SUM(NVL(no_cd_unfrm_sales_ly, 0)) AS no_cd_unfrm_sales_ly,
                       SUM(NVL(drops, 0)) drops,
                       SUM(NVL(grs_sls_extnd, 0)) grs_sls_extnd,
                       SUM(NVL(qty_ship, 0)) qty_ship,
                       SUM(NVL(unfrm_grs_sls_extnd, 0)) unfrm_grs_sls_extnd,
                       SUM(NVL(unfrm_dwa_cost_extnd, 0)) unfrm_dwa_cost_extnd,
					   SUM(NVL(unfrm_ttl_vndr_fnd_dvt, 0)) unfrm_ttl_vndr_fnd_dvt,
                       SUM(NVL(unfrm_qty_ship, 0)) unfrm_qty_ship,
                       SUM(NVL(unfrm_grs_tgp, 0)) unfrm_grs_tgp
                       FROM (SELECT cust_list.cust_nbr,
                               cust_list.div_nbr,
                               cust_list.fisc_yr,
                               cust_list.fisc_mth_of_yr,
							   cust_list.fisc_yr_wk,
							   cust_list.fisc_wk_of_yr,
                               CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr THEN NVL(cust_sales_ty_ly.grs_sls_extnd, 0)
                                  ELSE 0
                               END
                                  sales_ty,
                               CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr - 1 THEN
                                     NVL(cust_sales_ty_ly.grs_sls_extnd, 0)
                                  ELSE
                                     0
                               END
                                  sales_ly,
                               CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr THEN
                                     NVL(cust_sales_ty_ly.no_cd_unfrm_grs_sls_extnd, 0)
                                  ELSE
                                     0
                               END
                                  no_cd_unfrm_sales_ty,
                               CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr - 1 THEN
                                     NVL(cust_sales_ty_ly.no_cd_unfrm_grs_sls_extnd, 0)
                                  ELSE
                                     0
                               END
                                  no_cd_unfrm_sales_ly,
                               CASE WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr THEN cust_sales_ty_ly.drops END drops,
                               CASE WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr THEN cust_sales_ty_ly.grs_sls_extnd END
                                  grs_sls_extnd,
                               CASE WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr THEN cust_sales_ty_ly.qty_ship END qty_ship,
                               CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr THEN cust_sales_ty_ly.unfrm_grs_sls_extnd
                               END
                                  unfrm_grs_sls_extnd,
								CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr THEN cust_sales_ty_ly.unfrm_dwa_cost_extnd
                               END
                                  unfrm_dwa_cost_extnd,
								CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr THEN cust_sales_ty_ly.unfrm_ttl_vndr_fnd_dvt
                               END
                                  unfrm_ttl_vndr_fnd_dvt,

                               CASE WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr THEN cust_sales_ty_ly.unfrm_qty_ship END
                                  unfrm_qty_ship,
                              CASE WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr THEN cust_sales_ty_ly.unfrm_grs_tgp END
                                  unfrm_grs_tgp

                               FROM (SELECT DISTINCT cc.cust_sk,
                                                s.div_nbr,
                                                s.cust_nbr,
                                                v_fisc_yr AS fisc_yr,
                                                v_fisc_mth_of_yr AS fisc_mth_of_yr,
                                                v_fisc_yr_wk AS fisc_yr_wk,
												v_fisc_wk_of_yr as fisc_wk_of_yr

                                  FROM xdmadm.time_corp t,
                                       xdmadm.sales_corp s,
                                       xdmadm.div_corp d,
                                       xdmadm.cust_corp cc
                                 WHERE t.fisc_yr IN (v_fisc_yr - 1, v_fisc_yr)
                                   --AND t.fisc_mth_of_yr = v_fisc_mth_of_yr  Made change for Sprint 7 to add customer who had sales for one plus current year
                                   AND s.prcs_dt = t.clndr_dt
                                   AND s.div_nbr = d.div_nbr
                                   AND s.cust_nbr = cc.cust_nbr
                                   AND s.div_nbr = cc.div_nbr
                                   AND s.xfer_to_dt IS NULL
                                   AND (d.conv_to_div_nbr IS NULL
                                     OR d.conv_on_date > SYSDATE)) cust_list,
                               (  SELECT s.div_nbr,
                                         s.cust_nbr,
                                         t.fisc_yr,
                                         t.fisc_mth_of_yr AS fisc_mth_of_yr,
                                         t.fisc_yr_wk AS fisc_yr_wk,
										 t.fisc_wk_of_yr AS fisc_wk_of_yr,
                                         COUNT(
                                            DISTINCT CASE
                                                        WHEN s.trans_typ = 'RT'
                                                         AND p.pim_suprcls_id <> 97
                                                         AND p.pim_suprcls_id IS NOT NULL THEN
                                                           s.div_nbr || cust_nbr || inv_dt || NVL(dlvr_rte, '') || prcs_dt
                                                        ELSE
                                                           NULL
                                                     END)
                                            drops,
                                         SUM(grs_sls_extnd) AS grs_sls_extnd,
                                         SUM(CASE
                                                WHEN s.trans_typ IN ('RT', 'VS', 'WC')
                                                 AND p.pim_suprcls_id <> 97
                                                 AND p.pim_suprcls_id IS NOT NULL THEN
                                                   s.grs_sls_extnd
                                                ELSE
                                                   NULL
                                             END)
                                            no_cd_unfrm_grs_sls_extnd,
                                         SUM(qty_ship) AS qty_ship,

                                         SUM(CASE
                                                WHEN p.pim_suprcls_id <> 97
                                                 AND p.pim_suprcls_id IS NOT NULL THEN
                                                   grs_sls_extnd
                                                ELSE
                                                   0
                                             END)
                                            unfrm_grs_sls_extnd,

                                         SUM(CASE
                                                WHEN p.pim_suprcls_id <> 97
                                                 AND p.pim_suprcls_id IS NOT NULL THEN
                                                   NVL(s.dwa_cost_extnd , 0)
                                                ELSE
                                                   0
                                             END)
                                            unfrm_dwa_cost_extnd,
											 SUM(CASE
                                                WHEN p.pim_suprcls_id <> 97
                                                 AND p.pim_suprcls_id IS NOT NULL THEN
                                                   NVL(s.ttl_vndr_fnd_dvt , 0)
                                                ELSE
                                                   0
                                             END)
                                            unfrm_ttl_vndr_fnd_dvt,

											SUM(unfrm_qty_ship) unfrm_qty_ship,

                                         SUM(CASE
                                                WHEN p.pim_suprcls_id <> 97
                                                 AND p.pim_suprcls_id IS NOT NULL THEN
                                                   NVL(s.grs_sls_extnd - s.dwa_cost_extnd - (CASE WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END) + s.ttl_vndr_fnd_dvt, 0)
                                                ELSE
                                                   0
                                             END)
                                            unfrm_grs_tgp

                                    FROM xdmadm.time_corp t,
                                         xdmadm.sales_corp s,
                                         xdmadm.div_corp d,
                                         xdmadm.div_corp d2,
                                         xdmadm.pim_corp p
                                   WHERE t.fisc_yr IN (v_fisc_yr, v_fisc_yr - 1)
                                     AND t.fisc_wk_of_yr = v_fisc_wk_of_yr
                                     AND s.pim_usf_std_prod_cd = p.pim_usf_std_prod_cd
                                     AND t.fisc_wk_of_yr <> CASE
                                                               WHEN t.fisc_yr = v_fisc_yr - 1
                                                                AND v_fisc_mth_of_yr = '12'
                                                                AND v_py_max_wk = 53 THEN
                                                                  53 -- *** WEEK 52-53 LOGIC *** exclude week #53 from last year if current period=12 and last year has 53 weeks
                                                               ELSE
                                                                  99 -- else, include all weeks
                                                            END
                                     AND t.clndr_dt <= v_end_dt -- process only sales up to the last closed week
                                     AND s.prcs_dt = t.clndr_dt
                                     AND s.div_nbr = d.div_nbr
                                     AND (d.conv_to_div_nbr IS NULL
                                       OR d.conv_on_date > SYSDATE)
                                     AND s.xfer_to_dt IS NULL
                                     AND NVL(s.sls_revenue_div_nbr, s.div_nbr) = d2.div_nbr
                                     AND d2.div_typ_cd <> 'CC'
									 AND  (case when NVL (d2.acqstn_cmpny_nm,'USF') <> 'USF'
									 and NVL(s.sls_revenue_div_nbr, s.div_nbr) = d2.div_nbr
									 and s.prcs_dt < NVL(d2.acqstn_dt,s.prcs_dt)
									 then 'NON_USFGL' else 'USFGL' END) ='USFGL'
									 --AND NVL (d2.acqstn_cmpny_nm,'USF') = 'USF'  --Modified for Acquisition
                                GROUP BY s.div_nbr,
                                         s.cust_nbr,
                                         t.fisc_yr,
                                         t.fisc_mth_of_yr,
                                         t.fisc_yr_wk,
                                         t.fisc_wk_of_yr) cust_sales_ty_ly -- inline view to get cust/div sales this year and last year
                         WHERE cust_list.cust_nbr = cust_sales_ty_ly.cust_nbr(+) -- left outer join this year and last year sales views to cust/div view
                           AND cust_list.div_nbr = cust_sales_ty_ly.div_nbr(+) -- outer join allows return of all cust/div even when no sales in that year
                           AND cust_list.fisc_wk_of_yr = cust_sales_ty_ly.fisc_wk_of_yr(+))
              GROUP BY
                       cust_nbr,
                       div_nbr,
                       fisc_yr,
                       fisc_mth_of_yr,
                       fisc_wk_of_yr,
                       fisc_yr_wk
                       ) c;

   COMMIT;

   DBMS_OUTPUT.put_line('Table xdmadm.cust_clsfctn loaded ' || SYSTIMESTAMP);

   -- merge weekly classification data to target table
   MERGE INTO xdmadm.cust_clsfctn_wkly_corp tgt
        USING (SELECT cust_nbr,
                      div_nbr,
                      fisc_yr,
                      fisc_mth_of_yr,
                      fisc_yr_wk,
					  fisc_wk_of_yr,
                      cust_clsfctn,
                      fisc_wk_strt_dt,
                      fisc_wk_end_dt,
                      fisc_wk_strt_dt_yrago,
                      fisc_wk_end_dt_yrago,
                      crt_dt,
					  upd_dt,
                      drops,
                      grs_sls_extnd,
                      qty_ship,
                      unfrm_grs_sls_extnd,
					  unfrm_dwa_cost_extnd,
					  unfrm_ttl_vndr_fnd_dvt,
                      unfrm_qty_ship,
                      unfrm_grs_tgp,
                      unfrm_grs_tgp_per_drop
                      FROM xdmadm.CUST_CLSFCTN_WKLY_WRK) src
           ON (tgt.cust_nbr = src.cust_nbr
           AND tgt.div_nbr = src.div_nbr
           AND tgt.fisc_yr = src.fisc_yr
           AND tgt.fisc_mth_of_yr = src.fisc_mth_of_yr
           AND tgt.fisc_wk_of_yr = src.fisc_wk_of_yr)
   WHEN MATCHED THEN
      UPDATE SET tgt.cust_clsfctn                 = src.cust_clsfctn,
                 tgt.fisc_wk_strt_dt             = src.fisc_wk_strt_dt,
                 tgt.fisc_wk_end_dt              = src.fisc_wk_end_dt,
                 tgt.fisc_wk_strt_dt_yrago       = src.fisc_wk_strt_dt_yrago,
                 tgt.fisc_wk_end_dt_yrago        = src.fisc_wk_end_dt_yrago,
                 tgt.upd_dt                       = (    SELECT SYSDATE FROM DUAL),
                 tgt.drops                        = src.drops,
                 tgt.grs_sls_extnd                = src.grs_sls_extnd,
                 tgt.qty_ship                     = src.qty_ship,
                 tgt.unfrm_grs_sls_extnd          = src.unfrm_grs_sls_extnd,
				 tgt.unfrm_dwa_cost_extnd         = src.unfrm_dwa_cost_extnd,
				 tgt.unfrm_ttl_vndr_fnd_dvt       = src.unfrm_ttl_vndr_fnd_dvt,
                 tgt.unfrm_qty_ship               = src.unfrm_qty_ship,
                 tgt.unfrm_grs_tgp                = src.unfrm_grs_tgp,
                 tgt.unfrm_grs_tgp_per_drop       = src.unfrm_grs_tgp_per_drop

   WHEN NOT MATCHED THEN
      INSERT            ( cust_nbr, div_nbr, fisc_yr, fisc_mth_of_yr, fisc_yr_wk,
                         fisc_wk_of_yr, cust_clsfctn, fisc_wk_strt_dt, fisc_wk_end_dt, fisc_wk_strt_dt_yrago, fisc_wk_end_dt_yrago,
                         crt_dt,  drops, grs_sls_extnd, qty_ship, unfrm_grs_sls_extnd, unfrm_dwa_cost_extnd,unfrm_ttl_vndr_fnd_dvt, unfrm_qty_ship,
                          unfrm_grs_tgp, unfrm_grs_tgp_per_drop )
          VALUES ( src.cust_nbr,
                  src.div_nbr,
                  src.fisc_yr,
                  src.fisc_mth_of_yr,
                  src.fisc_yr_wk,
                  src.fisc_wk_of_yr,
                  src.cust_clsfctn,
                  src.fisc_wk_strt_dt,
                  src.fisc_wk_end_dt,
                  src.fisc_wk_strt_dt_yrago,
                  src.fisc_wk_end_dt_yrago,
                  src.crt_dt,
                  src.drops,
                  src.grs_sls_extnd,
                  src.qty_ship,
                  src.unfrm_grs_sls_extnd,
				  src.unfrm_dwa_cost_extnd,
				  src.unfrm_ttl_vndr_fnd_dvt,
                  src.unfrm_qty_ship,
                  src.unfrm_grs_tgp,
                  src.unfrm_grs_tgp_per_drop
                  );

   COMMIT;

   RETURN 0;

   -- delete the NULL classification records created during the open week
   --DELETE FROM xdmadm.cust_clsfctn_wkly_corp
       --  WHERE fisc_mth_strt_dt = v_fisc_mth_strt_dt
           --AND fisc_yr = v_fisc_yr
           --AND fisc_mth_of_yr = v_fisc_mth_of_yr
         --  AND fisc_wk_of_yr = v_fisc_wk_of_yr
          -- AND cust_clsfctn IS NULL;


EXCEPTION
   WHEN OTHERS THEN
      DBMS_OUTPUT.put_line('Error in XDMADM.fn_cust_clsfctn_corp_wkly:' || SQLCODE || ' ' || SQLERRM);
      RETURN 1;
END fn_cust_clsfctn_corp_wkly;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_SALES_SUMM_CUST_DLY_LOAD" (p_odate IN DATE)
    RETURN NUMBER
AS
    /***********************************************************************
    * Name: FN_SALES_SUMM_CUST_DLY_LOAD
    * Type: Function
    * Description: This function runs on a daily basis that will update the sales_summ_cust_mrch
    * tables.  the only fields being updated are menu_typ_cd,
    * national average, and ttl_mthly_ptnl based on when it changes in cust_corp.  This table gets loaded
    * on a monthly basis using XDMADM.FN_SALES_SUMM_CUST_MRCH_LOAD function.
    *  REVISIONS:
    *  Ver        Date        Author           Description
    *  ---------  ----------  ---------------  ------------------------------------
    *  1.0        12/12/2011  Corrie Kaczmarek     1. Created this function.
    *  1.1        02-12-2012  Corrie Kaczmarek     2. Added logic to update avg_pntrnt_rate
    *  1.2        14-05-2012  p1a0168              3. Added and cm.curr_ind (+) = 'Y'
    *  1.3        26/6/13     p1a0168              4. change to exclude CC Sales
	*  1.4        11/19/2015  Robert Moore         5. Change Minor Code to Menu Type
    ************************************************************************/
    l_ld_trm                    VARCHAR2 (30) := TO_NUMBER (TO_CHAR (SYSDATE, 'yyyymmddhh24miss'));
    l_fisc_yr_mth               VARCHAR2 (8 Byte);
    l_fisc_wks_this_pd          NUMBER;
    l_update_cnt                NUMBER;
    l_12_prd_strt_dt            DATE;
    l_12_prd_end_dt             DATE;
    l_param_value               NUMBER;

   -- v_odate                        DATE := TO_DATE (p_odate, 'YYYYMMDD');

         -- Find the menu_typ_cd, and ttl_mthly_ptnl that is different from the Sales_summ_cust_mrch and the cust corp table
    cursor cust_summ( c_fisc_wks_this_pd IN NUMBER, c_12_prd_end_dt IN DATE, c_12_prd_strt_dt IN DATE, c_param_value IN NUMBER) IS
      with pntrtn_rate as
             (select s.cust_nbr, s.div_nbr,
                    (SUM (NVL (s.grs_sls_extnd, 0))/nvl(m.avg_pntrtn_rate, l_param_value))/12 as cust_ttl_ptnl
                from xdmadm.sales_corp s,
                (SELECT DISTINCT DIV_NBR,CUST_NBR FROM xdmadm.sales_summ_cust_mrch)  c1,
                     xdmadm.CUST_AVG_PNTRTN_RATE m, --Updated Menu Typ Map Table
                     xdmadm.cust_corp c,
                     xdmadm.div_corp div                                                             --change to exclude CC Sales
               where nvl(s.SLS_REVENUE_DIV_NBR,s.div_nbr) = div.DIV_NBR and div.div_typ_cd <> 'CC'   --change to exclude CC Sales
                 and m.menu_typ_cd(+) = c.menu_typ_cd --Update Menu Type
                 and s.cust_nbr = c.cust_nbr
                 and s.div_nbr = c.div_nbr
                 and c.div_nbr = c1.div_nbr
                 and c.cust_nbr = c1.cust_nbr
                 and XFER_TO_DT IS NULL
                 and s.prcs_dt BETWEEN l_12_prd_strt_dt AND l_12_prd_end_dt
            group by s.cust_nbr, s.div_nbr, avg_pntrtn_rate)
     select s.rowid rw,c.div_nbr,c.cust_nbr,c.menu_typ_cd as new_menu_typ_cd,s.menu_typ_cd as old_menu_typ_cd,cat.pim_mrch_ctgry_nm,cust_ttl_ptnl,   --Update Menu Type
               CASE
                       WHEN c.crm_mp_fbd_prch_ovrd_ind = 'N' AND NVL(CM.MP_FOOD_BVRG_DSPSBL_PRCH,0) = 0 AND NVL(c.crm_ttl_wkly_ptnl,0) <> 0
                       THEN c.crm_ttl_wkly_ptnl * l_fisc_wks_this_pd
                       WHEN c.crm_mp_fbd_prch_ovrd_ind = 'N' AND NVL(CM.MP_FOOD_BVRG_DSPSBL_PRCH,0) <> 0
                       THEN (cm.mp_food_bvrg_dspsbl_prch / 52) * l_fisc_wks_this_pd
                       WHEN C.CRM_MP_FBD_PRCH_OVRD_IND = 'Y' AND NVL(C.CRM_TTL_WKLY_PTNL,0) = 0 AND NVL(CM.MP_FOOD_BVRG_DSPSBL_PRCH,0) <> 0
                       THEN (cm.mp_food_bvrg_dspsbl_prch / 52) * l_fisc_wks_this_pd
                       WHEN C.CRM_MP_FBD_PRCH_OVRD_IND = 'Y' AND NVL(C.CRM_TTL_WKLY_PTNL,0) <> 0
                       THEN  c.crm_ttl_wkly_ptnl * l_fisc_wks_this_pd
                       ELSE cust_ttl_ptnl
                       END new_ttl_mthly_ptnl,
               s.ttl_mthly_ptnl as old_ttl_mthly_ptnl,
               s.ntl_avg_spnd_prcnt old_ntl_avg_spnd_prcnt,
               cat.ntl_avg_spnd_prcnt  as new_ntl_avg_spnd_prcnt
         from xdmadm.cust_corp c,
              xdmadm.sales_summ_cust_mrch s,
              xdmadm.cust_mktplus_corp cm,
              xdmadm.cust_mrch_ntl_avg cat,
              pntrtn_rate p
        where c.div_nbr = s.div_nbr
          and s.cust_nbr = p.cust_nbr
          and s.div_nbr = p.div_nbr
          and c.cust_nbr = s.cust_nbr
          and cat.menu_typ_cd = c.menu_typ_cd  --Update Menu Type
          and cat.pim_mrch_ctgry_nm = s.pim_mrch_ctgry_nm
          and c.div_nbr = cm.div_nbr (+)
          and c.cust_nbr = cm.cust_nbr (+)
          and cm.curr_ind (+) = 'Y'
          and (c.menu_typ_cd <> s.menu_typ_cd    --Update Menu Type
                or CASE
                       WHEN c.crm_mp_fbd_prch_ovrd_ind = 'N' AND NVL(CM.MP_FOOD_BVRG_DSPSBL_PRCH,0) = 0 AND NVL(c.crm_ttl_wkly_ptnl,0) <> 0
                       THEN  c.crm_ttl_wkly_ptnl * l_fisc_wks_this_pd
                       WHEN c.crm_mp_fbd_prch_ovrd_ind = 'N' AND NVL(CM.MP_FOOD_BVRG_DSPSBL_PRCH,0) <> 0
                       THEN (cm.mp_food_bvrg_dspsbl_prch / 52) * l_fisc_wks_this_pd
                       WHEN C.CRM_MP_FBD_PRCH_OVRD_IND = 'Y' AND NVL(C.CRM_TTL_WKLY_PTNL,0) = 0 AND NVL(CM.MP_FOOD_BVRG_DSPSBL_PRCH,0) <> 0
                       THEN (cm.mp_food_bvrg_dspsbl_prch / 52) * l_fisc_wks_this_pd
                       WHEN C.CRM_MP_FBD_PRCH_OVRD_IND = 'Y' AND NVL(C.CRM_TTL_WKLY_PTNL,0) <> 0
                       THEN c.crm_ttl_wkly_ptnl * l_fisc_wks_this_pd
                       ELSE cust_ttl_ptnl
                       END <> nvl(s.TTL_MTHLY_PTNL,0));


                  TYPE t_cust_summ IS TABLE OF cust_summ%rowtype;
                      r_cust_summ               t_cust_summ;
BEGIN


    BEGIN

     DBMS_OUTPUT.put_line ('Get Fisc Yr Mth from Sales_summ_cust_mrch Table');

 select distinct fisc_yr_mth
 into l_fisc_yr_mth
 from xdmadm.sales_summ_cust_mrch;


    select max(clndr_dt)
    INTO l_12_prd_end_dt
    from xdmadm.time_corp
    where fisc_yr_mth in (
          SELECT MAX (a.fisc_yr_mth)
                 FROM xdmadm.time_corp a
                 WHERE a.fisc_yr_mth < (SELECT a.fisc_yr_mth
                                           FROM xdmadm.time_corp a
                                          WHERE a.clndr_dt = TRUNC (p_odate)));

  DBMS_OUTPUT.put_line('End Date: '||l_12_prd_end_dt);

     select min(clndr_dt)
   into  l_12_prd_strt_dt
     from xdmadm.time_corp
    where fisc_yr_mth in
              (select  fisc_yr_mth - 100 as "12_Mth_Ago"
                 from   xdmadm.time_corp
                 where  clndr_dt = trunc(p_odate));

 DBMS_OUTPUT.put_line('Start Date: '||l_12_prd_strt_dt);

   EXCEPTION
      WHEN OTHERS THEN
        DBMS_OUTPUT.put_line ('No Data Found XDMADM.SALES_SUMM_CUST_MRCH is Empty');
         RETURN 30;
   END;


 select distinct fisc_wks_this_pd
   into l_fisc_wks_this_pd
  from xdmadm.time_corp
 where fisc_yr_mth = l_fisc_yr_mth;

DBMS_OUTPUT.put_line (
            'fisc_yr_mth:' || l_fisc_yr_mth || ' fisc weeks this prd :'||l_fisc_wks_this_pd);

 SELECT   param_value_nbr
   INTO   l_param_value
   FROM   xdmadm.param_value
 WHERE   app_name = 'SALES_COVERAGE_MMA'
   AND   param_type ='DEFAULT_PNTRTN_RATE';

   OPEN cust_summ(l_fisc_wks_this_pd, l_12_prd_strt_dt, l_12_prd_end_dt, l_param_value);

   LOOP
     EXIT WHEN cust_summ%NOTFOUND;

DBMS_OUTPUT.put_line ('loop');
   FETCH cust_summ
   BULK COLLECT INTO r_cust_summ LIMIT 1000;

    forall i in  1 .. r_cust_summ.count()
        update xdmadm.sales_summ_cust_mrch b
      set  menu_typ_cd = r_cust_summ(i).new_menu_typ_cd,    --Update Menu Type
           ttl_mthly_ptnl = r_cust_summ(i).new_ttl_mthly_ptnl,
           ntl_avg_spnd_prcnt = r_cust_summ(i).new_ntl_avg_spnd_prcnt
     where b.rowid =  r_cust_summ(i).rw;
     /*b.div_nbr = r_cust_summ(i).div_nbr
       and b.cust_nbr = r_cust_summ(i).cust_nbr
       and b.pim_mrch_ctgry_nm = r_cust_summ(i).pim_mrch_ctgry_nm;*/
   DBMS_OUTPUT.put_line ('Rows Updated' ||SQL%rowcount);

    END LOOP;


    CLOSE cust_summ;

    commit;
    return 0;

EXCEPTION
    WHEN OTHERS
    THEN
        DBMS_OUTPUT.put_line (
            'Error:' || SQLCODE || ' ' || SQLERRM);
        RETURN 1;

END;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_XDM_SALES_CORP_UPD_AP" (
                                P_IN_DIV_NBR    IN NUMBER,
                                P_IN_SRC_TBL    IN VARCHAR2,
                                P_IN_TGT_TBL    IN VARCHAR2,
                                P_IN_START_DT   IN VARCHAR2,
                                P_IN_END_DT     IN VARCHAR2,
                                p_out_message   IN OUT VARCHAR2) RETURN NUMBER  IS
/*
NAME: FN_XDM_SALES_CORP_UPD_AP
PURPOSE: HISTORICAL UPDATE FOR AP TRANSACTIONS IN XDMADM.SALES_CORP TABLE

    XIW   1. CREATE NEW SALES_CORP SHELL - DBA
          2. INSERT-APPEND INTO NEW SHELL - DW
          3. SWAP TABLES - DBA
          DECLARE
  P_IN_DIV_NBR  NUMBER;
  P_IN_SRC_TBL  VARCHAR2(200);
  P_IN_TGT_TBL  VARCHAR2(200);
  P_IN_START_DT VARCHAR2(200);
  P_IN_END_DT   VARCHAR2(200);
  P_OUT_MESSAGE VARCHAR2(200);
  P_IN_DIV_NBR  NUMBER;
  P_IN_SRC_TBL  VARCHAR2(200);
  P_IN_TGT_TBL  VARCHAR2(200);
  P_IN_START_DT VARCHAR2(200);
  P_IN_END_DT   VARCHAR2(200);
  P_OUT_MESSAGE VARCHAR2(200);
  v_ReturnValue NUMBER;
BEGIN
  P_IN_DIV_NBR  := NULL;
  P_IN_SRC_TBL  := NULL;
  P_IN_TGT_TBL  := NULL;
  P_IN_START_DT := NULL;
  P_IN_END_DT   := NULL;
  P_OUT_MESSAGE := NULL;
  P_IN_DIV_NBR  := NULL;
  P_IN_SRC_TBL  := NULL;
  P_IN_TGT_TBL  := NULL;
  P_IN_START_DT := NULL;
  P_IN_END_DT   := NULL;
  P_OUT_MESSAGE := NULL;
  v_ReturnValue := V146026.FN_XDM_SALES_CORP_UPD_AP(P_IN_DIV_NBR => P_IN_DIV_NBR, P_IN_SRC_TBL => P_IN_SRC_TBL, P_IN_TGT_TBL => P_IN_TGT_TBL, P_IN_START_DT => P_IN_START_DT, P_IN_END_DT => P_IN_END_DT, P_OUT_MESSAGE => P_OUT_MESSAGE, P_IN_DIV_NBR => P_IN_DIV_NBR, P_IN_SRC_TBL => P_IN_SRC_TBL, P_IN_TGT_TBL => P_IN_TGT_TBL, P_IN_START_DT => P_IN_START_DT, P_IN_END_DT => P_IN_END_DT, P_OUT_MESSAGE => P_OUT_MESSAGE);
  DBMS_OUTPUT.PUT_LINE('v_ReturnValue = ' || v_ReturnValue);
END;

          This function requires the following input parameters:
          division number
          source table
          target table
          start date
          end date
*/

   v_return_nbr              NUMBER         := 0;
   v_err_msg                 VARCHAR2(32767) := NULL;
   n_return_code             NUMBER         := 0;
   v_return_message          VARCHAR2(32767) := NULL;

   v_src_cnt                 NUMBER;
   v_src_grs_sls             NUMBER;
   v_src_qty_ship            NUMBER;
   v_src_ttl_dvt             NUMBER;
   v_src_prd_alw             NUMBER;
   v_src_prd_chrg            NUMBER;
   v_src_ttl_alwnc           NUMBER;

   v_tgt_cnt                 NUMBER;
   v_tgt_grs_sls             NUMBER;
   v_tgt_qty_ship            NUMBER;
   v_tgt_ttl_dvt             NUMBER;
   v_tgt_prd_alw             NUMBER;
   v_tgt_prd_chrg            NUMBER;
   v_tgt_ttl_alwnc           NUMBER;

   v_ins_sql1         VARCHAR2(32767);
   v_ins_sql2         VARCHAR2(32767);
   v_ins_sql3          VARCHAR2(32767);
   v_ins_sql4          VARCHAR2(32767);
   v_ins_sql5         VARCHAR2(32767);
   v_ins_sql6         VARCHAR2(32767);

   v_apwith_sql1   VARCHAR2(32767);
   v_apwith_sql2   VARCHAR2(32767);
   v_apwith_sql3   VARCHAR2(32767);

   v_aptxn_sql1         VARCHAR2(32767);
   v_aptxn_sql2         VARCHAR2(32767);
   v_aptxn_sql3         VARCHAR2(32767);
   v_aptxn_sql4         VARCHAR2(32767);
   v_aptxn_sql5         VARCHAR2(32767);
   v_aptxn_sql6         VARCHAR2(32767);
   v_aptxn_sql7         VARCHAR2(32767);
   v_aptxn_sql8         VARCHAR2(32767);

   v_ap_addfilter_sql     VARCHAR2(32767);

   v_div_nbr           NUMBER;
   v_src_tbl           VARCHAR2(50);
   v_tgt_tbl           VARCHAR2(50);
   v_start_dt           VARCHAR2(12) := p_in_start_dt;
   v_end_dt             VARCHAR2(12) := p_in_end_dt;
   v_audt_sql1     VARCHAR2(2000);
   v_audt_sql2     VARCHAR2(2000);

BEGIN

   v_div_nbr  := p_in_div_nbr;
   v_src_tbl  := p_in_src_tbl;
   v_tgt_tbl  := p_in_tgt_tbl;

v_ins_sql1 := 'INSERT /*+ APPEND */ INTO ' || v_tgt_tbl || ' (acct_typ_cd_actl, acct_typ_cd_desc_actl, actl_cst, actl_extnd, actl_gp, adj_markout, alw_chrg_cd, ' ||
 ' ap_cost, ap_gain, ap_vndr_nbr_actl, brk_srchrg, bsis_alw_amt, bsis_alw_applied, bsis_alw_ind, bsis_amt, carr_addr_txt, carr_alt_id, carr_alt_id_typ_cd, ' ||
 ' carr_city_nm, carr_cmnt, carr_cntct, carr_ctry_txt, carr_data_src_cd, carr_dot_nbr, carr_email_txt, carr_eqmt_mark_typ_cd, ' ||
 ' carr_fax_nbr, carr_inv_user_id, carr_motor_carr_nbr, carr_nm, carr_phn_nbr, carr_scac_cd, ';

v_ins_sql2 := ' carr_st_cd, carr_stat_cd, carr_updt_dt, carr_updt_tm, carr_updt_user_id, carr_usf_nbr, carr_zip_cd, cde, cmpny_vndr_nbr_actl, cmsn_sls_extnd, ' ||
 ' cntrct_cpr_amt, cntrct_cpr_amt_ind, cntrct_cpr_bsis, cntrct_cpr_bsis_dt, cntrct_cpr_calc, cntrct_cpr_grp_typ, cntrct_cpr_nbr, cntrct_cpr_prod_grp, ' ||
 ' COMM_BSIS_AMT, corp_dvt_sls_base_rbt, corp_mlt_unit_desc_actl, corp_mlt_unit_nbr_actl, corp_non_dvt_sls_base_rbt, corp_prch_base_rbt, cr_dbt_rsn_cd, ' ||
 ' cr_dbt_rsn_desc, cr_memo_dlr, cr_memo_dt, cr_memo_dwa, cr_memo_nbr, cust_bus_seg_actl, cust_bus_seg_desc_actl, cust_nbr, cust_po_nbr, cust_prod_nbr, ' ||
 ' cust_sk, div_nbr, div_sk, dlvr_rte, dlvr_seq_nbr, drvr, dry_each, dry_unit, dry_wt, dstrct_cd_actl, dstrct_nm_actl, dstrct_sls_mgr_id_actl, ' ||
 ' dstrct_sls_mgr_nm_actl, ';

v_ins_sql3 := ' dvt_cost_extnd, dwa_cost_extnd, each_conv_fctr, END_DAY_CD, each_ord, each_orig, each_prc, each_rsrv, each_ship, extnd_fctr, frght_cost, ' ||
 ' frz_each, frz_unit, frz_wt, gl_sbsys_cd, grs_sls_extnd, inside_pad, inv_actl_gp, inv_dt, inv_gp, inv_nbr, lagp_per_case, ldr, ldr_seq_nbr, ' ||
 ' ldr_tm, lic_prod_extnd, lic_tot_extnd, line_nbr, lnd_actl_gp, lnd_gp, loc_dvt_sls_base_rbt, loc_int_dvt, loc_mlt_unit_desc_actl, loc_mlt_unit_nbr_actl, '||
 ' loc_mrktng_alwnc_pgms, loc_non_dvt_sls_base_rbt, loc_one_tm, loc_prch_base_rbt, loc_prom_alwnc_pgms, loc_vndr_fnd_dvt, lpp, mkt_prod_extnd, ' ||
 ' mkt_tot_extnd, mrgn_bsis, natl_int_dvt, natl_mrktng_alwnc_pgms, natl_one_tm, natl_prom_alwnc_pgms, natl_vndr_fnd_dvt, net_sls_extnd, net_wt_ship, ' ||
 ' non_prod_alwnc, non_prod_alwnc_cd, non_prod_alwnc_desc, non_prod_chrg, non_prod_chrg_cd, non_prod_chrg_desc, ';

v_ins_sql4 := ' ntv_cr_dbt_rsn_cd, ntv_cr_dbt_rsn_desc, ntv_ord_cls, ntv_ord_typ, ord_src, ord_tkr, orig_dwa_cost_extnd, orig_ldr_tm, orig_ord_dt, ' ||
 ' pick_slot_actl, pim_brnd_typ_actl, pim_brnd_typ_desc_actl, pim_cls_desc_actl, pim_cls_id_actl, pim_ctgry_desc_actl, ' ||
 ' pim_ctgry_id_actl, pim_grp_desc_actl, pim_grp_id_actl, pim_sk, pim_suprcls_desc_actl, pim_suprcls_id_actl, pim_usf_std_prod_cd, prc_mrgn, ' ||
 ' prc_src, prch_from_vndr_nbr_actl, prcs_dt, prime_aft_adj_dlr_amt, prime_aft_bsis_adj_amt, prime_aft_bsis_adj_ind, ' ||
 ' prime_bfr_adj_dlr_amt, prime_bfr_bsis_adj_amt, prime_bfr_bsis_adj_ind, prime_calc_ind, prime_cnh_cntrct_nbr, prime_cnh_prc_br_cd, ' ||
 ' prime_cns_cost_pt_mrk, prime_cns_cost_pt_rng, prime_cntrct_calc_bsis_amt, prime_cntrct_each_mrk_amt, prime_cntrct_each_mrk_typ, prime_cntrct_nm, ' ||
 ' prime_cntrct_prod_excpt_ind, prime_cost_by_po_nbr, prime_cust_prc_on_ind, prime_dvt_cost_amt, prime_dvt_cost_aply, prime_dvt_cost_typ, ';

v_ins_sql5 := ' prime_dvtn_grp_nbr, prime_dvtn_grp_nm, prime_extnd_rbl_sis_amt, prime_frght_amt, prime_frght_bsis, prime_hcp_pim_cat, prime_hcp_pim_cls, ' ||
' prime_hcp_pim_grp, prime_hcp_usf_std_prod_cd, prime_min_mrk_amt, prime_mrk_amt, prime_mrk_ind, prime_ord_orig_unit_prc, prime_prc_bsis, ' ||
' prime_prc_bsis_amt, prime_prc_by, prime_prc_cost_tbl_eff_dt, prime_prc_cost_tbl_eff_tm, prime_rbl_sis_amt, prime_rbl_sis_mrgn, prime_rbl_sis_per, ' ||
' prime_rnd_cd, prime_sbtyp_prc_by, prime_sis_flg, prime_updt_cyc, prnt_mlt_unit_cd_actl, prnt_mlt_unit_desc_actl, prod_alw, prod_alwnc_cd, ' ||
' prod_alwnc_desc, prod_chrg, prod_chrg_cd, prod_chrg_desc, prod_nbr, prod_sk, prod_sls_tax, prod_stat_ind_actl, qty_dvt, qty_markout, qty_ord, ' ||
' qty_orig, qty_rsrv, qty_ship, qty_subbed, rcrd_stat, rcvng_po_nbr, ';

v_ins_sql6 := ' rep_cost_extnd, rfrgrt_each, rfrgrt_unit, rfrgrt_wt, rtd_ind, sample_ord_ind, ship_from, ship_to_id, sls_mrgn, sls_uom, srchrg, ' ||
' sub_for, sub_prod_ind, tagp_per_case, tax_typ, tm_sk, trans_typ, trd_cls_actl, trtry_cd_actl, trtry_mgr_id_actl, trtry_mgr_nm_actl, ' ||
' true_gp, true_mfr, ttl_alwnc, ttl_dvt, ttl_int_vndr_fnd_dvt, ttl_loc_alwnc, ttl_natl_alwnc, ttl_vndr_fnd_dvt, unfrm_qty_dvt, ' ||
' unfrm_qty_markout, unfrm_qty_ord, unfrm_qty_orig, unfrm_qty_rsrv, unfrm_qty_ship, unfrm_qty_subbed, unit_ord, unit_orig, unit_prc, ' ||
' unit_rsrv, unit_ship, xfer_from_dt, xfer_to_dt) ';

v_apwith_sql1 := 'WITH first_rec AS (SELECT slc.acct_typ_cd_actl,slc.acct_typ_cd_desc_actl,slc.alw_chrg_cd,slc.ap_vndr_nbr_actl,slc.bsis_alw_applied,slc.bsis_alw_ind, ' ||
' slc.cntrct_cpr_amt_ind,slc.cntrct_cpr_bsis,slc.cntrct_cpr_nbr, slc.cntrct_cpr_prod_grp,slc.corp_mlt_unit_desc_actl,slc.corp_mlt_unit_nbr_actl, ' ||
' slc.cr_dbt_rsn_cd,slc.cr_dbt_rsn_desc,slc.cust_bus_seg_actl,slc.cust_bus_seg_desc_actl,slc.cust_prod_nbr,slc.cust_sk,  '||
' slc.dstrct_cd_actl,slc.dstrct_nm_actl,slc.dstrct_sls_mgr_id_actl,slc.dstrct_sls_mgr_nm_actl,slc.each_conv_fctr, ';

v_apwith_sql2 := ' slc.loc_mlt_unit_desc_actl,slc.loc_mlt_unit_nbr_actl,slc.ntv_cr_dbt_rsn_desc, SLC.PRIME_DVT_COST_APLY, ' ||
' slc.ntv_ord_typ, slc.pick_slot_actl, slc.pim_brnd_typ_actl,slc.pim_brnd_typ_desc_actl,slc.pim_cls_desc_actl,slc.pim_cls_id_actl,slc.pim_ctgry_desc_actl, ' ||
' slc.pim_ctgry_id_actl, slc.pim_grp_desc_actl,slc.pim_grp_id_actl,slc.pim_suprcls_desc_actl, slc.pim_suprcls_id_actl, slc.prch_from_vndr_nbr_actl, ' ||
' slc.prime_aft_bsis_adj_ind, slc.prime_bfr_bsis_adj_ind,slc.prime_calc_ind,slc.prime_cnh_prc_br_cd, slc.ship_to_id, slc.mrgn_bsis, ';

v_apwith_sql3 := ' slc.prime_cntrct_each_mrk_amt,slc.CNTRCT_CPR_CALC, slc.cntrct_cpr_bsis_dt, slc.prime_cntrct_nm,slc.prime_cost_by_po_nbr,slc.prime_cust_prc_on_ind, slc.prime_dvt_cost_typ,slc.prime_dvtn_grp_nbr,slc.prime_dvtn_grp_nm,  slc.prime_frght_bsis,slc.prime_hcp_pim_cat,slc.prime_hcp_pim_cls, ' ||
 ' slc.prime_hcp_pim_grp,slc.prime_mrk_ind, slc.prime_prc_bsis,slc.prime_prc_by,slc.prime_rbl_sis_mrgn,slc.prime_rbl_sis_per,slc.prime_rnd_cd,  slc.prime_sbtyp_prc_by,slc.prime_sis_flg,slc.prime_updt_cyc,slc.prnt_mlt_unit_cd_actl,slc.prnt_mlt_unit_desc_actl, ' ||
 ' slc.prod_alwnc_cd,slc.prod_alwnc_desc,slc.prod_chrg_cd,slc.prod_chrg_desc,slc.prod_stat_ind_actl, slc.trd_cls_actl, slc.div_nbr, slc.cr_memo_nbr, '||
 ' slc.inv_nbr, slc.prod_nbr, slc.cust_nbr, slc.prod_alw, slc.cmpny_vndr_nbr_actl, slc.trans_typ, slc.tm_sk, slc.true_mfr, slc.sls_uom,slc.prc_src, ' ||
 ' slc.trtry_cd_actl,slc.trtry_mgr_id_actl,slc.PRIME_CNTRCT_EACH_MRK_TYP, slc.trtry_mgr_nm_actl, slc.prcs_dt, slc.pim_sk, slc.prod_chrg, rank() OVER ' ||
 ' (PARTITION BY slc.div_nbr, slc.inv_nbr, slc.prod_nbr, slc.cust_nbr, slc.prcs_dt ORDER BY slc.cr_memo_nbr, slc.line_nbr) as ldrtm_ranking ' ||
 ' FROM ' || v_src_tbl || ' slc  WHERE slc.trans_typ IN (''RT'',''VS'',''WC'',''CD'') ' ||
 ' AND ((slc.PROD_ALWNC_CD IS NULL AND slc.PROD_CHRG_CD IS NULL) OR (slc.PROD_ALWNC_CD=0 AND slc.PROD_CHRG_CD=0)) ' ||
 ' AND slc.prcs_dt BETWEEN ''' || v_start_dt || ''' AND ''' || v_end_dt || ''')';

v_aptxn_sql1 := ' SELECT slc.acct_typ_cd_actl,slc.acct_typ_cd_desc_actl,ap.actl_cst,ap.actl_extnd,ap.actl_gp,ap.adj_markout,slc.alw_chrg_cd, ' ||
' ap.ap_cost,ap.ap_gain,NVL(slc.ap_vndr_nbr_actl,''0000000''),ap.brk_srchrg,ap.bsis_alw_amt,slc.bsis_alw_applied,slc.bsis_alw_ind, ' ||
' ap.bsis_amt,ap.carr_addr_txt,ap.carr_alt_id,ap.carr_alt_id_typ_cd,ap.carr_city_nm,ap.carr_cmnt,ap.carr_cntct,ap.carr_ctry_txt, ' ||
' ap.carr_data_src_cd,ap.carr_dot_nbr,ap.carr_email_txt,ap.carr_eqmt_mark_typ_cd,ap.carr_fax_nbr,ap.carr_inv_user_id,ap.carr_motor_carr_nbr, ' ||
' ap.carr_nm,ap.carr_phn_nbr,ap.carr_scac_cd,ap.carr_st_cd,ap.carr_stat_cd,ap.carr_updt_dt,ap.carr_updt_tm, ';

v_aptxn_sql2 := ' ap.carr_updt_user_id,ap.carr_usf_nbr,ap.carr_zip_cd,ap.cde,NVL(slc.cmpny_vndr_nbr_actl,0),ap.cmsn_sls_extnd,ap.cntrct_cpr_amt, ' ||
' slc.cntrct_cpr_amt_ind,slc.cntrct_cpr_bsis,slc.cntrct_cpr_bsis_dt,slc.cntrct_cpr_calc,ap.cntrct_cpr_grp_typ,slc.cntrct_cpr_nbr, ' ||
' slc.cntrct_cpr_prod_grp,0 as comm_bsis_amt,ap.corp_dvt_sls_base_rbt,slc.corp_mlt_unit_desc_actl,slc.corp_mlt_unit_nbr_actl, ' ||
' ap.corp_non_dvt_sls_base_rbt,ap.corp_prch_base_rbt,slc.cr_dbt_rsn_cd,slc.cr_dbt_rsn_desc,ap.cr_memo_dlr,ap.cr_memo_dt, ' ||
' ap.cr_memo_dwa,ap.cr_memo_nbr,slc.cust_bus_seg_actl,slc.cust_bus_seg_desc_actl,ap.cust_nbr,ap.cust_po_nbr,slc.cust_prod_nbr,slc.cust_sk, ' ||
' ap.div_nbr,ap.div_sk,ap.dlvr_rte,ap.dlvr_seq_nbr,ap.drvr,ap.dry_each,ap.dry_unit,ap.dry_wt, ';

v_aptxn_sql3 := ' slc.dstrct_cd_actl,slc.dstrct_nm_actl,slc.dstrct_sls_mgr_id_actl,slc.dstrct_sls_mgr_nm_actl,ap.dvt_cost_extnd, ' ||
' ap.dwa_cost_extnd,slc.each_conv_fctr,NULL as END_DAY_CD,ap.each_ord,ap.each_orig,ap.each_prc,ap.each_rsrv,ap.each_ship,ap.extnd_fctr, ' ||
' ap.frght_cost,ap.frz_each,ap.frz_unit,ap.frz_wt,ap.gl_sbsys_cd,ap.grs_sls_extnd,ap.inside_pad,ap.inv_actl_gp,ap.inv_dt,ap.inv_gp, ' ||
' ap.inv_nbr,ap.lagp_per_case,ap.ldr,ap.ldr_seq_nbr ,ap.ldr_tm as ap_ldr_tm,ap.lic_prod_extnd,ap.lic_tot_extnd,ap.line_nbr,ap.lnd_actl_gp, ' ||
' ap.lnd_gp,ap.loc_dvt_sls_base_rbt,ap.loc_int_dvt,slc.loc_mlt_unit_desc_actl,slc.loc_mlt_unit_nbr_actl,ap.loc_mrktng_alwnc_pgms, ' ||
' ap.loc_non_dvt_sls_base_rbt,ap.loc_one_tm,ap.loc_prch_base_rbt,ap.loc_prom_alwnc_pgms,ap.loc_vndr_fnd_dvt, ap.lpp, ';

v_aptxn_sql4 := ' ap.mkt_prod_extnd,ap.mkt_tot_extnd,slc.mrgn_bsis,ap.natl_int_dvt,ap.natl_mrktng_alwnc_pgms,ap.natl_one_tm, ' ||
' ap.natl_prom_alwnc_pgms,ap.natl_vndr_fnd_dvt,ap.net_sls_extnd,ap.net_wt_ship,ap.non_prod_alwnc,ap.non_prod_alwnc_cd, ' ||
' ap.non_prod_alwnc_desc,ap.non_prod_chrg,ap.non_prod_chrg_cd,ap.non_prod_chrg_desc,ap.ntv_cr_dbt_rsn_cd,slc.ntv_cr_dbt_rsn_desc, ' ||
' ap.ntv_ord_cls,slc.ntv_ord_typ,ap.ord_src,ap.ord_tkr,ap.orig_dwa_cost_extnd,ap.ldr_tm as orig_ldr_tm,ap.orig_ord_dt, slc.pick_slot_actl, ' ||
' NVL(slc.pim_brnd_typ_actl,9), NVL(slc.pim_brnd_typ_desc_actl,''UNKNOWN''), NVL(slc.pim_cls_desc_actl,''UNKNOWN''), NVL(slc.pim_cls_id_actl,99999), ' ||
' NVL(slc.pim_ctgry_desc_actl,''UNKNOWN''), NVL(slc.pim_ctgry_id_actl,99999),  NVL(slc.pim_grp_desc_actl,''UNKNOWN''), NVL(slc.pim_grp_id_actl,99999), slc.pim_sk, ' ||
' NVL(slc.pim_suprcls_desc_actl,''UNKNOWN''), NVL(slc.pim_suprcls_id_actl,99999), ap.pim_usf_std_prod_cd, ap.prc_mrgn,slc.prc_src,NVL(slc.prch_from_vndr_nbr_actl,''000000''),ap.prcs_dt, ';

v_aptxn_sql5 := ' ap.prime_aft_adj_dlr_amt,ap.prime_aft_bsis_adj_amt,slc.prime_aft_bsis_adj_ind,ap.prime_bfr_adj_dlr_amt,ap.prime_bfr_bsis_adj_amt, ' ||
' slc.prime_bfr_bsis_adj_ind,slc.prime_calc_ind,ap.prime_cnh_cntrct_nbr,slc.prime_cnh_prc_br_cd, ' ||
' ap.prime_cns_cost_pt_mrk,ap.prime_cns_cost_pt_rng,ap.prime_cntrct_calc_bsis_amt,slc.prime_cntrct_each_mrk_amt, ' ||
' slc.prime_cntrct_each_mrk_typ,slc.prime_cntrct_nm,ap.prime_cntrct_prod_excpt_ind,slc.prime_cost_by_po_nbr,slc.prime_cust_prc_on_ind, ' ||
' ap.prime_dvt_cost_amt,slc.prime_dvt_cost_aply,slc.prime_dvt_cost_typ,slc.prime_dvtn_grp_nbr,slc.prime_dvtn_grp_nm, ' ||
' ap.prime_extnd_rbl_sis_amt,ap.prime_frght_amt,slc.prime_frght_bsis,slc.prime_hcp_pim_cat,slc.prime_hcp_pim_cls, ';

v_aptxn_sql6 := ' slc.prime_hcp_pim_grp,ap.prime_hcp_usf_std_prod_cd,ap.prime_min_mrk_amt,ap.prime_mrk_amt,slc.prime_mrk_ind, ' ||
' ap.prime_ord_orig_unit_prc,slc.prime_prc_bsis,ap.prime_prc_bsis_amt,slc.prime_prc_by,ap.prime_prc_cost_tbl_eff_dt, ' ||
' ap.prime_prc_cost_tbl_eff_tm,ap.prime_rbl_sis_amt,slc.prime_rbl_sis_mrgn,slc.prime_rbl_sis_per,slc.prime_rnd_cd, ' ||
' slc.prime_sbtyp_prc_by,slc.prime_sis_flg,slc.prime_updt_cyc,slc.prnt_mlt_unit_cd_actl,slc.prnt_mlt_unit_desc_actl,ap.prod_alw, ' ||
' ap.prod_alwnc_cd,ap.prod_alwnc_desc,ap.prod_chrg,ap.prod_chrg_cd,ap.prod_chrg_desc,ap.prod_nbr,ap.prod_sk,ap.prod_sls_tax,slc.prod_stat_ind_actl, ';

v_aptxn_sql7 := 'ap.qty_dvt,ap.qty_markout,ap.qty_ord,ap.qty_orig,ap.qty_rsrv,ap.qty_ship,ap.qty_subbed,ap.rcrd_stat,ap.rcvng_po_nbr, ' ||
' ap.rep_cost_extnd,ap.rfrgrt_each,ap.rfrgrt_unit,ap.rfrgrt_wt,ap.rtd_ind,ap.sample_ord_ind,ap.ship_from,slc.ship_to_id, ' ||
' ap.sls_mrgn,slc.sls_uom,ap.srchrg,ap.sub_for,ap.sub_prod_ind,ap.tagp_per_case,ap.tax_typ,slc.tm_sk,ap.trans_typ,slc.trd_cls_actl, ' ||
' slc.trtry_cd_actl,slc.trtry_mgr_id_actl,slc.trtry_mgr_nm_actl,ap.true_gp,NVL(slc.true_mfr,0),ap.ttl_alwnc,ap.ttl_dvt, ' ||
' ap.ttl_int_vndr_fnd_dvt,ap.ttl_loc_alwnc,ap.ttl_natl_alwnc,ap.ttl_vndr_fnd_dvt,ap.unfrm_qty_dvt,ap.unfrm_qty_markout, ' ||
' ap.unfrm_qty_ord,ap.unfrm_qty_orig,ap.unfrm_qty_rsrv,ap.unfrm_qty_ship,ap.unfrm_qty_subbed,ap.unit_ord,ap.unit_orig, ' ||
' ap.unit_prc,ap.unit_rsrv,ap.unit_ship,ap.xfer_from_dt,ap.xfer_to_dt ';


IF v_div_nbr = '9999' THEN
v_aptxn_sql8 := ' FROM '|| v_src_tbl || ' ap, first_rec slc ' ||
' WHERE (ap.trans_typ = ''AP'' OR '||
' ap.PROD_ALWNC_CD IS NOT NULL OR ap.PROD_CHRG_CD IS NOT NULL) AND ' ||
' slc.div_nbr = ap.div_nbr AND ' ||
' slc.prod_nbr = ap.prod_nbr AND slc.prcs_dt = ap.prcs_dt AND slc.ldrtm_ranking=1 ' ||
' AND slc.inv_nbr = ap.inv_nbr AND slc.cust_nbr = ap.cust_nbr ' ||
' AND ap.GRS_SLS_EXTND = 0 ' ; --logic to account for edw
ELSE
v_aptxn_sql8 := ' FROM '|| v_src_tbl || ' ap, first_rec slc ' ||
' WHERE (ap.trans_typ = ''AP'' OR '||
' ap.PROD_ALWNC_CD IS NOT NULL OR ap.PROD_CHRG_CD IS NOT NULL) AND ' ||
' slc.div_nbr = ap.div_nbr AND ' ||
' slc.prod_nbr = ap.prod_nbr AND slc.prcs_dt = ap.prcs_dt ' ||
' AND slc.inv_nbr = ap.inv_nbr AND slc.cust_nbr = ap.cust_nbr ' ||
' AND slc.ldrtm_ranking=1 AND slc.div_nbr = ' || v_div_nbr || ' ' ||
' AND ap.GRS_SLS_EXTND = 0 ' ; --logic to account for edw
END IF;

v_ap_addfilter_sql := ' AND ap.prcs_dt BETWEEN ''' || v_start_dt || ''' AND ''' || v_end_dt || '''';

EXECUTE IMMEDIATE
v_ins_sql1 || v_ins_sql2 || v_ins_sql3 || v_ins_sql4 || v_ins_sql5 || v_ins_sql6 || v_apwith_sql1 || v_apwith_sql2 ||
v_apwith_sql3 || v_aptxn_sql1 || v_aptxn_sql2 || v_aptxn_sql3 || v_aptxn_sql4 || v_aptxn_sql5 ||
v_aptxn_sql6 || v_aptxn_sql7 || v_aptxn_sql8 || v_ap_addfilter_sql ;

COMMIT;

dbms_output.put_line ('STEP 1: Load complete for AP txn');

/*audit process*/
BEGIN


IF v_div_nbr = '9999' THEN --RUN FOR ALL DIVISIONS WITH USE A DATE RANGE THEN
v_audt_sql1 := ' SELECT COUNT(*), SUM(NVL(GRS_SLS_EXTND,0)), SUM(NVL(QTY_SHIP,0)), SUM(NVL(TTL_DVT,0)), SUM(NVL(PROD_ALW,0)), SUM(NVL(PROD_CHRG,0)), SUM(NVL(TTL_ALWNC,0)) FROM '|| v_src_tbl ||
              ' ap  WHERE (ap.trans_typ = ''AP'' OR '||
              ' (ap.PROD_ALWNC_CD IS NOT NULL AND ap.PROD_CHRG_CD IS NULL) OR (ap.PROD_ALWNC_CD IS NULL AND ap.PROD_CHRG_CD IS NOT NULL) ) AND (ap.prod_nbr<>''NPAC0248'') ' || v_ap_addfilter_sql;

v_audt_sql2 := ' SELECT COUNT(*), SUM(NVL(GRS_SLS_EXTND,0)), SUM(NVL(QTY_SHIP,0)), SUM(NVL(TTL_DVT,0)), SUM(NVL(PROD_ALW,0)), SUM(NVL(PROD_CHRG,0)), SUM(NVL(TTL_ALWNC,0)) FROM '|| v_tgt_tbl ||
             ' ap WHERE (ap.trans_typ = ''AP'' OR '||
             '  (ap.PROD_ALWNC_CD IS NOT NULL AND ap.PROD_CHRG_CD IS NULL) OR (ap.PROD_ALWNC_CD IS NULL AND ap.PROD_CHRG_CD IS NOT NULL) ) AND (ap.prod_nbr<>''NPAC0248'') ' || v_ap_addfilter_sql ;

ELSE
v_audt_sql1 := ' SELECT COUNT(*), SUM(NVL(GRS_SLS_EXTND,0)), SUM(NVL(QTY_SHIP,0)), SUM(NVL(TTL_DVT,0)), SUM(NVL(PROD_ALW,0)), SUM(NVL(PROD_CHRG,0)), SUM(NVL(TTL_ALWNC,0)) FROM '|| v_src_tbl ||
              ' ap WHERE (ap.trans_typ = ''AP'' OR '||
              ' (ap.PROD_ALWNC_CD IS NOT NULL AND ap.PROD_CHRG_CD IS NULL) OR (ap.PROD_ALWNC_CD IS NULL AND ap.PROD_CHRG_CD IS NOT NULL) ) AND div_nbr = ' || v_div_nbr || ' AND (ap.prod_nbr<>''NPAC0248'') ' || v_ap_addfilter_sql;

v_audt_sql2 := ' SELECT COUNT(*), SUM(NVL(GRS_SLS_EXTND,0)), SUM(NVL(QTY_SHIP,0)), SUM(NVL(TTL_DVT,0)), SUM(NVL(PROD_ALW,0)), SUM(NVL(PROD_CHRG,0)), SUM(NVL(TTL_ALWNC,0)) FROM '|| v_tgt_tbl ||
             ' ap WHERE (ap.trans_typ = ''AP'' OR '||
             ' (ap.PROD_ALWNC_CD IS NOT NULL AND ap.PROD_CHRG_CD IS NULL) OR (ap.PROD_ALWNC_CD IS NULL AND ap.PROD_CHRG_CD IS NOT NULL) ) AND div_nbr = ' || v_div_nbr || '  AND (ap.prod_nbr<>''NPAC0248'') ' || v_ap_addfilter_sql ;
END IF;


EXECUTE IMMEDIATE v_audt_sql1 INTO v_src_cnt, v_src_grs_sls, v_src_qty_ship, v_src_ttl_dvt, v_src_prd_alw, v_src_prd_chrg, v_src_ttl_alwnc;

COMMIT;

dbms_output.put_line ('Audit 1: complete first audit');

EXECUTE IMMEDIATE v_audt_sql2 INTO v_tgt_cnt, v_tgt_grs_sls, v_tgt_qty_ship, v_tgt_ttl_dvt, v_tgt_prd_alw, v_tgt_prd_chrg, v_tgt_ttl_alwnc;

COMMIT;

dbms_output.put_line ('Audit 2: complete second audit');

IF v_src_cnt > 0 THEN
    IF (v_src_cnt = v_tgt_cnt) AND (v_src_grs_sls = v_tgt_grs_sls) AND (v_src_qty_ship = v_tgt_qty_ship) AND (v_src_ttl_dvt = v_tgt_ttl_dvt)
    AND (v_src_prd_alw = v_tgt_prd_alw) AND (v_src_prd_chrg = v_tgt_prd_chrg) AND (v_src_ttl_alwnc = v_tgt_ttl_alwnc) THEN
      dbms_output.put_line (' src cnt ' || v_src_cnt || '; tgt cnt ' || v_tgt_cnt || '; ');
      dbms_output.put_line (' src grs_sls ' || v_src_grs_sls || '; tgt grs_sls ' || v_tgt_grs_sls || '; ');
      dbms_output.put_line (' src qty_ship ' || v_src_qty_ship || '; tgt qty_ship ' || v_tgt_qty_ship || '; ');
      dbms_output.put_line (' src ttl_dvt ' || v_src_ttl_dvt || '; tgt ttl_dvt ' || v_tgt_ttl_dvt || '; ');
      dbms_output.put_line (' v_src_prd_alw ' || v_src_prd_alw || '; v_tgt_prd_alw ' || v_tgt_prd_alw || '; ');
      dbms_output.put_line (' v_src_prd_chrg ' || v_src_prd_chrg || '; v_tgt_prd_chrg ' || v_tgt_prd_chrg || '; ');
      dbms_output.put_line (' v_src_ttl_alwnc ' || v_src_ttl_alwnc || '; v_tgt_ttl_alwnc ' || v_tgt_ttl_alwnc || '; ');
      RETURN 0; --Test
    ELSE
      DBMS_OUTPUT.PUT_LINE (' source count ' || v_src_cnt || ' target count ' || v_tgt_cnt || 'source grs sls ' || v_src_grs_sls || 'target grs sls ' ||
      v_tgt_grs_sls || 'source qty ship ' || v_src_qty_ship || 'target qty ship ' || v_tgt_qty_ship || 'source ttl dvt ' || v_src_ttl_dvt ||
      'target ttl dvt ' || v_tgt_ttl_dvt);
      dbms_output.put_line (' v_src_prd_alw ' || v_src_prd_alw || '; v_tgt_prd_alw ' || v_tgt_prd_alw || '; ');
      dbms_output.put_line (' v_src_prd_chrg ' || v_src_prd_chrg || '; v_tgt_prd_chrg ' || v_tgt_prd_chrg || '; ');
      dbms_output.put_line (' v_src_ttl_alwnc ' || v_src_ttl_alwnc || '; v_tgt_ttl_alwnc ' || v_tgt_ttl_alwnc || '; ');
      dbms_output.put_line (v_ins_sql1 || v_ins_sql2 || v_ins_sql3 || v_ins_sql4 || v_ins_sql5 || v_ins_sql6 || v_apwith_sql1 || v_apwith_sql2 ||
    v_apwith_sql3 || v_aptxn_sql1 || v_aptxn_sql2 || v_aptxn_sql3 || v_aptxn_sql4 || v_aptxn_sql5 ||
    v_aptxn_sql6 || v_aptxn_sql7 || v_aptxn_sql8 || v_ap_addfilter_sql);
      RETURN 20;
    END IF;
END IF;

RETURN 0;

END;

  EXCEPTION
    WHEN OTHERS THEN

      p_out_message := '*ERROR in AP historical update script ' || SQLCODE || ' ' ||
                       SQLERRM;
      dbms_output.put_line(SQLCODE);
      dbms_output.put_line(SQLERRM);
      RETURN 20;

END FN_XDM_SALES_CORP_UPD_AP;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_PYR_SLS_AGGR_LOAD_11G" (odate          IN DATE,
                                                       p_start_date   IN DATE DEFAULT NULL,
                                                       p_prev_years   IN NUMBER DEFAULT NULL)
   RETURN NUMBER AS
/*******************************************************************************
    * Name: fn_pyr_sls_aggr_load_11G
    * Type: Function
    * Description: Populate sales pyramid aggregate 11G table in XDMADM.
    *  REVISIONS:
    *  Ver        Date        Author             Description
    *  ---------  ----------  ---------------    -----------------------------
    *  1.0        03/20/2014  Madhu Veerapaneni  Created this function.
    *  1.1        10/06/2015  p1a0168            Modified for Acquisition
*******************************************************************************/
   l_start_date              DATE;
   l_fn_start                DATE;
   l_load_tbl_cnt            NUMBER := 0;
   l_insert_cnt              NUMBER;
   v_parm_dt                 DATE;
   v_ly_fisc_yr_wk           VARCHAR2 (06);
   v_ly_day_of_wk            NUMBER(1);
   v_cy_fisc_yr_wk           VARCHAR2 (06);
   v_cy_day_of_wk            NUMBER(1);

   c_success                 CONSTANT NUMBER := 0;
   c_error                   CONSTANT NUMBER := 1;
   c_schema                  CONSTANT VARCHAR2(30) := 'XDMADM';
   c_aggr_tbl_syn_nm         CONSTANT VARCHAR2(30) := 'SALES_SUMM_PYR_AGGR';
   c_aggr_load_syn_nm        CONSTANT VARCHAR2(30) := 'SALES_SUMM_PYR_AGGR_LOAD';

   l_load_tbl_nm             VARCHAR2(30);
   l_object_nm               VARCHAR2(30);
   l_return_code             NUMBER;
   l_out_msg                 VARCHAR2(256);

   v_base_cases_cnt          NUMBER;
   v_base_sales              NUMBER;
   v_aggr_cases_cnt          NUMBER;
   v_aggr_sales              NUMBER;
   e_truncate_table          exception;
   e_analyze_table           exception;
   e_syn                     exception;
   e_lookup_range            exception;


BEGIN



   v_parm_dt        := TRUNC(odate);

   -- Get day of current Fiscal Week

   SELECT fisc_yr_wk, clndr_day_of_wk
      INTO v_cy_fisc_yr_wk, v_cy_day_of_wk
      FROM xdmadm.time_corp
   WHERE  clndr_dt = v_parm_dt;

   -- Get Last year Fiscal Week

   SELECT tc.fisc_yr_wk, tc.clndr_day_of_wk
      INTO v_ly_fisc_yr_wk, v_ly_day_of_wk
      FROM xdmadm.time_corp tc, xdmadm.time_corp tc2
   WHERE tc.tm_sk = tc2.tm_sk_yrago
      AND tc2.clndr_dt = v_parm_dt;

   DBMS_OUTPUT.put_line ('Current Fiscal year week:' || v_cy_fisc_yr_wk);
   DBMS_OUTPUT.put_line ('Last Fiscal year week:' || v_ly_fisc_yr_wk);
   DBMS_OUTPUT.put_line ('Day of current Fiscal year week:' || v_cy_day_of_wk);
   DBMS_OUTPUT.put_line ('ODate:' || v_parm_dt);


 ---- **************** Truncate the table before load  **************** -----

   EXECUTE IMMEDIATE 'SELECT table_name FROM user_synonyms WHERE synonym_name = ''' || c_aggr_load_syn_nm || ''''
      INTO l_load_tbl_nm;

-- Check if the main synonym is pointing to the load table to be loaded and raise exception

   IF (c_aggr_tbl_syn_nm = l_load_tbl_nm) THEN
      RAISE e_syn;
   END IF;

      --Check if data exists in aggregate table and truncate if so
   EXECUTE IMMEDIATE 'SELECT count(1) FROM ' || l_load_tbl_nm INTO l_load_tbl_cnt;

   IF (l_load_tbl_cnt > 0) THEN
      DBMS_OUTPUT.put_line('Load aggregate table has ' || l_load_tbl_nm || ' records in it');

      l_return_code   := usfdba.table_pkg.truncate_table(l_out_msg, c_schema, l_load_tbl_nm);

      DBMS_OUTPUT.put_line('Truncate table Return: ' || l_return_code || ' - ' || l_out_msg);

      IF (l_return_code <> 0) THEN
         l_object_nm   := l_load_tbl_nm;
         RAISE e_truncate_table;
      END IF;

      DBMS_OUTPUT.put_line('Load aggregate table ' || l_load_tbl_nm ||' truncated');

   END IF;

   ---- ************* End Truncate the table before load  **************** -----

   ---- ************* Load the Sales Pyramid Aggregate table ************* -----

   l_fn_start       := SYSDATE;

INSERT /*+ append */ INTO XDMADM.SALES_SUMM_PYR_AGGR_LOAD
(
           div_nbr,
           div_nm,
           div_typ_cd,
           sls_revenue_div_nbr,
           rgn_nbr,
           rgn_nm,
           rgn_cd,
           grp_nm_or_div_nm_cd_nbr,
           grp_nm,
           grp_cd,
           fisc_yr,
           fisc_yr_qtr,
           fisc_yr_mth,
           fisc_mth_nm,
           fisc_yr_wk,
           pim_suprcls_id_crnt,
           pim_suprcls_id_actl,
           pim_suprcls_desc,
           pim_suprcls_desc_id,
           pim_cls_id,
           pim_cls_desc,
           pim_cls_desc_id,
           pim_brnd_typ,
           pim_brnd_typ_desc,
           trd_cls,
           trd_cls_desc,
           usf_top_pyr_seg_cd,
           usf_top_pyr_seg_desc,
           usf_top_pyr_seg_sort_ord,
           pyr_seg_cd,
           pyr_seg_desc,
           pyr_seg_sort_ord,
           corp_mlt_unit_nbr,
           corp_mlt_unit_desc,
           prnt_mlt_unit_cd,
           prnt_mlt_unit_desc,
           cust_cntrct_flg,
           cust_cntrct_stat_desc,
           cust_natl_mngd_flg,
           cust_mgt_typ_desc,
           cust_acctblty_flg,
           cust_acctblty_desc,
           ly_wtd,
           grs_sls_extnd,
           unfrm_qty_ship,
           actl_gp,
           ttl_alwnc,
           grs_tgp,
           net_sls,
           net_tgp,
           dwa_cost_extnd,
           rbt_loc_accrl_amt,
           rbt_natl_accrl_amt,
           rbt_loc_exp_amt,
           rbt_natl_exp_amt,
           ttl_int_vndr_fnd_dvt,
           ttl_int_vndr_fnd_dvt_is,
           comm_bsis_amt_extnd,
           comm_bsis_amt_extnd_is,
           dond,
           dond_is,
           ttl_vndr_fnd_dvt,
           fixed_sell,
           n_prime_sis,
           prc_apprvl,
           dwo,
           invst_cs_prtcpt,
           net_non_prod_chrg,
           net_prod_chrg,
           net_non_prod_alwnc,
           net_prod_alwnc,
           ttl_loc_alwnc,
           ttl_natl_alwnc,
           loc_int_dvt,
           loc_vndr_fnd_dvt,
           natl_int_dvt,
           natl_vndr_fnd_dvt,
           sagp,
           net_tgp_plus_pa,
           net_allwnc_chrg_plus_rbts,
           ec_grs_sls_extnd,
           py_cust_cases,
           py_cust_cnt,
           cust_bow_cnt,
           usf_gl_ind,
           cust_acqstn_stat_crnt,
           cust_acqstn_stat_actl,
           cust_acqstn_div_nbr
           )
  SELECT   div_nbr,
           div_nm,
           div_typ_cd,
           sls_revenue_div_nbr,
           rgn_nbr,
           rgn_nm,
           rgn_cd,
           grp_nm_or_div_nm_cd_nbr,
           grp_nm,
           grp_cd,
           fisc_yr,
           fisc_yr_qtr,
           fisc_yr_mth,
           fisc_mth_nm,
           fisc_yr_wk,
           pim_suprcls_id_crnt,
           pim_suprcls_id_actl,
           pim_suprcls_desc,
           pim_suprcls_desc_id,
           pim_cls_id,
           pim_cls_desc,
           pim_cls_desc_id,
           pim_brnd_typ,
           pim_brnd_typ_desc,
           trd_cls,
           trd_cls_desc,
           usf_top_pyr_seg_cd,
           usf_top_pyr_seg_desc,
           usf_top_pyr_seg_sort_ord,
           pyr_seg_cd,
           pyr_seg_desc,
           pyr_seg_sort_ord,
           corp_mlt_unit_nbr,
           corp_mlt_unit_desc,
           prnt_mlt_unit_cd,
           prnt_mlt_unit_desc,
           cust_cntrct_flg,
           cust_cntrct_stat_desc,
           cust_natl_mngd_flg,
           cust_mgt_typ_desc,
           cust_acctblty_flg,
           cust_acctblty_desc,
           ly_wtd,
           SUM (grs_sls_extnd),
           SUM (unfrm_qty_ship),
           SUM (actl_gp),
           SUM (ttl_alwnc),
           SUM (grs_tgp),
           SUM (net_sls),
           SUM (net_tgp),
           SUM (dwa_cost_extnd),
           SUM (rbt_loc_accrl_amt),
           SUM (rbt_natl_accrl_amt),
           SUM (rbt_loc_exp_amt),
           SUM (rbt_natl_exp_amt),
           SUM (ttl_int_vndr_fnd_dvt),
           SUM (ttl_int_vndr_fnd_dvt_is),
           SUM (comm_bsis_amt_extnd),
           SUM (comm_bsis_amt_extnd_is),
           SUM (dond),
           SUM (dond_is),
           SUM (ttl_vndr_fnd_dvt),
           SUM (fixed_sell),
           SUM (n_prime_sis),
           SUM (prc_apprvl),
           SUM (dwo),
           SUM (invst_cs_prtcpt),
           SUM (net_non_prod_chrg),
           SUM (net_prod_chrg),
           SUM (net_non_prod_alwnc),
           SUM (net_prod_alwnc),
           SUM (ttl_loc_alwnc),
           SUM (ttl_natl_alwnc),
           SUM (loc_int_dvt),
           SUM (loc_vndr_fnd_dvt),
           SUM (natl_int_dvt),
           SUM (natl_vndr_fnd_dvt),
           SUM (sagp),
           SUM (net_tgp_plus_pa),
           SUM (net_allwnc_chrg_plus_rbts),
           SUM (ec_grs_sls_extnd),
           SUM (py_cust_cases),
           SUM (py_cust_cnt),
           SUM (cust_bow_cnt),
           usf_gl_ind,
           cust_acqstn_stat_crnt,
           cust_acqstn_stat_actl,
           cust_acqstn_div_nbr
    FROM   xdmadm.SALES_SUMM_MRCH_AGGR_LOAD
GROUP BY   div_nbr,
           div_nm,
           div_typ_cd,
           sls_revenue_div_nbr,
           rgn_nbr,
           rgn_nm,
           rgn_cd,
           grp_nm_or_div_nm_cd_nbr,
           grp_nm,
           grp_cd,
           fisc_yr,
           fisc_yr_qtr,
           fisc_yr_mth,
           fisc_mth_nm,
           fisc_yr_wk,
           pim_suprcls_id_crnt,
           pim_suprcls_id_actl,
           pim_suprcls_desc,
           pim_suprcls_desc_id,
           pim_cls_id,
           pim_cls_desc,
           pim_cls_desc_id,
           pim_brnd_typ,
           pim_brnd_typ_desc,
           trd_cls,
           trd_cls_desc,
           usf_top_pyr_seg_cd,
           usf_top_pyr_seg_desc,
           usf_top_pyr_seg_sort_ord,
           pyr_seg_cd,
           pyr_seg_desc,
           pyr_seg_sort_ord,
           corp_mlt_unit_nbr,
           corp_mlt_unit_desc,
           prnt_mlt_unit_cd,
           prnt_mlt_unit_desc,
           cust_cntrct_flg,
           cust_cntrct_stat_desc,
           cust_natl_mngd_flg,
           cust_mgt_typ_desc,
           cust_acctblty_flg,
           cust_acctblty_desc,
           ly_wtd,
           usf_gl_ind,
           cust_acqstn_stat_crnt,
           cust_acqstn_stat_actl,
           cust_acqstn_div_nbr
           ;

DBMS_OUTPUT.put_line(   'Inserted Rows in Load Table: '
                           || sql%ROWCOUNT
                           || ' in '
                           || TO_CHAR(ROUND((SYSDATE - l_fn_start) * 86400))
                           || ' seconds');

COMMIT;



---*********************  Analyze TABLE

   DBMS_OUTPUT.put_line('Analyze the Load aggregate table ' || l_load_tbl_nm);
   l_return_code    := xdmadm.fn_getstat_tbl(c_schema, l_load_tbl_nm);

   IF (l_return_code <> 0) THEN
      l_object_nm   := l_load_tbl_nm;
      RAISE e_analyze_table;
   END IF;

---****************************** Validation *******************************---

   --Retrieve Base values for comparison to what was inserted into aggregate table
 SELECT
         SUM(unfrm_qty_ship),
         SUM(grs_sls_extnd)   INTO v_base_cases_cnt, v_base_sales
         from
         (
SELECT   div_nbr,
         fisc_yr_wk,
         ly_wtd,
         pim_cls_id,
         pim_suprcls_id_crnt,
         pim_suprcls_id_actl,
         trd_cls,
         pyr_seg_cd,
         corp_mlt_unit_nbr,
         prnt_mlt_unit_cd,
         pim_brnd_typ,
         cust_cntrct_flg,
         cust_natl_mngd_flg,
         sls_revenue_div_nbr,
         cust_acctblty_flg,
         usf_gl_ind,
         cust_acqstn_stat_crnt,
         cust_acqstn_stat_actl,
         cust_acqstn_div_nbr,
         SUM(unfrm_qty_ship) unfrm_qty_ship,
         SUM(grs_sls_extnd) grs_sls_extnd
    FROM xdmadm.SALES_SUMM_MRCH_AGGR_LOAD
GROUP BY div_nbr,
         fisc_yr_wk,
         ly_wtd,
         pim_cls_id,
         pim_suprcls_id_crnt,
         pim_suprcls_id_actl,
         trd_cls,
         pyr_seg_cd,
         corp_mlt_unit_nbr,
         prnt_mlt_unit_cd,
         pim_brnd_typ,
         cust_cntrct_flg,
         cust_natl_mngd_flg,
         sls_revenue_div_nbr,
         cust_acctblty_flg,
         usf_gl_ind,
         cust_acqstn_stat_crnt,
         cust_acqstn_stat_actl,
         cust_acqstn_div_nbr
         )
;

   DBMS_OUTPUT.put_line('Base Cases = ' || v_base_cases_cnt);
   DBMS_OUTPUT.put_line('Base Sales = ' || v_base_sales);

   --Calculate aggregate variables for comparison to what was inserted into base variables
   SELECT  NVL(SUM(unfrm_qty_ship),0),  NVL(SUM(grs_sls_extnd),0)
           INTO v_aggr_cases_cnt, v_aggr_sales
   FROM  xdmadm.SALES_SUMM_PYR_AGGR_LOAD;

   DBMS_OUTPUT.put_line('Aggregate Cases = ' || v_aggr_cases_cnt);
   DBMS_OUTPUT.put_line('Aggregate Sales = ' || v_aggr_sales);

   --Compare base and aggregate counts and return success for failure.
   IF v_base_cases_cnt = v_aggr_cases_cnt  AND v_base_sales = v_aggr_sales THEN
      DBMS_OUTPUT.put_line('Successfully created Sales Pyramid aggregate data');
      RETURN pkg_sls_pyr.c_success;
   ELSE
      DBMS_OUTPUT.put_line('Error: Base and aggregate numbers for cases and sales do not match');
      RETURN pkg_sls_pyr.c_error;
   END IF;

--- ***************************** End Validation ************************** ---


RETURN c_success;


EXCEPTION
    WHEN e_syn THEN
      DBMS_OUTPUT.put_line(
         'Synonym currently points to Load table: ' || c_aggr_load_syn_nm || '. Requires manual update.');
      DBMS_OUTPUT.put_line('Verify the ' ||c_aggr_load_syn_nm|| ' and ' ||c_aggr_load_syn_nm|| ' synonyms');
      RETURN pkg_sls_pyr.c_error;
   WHEN e_truncate_table THEN
      DBMS_OUTPUT.put_line('Error Truncating Table: ' || l_load_tbl_nm || '. Requires manual update.');
      DBMS_OUTPUT.put_line('Verify '||l_load_tbl_nm||' table has any records');
      DBMS_OUTPUT.put_line(l_out_msg);
      RETURN pkg_sls_pyr.c_error;
   WHEN e_analyze_table THEN
      DBMS_OUTPUT.put_line('Error Analyzing Table: ' || l_load_tbl_nm || '. Requires manual update.');
      DBMS_OUTPUT.put_line(l_out_msg);
      RETURN pkg_sls_pyr.c_error;
   WHEN OTHERS THEN
      DBMS_OUTPUT.put_line('Error creating Sales Pyramid aggregate data');
      DBMS_OUTPUT.put_line(SQLCODE || ': ' || SQLERRM);
      RETURN pkg_sls_pyr.c_error;
END;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_RVNUE_BY_GL_ACCT_LOAD" (P_IN_ODATE   IN VARCHAR2)
   RETURN NUMBER IS

 /******************************************************************************
   NAME: XDMADM.FN_RVNUE_BY_GL_ACCT_LOAD
   TYPE: Function
   USAGE:XDMADM.FN_RVNUE_BY_GL_ACCT_LOAD(P_IN_ODATE )

   PURPOSE:  Function Inserts the  into CASES_AND_RVNUE_BY_GL_ACCT

   REVISIONS:
   Ver        Date                    Description
   ---------  --------------------------------------------------

   1.        10/04/2013              Initial Development

  ******************************************************************************/

  /***************************
  * Variables declaration    *
  ****************************/



    v_const         NUMBER := 1 ;
    v_end_dt        DATE;
    v_strt_dt       DATE;
    v_odate         DATE := to_date(p_in_odate,'YYYYMMDD');
    v_prcs_stp      VARCHAR2(2000);
    v_ldr_tm        NUMBER(20);
    v_out_msg       VARCHAR2(256);

   v_dba_func_msg   VARCHAR2(2000) := 'oXo';
   dml_err_cnt      NUMBER;
   v_ttl_rows_inserted NUMBER := 0;
  -- array_dml_errors       EXCEPTION;
  -- PRAGMA  EXCEPTION_INIT(array_dml_errors, -24381);



   l_start              NUMBER;
   l_end                NUMBER;
   v_table_owner       VARCHAR2(40) := 'XDMADM'; /*-- hardcoded value*/
   v_table_name        VARCHAR2(40) := 'CASES_AND_RVNUE_BY_GL_ACCT'; /*-- hardcoded value*/
   v_truncate_tbl      NUMBER(3);
    v_sls_cd            VARCHAR2(7)  ;
    v_cost_cd           VARCHAR2(7)  ;
    v_lpa_cd            VARCHAR2(7)  ;
    v_npa_cd            VARCHAR2(7)  ;
    v_rbt_cd            VARCHAR2(7)  ;
    v_cma_cd            VARCHAR2(7)  ;
    v_nif_plus_lif_cd  VARCHAR2(7)  ;
    v_lif_cd           VARCHAR2(7)  ;
    v_lvf_cd            VARCHAR2(7)  ;
    v_nif_cd            VARCHAR2(7)  ;
    v_nvf_cd           VARCHAR2(7)  ;

PROCEDURE insert_1
IS
BEGIN
--v_ttl_rows_inserted:=0;
--4000001
insert into xdmadm.CASES_AND_RVNUE_BY_GL_ACCT (
    SELECT brnch_cd,
            fisc_yr,
            fisc_mth_of_yr,
            pyr_seg_cd,
            gl_acct_cd,
            cust_acctblty_flg,
            cust_natl_mngd_flg,
            SUM(data_value) FROM  (
          SELECT   brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   nvl(pyr_seg_cd, 'UNK') pyr_seg_cd,
                   v_sls_cd   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg,
                  -- SUM(NVL(grs_sls_extnd, 0)) grs_sls_extnd,
                  -- SUM ( CASE WHEN gl_acct_cd = v_sls_plus_ac THEN (NVL(TTL_AC, 0))  ELSE 0 END ) AC,
                   ( SUM(NVL(grs_sls_extnd, 0))
                   + SUM ( CASE WHEN gl_acct_cd = v_sls_cd THEN (NVL(TTL_AC, 0))  ELSE 0 END )) data_value
          from xdmadm.DOLLARS_BY_PYR_SEG
          GROUP BY
             brnch_cd,
             fisc_yr,
             fisc_mth_of_yr,
             nvl(pyr_seg_cd, 'UNK'),
             v_sls_cd,
             cust_acctblty_flg,
             cust_natl_mngd_flg  )
   GROUP BY
    brnch_cd,
    fisc_yr,
    fisc_mth_of_yr,
    pyr_seg_cd,
    gl_acct_cd,
    cust_acctblty_flg,
    cust_natl_mngd_flg
    ) ;


         DBMS_OUTPUT.put_line (' NO OF ROWS INSERTED : '||sql%rowcount);
 v_ttl_rows_inserted:=v_ttl_rows_inserted + sql%rowcount;
 COMMIT;

EXCEPTION
   WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE ('** ERROR in insert_1. ' || SQLCODE || ' ' || SQLERRM);
    RAISE;
END insert_1;

PROCEDURE insert_2
IS
BEGIN
--5000001
insert into xdmadm.CASES_AND_RVNUE_BY_GL_ACCT (
    SELECT brnch_cd,
            fisc_yr,
            fisc_mth_of_yr,
            pyr_seg_cd,
            gl_acct_cd,
            cust_acctblty_flg,
            cust_natl_mngd_flg,
            SUM(data_value) FROM  (
          SELECT   brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   nvl(pyr_seg_cd, 'UNK') pyr_seg_cd,
                   v_cost_cd   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg,
                  -- SUM(NVL(dwa_cost_extnd, 0)) dwa_cost_extnd,
                  -- SUM ( CASE WHEN gl_acct_cd = v_cost_plus_ac THEN (NVL(TTL_AC, 0))  ELSE 0 END ) AC,
                   ( SUM(NVL(dwa_cost_extnd, 0))
                   + SUM ( CASE WHEN gl_acct_cd = v_cost_cd THEN (NVL(TTL_AC, 0))  ELSE 0 END )) data_value
          from xdmadm.DOLLARS_BY_PYR_SEG
          GROUP BY
             brnch_cd,
             fisc_yr,
             fisc_mth_of_yr,
             nvl(pyr_seg_cd, 'UNK'),
             v_cost_cd,
             cust_acctblty_flg,
             cust_natl_mngd_flg  )
   GROUP BY
    brnch_cd,
    fisc_yr,
    fisc_mth_of_yr,
    pyr_seg_cd,
    gl_acct_cd,
    cust_acctblty_flg,
    cust_natl_mngd_flg
    ) ;




         DBMS_OUTPUT.put_line (' NO OF ROWS INSERTED : '||sql%rowcount);
          v_ttl_rows_inserted:=v_ttl_rows_inserted + sql%rowcount;
          COMMIT;

EXCEPTION
   WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE ('** ERROR in insert_2. ' || SQLCODE || ' ' || SQLERRM);
    RAISE;
END insert_2;
------------------------------------
PROCEDURE insert_3
IS
BEGIN
--5320600
insert into xdmadm.CASES_AND_RVNUE_BY_GL_ACCT (
    SELECT brnch_cd,
            fisc_yr,
            fisc_mth_of_yr,
            pyr_seg_cd,
            gl_acct_cd,
            cust_acctblty_flg,
            cust_natl_mngd_flg,
            SUM(data_value) FROM  (
          SELECT   brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   nvl(pyr_seg_cd, 'UNK') pyr_seg_cd,
                   v_cma_cd   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg,
                   ( SUM(NVL(natl_mrktng_alwnc_pgms, 0))
                   + SUM ( CASE WHEN gl_acct_cd = v_cma_cd THEN (NVL(TTL_AC, 0))  ELSE 0 END )) data_value
          from xdmadm.DOLLARS_BY_PYR_SEG
          GROUP BY
             brnch_cd,
             fisc_yr,
             fisc_mth_of_yr,
             nvl(pyr_seg_cd, 'UNK'),
             v_cma_cd,
             cust_acctblty_flg,
             cust_natl_mngd_flg  )
   GROUP BY
    brnch_cd,
    fisc_yr,
    fisc_mth_of_yr,
    pyr_seg_cd,
    gl_acct_cd,
    cust_acctblty_flg,
    cust_natl_mngd_flg
    ) ;

          DBMS_OUTPUT.put_line (' NO OF ROWS INSERTED : '||sql%rowcount);
           v_ttl_rows_inserted:=v_ttl_rows_inserted + sql%rowcount;
          COMMIT;

EXCEPTION
   WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE ('** ERROR in insert_3. ' || SQLCODE || ' ' || SQLERRM);
    RAISE;
END insert_3;
------------------------------------
PROCEDURE insert_4
IS
BEGIN
--5300101
insert into xdmadm.CASES_AND_RVNUE_BY_GL_ACCT (
    SELECT brnch_cd,
            fisc_yr,
            fisc_mth_of_yr,
            pyr_seg_cd,
            gl_acct_cd,
            cust_acctblty_flg,
            cust_natl_mngd_flg,
            SUM(data_value) FROM  (
          SELECT   brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   nvl(pyr_seg_cd, 'UNK') pyr_seg_cd,
                   v_npa_cd   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg,
                ( SUM(NVL(natl_one_tm, 0))
                + SUM(NVL(natl_prom_alwnc_pgms, 0))
                + SUM ( CASE WHEN gl_acct_cd = v_npa_cd THEN (NVL(TTL_AC, 0))  ELSE 0 END )) data_value
          from xdmadm.DOLLARS_BY_PYR_SEG
          GROUP BY
             brnch_cd,
             fisc_yr,
             fisc_mth_of_yr,
             nvl(pyr_seg_cd, 'UNK'),
             v_npa_cd,
             cust_acctblty_flg,
             cust_natl_mngd_flg  )
   GROUP BY
    brnch_cd,
    fisc_yr,
    fisc_mth_of_yr,
    pyr_seg_cd,
    gl_acct_cd,
    cust_acctblty_flg,
    cust_natl_mngd_flg
    ) ;

          DBMS_OUTPUT.put_line (' NO OF ROWS INSERTED : '||sql%rowcount);
           v_ttl_rows_inserted:=v_ttl_rows_inserted + sql%rowcount;
          COMMIT;

EXCEPTION
   WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE ('** ERROR in insert_4. ' || SQLCODE || ' ' || SQLERRM);
    RAISE;
END insert_4;
------------------------------------
PROCEDURE insert_5
IS
BEGIN
--5310501
insert into xdmadm.CASES_AND_RVNUE_BY_GL_ACCT (
    SELECT brnch_cd,
            fisc_yr,
            fisc_mth_of_yr,
            pyr_seg_cd,
            gl_acct_cd,
            cust_acctblty_flg,
            cust_natl_mngd_flg,
            SUM(data_value) FROM  (
          SELECT   brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   nvl(pyr_seg_cd, 'UNK') pyr_seg_cd,
                   v_lpa_cd   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg,
                ( SUM(NVL(loc_one_tm, 0))
                + SUM(NVL(loc_prom_alwnc_pgms, 0))
                + SUM(NVL(loc_mrktng_alwnc_pgms, 0))
                + SUM ( CASE WHEN gl_acct_cd = v_lpa_cd THEN (NVL(TTL_AC, 0))  ELSE 0 END )) data_value
         from xdmadm.DOLLARS_BY_PYR_SEG
          GROUP BY
             brnch_cd,
             fisc_yr,
             fisc_mth_of_yr,
             nvl(pyr_seg_cd, 'UNK'),
             v_lpa_cd,
             cust_acctblty_flg,
             cust_natl_mngd_flg  )
   GROUP BY
    brnch_cd,
    fisc_yr,
    fisc_mth_of_yr,
    pyr_seg_cd,
    gl_acct_cd,
    cust_acctblty_flg,
    cust_natl_mngd_flg
    ) ;

          DBMS_OUTPUT.put_line (' NO OF ROWS INSERTED : '||sql%rowcount);
           v_ttl_rows_inserted:=v_ttl_rows_inserted + sql%rowcount;
          COMMIT;

EXCEPTION
   WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE ('** ERROR in insert_5. ' || SQLCODE || ' ' || SQLERRM);
     RAISE;
END insert_5;
------------------------------------
PROCEDURE insert_6
IS
BEGIN
--5005001
insert into xdmadm.CASES_AND_RVNUE_BY_GL_ACCT (
    SELECT brnch_cd,
            fisc_yr,
            fisc_mth_of_yr,
            pyr_seg_cd,
            gl_acct_cd,
            cust_acctblty_flg,
            cust_natl_mngd_flg,
            SUM(data_value) FROM  (
          SELECT   brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   nvl(pyr_seg_cd, 'UNK') pyr_seg_cd,
                   v_nvf_cd   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg,
                 ( SUM(NVL(natl_vndr_fnd_dvt, 0)) ) data_value
             --   + SUM ( CASE WHEN gl_acct_cd = v_nvf_cd THEN (NVL(TTL_AC, 0))  ELSE 0 END )) data_value
         from xdmadm.DOLLARS_BY_PYR_SEG
          GROUP BY
             brnch_cd,
             fisc_yr,
             fisc_mth_of_yr,
             nvl(pyr_seg_cd, 'UNK'),
             v_nvf_cd,
             cust_acctblty_flg,
             cust_natl_mngd_flg  )
   GROUP BY
    brnch_cd,
    fisc_yr,
    fisc_mth_of_yr,
    pyr_seg_cd,
    gl_acct_cd,
    cust_acctblty_flg,
    cust_natl_mngd_flg
    ) ;

          DBMS_OUTPUT.put_line (' NO OF ROWS INSERTED : '||sql%rowcount);
           v_ttl_rows_inserted:=v_ttl_rows_inserted + sql%rowcount;
          COMMIT;

EXCEPTION
   WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE ('** ERROR in insert_6. ' || SQLCODE || ' ' || SQLERRM);
     RAISE;
END insert_6;
------------------------------------
PROCEDURE insert_7
IS
BEGIN
--5005101
insert into xdmadm.CASES_AND_RVNUE_BY_GL_ACCT (
    SELECT brnch_cd,
            fisc_yr,
            fisc_mth_of_yr,
            pyr_seg_cd,
            gl_acct_cd,
            cust_acctblty_flg,
            cust_natl_mngd_flg,
            SUM(data_value) FROM  (
          SELECT   brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   nvl(pyr_seg_cd, 'UNK') pyr_seg_cd,
                   v_nif_cd   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg,
                 ( SUM(NVL(natl_int_dvt, 0))) data_value
                -- + SUM ( CASE WHEN gl_acct_cd = v_nif_cd THEN (NVL(TTL_AC, 0))  ELSE 0 END )) data_value
         from xdmadm.DOLLARS_BY_PYR_SEG
          GROUP BY
             brnch_cd,
             fisc_yr,
             fisc_mth_of_yr,
             nvl(pyr_seg_cd, 'UNK'),
             v_nif_cd,
             cust_acctblty_flg,
             cust_natl_mngd_flg  )
   GROUP BY
    brnch_cd,
    fisc_yr,
    fisc_mth_of_yr,
    pyr_seg_cd,
    gl_acct_cd,
    cust_acctblty_flg,
    cust_natl_mngd_flg
    ) ;

          DBMS_OUTPUT.put_line (' NO OF ROWS INSERTED : '||sql%rowcount);
           v_ttl_rows_inserted:=v_ttl_rows_inserted + sql%rowcount;
          COMMIT;

EXCEPTION
   WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE ('** ERROR in insert_7. ' || SQLCODE || ' ' || SQLERRM);
     RAISE;
END insert_7;
------------------------------------
PROCEDURE insert_8
IS
BEGIN
--5005501
insert into xdmadm.CASES_AND_RVNUE_BY_GL_ACCT (
    SELECT brnch_cd,
            fisc_yr,
            fisc_mth_of_yr,
            pyr_seg_cd,
            gl_acct_cd,
            cust_acctblty_flg,
            cust_natl_mngd_flg,
            SUM(data_value) FROM  (
          SELECT   brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   nvl(pyr_seg_cd, 'UNK') pyr_seg_cd,
                   v_lvf_cd   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg,
                 ( SUM(NVL(loc_vndr_fnd_dvt, 0))
                 + SUM ( CASE WHEN gl_acct_cd = v_lvf_cd THEN (NVL(TTL_AC, 0))  ELSE 0 END )) data_value
         from xdmadm.DOLLARS_BY_PYR_SEG
          GROUP BY
             brnch_cd,
             fisc_yr,
             fisc_mth_of_yr,
             nvl(pyr_seg_cd, 'UNK'),
             v_lvf_cd,
             cust_acctblty_flg,
             cust_natl_mngd_flg  )
   GROUP BY
    brnch_cd,
    fisc_yr,
    fisc_mth_of_yr,
    pyr_seg_cd,
    gl_acct_cd,
    cust_acctblty_flg,
    cust_natl_mngd_flg
    ) ;

          DBMS_OUTPUT.put_line (' NO OF ROWS INSERTED : '||sql%rowcount);
           v_ttl_rows_inserted:=v_ttl_rows_inserted + sql%rowcount;
          COMMIT;

EXCEPTION
   WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE ('** ERROR in insert_8. ' || SQLCODE || ' ' || SQLERRM);
     RAISE;
END insert_8;
------------------------------------
PROCEDURE insert_9
IS
BEGIN
--5005601
insert into xdmadm.CASES_AND_RVNUE_BY_GL_ACCT (
    SELECT brnch_cd,
            fisc_yr,
            fisc_mth_of_yr,
            pyr_seg_cd,
            gl_acct_cd,
            cust_acctblty_flg,
            cust_natl_mngd_flg,
            SUM(data_value) FROM  (
          SELECT   brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   nvl(pyr_seg_cd, 'UNK') pyr_seg_cd,
                   v_lif_cd   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg,
                 ( SUM(NVL(loc_int_dvt, 0))) data_value
                -- + SUM ( CASE WHEN gl_acct_cd = v_lif_cd THEN (NVL(TTL_AC, 0))  ELSE 0 END )) data_value
         from xdmadm.DOLLARS_BY_PYR_SEG
          GROUP BY
             brnch_cd,
             fisc_yr,
             fisc_mth_of_yr,
             nvl(pyr_seg_cd, 'UNK'),
             v_lif_cd,
             cust_acctblty_flg,
             cust_natl_mngd_flg  )
   GROUP BY
    brnch_cd,
    fisc_yr,
    fisc_mth_of_yr,
    pyr_seg_cd,
    gl_acct_cd,
    cust_acctblty_flg,
    cust_natl_mngd_flg
    ) ;

          DBMS_OUTPUT.put_line (' NO OF ROWS INSERTED : '||sql%rowcount);
           v_ttl_rows_inserted:=v_ttl_rows_inserted + sql%rowcount;
          COMMIT;

EXCEPTION
   WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE ('** ERROR in insert_9. ' || SQLCODE || ' ' || SQLERRM);
     RAISE;
END insert_9;
------------------------------------
------------------------------------
PROCEDURE insert_10
IS
BEGIN
--5005901
insert into xdmadm.CASES_AND_RVNUE_BY_GL_ACCT (
    SELECT brnch_cd,
            fisc_yr,
            fisc_mth_of_yr,
            pyr_seg_cd,
            gl_acct_cd,
            cust_acctblty_flg,
            cust_natl_mngd_flg,
            SUM(data_value) FROM  (
          SELECT   brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   nvl(pyr_seg_cd, 'UNK') pyr_seg_cd,
                   v_nif_plus_lif_cd   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg,
                  -- (SUM(NVL(loc_int_dvt, 0)) + SUM(NVL(natl_int_dvt, 0)) ) data_value
                   decode(sign (SUM(NVL(loc_int_dvt, 0)) + SUM(NVL(natl_int_dvt, 0)) ),0, 0, ((-1) * (SUM(NVL(loc_int_dvt, 0)) + SUM(NVL(natl_int_dvt, 0)) ))) data_value
     from xdmadm.DOLLARS_BY_PYR_SEG
          GROUP BY
             brnch_cd,
             fisc_yr,
             fisc_mth_of_yr,
             nvl(pyr_seg_cd, 'UNK'),
             v_nif_plus_lif_cd,
             cust_acctblty_flg,
             cust_natl_mngd_flg  )
   GROUP BY
    brnch_cd,
    fisc_yr,
    fisc_mth_of_yr,
    pyr_seg_cd,
    gl_acct_cd,
    cust_acctblty_flg,
    cust_natl_mngd_flg
    ) ;

          DBMS_OUTPUT.put_line (' NO OF ROWS INSERTED : '||sql%rowcount);
           v_ttl_rows_inserted:=v_ttl_rows_inserted + sql%rowcount;
          COMMIT;

EXCEPTION
   WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE ('** ERROR in insert_10. ' || SQLCODE || ' ' || SQLERRM);
     RAISE;
END insert_10;
------------------------------------
PROCEDURE insert_11
IS
BEGIN
--4170001
insert into xdmadm.CASES_AND_RVNUE_BY_GL_ACCT (
    SELECT brnch_cd,
            fisc_yr,
            fisc_mth_of_yr,
            pyr_seg_cd,
            gl_acct_cd,
            cust_acctblty_flg,
            cust_natl_mngd_flg,
            SUM(data_value) FROM  (
          SELECT   brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   nvl(pyr_seg_cd, 'UNK') pyr_seg_cd,
                   v_rbt_cd   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg,
                 ( SUM(NVL(rbt_loc_accrl_amt, 0))
                 + SUM(NVL(rbt_natl_accrl_amt, 0))
                 + SUM(NVL(rbt_loc_exp_amt, 0))
                 + SUM(NVL(rbt_natl_exp_amt, 0))
                 + SUM ( CASE WHEN gl_acct_cd = v_rbt_cd THEN (NVL(TTL_AC, 0))  ELSE 0 END )) data_value
         from xdmadm.DOLLARS_BY_PYR_SEG
          GROUP BY
             brnch_cd,
             fisc_yr,
             fisc_mth_of_yr,
             nvl(pyr_seg_cd, 'UNK'),
             v_rbt_cd,
             cust_acctblty_flg,
             cust_natl_mngd_flg  )
   GROUP BY
    brnch_cd,
    fisc_yr,
    fisc_mth_of_yr,
    pyr_seg_cd,
    gl_acct_cd,
    cust_acctblty_flg,
    cust_natl_mngd_flg
    ) ;

          DBMS_OUTPUT.put_line (' NO OF ROWS INSERTED : '||sql%rowcount);
           v_ttl_rows_inserted:=v_ttl_rows_inserted + sql%rowcount;
          COMMIT;


EXCEPTION
   WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE ('** ERROR in insert_11. ' || SQLCODE || ' ' || SQLERRM);
    RAISE;
END insert_11;
PROCEDURE insert_12
IS
BEGIN

insert into xdmadm.CASES_AND_RVNUE_BY_GL_ACCT (
    SELECT brnch_cd,
            fisc_yr,
            fisc_mth_of_yr,
            pyr_seg_cd,
            gl_acct_cd,
            cust_acctblty_flg,
            cust_natl_mngd_flg,
            SUM(data_value) FROM  (
          SELECT   brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   nvl(pyr_seg_cd, 'UNK') pyr_seg_cd,
                   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg,
                   SUM  (NVL(TTL_AC, 0))  data_value
           from xdmadm.DOLLARS_BY_PYR_SEG
          where gl_acct_cd in ( select param_value_chr from xdmadm.param_value where app_name = 'HYP_PLANNING' and param_type = 'AR_GL_ACCT_CD' )
          GROUP BY
             brnch_cd,
             fisc_yr,
             fisc_mth_of_yr,
             nvl(pyr_seg_cd, 'UNK'),
             gl_acct_cd,
             cust_acctblty_flg,
             cust_natl_mngd_flg  )
   GROUP BY
    brnch_cd,
    fisc_yr,
    fisc_mth_of_yr,
    pyr_seg_cd,
    gl_acct_cd,
    cust_acctblty_flg,
    cust_natl_mngd_flg
    ) ;



         DBMS_OUTPUT.put_line (' NO OF ROWS INSERTED : '||sql%rowcount);
          v_ttl_rows_inserted:=v_ttl_rows_inserted + sql%rowcount;
          COMMIT;

EXCEPTION
   WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE ('** ERROR in insert_12. ' || SQLCODE || ' ' || SQLERRM);
     RAISE;
END insert_12;
------------------------------------

BEGIN


  BEGIN

   v_prcs_stp := 'Assigning variables ..... ';

    select param_value_chr  INTO v_sls_cd from xdmadm.PARAM_VALUE
     where app_name = 'HYP_PLANNING'
      and param_type = 'GRS_SLS_EXTND_plus_AR_GL_ACCT_CD'
      and param_code = '4000001';

    select param_value_chr  INTO v_cost_cd from xdmadm.PARAM_VALUE
      where app_name = 'HYP_PLANNING'
        and param_type = 'DWA_COST_EXTND_plus_AR_GL_ACCT_CD'
        and param_code = '5000001';

    select param_value_chr  INTO v_lpa_cd from xdmadm.PARAM_VALUE
     where app_name = 'HYP_PLANNING'
      and param_type = 'LPA_plus_AR_GL_ACCT_CD'
      and param_code = '5310501';

    select param_value_chr  INTO v_npa_cd from xdmadm.PARAM_VALUE
      where app_name = 'HYP_PLANNING'
        and param_type = 'NPA_plus_AR_GL_ACCT_CD'
        and param_code = '5300101';

        select param_value_chr  INTO v_rbt_cd from xdmadm.PARAM_VALUE
      where app_name = 'HYP_PLANNING'
        and param_type = 'RBT_plus_AR_GL_ACCT_CD'
        and param_code = '4170001';

    select param_value_chr  INTO v_cma_cd from xdmadm.PARAM_VALUE
     where app_name = 'HYP_PLANNING'
      and param_type = 'CMA_plus_AR_GL_ACCT_CD'
      and param_code = '5320600';

    select param_value_chr  INTO v_nif_plus_lif_cd from xdmadm.PARAM_VALUE
      where app_name = 'HYP_PLANNING'
        and param_type = 'NIF_plus_LIF_GL_ACCT_CD'
        and param_code = '5005901';

    select param_value_chr  INTO v_lif_cd from xdmadm.PARAM_VALUE
     where app_name = 'HYP_PLANNING'
      and param_type = 'LIF_GL_ACCT_CD'
      and param_code = '5005601';

    select param_value_chr  INTO v_lvf_cd from xdmadm.PARAM_VALUE
      where app_name = 'HYP_PLANNING'
        and param_type = 'LVF_plus_AR_GL_ACCT_CD'
        and param_code = '5005501';

    select param_value_chr  INTO v_nvf_cd from xdmadm.PARAM_VALUE
     where app_name = 'HYP_PLANNING'
      and param_type = 'NVF_GL_ACCT_CD'
      and param_code = '5005001';

    select param_value_chr  INTO v_nif_cd from xdmadm.PARAM_VALUE
     where app_name = 'HYP_PLANNING'
      and param_type = 'NIF_GL_ACCT_CD'
      and param_code = '5005101';


    EXCEPTION
          WHEN OTHERS
          THEN
             DBMS_OUTPUT.put_line('Error in v_prcs_stp : ' || v_prcs_stp );

             RETURN 1000;


 END;


 BEGIN
    v_prcs_stp := 'GET LDR_TM ';


       DBMS_OUTPUT.PUT_LINE('Run Date is:' || v_odate ) ;


     select to_number(to_char(sysdate, 'YYYYMMDDHH24MISS'))
      INTO v_ldr_tm
      FROM DUAL;



      DBMS_OUTPUT.put_line ('LDR_TM is :'  ||v_ldr_tm);


     EXCEPTION
          WHEN OTHERS
          THEN
             DBMS_OUTPUT.put_line('Error in v_prcs_stp : ' || v_prcs_stp );

             RETURN 900;
        END;


--******************************************************************************
  --* INSERT INTO XDMADM.CASES_AND_RVNUE_BY_GL_ACCT                                *
  --******************************************************************************
  BEGIN
       v_prcs_stp := 'INSERT INTO table starts ';
       l_start := DBMS_UTILITY.get_time;

        DBMS_OUTPUT.PUT_LINE('TIME ' || to_char(sysdate, 'yyyymmdd hh24:mi:ss'));

  DBMS_OUTPUT.PUT_LINE('Executing insert_1');
  insert_1;
  DBMS_OUTPUT.PUT_LINE('Executing insert_2');
  insert_2;
  DBMS_OUTPUT.PUT_LINE('Executing insert_3');
  insert_3;
  DBMS_OUTPUT.PUT_LINE('Executing insert_4');
  insert_4;
  DBMS_OUTPUT.PUT_LINE('Executing insert_5');
  insert_5;

  DBMS_OUTPUT.PUT_LINE('Executing insert_6');
  insert_6;
  DBMS_OUTPUT.PUT_LINE('Executing insert_7');
  insert_7;
  DBMS_OUTPUT.PUT_LINE('Executing insert_8');
  insert_8;
  DBMS_OUTPUT.PUT_LINE('Executing insert_9');
  insert_9;
  DBMS_OUTPUT.PUT_LINE('Executing insert_10');
  insert_10;

  DBMS_OUTPUT.PUT_LINE('Executing insert_11');
  insert_11;
  DBMS_OUTPUT.PUT_LINE('Executing insert_12');
  insert_12;



   COMMIT;



      l_end := DBMS_UTILITY.get_time;

    DBMS_OUTPUT.PUT_LINE('*************************************************************');
    DBMS_OUTPUT.PUT_LINE('Total no of rows inserted into table xdmadm.CASES_AND_RVNUE_BY_GL_ACCT :' || v_ttl_rows_inserted ) ;
    DBMS_OUTPUT.PUT_LINE('*************************************************************');
    DBMS_OUTPUT.PUT_LINE ( round( (l_end - l_start)/100, 2 ) ||' seconds...' );

    DBMS_OUTPUT.PUT_LINE ('FN_CASES_AND_RVNUE_BY_GL_ACCT_LOAD completed successfully ' ) ;

      RETURN 0;

    END;


   --******************************************************************************
   --* Exception Handling                                                         *
   --******************************************************************************

    EXCEPTION
      WHEN OTHERS
      THEN
     ROLLBACK;
    DBMS_OUTPUT.PUT_LINE(SQLCODE);
     DBMS_OUTPUT.PUT_LINE(SQLERRM);
         --v_prcs_err_cd := SQLCODE;
        -- v_prcs_err_msg := SQLERRM;

         DBMS_OUTPUT.put_line('Error in function FN_RVNUE_BY_GL_ACCT_LOAD');
    RETURN 600;



END FN_RVNUE_BY_GL_ACCT_LOAD;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_RVNUE_BY_GL_ACCT_LOAD_WK" (p_in_odate IN VARCHAR2)
   RETURN NUMBER IS
   /******************************************************************************
     NAME: XDMADM.FN_RVNUE_BY_GL_ACCT_LOAD_WK
     TYPE: Function
     USAGE:XDMADM.FN_RVNUE_BY_GL_ACCT_LOAD_WK(P_IN_ODATE )

     PURPOSE:  Function Inserts the  into CASES_AND_RVNUE_BY_GL_ACCT_WK

     REVISIONS:
     Ver        Date                    Description
     ---------  --------------------------------------------------

     1.         07/14/2014              Initial Development

    ******************************************************************************/

   /***************************
   * Variables declaration    *
   ****************************/
   v_const               NUMBER := 1;
   v_end_dt              DATE;
   v_strt_dt             DATE;
   v_odate               DATE := TO_DATE(p_in_odate, 'YYYYMMDD');
   v_prcs_stp            VARCHAR2(2000);
   v_ldr_tm              NUMBER(20);
   v_out_msg             VARCHAR2(256);

   v_dba_func_msg        VARCHAR2(2000) := 'oXo';
   dml_err_cnt           NUMBER;
   v_ttl_rows_inserted   NUMBER := 0;

   l_start               NUMBER;
   l_end                 NUMBER;
   v_table_owner         VARCHAR2(40) := 'XDMADM'; /*-- hardcoded value*/
   v_table_name          VARCHAR2(40) := 'CASES_AND_RVNUE_BY_GL_ACCT_WK'; /*-- hardcoded value*/
   v_truncate_tbl        NUMBER(3);
   v_sls_cd              VARCHAR2(7);
   v_cost_cd             VARCHAR2(7);
   v_lpa_cd              VARCHAR2(7);
   v_npa_cd              VARCHAR2(7);
   v_rbt_cd              VARCHAR2(7);
   v_cma_cd              VARCHAR2(7);
   v_nif_plus_lif_cd     VARCHAR2(7);
   v_lif_cd              VARCHAR2(7);
   v_lvf_cd              VARCHAR2(7);
   v_nif_cd              VARCHAR2(7);
   v_nvf_cd              VARCHAR2(7);

   PROCEDURE insert_1 IS
   BEGIN
      INSERT INTO xdmadm.cases_and_rvnue_by_gl_acct_wk
         (  SELECT brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   fisc_wk_of_prd,
                   pyr_seg_cd,
                   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg,
                   SUM(data_value)
              FROM (  SELECT brnch_cd,
                             fisc_yr,
                             fisc_mth_of_yr,
                             fisc_wk_of_prd,
                             NVL(pyr_seg_cd, 'UNK') pyr_seg_cd,
                             v_sls_cd gl_acct_cd,
                             cust_acctblty_flg,
                             cust_natl_mngd_flg,
                             (SUM(NVL(grs_sls_extnd, 0))
                              + SUM(CASE WHEN gl_acct_cd = v_sls_cd THEN (NVL(ttl_ac, 0)) ELSE 0 END))
                                data_value
                        FROM xdmadm.dollars_by_pyr_seg_wk
                    GROUP BY brnch_cd,
                             fisc_yr,
                             fisc_mth_of_yr,
                             fisc_wk_of_prd,
                             NVL(pyr_seg_cd, 'UNK'),
                             v_sls_cd,
                             cust_acctblty_flg,
                             cust_natl_mngd_flg)
          GROUP BY brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   fisc_wk_of_prd,
                   pyr_seg_cd,
                   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg);

      DBMS_OUTPUT.put_line(' NO OF ROWS INSERTED : ' || sql%ROWCOUNT);
      v_ttl_rows_inserted   := v_ttl_rows_inserted + sql%ROWCOUNT;
      COMMIT;
   EXCEPTION
      WHEN OTHERS THEN
         DBMS_OUTPUT.put_line('** ERROR in insert_1. ' || SQLCODE || ' ' || SQLERRM);
         RAISE;
   END insert_1;

   PROCEDURE insert_2 IS
   BEGIN
      INSERT INTO xdmadm.cases_and_rvnue_by_gl_acct_wk
         (  SELECT brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   fisc_wk_of_prd,
                   pyr_seg_cd,
                   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg,
                   SUM(data_value)
              FROM (  SELECT brnch_cd,
                             fisc_yr,
                             fisc_mth_of_yr,
                             fisc_wk_of_prd,
                             NVL(pyr_seg_cd, 'UNK') pyr_seg_cd,
                             v_cost_cd gl_acct_cd,
                             cust_acctblty_flg,
                             cust_natl_mngd_flg,
                             (SUM(NVL(dwa_cost_extnd, 0))
                              + SUM(CASE WHEN gl_acct_cd = v_cost_cd THEN (NVL(ttl_ac, 0)) ELSE 0 END))
                                data_value
                        FROM xdmadm.dollars_by_pyr_seg_wk
                    GROUP BY brnch_cd,
                             fisc_yr,
                             fisc_mth_of_yr,
                             fisc_wk_of_prd,
                             NVL(pyr_seg_cd, 'UNK'),
                             v_cost_cd,
                             cust_acctblty_flg,
                             cust_natl_mngd_flg)
          GROUP BY brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   fisc_wk_of_prd,
                   pyr_seg_cd,
                   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg);

      DBMS_OUTPUT.put_line(' NO OF ROWS INSERTED : ' || sql%ROWCOUNT);
      v_ttl_rows_inserted   := v_ttl_rows_inserted + sql%ROWCOUNT;
      COMMIT;
   EXCEPTION
      WHEN OTHERS THEN
         DBMS_OUTPUT.put_line('** ERROR in insert_2. ' || SQLCODE || ' ' || SQLERRM);
         RAISE;
   END insert_2;

   ------------------------------------
   PROCEDURE insert_3 IS
   BEGIN
      INSERT INTO xdmadm.cases_and_rvnue_by_gl_acct_wk
         (  SELECT brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   fisc_wk_of_prd,
                   pyr_seg_cd,
                   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg,
                   SUM(data_value)
              FROM (  SELECT brnch_cd,
                             fisc_yr,
                             fisc_mth_of_yr,
                             fisc_wk_of_prd,
                             NVL(pyr_seg_cd, 'UNK') pyr_seg_cd,
                             v_cma_cd gl_acct_cd,
                             cust_acctblty_flg,
                             cust_natl_mngd_flg,
                             (SUM(NVL(natl_mrktng_alwnc_pgms, 0))
                              + SUM(CASE WHEN gl_acct_cd = v_cma_cd THEN (NVL(ttl_ac, 0)) ELSE 0 END))
                                data_value
                        FROM xdmadm.dollars_by_pyr_seg_wk
                    GROUP BY brnch_cd,
                             fisc_yr,
                             fisc_mth_of_yr,
                             fisc_wk_of_prd,
                             NVL(pyr_seg_cd, 'UNK'),
                             v_cma_cd,
                             cust_acctblty_flg,
                             cust_natl_mngd_flg)
          GROUP BY brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   fisc_wk_of_prd,
                   pyr_seg_cd,
                   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg);

      DBMS_OUTPUT.put_line(' NO OF ROWS INSERTED : ' || sql%ROWCOUNT);
      v_ttl_rows_inserted   := v_ttl_rows_inserted + sql%ROWCOUNT;
      COMMIT;
   EXCEPTION
      WHEN OTHERS THEN
         DBMS_OUTPUT.put_line('** ERROR in insert_3. ' || SQLCODE || ' ' || SQLERRM);
         RAISE;
   END insert_3;

   ------------------------------------
   PROCEDURE insert_4 IS
   BEGIN
      INSERT INTO xdmadm.cases_and_rvnue_by_gl_acct_wk
         (  SELECT brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   fisc_wk_of_prd,
                   pyr_seg_cd,
                   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg,
                   SUM(data_value)
              FROM (  SELECT brnch_cd,
                             fisc_yr,
                             fisc_mth_of_yr,
                             fisc_wk_of_prd,
                             NVL(pyr_seg_cd, 'UNK') pyr_seg_cd,
                             v_npa_cd gl_acct_cd,
                             cust_acctblty_flg,
                             cust_natl_mngd_flg,
                             (  SUM(NVL(natl_one_tm, 0))
                              + SUM(NVL(natl_prom_alwnc_pgms, 0))
                              + SUM(CASE WHEN gl_acct_cd = v_npa_cd THEN (NVL(ttl_ac, 0)) ELSE 0 END))
                                data_value
                        FROM xdmadm.dollars_by_pyr_seg_wk
                    GROUP BY brnch_cd,
                             fisc_yr,
                             fisc_mth_of_yr,
                             fisc_wk_of_prd,
                             NVL(pyr_seg_cd, 'UNK'),
                             v_npa_cd,
                             cust_acctblty_flg,
                             cust_natl_mngd_flg)
          GROUP BY brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   fisc_wk_of_prd,
                   pyr_seg_cd,
                   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg);

      DBMS_OUTPUT.put_line(' NO OF ROWS INSERTED : ' || sql%ROWCOUNT);
      v_ttl_rows_inserted   := v_ttl_rows_inserted + sql%ROWCOUNT;
      COMMIT;
   EXCEPTION
      WHEN OTHERS THEN
         DBMS_OUTPUT.put_line('** ERROR in insert_4. ' || SQLCODE || ' ' || SQLERRM);
         RAISE;
   END insert_4;

   ------------------------------------
   PROCEDURE insert_5 IS
   BEGIN
      INSERT INTO xdmadm.cases_and_rvnue_by_gl_acct_wk
         (  SELECT brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   fisc_wk_of_prd,
                   pyr_seg_cd,
                   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg,
                   SUM(data_value)
              FROM (  SELECT brnch_cd,
                             fisc_yr,
                             fisc_mth_of_yr,
                             fisc_wk_of_prd,
                             NVL(pyr_seg_cd, 'UNK') pyr_seg_cd,
                             v_lpa_cd gl_acct_cd,
                             cust_acctblty_flg,
                             cust_natl_mngd_flg,
                             (  SUM(NVL(loc_one_tm, 0))
                              + SUM(NVL(loc_prom_alwnc_pgms, 0))
                              + SUM(NVL(loc_mrktng_alwnc_pgms, 0))
                              + SUM(CASE WHEN gl_acct_cd = v_lpa_cd THEN (NVL(ttl_ac, 0)) ELSE 0 END))
                                data_value
                        FROM xdmadm.dollars_by_pyr_seg_wk
                    GROUP BY brnch_cd,
                             fisc_yr,
                             fisc_mth_of_yr,
                             fisc_wk_of_prd,
                             NVL(pyr_seg_cd, 'UNK'),
                             v_lpa_cd,
                             cust_acctblty_flg,
                             cust_natl_mngd_flg)
          GROUP BY brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   fisc_wk_of_prd,
                   pyr_seg_cd,
                   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg);

      DBMS_OUTPUT.put_line(' NO OF ROWS INSERTED : ' || sql%ROWCOUNT);
      v_ttl_rows_inserted   := v_ttl_rows_inserted + sql%ROWCOUNT;
      COMMIT;
   EXCEPTION
      WHEN OTHERS THEN
         DBMS_OUTPUT.put_line('** ERROR in insert_5. ' || SQLCODE || ' ' || SQLERRM);
         RAISE;
   END insert_5;

   ------------------------------------
   PROCEDURE insert_6 IS
   BEGIN
      INSERT INTO xdmadm.cases_and_rvnue_by_gl_acct_wk
         (  SELECT brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   fisc_wk_of_prd,
                   pyr_seg_cd,
                   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg,
                   SUM(data_value)
              FROM (  SELECT brnch_cd,
                             fisc_yr,
                             fisc_mth_of_yr,
                             fisc_wk_of_prd,
                             NVL(pyr_seg_cd, 'UNK') pyr_seg_cd,
                             v_nvf_cd gl_acct_cd,
                             cust_acctblty_flg,
                             cust_natl_mngd_flg,
                             (SUM(NVL(natl_vndr_fnd_dvt, 0))) data_value
                        --   + SUM ( CASE WHEN gl_acct_cd = v_nvf_cd THEN (NVL(TTL_AC, 0))  ELSE 0 END )) data_value
                        FROM xdmadm.dollars_by_pyr_seg_wk
                    GROUP BY brnch_cd,
                             fisc_yr,
                             fisc_mth_of_yr,
                             fisc_wk_of_prd,
                             NVL(pyr_seg_cd, 'UNK'),
                             v_nvf_cd,
                             cust_acctblty_flg,
                             cust_natl_mngd_flg)
          GROUP BY brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   fisc_wk_of_prd,
                   pyr_seg_cd,
                   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg);

      DBMS_OUTPUT.put_line(' NO OF ROWS INSERTED : ' || sql%ROWCOUNT);
      v_ttl_rows_inserted   := v_ttl_rows_inserted + sql%ROWCOUNT;
      COMMIT;
   EXCEPTION
      WHEN OTHERS THEN
         DBMS_OUTPUT.put_line('** ERROR in insert_6. ' || SQLCODE || ' ' || SQLERRM);
         RAISE;
   END insert_6;

   ------------------------------------
   PROCEDURE insert_7 IS
   BEGIN
      INSERT INTO xdmadm.cases_and_rvnue_by_gl_acct_wk
         (  SELECT brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   fisc_wk_of_prd,
                   pyr_seg_cd,
                   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg,
                   SUM(data_value)
              FROM (  SELECT brnch_cd,
                             fisc_yr,
                             fisc_mth_of_yr,
                             fisc_wk_of_prd,
                             NVL(pyr_seg_cd, 'UNK') pyr_seg_cd,
                             v_nif_cd gl_acct_cd,
                             cust_acctblty_flg,
                             cust_natl_mngd_flg,
                             (SUM(NVL(natl_int_dvt, 0))) data_value
                        FROM xdmadm.dollars_by_pyr_seg_wk
                    GROUP BY brnch_cd,
                             fisc_yr,
                             fisc_mth_of_yr,
                             fisc_wk_of_prd,
                             NVL(pyr_seg_cd, 'UNK'),
                             v_nif_cd,
                             cust_acctblty_flg,
                             cust_natl_mngd_flg)
          GROUP BY brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   fisc_wk_of_prd,
                   pyr_seg_cd,
                   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg);

      DBMS_OUTPUT.put_line(' NO OF ROWS INSERTED : ' || sql%ROWCOUNT);
      v_ttl_rows_inserted   := v_ttl_rows_inserted + sql%ROWCOUNT;
      COMMIT;
   EXCEPTION
      WHEN OTHERS THEN
         DBMS_OUTPUT.put_line('** ERROR in insert_7. ' || SQLCODE || ' ' || SQLERRM);
         RAISE;
   END insert_7;

   ------------------------------------
   PROCEDURE insert_8 IS
   BEGIN
      INSERT INTO xdmadm.cases_and_rvnue_by_gl_acct_wk
         (  SELECT brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   fisc_wk_of_prd,
                   pyr_seg_cd,
                   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg,
                   SUM(data_value)
              FROM (  SELECT brnch_cd,
                             fisc_yr,
                             fisc_mth_of_yr,
                             fisc_wk_of_prd,
                             NVL(pyr_seg_cd, 'UNK') pyr_seg_cd,
                             v_lvf_cd gl_acct_cd,
                             cust_acctblty_flg,
                             cust_natl_mngd_flg,
                             (SUM(NVL(loc_vndr_fnd_dvt, 0))
                              + SUM(CASE WHEN gl_acct_cd = v_lvf_cd THEN (NVL(ttl_ac, 0)) ELSE 0 END))
                                data_value
                        FROM xdmadm.dollars_by_pyr_seg_wk
                    GROUP BY brnch_cd,
                             fisc_yr,
                             fisc_mth_of_yr,
                             fisc_wk_of_prd,
                             NVL(pyr_seg_cd, 'UNK'),
                             v_lvf_cd,
                             cust_acctblty_flg,
                             cust_natl_mngd_flg)
          GROUP BY brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   fisc_wk_of_prd,
                   pyr_seg_cd,
                   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg);

      DBMS_OUTPUT.put_line(' NO OF ROWS INSERTED : ' || sql%ROWCOUNT);
      v_ttl_rows_inserted   := v_ttl_rows_inserted + sql%ROWCOUNT;
      COMMIT;
   EXCEPTION
      WHEN OTHERS THEN
         DBMS_OUTPUT.put_line('** ERROR in insert_8. ' || SQLCODE || ' ' || SQLERRM);
         RAISE;
   END insert_8;

   ------------------------------------
   PROCEDURE insert_9 IS
   BEGIN
      INSERT INTO xdmadm.cases_and_rvnue_by_gl_acct_wk
         (  SELECT brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   fisc_wk_of_prd,
                   pyr_seg_cd,
                   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg,
                   SUM(data_value)
              FROM (  SELECT brnch_cd,
                             fisc_yr,
                             fisc_mth_of_yr,
                             fisc_wk_of_prd,
                             NVL(pyr_seg_cd, 'UNK') pyr_seg_cd,
                             v_lif_cd gl_acct_cd,
                             cust_acctblty_flg,
                             cust_natl_mngd_flg,
                             (SUM(NVL(loc_int_dvt, 0))) data_value
                        FROM xdmadm.dollars_by_pyr_seg_wk
                    GROUP BY brnch_cd,
                             fisc_yr,
                             fisc_mth_of_yr,
                             fisc_wk_of_prd,
                             NVL(pyr_seg_cd, 'UNK'),
                             v_lif_cd,
                             cust_acctblty_flg,
                             cust_natl_mngd_flg)
          GROUP BY brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   fisc_wk_of_prd,
                   pyr_seg_cd,
                   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg);

      DBMS_OUTPUT.put_line(' NO OF ROWS INSERTED : ' || sql%ROWCOUNT);
      v_ttl_rows_inserted   := v_ttl_rows_inserted + sql%ROWCOUNT;
      COMMIT;
   EXCEPTION
      WHEN OTHERS THEN
         DBMS_OUTPUT.put_line('** ERROR in insert_9. ' || SQLCODE || ' ' || SQLERRM);
         RAISE;
   END insert_9;

   ------------------------------------
   ------------------------------------
   PROCEDURE insert_10 IS
   BEGIN
      INSERT INTO xdmadm.cases_and_rvnue_by_gl_acct_wk
         (  SELECT brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   fisc_wk_of_prd,
                   pyr_seg_cd,
                   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg,
                   SUM(data_value)
              FROM (  SELECT brnch_cd,
                             fisc_yr,
                             fisc_mth_of_yr,
                             fisc_wk_of_prd,
                             NVL(pyr_seg_cd, 'UNK') pyr_seg_cd,
                             v_nif_plus_lif_cd gl_acct_cd,
                             cust_acctblty_flg,
                             cust_natl_mngd_flg,
                             DECODE(SIGN(SUM(NVL(loc_int_dvt, 0)) + SUM(NVL(natl_int_dvt, 0))),
                                    0, 0,
                                    ((-1) * (SUM(NVL(loc_int_dvt, 0)) + SUM(NVL(natl_int_dvt, 0)))))
                                data_value
                        FROM xdmadm.dollars_by_pyr_seg_wk
                    GROUP BY brnch_cd,
                             fisc_yr,
                             fisc_mth_of_yr,
                             fisc_wk_of_prd,
                             NVL(pyr_seg_cd, 'UNK'),
                             v_nif_plus_lif_cd,
                             cust_acctblty_flg,
                             cust_natl_mngd_flg)
          GROUP BY brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   fisc_wk_of_prd,
                   pyr_seg_cd,
                   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg);

      DBMS_OUTPUT.put_line(' NO OF ROWS INSERTED : ' || sql%ROWCOUNT);
      v_ttl_rows_inserted   := v_ttl_rows_inserted + sql%ROWCOUNT;
      COMMIT;
   EXCEPTION
      WHEN OTHERS THEN
         DBMS_OUTPUT.put_line('** ERROR in insert_10. ' || SQLCODE || ' ' || SQLERRM);
         RAISE;
   END insert_10;

   ------------------------------------
   PROCEDURE insert_11 IS
   BEGIN
      INSERT INTO xdmadm.cases_and_rvnue_by_gl_acct_wk
         (  SELECT brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   fisc_wk_of_prd,
                   pyr_seg_cd,
                   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg,
                   SUM(data_value)
              FROM (  SELECT brnch_cd,
                             fisc_yr,
                             fisc_mth_of_yr,
                             fisc_wk_of_prd,
                             NVL(pyr_seg_cd, 'UNK') pyr_seg_cd,
                             v_rbt_cd gl_acct_cd,
                             cust_acctblty_flg,
                             cust_natl_mngd_flg,
                             (  SUM(NVL(rbt_loc_accrl_amt, 0))
                              + SUM(NVL(rbt_natl_accrl_amt, 0))
                              + SUM(NVL(rbt_loc_exp_amt, 0))
                              + SUM(NVL(rbt_natl_exp_amt, 0))
                              + SUM(CASE WHEN gl_acct_cd = v_rbt_cd THEN (NVL(ttl_ac, 0)) ELSE 0 END))
                                data_value
                        FROM xdmadm.dollars_by_pyr_seg_wk
                    GROUP BY brnch_cd,
                             fisc_yr,
                             fisc_mth_of_yr,
                             fisc_wk_of_prd,
                             NVL(pyr_seg_cd, 'UNK'),
                             v_rbt_cd,
                             cust_acctblty_flg,
                             cust_natl_mngd_flg)
          GROUP BY brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   fisc_wk_of_prd,
                   pyr_seg_cd,
                   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg);

      DBMS_OUTPUT.put_line(' NO OF ROWS INSERTED : ' || sql%ROWCOUNT);
      v_ttl_rows_inserted   := v_ttl_rows_inserted + sql%ROWCOUNT;
      COMMIT;
   EXCEPTION
      WHEN OTHERS THEN
         DBMS_OUTPUT.put_line('** ERROR in insert_11. ' || SQLCODE || ' ' || SQLERRM);
         RAISE;
   END insert_11;

   PROCEDURE insert_12 IS
   BEGIN
      INSERT INTO xdmadm.cases_and_rvnue_by_gl_acct_wk
         (  SELECT brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   fisc_wk_of_prd,
                   pyr_seg_cd,
                   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg,
                   SUM(data_value)
              FROM (  SELECT brnch_cd,
                             fisc_yr,
                             fisc_mth_of_yr,
                             fisc_wk_of_prd,
                             NVL(pyr_seg_cd, 'UNK') pyr_seg_cd,
                             gl_acct_cd,
                             cust_acctblty_flg,
                             cust_natl_mngd_flg,
                             SUM(NVL(ttl_ac, 0)) data_value
                        FROM xdmadm.dollars_by_pyr_seg_wk
                       WHERE gl_acct_cd IN (SELECT param_value_chr
                                              FROM xdmadm.param_value
                                             WHERE app_name = 'HYP_PLANNING'
                                               AND param_type = 'AR_GL_ACCT_CD')
                    GROUP BY brnch_cd,
                             fisc_yr,
                             fisc_mth_of_yr,
                             fisc_wk_of_prd,
                             NVL(pyr_seg_cd, 'UNK'),
                             gl_acct_cd,
                             cust_acctblty_flg,
                             cust_natl_mngd_flg)
          GROUP BY brnch_cd,
                   fisc_yr,
                   fisc_mth_of_yr,
                   fisc_wk_of_prd,
                   pyr_seg_cd,
                   gl_acct_cd,
                   cust_acctblty_flg,
                   cust_natl_mngd_flg);

      DBMS_OUTPUT.put_line(' NO OF ROWS INSERTED : ' || sql%ROWCOUNT);
      v_ttl_rows_inserted   := v_ttl_rows_inserted + sql%ROWCOUNT;
      COMMIT;
   EXCEPTION
      WHEN OTHERS THEN
         DBMS_OUTPUT.put_line('** ERROR in insert_12. ' || SQLCODE || ' ' || SQLERRM);
         RAISE;
   END insert_12;
------------------------------------

BEGIN
   BEGIN
      v_prcs_stp   := 'Assigning variables ..... ';

      SELECT param_value_chr
        INTO v_sls_cd
        FROM xdmadm.param_value
       WHERE app_name = 'HYP_PLANNING'
         AND param_type = 'GRS_SLS_EXTND_plus_AR_GL_ACCT_CD'
         AND param_code = '4000001';

      SELECT param_value_chr
        INTO v_cost_cd
        FROM xdmadm.param_value
       WHERE app_name = 'HYP_PLANNING'
         AND param_type = 'DWA_COST_EXTND_plus_AR_GL_ACCT_CD'
         AND param_code = '5000001';

      SELECT param_value_chr
        INTO v_lpa_cd
        FROM xdmadm.param_value
       WHERE app_name = 'HYP_PLANNING'
         AND param_type = 'LPA_plus_AR_GL_ACCT_CD'
         AND param_code = '5310501';

      SELECT param_value_chr
        INTO v_npa_cd
        FROM xdmadm.param_value
       WHERE app_name = 'HYP_PLANNING'
         AND param_type = 'NPA_plus_AR_GL_ACCT_CD'
         AND param_code = '5300101';

      SELECT param_value_chr
        INTO v_rbt_cd
        FROM xdmadm.param_value
       WHERE app_name = 'HYP_PLANNING'
         AND param_type = 'RBT_plus_AR_GL_ACCT_CD'
         AND param_code = '4170001';

      SELECT param_value_chr
        INTO v_cma_cd
        FROM xdmadm.param_value
       WHERE app_name = 'HYP_PLANNING'
         AND param_type = 'CMA_plus_AR_GL_ACCT_CD'
         AND param_code = '5320600';

      SELECT param_value_chr
        INTO v_nif_plus_lif_cd
        FROM xdmadm.param_value
       WHERE app_name = 'HYP_PLANNING'
         AND param_type = 'NIF_plus_LIF_GL_ACCT_CD'
         AND param_code = '5005901';

      SELECT param_value_chr
        INTO v_lif_cd
        FROM xdmadm.param_value
       WHERE app_name = 'HYP_PLANNING'
         AND param_type = 'LIF_GL_ACCT_CD'
         AND param_code = '5005601';

      SELECT param_value_chr
        INTO v_lvf_cd
        FROM xdmadm.param_value
       WHERE app_name = 'HYP_PLANNING'
         AND param_type = 'LVF_plus_AR_GL_ACCT_CD'
         AND param_code = '5005501';

      SELECT param_value_chr
        INTO v_nvf_cd
        FROM xdmadm.param_value
       WHERE app_name = 'HYP_PLANNING'
         AND param_type = 'NVF_GL_ACCT_CD'
         AND param_code = '5005001';

      SELECT param_value_chr
        INTO v_nif_cd
        FROM xdmadm.param_value
       WHERE app_name = 'HYP_PLANNING'
         AND param_type = 'NIF_GL_ACCT_CD'
         AND param_code = '5005101';
   EXCEPTION
      WHEN OTHERS THEN
         DBMS_OUTPUT.put_line('Error in v_prcs_stp : ' || v_prcs_stp);

         RETURN 1000;
   END;

   BEGIN
      v_prcs_stp   := 'GET LDR_TM ';

      DBMS_OUTPUT.put_line('Run Date is:' || v_odate);

      SELECT TO_NUMBER(TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')) INTO v_ldr_tm FROM DUAL;

      DBMS_OUTPUT.put_line('LDR_TM is :' || v_ldr_tm);
   EXCEPTION
      WHEN OTHERS THEN
         DBMS_OUTPUT.put_line('Error in v_prcs_stp : ' || v_prcs_stp);

         RETURN 900;
   END;

   --******************************************************************************
   --* INSERT INTO XDMADM.CASES_AND_RVNUE_BY_GL_ACCT                                *
   --******************************************************************************
   BEGIN
      v_prcs_stp   := 'INSERT INTO table starts ';
      l_start      := DBMS_UTILITY.get_time;

      DBMS_OUTPUT.put_line('TIME ' || TO_CHAR(SYSDATE, 'yyyymmdd hh24:mi:ss'));

      DBMS_OUTPUT.put_line('Executing insert_1');
      insert_1;
      DBMS_OUTPUT.put_line('Executing insert_2');
      insert_2;
      DBMS_OUTPUT.put_line('Executing insert_3');
      insert_3;
      DBMS_OUTPUT.put_line('Executing insert_4');
      insert_4;
      DBMS_OUTPUT.put_line('Executing insert_5');
      insert_5;
      DBMS_OUTPUT.put_line('Executing insert_6');
      insert_6;
      DBMS_OUTPUT.put_line('Executing insert_7');
      insert_7;
      DBMS_OUTPUT.put_line('Executing insert_8');
      insert_8;
      DBMS_OUTPUT.put_line('Executing insert_9');
      insert_9;
      DBMS_OUTPUT.put_line('Executing insert_10');
      insert_10;
      DBMS_OUTPUT.put_line('Executing insert_11');
      insert_11;
      DBMS_OUTPUT.put_line('Executing insert_12');
      insert_12;

      COMMIT;

      l_end        := DBMS_UTILITY.get_time;

      DBMS_OUTPUT.put_line('*************************************************************');
      DBMS_OUTPUT.put_line(
         'Total no of rows inserted into table xdmadm.CASES_AND_RVNUE_BY_GL_ACCT_WK :' || v_ttl_rows_inserted);
      DBMS_OUTPUT.put_line('*************************************************************');
      DBMS_OUTPUT.put_line(ROUND((l_end - l_start) / 100, 2) || ' seconds...');

      DBMS_OUTPUT.put_line('FN_RVNUE_BY_GL_ACCT_LOAD_WK completed successfully ');

      RETURN 0;
   END;
--******************************************************************************
--* Exception Handling                                                         *
--******************************************************************************

EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      DBMS_OUTPUT.put_line(SQLCODE);
      DBMS_OUTPUT.put_line(SQLERRM);

      DBMS_OUTPUT.put_line('Error in function FN_RVNUE_BY_GL_ACCT_LOAD_WK');
      RETURN 600;
END fn_rvnue_by_gl_acct_load_wk;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_SYN_SALES_MKTPLUS_AGGR_LOAD" (
   v_in_odate   IN VARCHAR2
)
   RETURN NUMBER
IS
   /***********************************************************************
   ** Program Name:  FN_SYN_SALES_MKTPLUS_AGGR_LOAD
   **
   ** Description: . This function will load CHAD AGG data into SALES_MPLUS_AGGR_A/B table.
   **
   ** Called by:
   **
   ** Input parameter: ODATE  (YYYYMMDD)
   **
   ** Output parameters :
   **
   ** Modification Log
   ** 08-15-2012  Ajay Mallela   Created function.
   **
   ************************************************************************/
   --      EIW Standard Variables
   --***********************************************************************
   CON_PROCESS_NAME CONSTANT VARCHAR2 (40)
         := 'FN_SYN_SALES_MKTPLUS_AGGR_LOAD' ;
   -- VARIABLES
   v_odate                 DATE;
   v_cur_fisc_yr_mth       XDMADM.TIME_CORP.fisc_yr_mth%TYPE;
   v_last_fisc_yr_mth      XDMADM.TIME_CORP.fisc_yr_mth%TYPE;
   v_cur_fisc_mth_of_yr    XDMADM.TIME_CORP.fisc_mth_of_yr%TYPE;
   v_last_fisc_mth_of_yr   XDMADM.TIME_CORP.fisc_mth_of_yr%TYPE;
   v_fisc_yr               XDMADM.TIME_CORP.fisc_yr%TYPE;
   v_cur_fisc_prd_nm       XDMADM.TIME_CORP.fisc_prd_nm%TYPE;
   v_last_fisc_prd_nm      XDMADM.TIME_CORP.fisc_prd_nm%TYPE;
   v_prd_strt_dt           DATE;
   v_prd_end_dt            DATE;
   v_agg_syn_nm CTLADM.SYN_TBL_MAP.synonym_nm%TYPE
         := 'SALES_MKTPLUS_AGGR' ;
   v_prspct_syn_nm CTLADM.SYN_TBL_MAP.synonym_nm%TYPE
         := 'CUST_PLUS_PRSPCT_CORP' ;
   v_agg_tbl_to_load       CTLADM.SYN_TBL_MAP.tbl_nm%TYPE;
   v_tbl_owner             VARCHAR2 (40 BYTE) := 'XDMADM';
   v_agg_tbl_inactv        VARCHAR2 (40 BYTE);
   v_agg_tbl_actv          VARCHAR2 (40 BYTE);
   v_agg_tbl_nm            VARCHAR2 (40 BYTE);
   v_prspct_tbl_inactv     VARCHAR2 (40 BYTE);
   v_prspct_tbl_actv       VARCHAR2 (40 BYTE);
   v_prspct_tbl_nm         VARCHAR2 (40 BYTE);
   v_sql_str               VARCHAR2 (5000) := ' ';
   v_cnt                   NUMBER;
   v_ret_val               NUMBER;
   v_trunc_allow           BOOLEAN;
   v_trunc_ret             NUMBER (3);
   v_load_ret              NUMBER (3);
   v_grs_sls_extnd         XDMADM.SALES_CORP.grs_sls_extnd%TYPE;
   v_unfrm_qty_ship        XDMADM.SALES_CORP.unfrm_qty_ship%TYPE;
   /******************************************************************************
   Define Variables for publishing Run details in EIW process log
   ******************************************************************************/
   v_prcs_nm               VARCHAR (100);
   v_prcs_step             VARCHAR (200);
   v_prcs_pram             VARCHAR (100);
   v_out_msg               VARCHAR (200);
   --******************************************************************************
   --* Define User Defined Exceptions                                             *
   --******************************************************************************
   ALL_EXCEPTIONS EXCEPTION;
   e_truncate_table EXCEPTION;
BEGIN
   DBMS_OUTPUT.put_line ('Start Process ' || CON_PROCESS_NAME);
   DBMS_OUTPUT.put_line (
      'Start Time:' || TO_CHAR (SYSDATE, 'YYYY-MM-DD HH24:MI:SS')
   );
   v_prcs_nm := CON_PROCESS_NAME;
   v_prcs_pram := 'PARAM1 : ' || v_odate;
   v_prcs_step := 'Start Process ' || CON_PROCESS_NAME;

   EXECUTE IMMEDIATE 'alter session set nls_date_format = ''YYYYMMDD''';

   v_odate := TO_DATE (v_in_odate, 'YYYYMMDD');
   -- Get date parameters
   v_prcs_step := 'Getting date parameters';

   SELECT   t.fisc_yr_mth
     INTO   v_cur_fisc_yr_mth
     FROM   XDMADM.time_corp t
    WHERE   t.clndr_dt = v_odate;

   DBMS_OUTPUT.put_line ('Current Period is ' || v_cur_fisc_yr_mth);

   SELECT   MAX (a.fisc_yr_mth)
     INTO   v_last_fisc_yr_mth
     FROM   XDMADM.time_corp a
    WHERE   a.fisc_yr_mth < (SELECT   a.fisc_yr_mth
                               FROM   XDMADM.time_corp a
                              WHERE   a.clndr_dt = TRUNC (v_odate));

   DBMS_OUTPUT.put_line ('Last Closed Period is ' || v_last_fisc_yr_mth);

   SELECT   MIN (clndr_dt), MAX (clndr_dt)
     INTO   v_prd_strt_dt, v_prd_end_dt
     FROM   XDMADM.time_corp
    WHERE   fisc_yr_mth = v_last_fisc_yr_mth;

   DBMS_OUTPUT.put_line ('Start Date of last period is ' || v_prd_strt_dt);
   DBMS_OUTPUT.put_line ('End Date of last period is ' || v_prd_end_dt);

   SELECT   tbl_nm
     INTO   v_agg_tbl_inactv
     FROM   CTLADM.syn_tbl_map
    WHERE   synonym_nm = v_agg_syn_nm AND actv_ind = 'N';

   DBMS_OUTPUT.put_line (v_agg_tbl_inactv);

   SELECT   tbl_nm
     INTO   v_agg_tbl_actv
     FROM   CTLADM.syn_tbl_map
    WHERE   synonym_nm = v_agg_syn_nm AND actv_ind = 'Y';

   DBMS_OUTPUT.put_line (v_agg_tbl_actv);

   SELECT   table_name
     INTO   v_agg_tbl_nm
     FROM   ALL_SYNONYMS
    WHERE       owner = v_tbl_owner
            AND table_owner = v_tbl_owner
            AND synonym_name = v_agg_syn_nm;

   DBMS_OUTPUT.put_line (v_agg_tbl_nm);

   IF v_agg_tbl_actv <> v_agg_tbl_nm
   THEN
      DBMS_OUTPUT.put_line (
         'The tables ALL_SYNONYMS and ctladm.syn_tbl_map are not in synch'
      );
      RETURN 1;
   END IF;

   DBMS_OUTPUT.put_line (
      'Table which needs to be loaded is ' || v_agg_tbl_inactv
   );
   --******************************************************************************
   --* Truncating the inactive Table      *
   --******************************************************************************
   DBMS_OUTPUT.put_line ('Truncating the table ' || v_agg_tbl_inactv);
   v_trunc_ret :=
      USFDBA.TABLE_PKG.TRUNCATE_TABLE (v_out_msg,
                                       v_tbl_owner,
                                       v_agg_tbl_inactv);
   --EXECUTE immediate 'truncate table ' || v_tbl_owner || '.' || v_agg_tbl_inactv;
   DBMS_OUTPUT.PUT_LINE (v_out_msg);

   IF v_trunc_ret != 0
   THEN
      DBMS_OUTPUT.PUT_LINE (
         'Error in Truncating ' || v_agg_tbl_inactv || ' table'
      );
      RAISE e_truncate_table;
   END IF;

   v_agg_tbl_to_load := v_agg_tbl_inactv;
   DBMS_OUTPUT.put_line(   'Loading the table '
                        || v_agg_tbl_to_load
                        || ' started...'
                        || SYSTIMESTAMP);
   v_load_ret :=
      XDMADM.FN_XDM_SALES_MKTPLUS_AGGR_LOAD (v_odate, v_agg_tbl_to_load);

   IF v_load_ret != 0
   THEN
      DBMS_OUTPUT.PUT_LINE ('Error loading ' || v_agg_tbl_inactv || ' table');
      RAISE ALL_EXCEPTIONS;
   END IF;

   --Analyze Table
   DBMS_OUTPUT.PUT_LINE ('Start table analyze... ' || SYSTIMESTAMP);
   v_ret_val :=
      usfdba.stats_pkg.analyze_table (v_out_msg, 'XDMADM', v_agg_tbl_to_load);

   IF v_ret_val != 0
   THEN
      DBMS_OUTPUT.PUT_LINE (
         'Error in analyzing ' || v_agg_tbl_to_load || ' table'
      );
      RAISE ALL_EXCEPTIONS;
   END IF;

   DBMS_OUTPUT.PUT_LINE (
      'Table ' || v_agg_tbl_to_load || ' analyzed OK...' || SYSTIMESTAMP
   );

   DBMS_OUTPUT.PUT_LINE('Calling XDMADM.FN_CRT_SYNONYM function to recreate the synonym to point to the newly built table '
                        || v_agg_tbl_to_load);
   -- Recreate the synonym to point to the newly built table
   v_ret_val :=
      XDMADM.FN_CRT_SYNONYM (v_agg_syn_nm, v_tbl_owner, v_agg_tbl_to_load);

   IF v_ret_val <> 0
   THEN
      DBMS_OUTPUT.PUT_LINE (
         'Error in calling XDMADM.FN_CRT_SYNONYM function'
      );
      RETURN 1;
   END IF;

   -- Update SYN_TBL_MAP to mark the newly built table as active, and mark the other table as inactive
   DBMS_OUTPUT.PUT_LINE('Updating SYN_TBL_MAP table to mark the newly built table as active and mark the other table as inactive');

   ---Update SYN_TBL_MAP to mark the active table as inactive
   UPDATE   CTLADM.syn_tbl_map
      SET   actv_ind = 'N', last_updt = SYSDATE
    WHERE   synonym_nm = v_agg_syn_nm AND actv_ind = 'Y';

   ---Update SYN_TBL_MAP to mark the newly built table as active
   UPDATE   CTLADM.syn_tbl_map
      SET   actv_ind = 'Y', last_updt = SYSDATE
    WHERE   tbl_nm = v_agg_tbl_to_load;

   COMMIT;

   --Truncate the now inactive table
   SELECT   tbl_nm
     INTO   v_agg_tbl_inactv
     FROM   CTLADM.syn_tbl_map
    WHERE   synonym_nm = v_agg_syn_nm AND actv_ind = 'N';

   --******************************************************************************
   --* Truncating the inactive Table      *
   --******************************************************************************
   /*DBMS_OUTPUT.put_line (
      'Truncating the inactive table ' || v_agg_tbl_inactv
   );
   v_trunc_ret :=
      USFDBA.TABLE_PKG.TRUNCATE_TABLE (v_out_msg,
                                       v_tbl_owner,
                                       v_agg_tbl_inactv);
   --execute immediate 'truncate table ' || 'XDMADM.' || v_agg_tbl_inactv;
   DBMS_OUTPUT.put_line ('Table ' || v_agg_tbl_inactv || ' truncated.');
   DBMS_OUTPUT.PUT_LINE (v_out_msg);

   IF v_trunc_ret != 0
   THEN
      DBMS_OUTPUT.PUT_LINE (
         'Error in Truncating ' || v_agg_tbl_inactv || ' table'
      );
      RAISE e_truncate_table;
   END IF;*/

   SELECT   tbl_nm
     INTO   v_prspct_tbl_inactv
     FROM   CTLADM.syn_tbl_map
    WHERE   synonym_nm = v_prspct_syn_nm AND actv_ind = 'N';

   DBMS_OUTPUT.put_line (v_prspct_tbl_inactv);

   SELECT   tbl_nm
     INTO   v_prspct_tbl_actv
     FROM   CTLADM.syn_tbl_map
    WHERE   synonym_nm = v_prspct_syn_nm AND actv_ind = 'Y';

   DBMS_OUTPUT.put_line (v_prspct_tbl_actv);

   SELECT   table_name
     INTO   v_prspct_tbl_nm
     FROM   ALL_SYNONYMS
    WHERE       owner = v_tbl_owner
            AND table_owner = v_tbl_owner
            AND synonym_name = v_prspct_syn_nm;

   DBMS_OUTPUT.put_line (v_prspct_tbl_nm);

   IF v_prspct_tbl_actv <> v_prspct_tbl_nm
   THEN
      DBMS_OUTPUT.put_line (
         'The tables ALL_SYNONYMS and ctladm.syn_tbl_map are not in synch'
      );
      RETURN 1;
   END IF;

   DBMS_OUTPUT.put_line ('Table which got loaded is ' || v_prspct_tbl_inactv);
   DBMS_OUTPUT.PUT_LINE('Calling XDMADM.FN_CRT_SYNONYM function to recreate the synonym to point to the newly built table '
                        || v_prspct_tbl_inactv);
   -- Recreate the synonym to point to the newly built table
   v_ret_val :=
      XDMADM.FN_CRT_SYNONYM (v_prspct_syn_nm,
                             v_tbl_owner,
                             v_prspct_tbl_inactv);

   IF v_ret_val <> 0
   THEN
      DBMS_OUTPUT.PUT_LINE (
         'Error in calling XDMADM.FN_CRT_SYNONYM function'
      );
      RETURN 1;
   END IF;

   -- Update SYN_TBL_MAP to mark the newly built table as active, and mark the other table as inactive
   DBMS_OUTPUT.PUT_LINE('Updating SYN_TBL_MAP table to mark the newly built table as active and mark the other table as inactive');

   ---Update SYN_TBL_MAP to mark the active table as inactive
   UPDATE   CTLADM.syn_tbl_map
      SET   actv_ind = 'N', last_updt = SYSDATE
    WHERE   synonym_nm = v_prspct_syn_nm AND actv_ind = 'Y';

   COMMIT;

   ---Update SYN_TBL_MAP to mark the newly built table as active
   UPDATE   CTLADM.syn_tbl_map
      SET   actv_ind = 'Y', last_updt = SYSDATE
    WHERE   tbl_nm = v_prspct_tbl_inactv;

   COMMIT;

   --Truncate the now inactive table
   SELECT   tbl_nm
     INTO   v_prspct_tbl_inactv
     FROM   CTLADM.syn_tbl_map
    WHERE   synonym_nm = v_prspct_syn_nm AND actv_ind = 'N';

   --******************************************************************************
   --* Truncating the inactive Table      *
   --******************************************************************************
   /*DBMS_OUTPUT.put_line (
      'Truncating the inactive table ' || v_prspct_tbl_inactv
   );
   v_trunc_ret :=
      USFDBA.TABLE_PKG.TRUNCATE_TABLE (v_out_msg,
                                       v_tbl_owner,
                                       v_prspct_tbl_inactv);
   --execute immediate 'truncate table ' || 'XDMADM.' || v_prspct_tbl_inactv;
   DBMS_OUTPUT.put_line ('Table ' || v_prspct_tbl_inactv || ' truncated.');
   DBMS_OUTPUT.PUT_LINE (v_out_msg);

   IF v_trunc_ret != 0
   THEN
      DBMS_OUTPUT.PUT_LINE (
         'Error in Truncating ' || v_prspct_tbl_inactv || ' table'
      );
      RAISE e_truncate_table;
   END IF;*/

   RETURN 0;
EXCEPTION
/*   WHEN e_truncate_table
   THEN
      DBMS_OUTPUT.put_line ('Error Truncating Table.');
      DBMS_OUTPUT.put_line (v_out_msg);
      RETURN 1;*/
   WHEN OTHERS
   THEN
      --DBMS_OUTPUT.put_line('Error inserting into SALES_MKTPLUS_AGGR');
      DBMS_OUTPUT.put_line (SQLCODE || ': ' || SQLERRM);
      RETURN 1;
END FN_SYN_SALES_MKTPLUS_AGGR_LOAD;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_HYBRID_PO_EXTRACT"
  ( odate_i     VARCHAR2 ,  -- yyyymmdd not used in this program
    vendor_i    VARCHAR2 DEFAULT NULL -- NULL (all but NDG),  'ALL' for all, '58070' NDG only
  )
-----------------------------------------
-- create the extract table for the po rolling 12 extract
-----------------------------------------
  RETURN NUMBER
  IS
/*********************************************************************
**********************************************************************
** Function:    fn_hybrid_po_extract                           **
**                                                                  **
**********************************************************************
** Description:  This function creates the table for the            **
**               po rolling 12 extract for TIPS and Manhattan       **
**                                                                  **
** Modifications:                                                   **
**                                                                  **
** Created  By: Arnie Witt        Ver. 1.0          Date: 07/08/15  **
 **********************************************************************
**  Version               Changes Description                       **
**  =======               ===================                       **
**    1.0       Initial release of this function.                   **
**    1.1       Modified to add more columns. - Madhu Veerapaneni   **
**    1.2       7/28/16  po change reason logic . - Arnie Witt       **
**    1.3       8/24/16  Incorporate earlier column additions . - Arnie Witt       **
**                        fix pickup_dt, orig_pickup_dt coding
**    1.4       8/30/16  Adding 2 new columns ,populated from po_hdr_audit . - Arnie Witt       **
**    1.5		02/01/17 Changing constant value of variable c_subtract_days from 737 to 1127 **
**   1.6        03/07/17 Changing hardoded 734 from the code to variablec_subtract_days based on IM4011165
**   1.7        02/06/19 Adding new colums
**   1.8        02/17/22 Added a query in mainline to parametrize the c_subtract_days value from xdmadm.param_value table
 *********************************************************************/

  /**********************************
  **     Variables declaration     **
  **********************************/

    c_limit                         CONSTANT INTEGER := 1000;
    --c_subtract_days                 CONSTANT INTEGER := 1127;
    c_subtract_days                 INTEGER ;
    v_message                       VARCHAR2(2054);
    g_how_many                      INTEGER;
    v_sqlcode                       NUMBER;
    g_reads                         NUMBER;
    g_writes                        NUMBER;
    g_idx                           NUMBER;
    g_lookup_idx                    NUMBER;
    g_lookup_key                    VARCHAR2(100);
    g_in_idx                        NUMBER;
    g_out_idx                       NUMBER;
    c_sql_str                       VARCHAR2(5000);
    c_cursor                        sys_refcursor;
    g_div_nbr                       NUMBER;
    g_brnch_cd                      VARCHAR2(11);
    g_po_nbr                        VARCHAR2(11);
    g_ord_dt                        DATE;
    g_shipment_nbr                  VARCHAR2(100);
    g_search_strg_cd                VARCHAR2(100);
    g_winning_idx                   INTEGER;
    g_temperature_class             VARCHAR2(100);
    g_product_class                 VARCHAR2(150);
    g_product_category              VARCHAR2(150);
    g_freight_desc                  VARCHAR2(100);
    g_total_cases                   NUMBER;
    g_brand_weight                  NUMBER;
    g_eb_pct                        NUMBER;
    g_ctms                          VARCHAR2(11);
    g_po_rcvd_dt                    DATE;
    g_weight_dry                    NUMBER;
    g_weight_refrigerated           NUMBER;
    g_weight_frozen                 NUMBER;
    g_weight_ice_cream              NUMBER;
    g_weight_hazmat                 NUMBER;
    g_srvc_cd                       VARCHAR2(100);
    g_carrier_cd                    VARCHAR2(100);
    g_carrier_nm                    VARCHAR2(100);
    g_po_type                       VARCHAR2(100);
    g_cross_dock                    VARCHAR2(100);
    g_cross_dock_mit                VARCHAR2(100);
    g_voucher_date                  DATE;
    g_po_weight                     NUMBER;
    g_po_cases                      NUMBER;
    g_po_cube                       NUMBER;
    g_po_revenue                    NUMBER;
    g_po_cost                       NUMBER;
    g_po_savings                    NUMBER;
    g_load_at_id                    VARCHAR2(100);
    g_load_at_name                  VARCHAR2(100);
    g_load_at_city                  VARCHAR2(100);
    g_load_at_state                 VARCHAR2(3);
    g_load_at_zip                   VARCHAR2(10);
    g_origin_source                 VARCHAR2(100);
    g_tips_commodity                VARCHAR2(100);
    g_mot                           VARCHAR2(100);
    g_eqpmt                         VARCHAR2(100);
    g_srvc_lvl                      VARCHAR2(100);
    g_tms_src                       VARCHAR2(20);
    g_tms_prch_from_vndr_nm         VARCHAR2(100);  --R2
    g_po_rqstd_dt                   DATE;           --R2
    g_po_appt_dt                    DATE;           --R2
    g_po_plnd_dlvry_dt              DATE;           --R2
    g_po_plnd_pckp_dt               DATE;           --R2
    g_po_orig_due_dt                DATE;           --R2
    g_primary_fclty_alias_id        VARCHAR2(16);   --R2
    g_shp_orgn_fclty_alias_id       VARCHAR2(100);
    g_po_orgn_fclty_alias_id        VARCHAR2(100);
    g_alt_hlng_typ                  VARCHAR2(100);
    g_shp_dest_fclty_alias_id       VARCHAR2(100);
    g_ldr_tm                        NUMBER;
    g_storage_winner                VARCHAR2(100);
    g_class_winner                  VARCHAR2(100);
    g_category_winner               VARCHAR2(100);
    g_storage_ctr                   INTEGER;
    g_class_ctr                     INTEGER;
    g_category_ctr                  INTEGER;
    g_display                       VARCHAR2(50);
    g_truncate_return               INTEGER;
    g_shipment_exists               BOOLEAN;
    g_lst_arrvl_chg_reason          VARCHAR2(56);
    g_lst_arrvl_chg_user_id         VARCHAR2(8);
    g_lst_arrvl_chg_date            DATE;
    g_date_arrival_befr             DATE;
    g_date_arrival_aftr             DATE;
    --2/6/19
    g_aptnt_dt			        DATE;
    g_aptnt_tm			        VARCHAR2(4 BYTE);
    g_buyr_loc_typ_cd_actl		VARCHAR2(1 BYTE);
    g_buyr_sub_typ_actl			VARCHAR2(1 BYTE);
    g_orig_aptnt_dt			    DATE;
    g_orig_aptnt_tm				VARCHAR2(6 BYTE);
    g_cmp_po_brnch_nbr			VARCHAR2(2 BYTE);
    g_cmp_po_nbr				VARCHAR2(9 BYTE);
    g_arrvl_dt_chg_rsn			VARCHAR2(52 BYTE);
    g_pickup_dt_chg_rsn			VARCHAR2(52 BYTE);
    g_po_dock_in_tm				NUMBER(6);
    g_po_dock_out_tm			NUMBER(6);
    g_po_gate_in_tm				NUMBER(6);
    g_po_gate_out_tm			NUMBER(6);
    g_arvl_dt					DATE;
    g_carr_scac_cd				VARCHAR2(4 BYTE);
    g_frght_trm_cd_actl			VARCHAR2(4 BYTE);

--------------
-- cursors
--------------

CURSOR cur_products
IS
WITH dtl AS (
    SELECT po.po_nbr,  po.div_nbr, po.po_rcvd_dt,
    --
     prod.prod_strg_cd,
     SUM(po.rcvd_qty)                OVER (PARTITION BY po.po_nbr, po.po_rcvd_dt, prod.prod_strg_cd) storage_qty,
     SUM(po.prod_grs_wght_rcvd_extnd) OVER (PARTITION BY po.po_nbr, po.po_rcvd_dt, prod.prod_strg_cd) storage_weight,
     SUM(po.prod_cube_rcvd_extnd)    OVER (PARTITION BY po.po_nbr, po.po_rcvd_dt, prod.prod_strg_cd) storage_cube,
     row_NUMBER()                    OVER (PARTITION BY po.po_nbr, po.po_rcvd_dt, prod.prod_strg_cd ORDER BY  1) storage_row,
    --
     pim.pim_ctgry_desc,
     SUM(po.rcvd_qty)                OVER (PARTITION BY po.po_nbr, po.po_rcvd_dt, pim.pim_ctgry_id) category_qty,
     SUM(po.prod_grs_wght_rcvd_extnd) OVER (PARTITION BY po.po_nbr, po.po_rcvd_dt, pim.pim_ctgry_id) category_weight,
     SUM(po.prod_cube_rcvd_extnd)    OVER (PARTITION BY po.po_nbr, po.po_rcvd_dt, pim.pim_ctgry_id) category_cube,
     row_NUMBER()                    OVER (PARTITION BY po.po_nbr, po.po_rcvd_dt, pim.pim_ctgry_id ORDER BY  1) category_row,
    --
     pim.pim_cls_desc,
     SUM(po.rcvd_qty)                OVER (PARTITION BY po.po_nbr, po.po_rcvd_dt, pim.pim_cls_desc) class_qty,
     SUM(po.prod_grs_wght_rcvd_extnd) OVER (PARTITION BY po.po_nbr, po.po_rcvd_dt, pim.pim_cls_desc) class_weight,
     SUM(po.prod_cube_rcvd_extnd)    OVER (PARTITION BY po.po_nbr, po.po_rcvd_dt, pim.pim_cls_desc) class_cube,
     row_NUMBER()                    OVER (PARTITION BY po.po_nbr, po.po_rcvd_dt, pim.pim_cls_desc ORDER BY  1) class_row
    --
    FROM
      xdmadm.po_corp po,
      xdmadm.prod_corp prod,
      xdmadm.pim_corp pim
    --
     WHERE po.po_rcvd_dt > sysdate - c_subtract_days
      AND po.po_nbr <> '0'
      AND po.trans_typ NOT IN ('SB', 'SS')
      AND prod.pim_usf_std_prod_cd = pim.pim_usf_std_prod_cd
      AND prod.div_nbr = po.div_nbr
      AND prod.prod_nbr = po.prod_nbr
)
, winners as (
    SELECT
      d.*,
      CASE
        DENSE_RANK ()
        OVER (
          PARTITION BY po_nbr, po_rcvd_dt
          ORDER BY  storage_qty desc, storage_weight desc, storage_cube desc, storage_row
        )
        WHEN 1 THEN d.prod_strg_cd
        ELSE NULL
      end storage_winner,
    --
     CASE
        DENSE_RANK ()
        OVER (
          PARTITION BY po_nbr, po_rcvd_dt
          ORDER BY  category_qty desc, category_weight desc, category_cube desc, category_row
        )
        WHEN 1 THEN pim_ctgry_desc
        ELSE NULL
      end category_winner,
    --
     CASE
        DENSE_RANK ()
        OVER (
          PARTITION BY po_nbr, po_rcvd_dt
          ORDER BY  class_qty desc, class_weight desc, class_cube desc, class_row
        )
        WHEN 1 THEN d.pim_cls_desc
        ELSE NULL
      end class_winner
    --
    FROM dtl d
    )
    SELECT w.po_nbr || TO_CHAR(w.div_nbr) || TO_CHAR(w.po_rcvd_dt, 'YYYYMMDD') lookup_key,
         COUNT(DISTINCT  prod_strg_cd) stg_ctr,
         COUNT(DISTINCT  pim_ctgry_desc) category_ctr,
         COUNT(DISTINCT  pim_cls_desc) class_ctr,
         MAX(storage_winner)  storage_winner,
         MAX(category_winner) category_winner,
         MAX(class_winner)    class_winner
    FROM winners w
    GROUP BY  w.po_nbr, w.div_nbr, w.po_rcvd_dt
    ORDER BY  w.po_nbr || TO_CHAR(w.div_nbr) || TO_CHAR(w.po_rcvd_dt, 'YYYYMMDD');

CURSOR cur_brand2_weight
IS
    SELECT  po.po_nbr || TO_CHAR(po.div_nbr) || TO_CHAR(po.po_rcvd_dt, 'YYYYMMDD') lookup_key,
         NVL(SUM(po.prod_grs_wght_rcvd_extnd ), 0)
    FROM xdmadm.prod_corp prod, xdmadm.pim_corp pim, xdmadm.po_corp po
    WHERE po.po_rcvd_dt > sysdate - c_subtract_days
    AND po.po_nbr <> '0'
    AND po.trans_typ NOT IN ('SB', 'SS')
    AND prod.pim_usf_std_prod_cd = pim.pim_usf_std_prod_cd
    AND prod.div_nbr = po.div_nbr
    AND prod.prod_nbr = po.prod_nbr
    AND pim.pim_brnd_typ = '2'
    GROUP BY  po.po_nbr || TO_CHAR(po.div_nbr) || TO_CHAR(po.po_rcvd_dt, 'YYYYMMDD')
    ORDER BY  po.po_nbr || TO_CHAR(po.div_nbr) || TO_CHAR(po.po_rcvd_dt, 'YYYYMMDD');

CURSOR cur_weights
IS
    SELECT po.po_nbr || TO_CHAR(po.div_nbr) || TO_CHAR(po.po_rcvd_dt, 'YYYYMMDD') lookup_key,
                param.param_value_chr, SUM(po.prod_grs_wght_rcvd_extnd)
    FROM xdmadm.prod_corp prod, xdmadm.po_corp po,  xdmadm.param_value param
    WHERE po.po_rcvd_dt > sysdate - c_subtract_days
    AND po.po_nbr <> '0'
    AND po.trans_typ NOT IN ('SB', 'SS')
    AND prod.div_nbr = po.div_nbr
    AND prod.prod_nbr = po.prod_nbr
    AND param.app_name = 'LOGISTICS'
    AND param.param_type = 'STORAGE_CD'
    AND  prod.prod_strg_cd = TO_NUMBER(SUBSTR(param.param_code, 1, 2))
    AND  SUBSTR(param.param_code, 3, 2) =  '-2'
    GROUP BY param.param_value_chr , po.po_nbr || TO_CHAR(po.div_nbr) || TO_CHAR(po.po_rcvd_dt, 'YYYYMMDD')
    ORDER BY po.po_nbr || TO_CHAR(po.div_nbr) || TO_CHAR(po.po_rcvd_dt, 'YYYYMMDD'), param.param_value_chr;

CURSOR cur_storage_values
 IS
     SELECT param_code, param_value_chr, param_value_nbr
     FROM  xdmadm.param_value
     WHERE app_name = 'LOGISTICS'
     AND param_type = 'STORAGE_CD'
     ORDER BY param_code;

CURSOR cur_freight_ind
IS
    SELECT param_code, param_value_chr
    FROM xdmadm.param_value
    WHERE app_name = 'LOGISTICS'
    AND param_type = 'FREIGHT_IND'
    ORDER BY param_code;

--------------
-- collections
--------------
 TYPE rt_po IS RECORD(
    po_nbr                          VARCHAR2(11),
    brnch_cd                        VARCHAR2(12),
    div_nm                          VARCHAR2(90),
    div_nbr                         NUMBER,
    po_rcvd_dt                      DATE,
    cmpny_vndr_nm                   VARCHAR2(30),
    prch_from_vndr_nm               VARCHAR2(100),
    prch_from_vndr_nbr              VARCHAR2(10),
    ship_from_vndr_nbr              VARCHAR2(6),
    ap_vndr_nbr                     VARCHAR2(11),
    ofv_cmpny_vndr_nbr_actl         NUMBER,
    ord_from_vndr_nbr               VARCHAR2(6),
    fisc_mth_of_yr                  NUMBER,
    fisc_wk_of_yr                   NUMBER,
    fisc_yr                         NUMBER,
    ord_dt                          DATE,
    aptnt_dt                        DATE,
    arvl_dt                         DATE,
    buyr_nm                         VARCHAR2(50),
    buyr_nbr                        VARCHAR2(3),
    orig_pickup_dt                  DATE,
    prod_cube_rcvd_extnd            NUMBER,
    prod_grs_wght_rcvd_extnd        NUMBER,
    prod_net_wght_rcvd_extnd        NUMBER,
    rcvd_qty                        NUMBER,
    orig_qty_ord                    NUMBER,
    carr_nm                         VARCHAR2(100),
    ctms                            VARCHAR2(10),
    po_total_freight_amount         NUMBER,
    po_total_delivery_amount        NUMBER,
    po_total_value_amount           NUMBER,
    can_zip_cd_ind                  VARCHAR2(2),
    sfv_city                        VARCHAR2(20),
    sfv_st                          VARCHAR2(2),
    sfv_zip_cd                      VARCHAR2(9),
    pfv_cmpny_vndr_nbr_actl         NUMBER,
    ship_from_vndr_nm               VARCHAR2(30),
    drct_ship_ind                   CHAR(1),       --R2
    kraft_vndr_ind                  CHAR(1),       --R2
    pickup_dt                       DATE,          --R2
    miles                           NUMBER(7,2),   --R2
    crs_dck_flg                     CHAR(1),       --R2
    rgn_nm                          VARCHAR2 (75), --R2
    area_nm                         VARCHAR2 (75), --R2
   crs_dck_div_nbr            NUMBER,
    scpo_grp_id                     VARCHAR2 (22), --R2
    bluprnt_id                      VARCHAR2 (10), --R2
    orig_arvl_dt                    DATE,          --R2
    po_dock_in_dt                   DATE,          --R2
    po_dock_out_dt                  DATE,          --R2
    po_gate_in_dt                   DATE,          --R2
    po_gate_out_dt                  DATE,          --R2
    po_total_cost_amount_sum        NUMBER,         --R2
    cnfrmd_pua_ttl             NUMBER(13, 4),
    cnfrmd_ppaid_ttl           NUMBER(13, 4),
    cnfrmd_frght_ttl           NUMBER(13, 4),
    cnfrmd_mrkt_frght_ttl      NUMBER(13, 4),
    rcvd_pua_ttl               NUMBER(13, 4),
    rcvd_ppaid_ttl             NUMBER(13, 4),
    rcvd_frght_ttl             NUMBER(13, 4),
    rcvd_mrkt_frght_ttl        NUMBER(13, 4),
    --aptnt_dt			            DATE,
    aptnt_tm			            VARCHAR2(4 BYTE),
    buyr_loc_typ_cd_actl			VARCHAR2(1 BYTE),
    buyr_sub_typ_actl			    VARCHAR2(1 BYTE),
    orig_aptnt_dt			        DATE,
    orig_aptnt_tm				    VARCHAR2(6 BYTE),
    cmp_po_brnch_nbr			    VARCHAR2(2 BYTE),
    cmp_po_nbr				        VARCHAR2(9 BYTE),
    arrvl_dt_chg_rsn			    VARCHAR2(52 BYTE),
    pickup_dt_chg_rsn			    VARCHAR2(52 BYTE),
    po_dock_in_tm				    NUMBER(6),
    po_dock_out_tm			        NUMBER(6),
    po_gate_in_tm				    NUMBER(6),
    po_gate_out_tm			        NUMBER(6),
    carr_scac_cd				    VARCHAR2(4 BYTE),
    frght_trm_cd_actl			    VARCHAR2(4 BYTE)
     );

 TYPE rt_po_collection IS TABLE OF rt_po;
   nt_po        rt_po_collection;

 TYPE rt_output_record IS RECORD
    (
    po_nbr                          VARCHAR2(11),
    shipment_nbr                    VARCHAR2(100),
    brnch_cd                        VARCHAR2(12),
    div_nm                          VARCHAR2(90),
    div_nbr                         NUMBER,
    cmpny_vndr_nm                   VARCHAR2(30),
    prch_from_vndr_nm               VARCHAR2(30),
    prch_from_vndr_nbr              VARCHAR2(10),
    ship_from_vndr_nbr              VARCHAR2(6),
    ap_vndr_nbr                     VARCHAR2(11),
    ofv_cmpny_vndr_nbr_actl         NUMBER,
    ord_from_vndr_nbr               VARCHAR2(6),
    fisc_mth_of_yr                  NUMBER,
    fisc_wk_of_yr                   NUMBER,
    fisc_yr                         NUMBER,
    ord_dt                          DATE,
    arvl_dt                         DATE,
    rcvd_dt                         DATE,
    buyr_nm                         VARCHAR2(50),
    buyr_nbr                        VARCHAR2(3),
    orig_pickup_dt                  DATE,
    prod_cube_rcvd_extnd            NUMBER,
    prod_grs_wght_rcvd_extnd        NUMBER,
    prod_net_wght_rcvd_extnd        NUMBER,
    rcvd_qty                        NUMBER,
    orig_qty_ord                    NUMBER,
    carr_nm                         VARCHAR2(100),
    ctms                            VARCHAR2(10),
    PO_Total_Freight_Amount         NUMBER,
    PO_Total_Delivery_Amount        NUMBER,
    PO_Total_Value_Amount           NUMBER,
    service                         VARCHAR2(10),
    carrier_cd                      VARCHAR2(100),
    carrier_nm                      VARCHAR2(100),
    po_type                         VARCHAR2(100),
    cross_dock_mit                  VARCHAR2(20),
    voucher_date                    DATE,
    po_weight                       NUMBER,
    po_cases                        NUMBER,
    po_cube                         NUMBER,
    po_revenue                      NUMBER,
    po_cost                         NUMBER,
    po_savings                      NUMBER,
    load_at_id                      VARCHAR2(16),
    load_at_name                    VARCHAR2(50),
    load_at_city                    VARCHAR2(40),
    load_at_state                   VARCHAR2(3),
    load_at_zip                     VARCHAR2(19),
    origin_source                   VARCHAR2(50),
    tips_commodity                  VARCHAR2(10),
    temperature_class               VARCHAR2(100),
    product_class                   VARCHAR2(100),
    product_category                VARCHAR2(100),
    eb_pct                          NUMBER,
    freight_desc                    VARCHAR2(100),
    weight_dry                      NUMBER,
    weight_frozen                   NUMBER,
    weight_refrigerated             NUMBER,
    weight_ice_cream                NUMBER,
    weight_hazmat                   NUMBER,
    pfv_cmpny_vndr_nbr_actl         NUMBER,
    drct_ship_ind                   CHAR(1),        --R2
    kraft_vndr_ind                  CHAR(1),        --R2
    pickup_dt                       DATE,           --R2
    miles                           NUMBER(7,2),    --R2
    crs_dck_flg                     CHAR(1),        --R2
    rgn_nm                          VARCHAR2 (75),  --R2
    area_nm                         VARCHAR2 (75),  --R2
    crs_dck_div_nbr NUMBER(4, 0),
    scpo_grp_id                     VARCHAR2 (22),  --R2
    bluprnt_id                      VARCHAR2 (10),  --R2
    orig_arvl_dt                    DATE,           --R2
    po_dock_in_dt                   DATE,           --R2
    po_dock_out_dt                  DATE,           --R2
    po_gate_in_dt                   DATE,           --R2
    po_gate_out_dt                  DATE,           --R2
    po_rqstd_dt                     DATE,           --R2
    po_appt_dt                      DATE,           --R2
    po_plnd_dlvry_dt                DATE,           --R2
    po_total_cost_amount_sum        NUMBER,         --R2
    po_plnd_pckp_dt                 DATE,           --R2
    po_orig_due_dt                  DATE,           --R2
    primary_fclty_alias_id          VARCHAR2 (16),   --R2
    lst_arrvl_chg_reason            VARCHAR2(56),
    lst_arrvl_chg_user_id           VARCHAR2(8),
    lst_arrvl_chg_date              DATE,
    cnfrmd_pua_ttl                  NUMBER(13, 4),
    cnfrmd_ppaid_ttl                NUMBER(13, 4),
    cnfrmd_frght_ttl                NUMBER(13, 4),
    cnfrmd_mrkt_frght_ttl           NUMBER(13, 4),
    rcvd_pua_ttl                    NUMBER(13, 4),
    rcvd_ppaid_ttl                  NUMBER(13, 4),
    rcvd_frght_ttl                  NUMBER(13, 4),
    rcvd_mrkt_frght_ttl             NUMBER(13, 4),
    po_id                           VARCHAR2(100),
    date_arrival_befr               date,
    date_arrival_aftr               date,
    aptnt_dt			            DATE,
    aptnt_tm			            VARCHAR2(4 BYTE),
    buyr_loc_typ_cd_actl			VARCHAR2(1 BYTE),
    buyr_sub_typ_actl			    VARCHAR2(1 BYTE),
    orig_aptnt_dt			        DATE,
    orig_aptnt_tm				    VARCHAR2(6 BYTE),
    cmp_po_brnch_nbr			    VARCHAR2(2 BYTE),
    cmp_po_nbr				        VARCHAR2(9 BYTE),
    arrvl_dt_chg_rsn			    VARCHAR2(52 BYTE),
    pickup_dt_chg_rsn			    VARCHAR2(52 BYTE),
    po_dock_in_tm				    NUMBER(6),
    po_dock_out_tm			        NUMBER(6),
    po_gate_in_tm				    NUMBER(6),
    po_gate_out_tm			        NUMBER(6),
    carr_scac_cd				    VARCHAR2(4 BYTE),
    frght_trm_cd_actl			    VARCHAR2(4 BYTE)

    );
  TYPE rt_output_record_collection IS TABLE OF rt_output_record;
   nt_output_record        rt_output_record_collection := rt_output_record_collection();

 TYPE rt_products IS RECORD(
    lookup_key          VARCHAR2(100),
    storage_ctr      INTEGER,
    category_ctr     INTEGER,
    class_ctr        INTEGER,
    storage_winner      VARCHAR2(100),
    category_winner     VARCHAR2(100),
    class_winner        VARCHAR2(100)
    );

 TYPE rt_products_collection IS TABLE OF rt_products;
   nt_products        rt_products_collection;

 TYPE rt_storage IS RECORD(
    param_code          VARCHAR2(100),
    param_value_chr     VARCHAR2(100),
    param_value_nbr     NUMBER
    );

 TYPE rt_storage_collection IS TABLE OF rt_storage;
   nt_storage_values        rt_storage_collection;

  TYPE rt_weights IS RECORD(
    lookup_key          VARCHAR2(100),
    protection     VARCHAR2(100),
    weight         NUMBER
    );

 TYPE rt_weights_collection IS TABLE OF rt_weights;
   nt_weights        rt_weights_collection;

--------------
-- xref pointer records as there can be multiple records per business type
--------------
  TYPE rt_weights_ptr IS RECORD(
         lookup_key                  VARCHAR2(100),
         nt_ptr                      INTEGER
       );
 TYPE nt_weights_ptr_collection IS TABLE OF rt_weights_ptr;
  nt_weights_ptr      nt_weights_ptr_collection := nt_weights_ptr_collection();

  TYPE rt_brand2_weight IS RECORD(
    lookup_key          VARCHAR2(100),
    weight         NUMBER
    );

 TYPE rt_brand2_weight_collection IS TABLE OF rt_brand2_weight;
   nt_brand2_weight   rt_brand2_weight_collection;

 TYPE rt_freight IS RECORD(
    param_code          VARCHAR2(100),
    param_value_chr     VARCHAR2(100)
    );

 TYPE rt_freight_collection IS TABLE OF rt_freight;
   nt_freight_ind        rt_freight_collection;

  TYPE rt_pim IS RECORD(
    pim_id      NUMBER,
    pim_desc    VARCHAR2(150),
    rcvd_qty    NUMBER,
    weight      NUMBER,
    cube        NUMBER
    );

 TYPE rt_pim_collection IS TABLE OF rt_pim;
   nt_pim        rt_pim_collection;

   TYPE ntt_number is table of NUMBER;
   TYPE ntt_date is table of DATE;
   TYPE ntt_varr IS table of VARCHAR2(100);

   nt_tms_src                   ntt_varr;
 --- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
FUNCTION pf_binary_search_storage
  --- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
( array_i                                rt_storage_collection,  -- array to search in
  first_i                                PLS_INTEGER,
  last_i                                 PLS_INTEGER,
  string_i                               VARCHAR2   -- search string
)
RETURN INTEGER
-------------------
IS
v_mid                                    PLS_INTEGER;
v_ix                                    PLS_INTEGER;
v_high                                  PLS_INTEGER;
v_low                                   PLS_INTEGER;
BEGIN
       v_low := first_i;
       v_high := last_i;
       WHILE (v_low <= v_high) LOOP
               v_mid := (v_low + v_high) / 2;
               IF (array_i(v_mid).param_code > string_i) THEN
                   v_high := v_mid - 1;
               ELSIF (array_i(v_mid).param_code < string_i) THEN
                   v_low := v_mid + 1;
               ELSE
                   RETURN v_mid;
              END IF;
       END LOOP;
       return -1;
END pf_binary_search_storage;
 --- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
FUNCTION pf_binary_hazmat
  --- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
( array_i                                ntt_varr,  -- array to search in
  first_i                                PLS_INTEGER,
  last_i                                 PLS_INTEGER,
  string_i                               VARCHAR2   -- search string
)
RETURN INTEGER
-------------------
IS
v_mid                                    PLS_INTEGER;
v_ix                                    PLS_INTEGER;
v_high                                  PLS_INTEGER;
v_low                                   PLS_INTEGER;
BEGIN
       v_low := first_i;
       v_high := last_i;
       WHILE (v_low <= v_high) LOOP
               v_mid := (v_low + v_high) / 2;
               IF (array_i(v_mid) > string_i) THEN
                   v_high := v_mid - 1;
               ELSIF (array_i(v_mid) < string_i) THEN
                   v_low := v_mid + 1;
               ELSE
                   RETURN v_mid;
              END IF;
       END LOOP;
       return -1;
END pf_binary_hazmat;
 --- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
FUNCTION pf_binary_weight_ptr
  --- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
( array_i                                 nt_weights_ptr_collection,  -- array to search in
  first_i                                PLS_INTEGER,
  last_i                                 PLS_INTEGER,
  string_i                               VARCHAR2   -- search string
)
RETURN INTEGER
-------------------
IS
v_mid                                    PLS_INTEGER;
v_ix                                    PLS_INTEGER;
v_high                                  PLS_INTEGER;
v_low                                   PLS_INTEGER;
BEGIN
       v_low := first_i;
       v_high := last_i;
       WHILE (v_low <= v_high) LOOP
               v_mid := (v_low + v_high) / 2;
               IF (array_i(v_mid).lookup_key > string_i) THEN
                   v_high := v_mid - 1;
               ELSIF (array_i(v_mid).lookup_key < string_i) THEN
                   v_low := v_mid + 1;
               ELSE
                   RETURN v_mid;
              END IF;
       END LOOP;
       return -1;
END pf_binary_weight_ptr;

 --- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
FUNCTION pf_binary_brand2_weight
  --- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
( array_i                                rt_brand2_weight_collection,  -- array to search in
  first_i                                PLS_INTEGER,
  last_i                                 PLS_INTEGER,
  string_i                               VARCHAR2   -- search string
)
RETURN INTEGER
-------------------
IS
v_mid                                    PLS_INTEGER;
v_ix                                    PLS_INTEGER;
v_high                                  PLS_INTEGER;
v_low                                   PLS_INTEGER;
BEGIN
       v_low := first_i;
       v_high := last_i;
       WHILE (v_low <= v_high) LOOP
               v_mid := (v_low + v_high) / 2;
               IF (array_i(v_mid).lookup_key > string_i) THEN
                   v_high := v_mid - 1;
               ELSIF (array_i(v_mid).lookup_key < string_i) THEN
                   v_low := v_mid + 1;
               ELSE
                   RETURN v_mid;
              END IF;
       END LOOP;
       return -1;
END pf_binary_brand2_weight;

 --- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
FUNCTION pf_binary_class_cat_stg
  --- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
( array_i                                rt_products_collection,  -- array to search in
  first_i                                PLS_INTEGER,
  last_i                                 PLS_INTEGER,
  string_i                               VARCHAR2   -- search string
)
RETURN INTEGER
-------------------
IS
v_mid                                    PLS_INTEGER;
v_ix                                    PLS_INTEGER;
v_high                                  PLS_INTEGER;
v_low                                   PLS_INTEGER;
BEGIN
       v_low := first_i;
       v_high := last_i;
       WHILE (v_low <= v_high) LOOP
               v_mid := (v_low + v_high) / 2;
               IF (array_i(v_mid).lookup_key > string_i) THEN
                   v_high := v_mid - 1;
               ELSIF (array_i(v_mid).lookup_key < string_i) THEN
                   v_low := v_mid + 1;
               ELSE
                   RETURN v_mid;
              END IF;
       END LOOP;
       return -1;
END pf_binary_class_cat_stg;
 --- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
FUNCTION pf_binary_freight_ind
  --- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
( array_i                                rt_freight_collection,  -- array to search in
  first_i                                PLS_INTEGER,
  last_i                                 PLS_INTEGER,
  string_i                               VARCHAR2   -- search string
)
RETURN INTEGER
-------------------
IS
v_mid                                    PLS_INTEGER;
v_ix                                    PLS_INTEGER;
v_high                                  PLS_INTEGER;
v_low                                   PLS_INTEGER;
BEGIN
       v_low := first_i;
       v_high := last_i;
       WHILE (v_low <= v_high) LOOP
               v_mid := (v_low + v_high) / 2;
               IF (array_i(v_mid).param_code > string_i) THEN
                   v_high := v_mid - 1;
               ELSIF (array_i(v_mid).param_code < string_i) THEN
                   v_low := v_mid + 1;
               ELSE
                   RETURN v_mid;
              END IF;
       END LOOP;
       return -1;
END pf_binary_freight_ind;

---------------
 PROCEDURE sp_common_routines
--------------------
-- routines common to both delivered and managed
------------------
 IS
 BEGIN
    g_display := 'common,reads: ' || g_reads;
    DBMS_APPLICATION_INFO.SET_MODULE( module_name => 'PO_ROLLING_12', action_name => g_display);
--------------
-- find the matching po/recvd date in the products array to obtain
--  the storage/class/category info
--------------

     g_temperature_class := NULL;

     g_lookup_idx := pf_binary_class_cat_stg(nt_products , 1, nt_products.COUNT,
              g_lookup_key);
     IF g_lookup_idx > -1  THEN
            g_storage_winner    := nt_products(g_lookup_idx).storage_winner;
            g_class_winner      := nt_products(g_lookup_idx).class_winner;
            g_category_winner   := nt_products(g_lookup_idx).category_winner;
            g_storage_ctr       := nt_products(g_lookup_idx).storage_ctr;
            g_class_ctr         := nt_products(g_lookup_idx).class_ctr;
            g_category_ctr      := nt_products(g_lookup_idx).category_ctr;
     ELSE
            g_storage_winner    := NULL;
            g_class_winner      := NULL;
            g_category_winner   := NULL;
            g_storage_ctr       := 0;
            g_class_ctr         := 0;
            g_category_ctr      := 0;
     END IF;

     IF g_storage_winner IS NOT NULL THEN
            IF g_storage_ctr = 1 THEN
               g_search_strg_cd := g_storage_winner || '-2';
            ELSE
               g_search_strg_cd := g_storage_winner || '-3';
            END IF;
            g_lookup_idx := pf_binary_search_storage(nt_storage_values, 1, nt_storage_values.COUNT,
                     g_search_strg_cd);
            IF g_lookup_idx > -1  THEN
                 g_temperature_class := nt_storage_values(g_lookup_idx).param_value_chr;
            END IF;
     END IF;
--------------
-- CLASS
--------------

    IF g_class_ctr = 0 THEN
           g_product_class := NULL;
    ELSIF g_class_ctr = 1 THEN
           g_product_class := g_class_winner;
    ELSE
           g_product_class := 'MIX - ' || g_class_winner;
    END IF;
--------------
-- CATEGORY
--------------

    IF g_category_ctr = 0 THEN
           g_product_category := NULL;
    ELSIF g_category_ctr = 1 THEN
           g_product_category := g_category_winner;
    ELSE
           g_product_category :=  'MIX - ' || g_category_winner;
    END IF;

    g_display := 'common weights,reads: ' || g_reads;
    DBMS_APPLICATION_INFO.SET_MODULE( module_name => 'PO_ROLLING_12', action_name => g_display);
--------------
-- get the cases for brand type 2
--------------

    g_lookup_idx := pf_binary_brand2_weight(nt_brand2_weight , 1, nt_brand2_weight.COUNT,
            g_lookup_key  );
    IF g_lookup_idx > -1  THEN
         g_brand_weight := nt_brand2_weight(g_lookup_idx).weight;
    ELSE
         g_brand_weight := 0;
    END IF;

    IF nt_po(g_in_idx).prod_grs_wght_rcvd_extnd > 0 THEN
        g_eb_pct := ROUND((g_brand_weight / nt_po(g_in_idx).prod_grs_wght_rcvd_extnd), 4);
    ELSE
        g_eb_pct := 0;
    END IF;
--------------
-- freight indicator lookup
--------------
     g_freight_desc := NULL;
     g_lookup_idx := pf_binary_freight_ind(nt_freight_ind, 1, nt_freight_ind.COUNT,
                g_ctms);
     IF g_lookup_idx > -1  THEN
           g_freight_desc   := nt_freight_ind(g_lookup_idx).param_value_chr;
     END IF;

--------------
-- weights
--------------
    g_weight_dry            := 0;
    g_weight_frozen         := 0;
    g_weight_refrigerated   := 0;
    g_weight_ice_cream      := 0;
    g_weight_hazmat         := 0;

    g_lookup_idx := pf_binary_weight_ptr(nt_weights_ptr , 1, nt_weights_ptr.COUNT,
            g_lookup_key  );
    IF g_lookup_idx > -1  THEN
         g_winning_idx := nt_weights_ptr(g_lookup_idx).nt_ptr;
         WHILE TRUE
         LOOP
            IF g_winning_idx < 1 THEN
                EXIT;
            END IF;

            IF nt_weights(g_winning_idx).lookup_key <> g_lookup_key THEN
                EXIT;
            END IF;
            IF nt_weights(g_winning_idx).protection = 'Dry' THEN
                g_weight_dry  := nt_weights(g_winning_idx).weight;
            ELSIF nt_weights(g_winning_idx).protection = 'REFRIGERATED' THEN
                g_weight_refrigerated  := nt_weights(g_winning_idx).weight;
            ELSIF  nt_weights(g_winning_idx).protection = 'FROZEN' THEN
                g_weight_frozen  := nt_weights(g_winning_idx).weight;
            ELSIF  nt_weights(g_winning_idx).protection = 'FROZEN ICE CREAM' THEN
                g_weight_ice_cream  := nt_weights(g_winning_idx).weight;
            ELSIF  nt_weights(g_winning_idx).protection = 'Hazmat' THEN
                g_weight_hazmat  := nt_weights(g_winning_idx).weight;
            END IF;
            g_winning_idx := g_winning_idx - 1;
        END LOOP;
    END IF;
    EXCEPTION

        WHEN OTHERS THEN
                v_sqlcode := SQLCODE;
                v_message := 'sp_common_routines sqlerror ' || v_sqlcode || ' ' ||  SUBSTR(SQLERRM, 1, 75);
                dbms_output.put_line(v_message);
                dbms_output.put_line('po/div/ship : ' || g_po_nbr  || ' ' || g_div_nbr
                                || ' ' || g_shipment_nbr);
                RAISE;
 END sp_common_routines;
----------------------------
 PROCEDURE sp_delivered
----------------------------
-- delivered,  no shipment record
------------------
 IS
 g_my_string ntt_varr := ntt_varr();
 g_len          INTEGER;
 g_zip_idx      INTEGER;
 g_zip          VARCHAR2(50);
 BEGIN
    sp_common_routines;
    g_load_at_city  := nt_po(g_in_idx).sfv_city;
    g_load_at_state := nt_po(g_in_idx).sfv_st;
    g_zip           := nt_po(g_in_idx).sfv_zip_cd;
    g_len           := LENGTH(g_zip);

    IF nt_po(g_in_idx).can_zip_cd_ind IS NOT NULL THEN
        g_my_string.DELETE;
        g_zip_idx := 1;
        FOR qix in 1 .. g_len LOOP
            IF SUBSTR(g_zip, qix, 1) <> ' ' THEN
                g_my_string.EXTEND;
                g_my_string(g_zip_idx) := SUBSTR(g_zip, qix, 1);
                g_zip_idx := g_zip_idx + 1;
            END IF;
        END LOOP;
        g_load_at_zip := NULL;
        g_zip_idx := g_my_string.COUNT;
        FOR qix in 1 .. g_zip_idx LOOP
            g_load_at_zip  := g_load_at_zip || g_my_string(qix);
            IF qix = 6 THEN
                EXIT;
            END IF;
        END LOOP;

    ELSE
        IF g_len > 5 THEN
            g_load_at_zip   := SUBSTR(g_zip, 1, 5);
        ELSE
            g_load_at_zip   := g_zip;
        END IF;
    END IF;

    g_origin_source :=  'Verified-SFV table';
    g_po_type       := 'Delivered';


    EXCEPTION
        WHEN OTHERS THEN
                v_sqlcode := SQLCODE;
                v_message := 'sp_delivered sqlerror ' || v_sqlcode || ' ' ||  SUBSTR(SQLERRM, 1, 75);
                dbms_output.put_line(v_message);
                dbms_output.put_line('po/div/date/ship/reads : ' || g_po_nbr || ' / ' ||
                      g_div_nbr   || ' / ' || g_po_rcvd_dt   || ' / ' || g_shipment_nbr
                        || ' / ' ||  g_reads);
                RAISE;
 END sp_delivered;

---------------
 PROCEDURE sp_managed
--------------------
-- managed,  shipment record exists
------------------
 IS
 BEGIN
    sp_common_routines;
    g_origin_source :=  'Verified-TMS';
    BEGIN
        SELECT  NVL(SUM(PO_REV), 0), NVL(SUM(TTL_COST), 0),
                NVL(SUM(PO_REV - TTL_COST), 0)
        INTO g_po_revenue, g_po_cost, g_po_savings
        FROM xdmadm.shpm_corp
        WHERE po_nbr = g_po_nbr
        AND po_brnch_cd = g_brnch_cd
        AND po_rcvd_dt = g_po_rcvd_dt;
     EXCEPTION
        WHEN NO_DATA_FOUND THEN
           NULL;
     END;

-------------
--   po type mapping
--------------

    IF g_po_rcvd_dt IS NULL THEN
          g_po_type := 'Managed - Pending Complete';
    ELSIF g_tms_src = 'TIPS' THEN  -- TIPS shipment
            IF SUBSTR(g_srvc_cd, 1, 1) ='3' THEN
                g_po_type := '3rd Party Business';
            ELSIF SUBSTR(g_srvc_cd, 1, 1) in ('4', '5', 'L') THEN
                g_po_type := '3rd Party Managed';
            ELSIF  g_srvc_cd = 'BH' THEN
                g_po_type := 'Backhaul';
            ELSIF  g_srvc_cd = 'FLBH' THEN
                g_po_type := 'Fleet Backhaul';
            ELSIF SUBSTR(g_srvc_cd, 1, 1) in ('F') THEN
                g_po_type := 'Fleet';
            ELSIF  g_srvc_cd  in ('RR60', 'BOXR', 'BOXD') THEN
                g_po_type := 'Rail';
            ELSIF  g_srvc_cd  = 'RESC'   THEN
                g_po_type := 'Resc';
            ELSIF  g_srvc_cd= 'FLBH' THEN
                g_po_type := 'Resc';
            ELSIF  g_srvc_cd = 'RTV' THEN
                g_po_type := 'Return to Vendor';
            END IF;
    ELSE -- Manhattan shipment
        IF g_alt_hlng_typ IN ( '3PB', '3PI') THEN
           g_po_type := '3rd Party Business';
        ELSIF g_alt_hlng_typ = 'Rail' THEN
           g_po_type := 'Rail';
        ELSIF g_alt_hlng_typ = 'RESC' THEN
           g_po_type := 'Resc';
        ELSIF g_alt_hlng_typ = 'RTV' THEN
           g_po_type := 'Return to Vendor';
        ELSIF SUBSTR(g_carrier_cd, 1, 3) <> 'USF'
              AND g_srvc_lvl = 'SINGLE' AND g_alt_hlng_typ IS NULL THEN
                g_po_type := '3rd Party Managed';
        ELSIF g_mot = 'LTL' AND g_alt_hlng_typ IS NULL THEN
                g_po_type := '3rd Party Managed';
        ELSIF SUBSTR(g_carrier_cd, 1, 3) = 'USF'
              AND g_srvc_lvl = 'BH' AND g_alt_hlng_typ IS NULL THEN
                g_po_type := 'Backhaul';
        ELSIF SUBSTR(g_carrier_cd, 1, 3) = 'USF'
              AND g_srvc_lvl <> 'BH' AND g_alt_hlng_typ IS NULL THEN
                g_po_type := 'Fleet';
        ELSIF g_mot = 'TL' AND SUBSTR(g_carrier_cd, 1, 3) = 'USF'
              AND g_srvc_lvl = 'BH'  AND g_alt_hlng_typ IS NULL
              AND g_brnch_cd = g_shp_dest_fclty_alias_id   THEN
                g_po_type := 'Fleet Backhaul';

        END IF;
    END IF;

    IF g_cross_dock = 'Y' THEN
            g_cross_dock_mit := g_shp_orgn_fclty_alias_id;
    ELSE
            g_cross_dock_mit := NULL;
    END IF;


    EXCEPTION
        WHEN OTHERS THEN
                v_sqlcode := SQLCODE;
                v_message := 'sp_managed sqlerror ' || v_sqlcode || ' ' ||  SUBSTR(SQLERRM, 1, 75);
                dbms_output.put_line(v_message);
                dbms_output.put_line('po/div/date/ship/reads : ' || g_po_nbr || ' / ' ||
                      g_div_nbr   || ' / ' || g_po_rcvd_dt   || ' / ' || g_shipment_nbr
                        || ' / ' ||  g_reads);
                RAISE;
 END sp_managed;

---------------
 PROCEDURE sp_clear_work_fields
---------------
IS
 BEGIN
    g_shipment_nbr                     := NULL;
    g_po_type                          := NULL;
    g_carrier_cd                       := NULL;
    g_carrier_nm                       := NULL;
    g_mot                              := NULL;
    g_eqpmt                            := NULL;
    g_srvc_lvl                         := NULL;
    g_shp_orgn_fclty_alias_id          := NULL;
    g_voucher_date                     := NULL;
    g_po_weight                        := 0;
    g_po_cases                         := 0;
    g_po_cube                          := 0;
    g_po_revenue                       := 0;
    g_po_cost                          := 0;
    g_po_savings                       := 0;
    g_load_at_id                       := NULL;
    g_load_at_name                     := NULL;
    g_load_at_city                     := NULL;
    g_load_at_state                    := NULL;
    g_load_at_zip                      := NULL;
    g_origin_source                    := NULL;
    g_tips_commodity                   := NULL;
    g_tms_src                          := NULL;
    g_po_rcvd_dt                       := NULL;
    g_cross_dock                       := NULL;
    g_cross_dock_mit                   := NULL;
    g_po_orgn_fclty_alias_id           := NULL;
    g_srvc_cd                          := NULL;
    g_alt_hlng_typ                     := NULL;
    g_shp_dest_fclty_alias_id          := NULL;
    g_tms_prch_from_vndr_nm            := NULL;
    g_po_rqstd_dt                      := NULL;
    g_po_appt_dt                       := NULL;
    g_po_plnd_dlvry_dt                 := NULL;
    g_po_plnd_pckp_dt                  := NULL;
    g_po_orig_due_dt                   := NULL;
    g_primary_fclty_alias_id           := NULL;
 END sp_clear_work_fields;
---------------
 PROCEDURE sp_save_record
---------------
IS
 BEGIN
    nt_output_record.EXTEND;
    g_out_idx   := g_out_idx + 1;
 --dbms_output.put_line('indexes: ' || g_out_idx || ' '  || g_in_idx);
    nt_output_record(g_out_idx).po_nbr                            := g_po_nbr;
    nt_output_record(g_out_idx).shipment_nbr                      := g_shipment_nbr;
    nt_output_record(g_out_idx).brnch_cd                          := nt_po(g_in_idx).brnch_cd;
    nt_output_record(g_out_idx).div_nm                            := nt_po(g_in_idx).div_nm;
    nt_output_record(g_out_idx).div_nbr                           := nt_po(g_in_idx).div_nbr;
    nt_output_record(g_out_idx).cmpny_vndr_nm                     := nt_po(g_in_idx).cmpny_vndr_nm;
    nt_output_record(g_out_idx).prch_from_vndr_nm                 := nvl(nt_po(g_in_idx).prch_from_vndr_nm,g_tms_prch_from_vndr_nm);--R2
    nt_output_record(g_out_idx).prch_from_vndr_nbr                := nt_po(g_in_idx).prch_from_vndr_nbr;
    nt_output_record(g_out_idx).ship_from_vndr_nbr                := nt_po(g_in_idx).ship_from_vndr_nbr;
    nt_output_record(g_out_idx).ap_vndr_nbr                       := nt_po(g_in_idx).ap_vndr_nbr;
    nt_output_record(g_out_idx).ofv_cmpny_vndr_nbr_actl           := nt_po(g_in_idx).ofv_cmpny_vndr_nbr_actl;
    nt_output_record(g_out_idx).ord_from_vndr_nbr                 := nt_po(g_in_idx).ord_from_vndr_nbr;
    nt_output_record(g_out_idx).fisc_mth_of_yr                    := nt_po(g_in_idx).fisc_mth_of_yr;
    nt_output_record(g_out_idx).fisc_wk_of_yr                     := nt_po(g_in_idx).fisc_wk_of_yr;
    nt_output_record(g_out_idx).fisc_yr                           := nt_po(g_in_idx).fisc_yr;
    nt_output_record(g_out_idx).ord_dt                            := nt_po(g_in_idx).ord_dt;
    nt_output_record(g_out_idx).arvl_dt                           := nt_po(g_in_idx).arvl_dt;
    nt_output_record(g_out_idx).rcvd_dt                           := g_po_rcvd_dt;
    nt_output_record(g_out_idx).buyr_nm                           := nt_po(g_in_idx).buyr_nm;
    nt_output_record(g_out_idx).buyr_nbr                          := nt_po(g_in_idx).buyr_nbr;
    nt_output_record(g_out_idx).orig_pickup_dt                    := nt_po(g_in_idx).orig_pickup_dt;
    nt_output_record(g_out_idx).prod_cube_rcvd_extnd              := nt_po(g_in_idx).prod_cube_rcvd_extnd;
    nt_output_record(g_out_idx).prod_grs_wght_rcvd_extnd          := nt_po(g_in_idx).prod_grs_wght_rcvd_extnd;
    nt_output_record(g_out_idx).prod_net_wght_rcvd_extnd          := nt_po(g_in_idx).prod_net_wght_rcvd_extnd;
    nt_output_record(g_out_idx).rcvd_qty                          := nt_po(g_in_idx).rcvd_qty;
    nt_output_record(g_out_idx).orig_qty_ord                      := nt_po(g_in_idx).orig_qty_ord;
    nt_output_record(g_out_idx).carr_nm                           := nt_po(g_in_idx).carr_nm;
    nt_output_record(g_out_idx).ctms                              := nt_po(g_in_idx).ctms;
    nt_output_record(g_out_idx).PO_Total_Freight_Amount           := nt_po(g_in_idx).PO_Total_Freight_Amount;
    nt_output_record(g_out_idx).PO_Total_Delivery_Amount          := nt_po(g_in_idx).PO_Total_Delivery_Amount;
    nt_output_record(g_out_idx).PO_Total_Value_Amount             := nt_po(g_in_idx).PO_Total_Value_Amount;
    nt_output_record(g_out_idx).service                           := g_srvc_cd;
    nt_output_record(g_out_idx).carrier_cd                        := g_carrier_cd;
    nt_output_record(g_out_idx).carrier_nm                        := g_carrier_nm;
    nt_output_record(g_out_idx).po_type                           := g_po_type;
    nt_output_record(g_out_idx).cross_dock_mit                    := g_cross_dock_mit;
    nt_output_record(g_out_idx).voucher_date                      := g_voucher_date;
    nt_output_record(g_out_idx).po_weight                         := g_po_weight;
    nt_output_record(g_out_idx).po_cases                          := g_po_cases;
    nt_output_record(g_out_idx).po_cube                           := g_po_cube;
    nt_output_record(g_out_idx).po_revenue                        := g_po_revenue;
    nt_output_record(g_out_idx).po_cost                           := g_po_cost;
    nt_output_record(g_out_idx).po_savings                        := g_po_savings;
    nt_output_record(g_out_idx).load_at_id                        := g_load_at_id;
    nt_output_record(g_out_idx).load_at_name                      := g_load_at_name;
    nt_output_record(g_out_idx).load_at_city                      := g_load_at_city;
    nt_output_record(g_out_idx).load_at_state                     := g_load_at_state;
    nt_output_record(g_out_idx).load_at_zip                       := g_load_at_zip;
    nt_output_record(g_out_idx).origin_source                     := g_origin_source;
    nt_output_record(g_out_idx).tips_commodity                    := g_tips_commodity;
    nt_output_record(g_out_idx).temperature_class                 := g_temperature_class;
    nt_output_record(g_out_idx).product_class                     := g_product_class;
    nt_output_record(g_out_idx).product_category                  := g_product_category;
    nt_output_record(g_out_idx).eb_pct                            := g_eb_pct;
    nt_output_record(g_out_idx).freight_desc                      := g_freight_desc;
    nt_output_record(g_out_idx).weight_dry                        := g_weight_dry;
    nt_output_record(g_out_idx).weight_frozen                     := g_weight_frozen;
    nt_output_record(g_out_idx).weight_refrigerated               := g_weight_refrigerated;
    nt_output_record(g_out_idx).weight_ice_cream                  := g_weight_ice_cream;
    nt_output_record(g_out_idx).weight_hazmat                     := g_weight_hazmat;
    nt_output_record(g_out_idx).pfv_cmpny_vndr_nbr_actl           := nt_po(g_in_idx).pfv_cmpny_vndr_nbr_actl;
    nt_output_record(g_out_idx).drct_ship_ind                     := nt_po(g_in_idx).drct_ship_ind;           -- R2
    nt_output_record(g_out_idx).kraft_vndr_ind                    := nt_po(g_in_idx).kraft_vndr_ind;          -- R2
    nt_output_record(g_out_idx).pickup_dt                         := nt_po(g_in_idx).pickup_dt;               -- R2
    nt_output_record(g_out_idx).miles                             := nt_po(g_in_idx).miles;                   -- R2
    nt_output_record(g_out_idx).crs_dck_flg                       := nt_po(g_in_idx).crs_dck_flg;             -- R2
    nt_output_record(g_out_idx).rgn_nm                            := nt_po(g_in_idx).rgn_nm;                  -- R2
    nt_output_record(g_out_idx).area_nm                           := nt_po(g_in_idx).area_nm;                 -- R2
    nt_output_record(g_out_idx).crs_dck_div_nbr            := nt_po(g_in_idx).crs_dck_div_nbr; -- R2
    nt_output_record(g_out_idx).scpo_grp_id                       := nt_po(g_in_idx).scpo_grp_id;             -- R2
    nt_output_record(g_out_idx).bluprnt_id                        := nt_po(g_in_idx).bluprnt_id;              -- R2
    nt_output_record(g_out_idx).orig_arvl_dt                      := nt_po(g_in_idx).orig_arvl_dt;            -- R2
    nt_output_record(g_out_idx).po_dock_in_dt                     := nt_po(g_in_idx).po_dock_in_dt;           -- R2
    nt_output_record(g_out_idx).po_dock_out_dt                    := nt_po(g_in_idx).po_dock_out_dt;          -- R2
    nt_output_record(g_out_idx).po_gate_in_dt                     := nt_po(g_in_idx).po_gate_in_dt;           -- R2
    nt_output_record(g_out_idx).po_gate_out_dt                    := nt_po(g_in_idx).po_gate_out_dt;          -- R2
    nt_output_record(g_out_idx).po_rqstd_dt                       := g_po_rqstd_dt;                           -- R2
--    nt_output_record(g_out_idx).po_appt_dt                        := g_po_appt_dt;                            -- R2
      nt_output_record(g_out_idx).po_appt_dt                 := nt_po(g_in_idx).aptnt_dt; -- R2
    nt_output_record(g_out_idx).po_plnd_dlvry_dt                  := g_po_plnd_dlvry_dt;                      -- R2
    nt_output_record(g_out_idx).po_total_cost_amount_sum          := nt_po(g_in_idx).po_total_cost_amount_sum;-- R2
    nt_output_record(g_out_idx).po_plnd_pckp_dt                   := g_po_plnd_pckp_dt;                       -- R2
    nt_output_record(g_out_idx).po_orig_due_dt                    := g_po_orig_due_dt;                        -- R2
    nt_output_record(g_out_idx).primary_fclty_alias_id            := g_primary_fclty_alias_id;                -- R2
      nt_output_record(g_out_idx).cnfrmd_pua_ttl             := nt_po(g_in_idx).cnfrmd_pua_ttl;
      nt_output_record(g_out_idx).cnfrmd_ppaid_ttl           := nt_po(g_in_idx).cnfrmd_ppaid_ttl;
      nt_output_record(g_out_idx).cnfrmd_frght_ttl           := nt_po(g_in_idx).cnfrmd_frght_ttl;
      nt_output_record(g_out_idx).cnfrmd_mrkt_frght_ttl      := nt_po(g_in_idx).cnfrmd_mrkt_frght_ttl;
      nt_output_record(g_out_idx).rcvd_pua_ttl               := nt_po(g_in_idx).rcvd_pua_ttl;
      nt_output_record(g_out_idx).rcvd_ppaid_ttl             := nt_po(g_in_idx).rcvd_ppaid_ttl;
      nt_output_record(g_out_idx).rcvd_frght_ttl             := nt_po(g_in_idx).rcvd_frght_ttl;
      nt_output_record(g_out_idx).rcvd_mrkt_frght_ttl        := nt_po(g_in_idx).rcvd_mrkt_frght_ttl;
      nt_output_record(g_out_idx).po_id                      := g_po_nbr || '_' || nt_po(g_in_idx).brnch_cd || '_' || TO_CHAR(g_po_rcvd_dt, 'YYYYMMDD');
      --2/6/19
      nt_output_record(g_out_idx).aptnt_dt             	:= nt_po(g_in_idx).aptnt_dt;
      nt_output_record(g_out_idx).aptnt_tm			    := nt_po(g_in_idx).aptnt_tm;
      nt_output_record(g_out_idx).buyr_loc_typ_cd_actl	:= nt_po(g_in_idx).buyr_loc_typ_cd_actl;
      nt_output_record(g_out_idx).buyr_sub_typ_actl		:= nt_po(g_in_idx).buyr_sub_typ_actl;
      nt_output_record(g_out_idx).orig_aptnt_dt			:= nt_po(g_in_idx).orig_aptnt_dt;
      nt_output_record(g_out_idx).orig_aptnt_tm			:= nt_po(g_in_idx).orig_aptnt_tm;
      nt_output_record(g_out_idx).cmp_po_brnch_nbr		:= nt_po(g_in_idx).cmp_po_brnch_nbr;
      nt_output_record(g_out_idx).cmp_po_nbr				:= nt_po(g_in_idx).cmp_po_nbr;
      nt_output_record(g_out_idx).arrvl_dt_chg_rsn		:= nt_po(g_in_idx).arrvl_dt_chg_rsn;
      nt_output_record(g_out_idx).pickup_dt_chg_rsn		:= nt_po(g_in_idx).pickup_dt_chg_rsn;
      nt_output_record(g_out_idx).po_dock_in_tm			:= nt_po(g_in_idx).po_dock_in_tm;
      nt_output_record(g_out_idx).po_dock_out_tm			:= nt_po(g_in_idx).po_dock_out_tm;
      nt_output_record(g_out_idx).po_gate_in_tm			:= nt_po(g_in_idx).po_gate_in_tm;
      nt_output_record(g_out_idx).po_gate_out_tm			:= nt_po(g_in_idx).po_gate_out_tm;
      nt_output_record(g_out_idx).carr_scac_cd			:= nt_po(g_in_idx).carr_scac_cd;
      nt_output_record(g_out_idx).frght_trm_cd_actl		:= nt_po(g_in_idx).frght_trm_cd_actl;


     EXCEPTION
        WHEN OTHERS THEN
                v_sqlcode := SQLCODE;
                v_message := 'sp_save_record sqlerror ' || v_sqlcode || ' ' ||  SUBSTR(SQLERRM, 1, 75);
                dbms_output.put_line(v_message);
                dbms_output.put_line('po/div/date/ship/reads : ' || g_po_nbr || ' / ' ||
                      g_div_nbr   || ' / ' || g_po_rcvd_dt   || ' / ' || g_shipment_nbr
                        || ' / ' ||  g_reads);
                RAISE;
END sp_save_record;
---------------
 PROCEDURE sp_po_reason_change
--------------------
-- logic for the po change reason  6/2016, 8/2016
-- po change reason logic
------------------
 IS
 BEGIN

    FOR vix in 1 .. nt_output_record.COUNT LOOP
        g_div_nbr  :=  nt_output_record(vix).div_nbr;
        g_po_nbr   := nt_output_record(vix).po_nbr;
        g_ord_dt   := nt_output_record(vix).ord_dt;

        nt_output_record(vix).lst_arrvl_chg_user_id := NULL;
        nt_output_record(vix).lst_arrvl_chg_date :=  NULL;
        nt_output_record(vix).lst_arrvl_chg_reason := NULL;
        nt_output_record(vix).date_arrival_befr := NULL;
        nt_output_record(vix).date_arrival_aftr := NULL;

        SELECT  COUNT(1)
        INTO g_how_many
        FROM xdmadm.po_hdr_audit
        WHERE div_nbr = g_div_nbr
        AND po_nbr = g_po_nbr
        AND ord_dt = g_ord_dt
        AND NVL(arrvl_dt_chg_rc_befr, 'yyzz') <> NVL(arrvl_dt_chg_rc_aftr, 'yyzz');

        IF g_how_many > 0 THEN
                SELECT  user_id, max_entry, arrvl_dt_chg_rc_aftr,
                            date_arrival_befr, date_arrival_aftr
                INTO  g_lst_arrvl_chg_user_id, g_lst_arrvl_chg_date,
                        g_lst_arrvl_chg_reason,
                       g_date_arrival_befr, g_date_arrival_aftr

                FROM
                (
                    SELECT  ROW_NUMBER()  OVER (PARTITION BY po_nbr
                        ORDER BY TO_DATE(TO_CHAR(entry_dt, 'yyyymmdd') ||
                             TO_CHAR(LPAD(entry_tm, 6, 0)), 'yyyymmddhh24miss') desc) seq,
                        user_id,  TO_DATE(TO_CHAR(entry_dt, 'yyyymmdd') ||
                            TO_CHAR(LPAD(entry_tm, 6, 0)), 'yyyymmddhh24miss') max_entry,
                            arrvl_dt_chg_rc_aftr,
                            date_arrival_befr, date_arrival_aftr
                    FROM xdmadm.po_hdr_audit
                    WHERE div_nbr = g_div_nbr
                    AND po_nbr = g_po_nbr
                    AND ord_dt = g_ord_dt
                 )
                WHERE seq = 1;
                nt_output_record(vix).lst_arrvl_chg_user_id := g_lst_arrvl_chg_user_id;
                nt_output_record(vix).lst_arrvl_chg_date :=  g_lst_arrvl_chg_date;
                nt_output_record(vix).lst_arrvl_chg_reason := g_lst_arrvl_chg_reason;
                nt_output_record(vix).date_arrival_befr := g_date_arrival_befr;
                nt_output_record(vix).date_arrival_aftr := g_date_arrival_aftr;

        END IF;
   END LOOP;

     EXCEPTION
        WHEN OTHERS THEN
                v_sqlcode := SQLCODE;
                v_message := 'sp_po_reason_change sqlerror ' || v_sqlcode || ' ' ||  SUBSTR(SQLERRM, 1, 75);
                dbms_output.put_line(v_message);
                dbms_output.put_line('po/div/date/ship/reads : ' || g_po_nbr || ' / ' ||
                      g_div_nbr   || ' / ' || g_po_rcvd_dt   || ' / ' || g_shipment_nbr
                        || ' / ' ||  g_reads);
                RAISE;
END sp_po_reason_change;

---------------
 PROCEDURE sp_insert_record
--------------------
-- insert a record into table xdmadm.po_rolling_12
------------------
 IS
 BEGIN

    sp_po_reason_change;

    FORALL xix in 1 .. nt_output_record.COUNT
      INSERT  /*+ append */ INTO xdmadm.po_rolling_12
         (po_nbr, shipment_nbr, div_code,
            div_name, division_number, company_vendor_name, supplier_name, purchase_from_vendor_number,
            ship_from_vendor_number, ap_vendor_number, company_vendor_number, order_from_vendor_number,
             fiscal_period, fiscal_week, fiscal_year, po_creation_date, po_due_date,
            po_receive_date, buyer_name, buyer_number, cube, gross_weight, net_weight, cases,
            ordered_quantity, discoverer_carrier_name, ctms_via, po_total_freight_amount_sum,
            po_total_delivery_amount_sum, po_total_value_amount_sum,
            service, carrier_code, carrier_name, po_type, cross_dock_mit,
            voucher_date, po_weight, po_cases, po_cube, po_revenue, po_cost, po_savings,
            load_at_id, load_at_name, load_at_city, load_at_state, load_at_zip, origin_source,
            tips_commodity, temperature_classification, product_classification,
            product_category, eb_pct, freight_description, dry_weight, frozen_weight, refrigerated_weight,
            ice_cream_weight, hazmat_weight, pfv_cmpny_vndr_nbr_actl, ldr_tm
            , drct_ship_ind, kraft_vndr_ind, pickup_dt, miles --R2
            , crs_dck_flg, primary_fclty_alias_id, rgn_nm, area_nm, scpo_grp_id, bluprnt_id, orig_arvl_dt --R2
            , po_dock_in_dt, po_dock_out_dt, po_gate_in_dt,  po_gate_out_dt,    --R2
            po_rqstd_dt, po_appt_dt, po_plnd_dlvry_dt, po_total_cost_amount_sum, po_plnd_pckp_dt, po_orig_due_dt, --R2
            lst_arrvl_chg_reason, lst_arrvl_chg_user_id, lst_arrvl_chg_date,
            orig_pickup_dt,
            crs_dck_div_nbr, cnfrmd_pua_ttl,
            cnfrmd_ppaid_ttl, cnfrmd_frght_ttl, cnfrmd_mrkt_frght_ttl, rcvd_pua_ttl, rcvd_ppaid_ttl, rcvd_frght_ttl,
            rcvd_mrkt_frght_ttl, po_id,
            date_arrival_befr, date_arrival_aftr,
            aptnt_dt,aptnt_tm,buyr_loc_typ_cd_actl,buyr_sub_typ_actl,orig_aptnt_dt,orig_aptnt_tm,
            cmp_po_brnch_nbr,cmp_po_nbr,arrvl_dt_chg_rsn,pickup_dt_chg_rsn,
            po_dock_in_tm,po_dock_out_tm,po_gate_in_tm,po_gate_out_tm,arvl_dt,carr_scac_cd,frght_trm_cd_actl
          )
         VALUES ( nt_output_record(xix).po_nbr,
            nt_output_record(xix).shipment_nbr,
            nt_output_record(xix).brnch_cd,
            nt_output_record(xix).div_nm,
            nt_output_record(xix).div_nbr,
            nt_output_record(xix).cmpny_vndr_nm,
            nt_output_record(xix).prch_from_vndr_nm,
            nt_output_record(xix).prch_from_vndr_nbr,
            nt_output_record(xix).ship_from_vndr_nbr,
            nt_output_record(xix).ap_vndr_nbr,
            nt_output_record(xix).pfv_cmpny_vndr_nbr_actl,
            nt_output_record(xix).ord_from_vndr_nbr,
            nt_output_record(xix).fisc_mth_of_yr ,
            nt_output_record(xix).fisc_wk_of_yr,
            nt_output_record(xix).fisc_yr,
            nt_output_record(xix).ord_dt,
            nt_output_record(xix).arvl_dt,
            nt_output_record(xix).rcvd_dt,
            nt_output_record(xix).buyr_nm,
            nt_output_record(xix).buyr_nbr,
            nt_output_record(xix).prod_cube_rcvd_extnd,
            nt_output_record(xix).prod_grs_wght_rcvd_extnd,
            nt_output_record(xix).prod_net_wght_rcvd_extnd,
            nt_output_record(xix).rcvd_qty,
            nt_output_record(xix).orig_qty_ord,
            nt_output_record(xix).carr_nm,
            nt_output_record(xix).ctms,
            nt_output_record(xix).PO_Total_Freight_Amount,
            nt_output_record(xix).PO_Total_Delivery_Amount,
            nt_output_record(xix).PO_Total_Value_Amount,
            nt_output_record(xix).service,
            nt_output_record(xix).carrier_cd,
            nt_output_record(xix).carrier_nm,
            nt_output_record(xix).po_type,
            nt_output_record(xix).cross_dock_mit,
            nt_output_record(xix).voucher_date,
            nt_output_record(xix).po_weight,
            nt_output_record(xix).po_cases,
            nt_output_record(xix).po_cube,
            nt_output_record(xix).po_revenue,
            nt_output_record(xix).po_cost,
            nt_output_record(xix).po_savings,
            nt_output_record(xix).load_at_id,
            nt_output_record(xix).load_at_name,
            nt_output_record(xix).load_at_city,
            nt_output_record(xix).load_at_state,
            nt_output_record(xix).load_at_zip,
            nt_output_record(xix).origin_source,
            nt_output_record(xix).tips_commodity,
            nt_output_record(xix).temperature_class,
            nt_output_record(xix).product_class,
            nt_output_record(xix).product_category,
            nt_output_record(xix).eb_pct,
            nt_output_record(xix).freight_desc,
            nt_output_record(xix).weight_dry,
            nt_output_record(xix).weight_frozen,
            nt_output_record(xix).weight_refrigerated,
            nt_output_record(xix).weight_ice_cream,
            nt_output_record(xix).weight_hazmat,
            nt_output_record(xix).pfv_cmpny_vndr_nbr_actl,
            g_ldr_tm,
            nt_output_record(xix).drct_ship_ind,            --R2
            nt_output_record(xix).kraft_vndr_ind,           --R2
            nt_output_record(xix).pickup_dt,                --R2
            nt_output_record(xix).miles,                    --R2
            nt_output_record(xix).crs_dck_flg,              --R2
            nt_output_record(xix).primary_fclty_alias_id,   --R2
            nt_output_record(xix).rgn_nm,                   --R2
            nt_output_record(xix).area_nm,                  --R2
            nt_output_record(xix).scpo_grp_id,              --R2
            nt_output_record(xix).bluprnt_id,               --R2
            nt_output_record(xix).orig_arvl_dt,             --R2
            nt_output_record(xix).po_dock_in_dt,            --R2
            nt_output_record(xix).po_dock_out_dt,           --R2
            nt_output_record(xix).po_gate_in_dt,            --R2
            nt_output_record(xix).po_gate_out_dt,           --R2
            nt_output_record(xix).po_rqstd_dt,              --R2
            nt_output_record(xix).po_appt_dt,               --R2
            nt_output_record(xix).po_plnd_dlvry_dt,         --R2
            nt_output_record(xix).po_total_cost_amount_sum, --R2
            nt_output_record(xix).po_plnd_pckp_dt,          --R2
            nt_output_record(xix).po_orig_due_dt,           --R2
            nt_output_record(xix).lst_arrvl_chg_reason,
            nt_output_record(xix).lst_arrvl_chg_user_id,
            nt_output_record(xix).lst_arrvl_chg_date,
            nt_output_record(xix).orig_pickup_dt,
            nt_output_record(xix).crs_dck_div_nbr,
            nt_output_record(xix).cnfrmd_pua_ttl,
            nt_output_record(xix).cnfrmd_ppaid_ttl,
            nt_output_record(xix).cnfrmd_frght_ttl,
            nt_output_record(xix).cnfrmd_mrkt_frght_ttl,
            nt_output_record(xix).rcvd_pua_ttl,
            nt_output_record(xix).rcvd_ppaid_ttl,
            nt_output_record(xix).rcvd_frght_ttl,
            nt_output_record(xix).rcvd_mrkt_frght_ttl,
            nt_output_record(xix).po_id,
            nt_output_record(xix).date_arrival_befr,
            nt_output_record(xix).date_arrival_aftr,
            nt_output_record(xix).aptnt_dt,
            nt_output_record(xix).aptnt_tm,
            nt_output_record(xix).buyr_loc_typ_cd_actl,
            nt_output_record(xix).buyr_sub_typ_actl,
            nt_output_record(xix).orig_aptnt_dt,
            nt_output_record(xix).orig_aptnt_tm,
            nt_output_record(xix).cmp_po_brnch_nbr,
            nt_output_record(xix).cmp_po_nbr,
            nt_output_record(xix).arrvl_dt_chg_rsn,
            nt_output_record(xix).pickup_dt_chg_rsn,
            nt_output_record(xix).po_dock_in_tm,
            nt_output_record(xix).po_dock_out_tm,
            nt_output_record(xix).po_gate_in_tm,
            nt_output_record(xix).po_gate_out_tm,
            nt_output_record(xix).arvl_dt,
            nt_output_record(xix).carr_scac_cd,
            nt_output_record(xix).frght_trm_cd_actl

          );
    g_writes := g_writes + SQL%ROWCOUNT;
    nt_output_record.DELETE;
    g_out_idx   := 0;

    EXCEPTION
        WHEN OTHERS THEN
                v_sqlcode := SQLCODE;
                v_message := 'sp_insert_record sqlerror ' || v_sqlcode || ' ' ||  SUBSTR(SQLERRM, 1, 75);
                dbms_output.put_line(v_message);
                dbms_output.put_line('po/div/date/ship/reads : ' || g_po_nbr || ' / ' ||
                      g_div_nbr   || ' / ' || g_po_rcvd_dt   || ' / ' || g_shipment_nbr
                        || ' / ' ||  g_reads);
                RAISE;
 END sp_insert_record;

 --- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
 -- mainline
  BEGIN

  SELECT PARAM_VALUE_NBR INTO c_subtract_days FROM XDMADM.PARAM_VALUE
  WHERE APP_NAME = 'LOGISTICS' and PARAM_TYPE = 'PO_ROLLING' and PARAM_CODE = 'NBR_OF_DAYS' ;

--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
    DBMS_OUTPUT.PUT_LINE('BEGIN at ' || to_char(sysdate, 'yyyymmdd hh24:mi:ss'));
-------------------
-- verify the parms
-------------------
    IF vendor_i IS NULL  OR vendor_i = '58070'  OR vendor_i = 'ALL' THEN
         NULL;
    ELSE
        DBMS_OUTPUT.PUT_LINE('invalid vendor parm');
        RETURN 1;
    END IF;
    g_reads     := 0;
    g_writes    := 0;
    g_out_idx   := 0;
    DBMS_APPLICATION_INFO.SET_MODULE( module_name => 'PO_ROLLING_12', action_name => 'TRUNCATE');
      g_truncate_return := usfdba.table_pkg.truncate_table(v_message, 'XDMADM',
                     'PO_ROLLING_12' );
      IF g_truncate_return <> 0 THEN
            dbms_output.put_line('bad truncate, return code: ' || g_truncate_return);
           RETURN 1;
       END IF;

-------------------
-- put the storage types into an array
-------------------
    DBMS_APPLICATION_INFO.SET_MODULE( module_name => 'PO_ROLLING_12',
                action_name => 'STORAGE ARRAY');
     OPEN cur_storage_values;
     FETCH cur_storage_values BULK COLLECT INTO nt_storage_values;
     CLOSE cur_storage_values;
     IF nt_storage_values.COUNT = 0 THEN
        dbms_output.put_line('Missing storage value records in param_value table- aborting');
        RETURN 1;
     END IF;

-------------------
-- put the freight types into an array
-------------------
    DBMS_APPLICATION_INFO.SET_MODULE( module_name => 'PO_ROLLING_12',
               action_name => 'FREIGHT ARRAY');
    OPEN cur_freight_ind;
    FETCH cur_freight_ind  BULK COLLECT INTO nt_freight_ind;
    CLOSE cur_freight_ind;
     IF nt_freight_ind.COUNT = 0 THEN
        dbms_output.put_line('Missing freight records in param_value table- aborting');
        RETURN 1;
     END IF;

-------------------
-- put the storage/category/class winners into an array
-------------------
    DBMS_APPLICATION_INFO.SET_MODULE( module_name => 'PO_ROLLING_12',
                action_name => 'CLASS/CAT ARRAY');
    DBMS_APPLICATION_INFO.SET_MODULE( module_name => 'PO_ROLLING_12', action_name => 'cur_products');
    OPEN cur_products;
    FETCH cur_products BULK COLLECT INTO nt_products;
    CLOSE cur_products;
    dbms_output.put_line('storage/class/category count: ' || nt_products.COUNT);

-------------------
-- get the protection weight breakdown for all po's
-------------------
    DBMS_APPLICATION_INFO.SET_MODULE( module_name => 'PO_ROLLING_12',
                action_name => 'PROT WEIGHTS ARRAY');
    OPEN cur_weights;
    FETCH cur_weights BULK COLLECT INTO nt_weights;
    CLOSE cur_weights;
    dbms_output.put_line('weight count: ' || nt_weights.COUNT);
    nt_weights_ptr.DELETE;
-------------------
  -- create pointer records to the END of every combination of
  --   po_nbr, div, and rcvd_dt for faster retrieval ; this is because
  -- there will be multiple records for the combination and we need a subset pointer
  -- for the binary search
-------------------
   IF nt_weights.COUNT > 0 THEN
       FOR vix in 1 .. nt_weights.COUNT LOOP
           IF vix = 1 THEN
                nt_weights_ptr.EXTEND;
                nt_weights_ptr(nt_weights_ptr.COUNT).lookup_key := nt_weights(vix).lookup_key;
                nt_weights_ptr(nt_weights_ptr.COUNT).nt_ptr     := vix;
           ELSIF nt_weights_ptr(nt_weights_ptr.COUNT).lookup_key <> nt_weights(vix).lookup_key THEN
                        nt_weights_ptr.EXTEND;
                        nt_weights_ptr(nt_weights_ptr.COUNT).lookup_key := nt_weights(vix).lookup_key;
                        nt_weights_ptr(nt_weights_ptr.COUNT).nt_ptr     := vix;
           ELSE
                nt_weights_ptr(nt_weights_ptr.COUNT).nt_ptr  := vix;
           END IF;
       END LOOP;
   END IF;
   dbms_output.put_line('ptr weight count: ' || nt_weights_ptr.COUNT);

-------------------
-- get the weights by po for brand 2
-------------------
   DBMS_APPLICATION_INFO.SET_MODULE( module_name => 'PO_ROLLING_12',
                action_name => 'BRAND 2');
   OPEN  cur_brand2_weight;
   FETCH cur_brand2_weight BULK COLLECT INTO nt_brand2_weight;
   CLOSE cur_brand2_weight;
   dbms_output.put_line('brand2 weight count: ' || nt_brand2_weight.COUNT);
   DBMS_APPLICATION_INFO.SET_MODULE( module_name => 'PO_ROLLING_12', action_name => 'starting main cursor');

--------------
-- main cursor - each record is one po
--------------
     c_sql_str := 'SELECT /*+ index(b xpk_buyr_corp) index (pfv xpk_pfv_corp)  */  ';
     c_sql_str := c_sql_str || ' po.po_nbr, d.brnch_cd, d.div_nm, po.div_nbr, po.po_rcvd_dt, ';
     c_sql_str := c_sql_str || ' min(cov.cmpny_vndr_nm), pfv.prch_from_vndr_nm, po.prch_from_vndr_nbr, ';
     c_sql_str := c_sql_str || ' po.ship_from_vndr_nbr, po.ap_vndr_nbr,  ';
     c_sql_str := c_sql_str || ' min(po.ofv_cmpny_vndr_nbr_actl), po.ord_from_vndr_nbr, ';
     c_sql_str := c_sql_str || ' TO_NUMBER(t.fisc_mth_of_yr),  t.fisc_wk_of_yr, t.fisc_yr, ';
     c_sql_str := c_sql_str || ' po.ord_dt, max(po.aptnt_dt), max(po.arvl_dt), ';
     c_sql_str := c_sql_str || ' MAX(b.buyr_nm) buyr_nm, MAX(po.buyr_nbr) buyr_nbr, MAX(po.orig_pickup_dt) orig_pickup_dt , ';
     c_sql_str := c_sql_str || ' NVL(SUM(po.prod_cube_rcvd_extnd), 0), NVL(SUM(po.prod_grs_wght_rcvd_extnd), 0), NVL(SUM(po.prod_net_wght_rcvd_extnd), 0), ';
     c_sql_str := c_sql_str || ' NVL(SUM(po.rcvd_qty), 0), NVL(SUM(po.orig_qty_ord), 0),   ';
     c_sql_str := c_sql_str || ' max(po.carr_nm),  ';
     c_sql_str := c_sql_str || ' po.frght_ppaid_ind_actl || po.frght_ppay_add_ind_actl || po.frght_bill_ind_actl || po.frght_bckhl_ind_actl || po.ctms_ind_actl,  ';
-- 119
     c_sql_str := c_sql_str || ' NVL(SUM(po.ttl_frght_cost_rcvd_extnd -  po.pickup_frght_alwnc_rcvd_extnd), 0), ';
-- 120
     c_sql_str := c_sql_str || ' NVL(SUM(po.last_inv_cost_rcvd_extnd), 0), ';
-- 121
     c_sql_str := c_sql_str || ' NVL (SUM (po.last_inv_cost_rcvd_extnd - (po.ttl_frght_cost_rcvd_extnd - po.pickup_frght_alwnc_rcvd_extnd)),0), ';
-- 122 has been removed from the extract
     c_sql_str := c_sql_str || ' sfv.can_zip_cd_ind, sfv.city, sfv.st, sfv.zip_cd, min(po.pfv_cmpny_vndr_nbr_actl),   ';
     c_sql_str := c_sql_str || ' sfv.ship_from_vndr_nm ,po.drct_ship_ind, pfv.kraft_vndr_ind, po.pickup_dt,  '; --R2
     c_sql_str := c_sql_str || ' (SELECT sum(miles) FROM xdmadm.ORIG_DEST_MILES mls  '; --R2
     c_sql_str := c_sql_str || ' WHERE orig_zip_cd = SUBSTR(sfv.zip_cd,1,5) AND dest_zip_cd = f.zip_cd ) as miles,  '; --R2
     c_sql_str := c_sql_str || ' MAX(po.crs_dck_flg),   '; --R2
     c_sql_str := c_sql_str || ' d.rgn_nm, d.area_nm, MAX(po.crs_dck_div_nbr) crs_dck_div_nbr, MAX(po.scpo_grp_id),   '; --R2
     c_sql_str := c_sql_str || ' MAX(po.bluprnt_id), MAX(po.orig_arvl_dt), MAX(po.po_dock_in_dt),  '; --R2
     c_sql_str := c_sql_str || ' MAX(po.po_dock_out_dt) , MAX(po.po_gate_in_dt) ,    '; --R2
     c_sql_str := c_sql_str || ' MAX(po.po_gate_out_dt), NVL (SUM (vndr_prod_prc_rcvd_extnd), 0) po_total_cost_amount_sum,   '; --R2
   c_sql_str           :=
      c_sql_str || ' SUM(po.pickup_frght_alwnc_per_unit * po.cnfrm_qty_ord) cnfrmd_pua_ttl, SUM(po.ppaid_add_frght_cost_per_unit * po.cnfrm_qty_ord) cnfrmd_ppaid_ttl, ';
   c_sql_str := c_sql_str || ' SUM(po.frght_bill_cost_per_unit * po.cnfrm_qty_ord) cnfrmd_frght_ttl, SUM(po.mkt_frght_cost_per_unit * po.cnfrm_qty_ord) cnfrmd_mrkt_frght_ttl, ';
   c_sql_str := c_sql_str || ' SUM(po.pickup_frght_alwnc_per_unit * po.rcvd_qty) rcvd_pua_ttl, SUM(po.ppaid_add_frght_cost_per_unit * po.rcvd_qty) rcvd_ppaid_ttl, ';
   c_sql_str := c_sql_str || ' SUM(po.frght_bill_cost_per_unit * po.rcvd_qty) rcvd_frght_ttl, SUM(po.mkt_frght_cost_per_unit * po.rcvd_qty) rcvd_mrkt_frght_ttl, ';
   c_sql_str := c_sql_str || ' max(PO.APTNT_TM),max(po.BUYR_LOC_TYP_CD_ACTL),max(po.BUYR_SUB_TYP_ACTL),';
   c_sql_str := c_sql_str || ' max(po.ORIG_APTNT_DT),max(po.ORIG_APTNT_TM),max(po.CMP_PO_BRNCH_NBR),max(po.CMP_PO_NBR),';
   c_sql_str := c_sql_str || ' max(po.ARRVL_DT_CHG_RSN),max(po.PICKUP_DT_CHG_RSN),';
   c_sql_str := c_sql_str || ' max(po.PO_DOCK_IN_TM),max(po.PO_DOCK_OUT_TM),max(po.PO_GATE_IN_TM),';
   c_sql_str := c_sql_str || ' max(po.PO_GATE_OUT_TM), max(po.CARR_SCAC_CD),max(po.FRGHT_TRM_CD_ACTL) ';
     c_sql_str := c_sql_str || ' FROM  xdmadm.po_corp po, xdmadm.div_corp d,  ';
     c_sql_str := c_sql_str || ' xdmadm.pfv_corp pfv, xdmadm.time_corp t, xdmadm.buyr_corp b, ';
     c_sql_str := c_sql_str || ' xdmadm.sfv_corp sfv, xdmadm.cov_corp cov  ';
     c_sql_str := c_sql_str || ' ,xdmadm.fclty_corp f    ';--R2
     c_sql_str := c_sql_str || ' WHERE po.po_rcvd_dt > sysdate - ' || c_subtract_days;
     c_sql_str := c_sql_str || ' AND po.div_nbr = d.div_nbr  ';
     c_sql_str := c_sql_str || ' AND po.po_nbr <> ''0''  ';
     c_sql_str := c_sql_str || ' AND  po.trans_typ NOT IN (''SB'', ''SS'')  ';
     c_sql_str := c_sql_str || ' AND po.po_rcvd_dt = t.clndr_dt ';
     c_sql_str := c_sql_str || ' AND pfv.prch_from_vndr_nbr(+) = po.prch_from_vndr_nbr  ';
     c_sql_str := c_sql_str || ' AND pfv.div_nbr(+) = po.div_nbr  ';
     c_sql_str := c_sql_str || ' AND b.buyr_netwrk_id(+) = po.buyr_netwrk_id   ';
     c_sql_str := c_sql_str || ' AND b.buyr_nbr(+) = po.buyr_nbr   ';
     c_sql_str := c_sql_str || ' AND b.buyr_typ_id(+) = po.buyr_typ_id   ';
     c_sql_str := c_sql_str || ' AND po.ship_from_vndr_nbr = sfv.ship_from_vndr_nbr(+)  ';
     c_sql_str := c_sql_str || ' AND po.div_nbr = sfv.div_nbr(+)  ';
     c_sql_str := c_sql_str || ' AND po.pfv_cmpny_vndr_nbr_actl = cov.cmpny_vndr_nbr(+)  ';
     c_sql_str := c_sql_str || ' AND d.brnch_cd = f.fclty_alias_id (+)  '; --R2

    IF  vendor_i IS NULL THEN
       c_sql_str := c_sql_str || ' AND po.pfv_cmpny_vndr_nbr_actl <>  58070 ';
    ELSIF  vendor_i = '59070' THEN
       c_sql_str := c_sql_str || ' AND po.pfv_cmpny_vndr_nbr_actl = 58070 ';
    END IF;

    c_sql_str := c_sql_str || ' GROUP BY  po.po_nbr, d.brnch_cd, d.div_nm, po.div_nbr, po.po_rcvd_dt, ';
    c_sql_str := c_sql_str || ' pfv.prch_from_vndr_nm, po.prch_from_vndr_nbr, ';
    c_sql_str := c_sql_str || ' po.ship_from_vndr_nbr, po.ap_vndr_nbr,  ';
    c_sql_str := c_sql_str || ' po.ord_from_vndr_nbr, ';
    c_sql_str := c_sql_str || ' t.fisc_mth_of_yr, t.fisc_wk_of_yr, t.fisc_yr, ';
    c_sql_str := c_sql_str || ' po.ord_dt,  '; --po.aptnt_dt, po.arvl_dt,
    --c_sql_str := c_sql_str || ' po.carr_nm, ';
    c_sql_str := c_sql_str || ' po.frght_ppaid_ind_actl, po.frght_ppay_add_ind_actl, po.frght_bill_ind_actl, po.frght_bckhl_ind_actl, po.ctms_ind_actl,  ';
    c_sql_str := c_sql_str || ' sfv.can_zip_cd_ind, sfv.city, sfv.st, sfv.zip_cd,  ';-- R2
    c_sql_str := c_sql_str || ' sfv.ship_from_vndr_nm ,po.drct_ship_ind, pfv.kraft_vndr_ind, po.pickup_dt,    '; -- R2
    c_sql_str := c_sql_str || ' f.zip_cd, f.fclty_id, f.fclty_alias_id, d.rgn_nm, d.area_nm  '; -- R2
    --c_sql_str := c_sql_str || ' PO.APTNT_TM,PO.BUYR_LOC_TYP_CD_ACTL,';
    --c_sql_str := c_sql_str || ' PO.BUYR_SUB_TYP_ACTL,PO.ORIG_APTNT_DT,PO.ORIG_APTNT_TM,PO.CMP_PO_BRNCH_NBR,';
    --c_sql_str := c_sql_str || ' PO.CMP_PO_NBR,PO.ARRVL_DT_CHG_RSN,PO.PICKUP_DT_CHG_RSN, ';
    --c_sql_str := c_sql_str || ' PO.CARR_SCAC_CD,PO.FRGHT_TRM_CD_ACTL
    c_sql_str := c_sql_str || ' ORDER BY po.po_nbr, po.po_rcvd_dt ';

   dbms_output.put_line(c_sql_str);

    g_idx := 0;
    g_ldr_tm := TO_NUMBER(TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'));
    OPEN c_cursor for c_sql_str;
    LOOP
        g_display := 'main loop,reads: ' || g_reads;
        DBMS_APPLICATION_INFO.SET_MODULE( module_name => 'PO_ROLLING_12', action_name => g_display);
        g_idx  := g_idx + 1;
        FETCH c_cursor BULK COLLECT INTO nt_po LIMIT c_limit;
        IF nt_po.count > 0 THEN
            FOR vix in 1 .. nt_po.count LOOP
                g_reads      := g_reads + 1;
                g_in_idx  := vix;
                sp_clear_work_fields;
                g_po_nbr     := nt_po(vix).po_nbr;
                g_div_nbr    := nt_po(vix).div_nbr;
                g_brnch_cd   := nt_po(vix).brnch_cd;
                g_ctms       := nt_po(vix).ctms;
                g_po_rcvd_dt := nt_po(vix).po_rcvd_dt;
                g_total_cases := nt_po(vix).rcvd_qty;
                g_load_at_name := nt_po(vix).ship_from_vndr_nm;
                g_lookup_key :=  g_po_nbr || TO_CHAR(g_div_nbr) || TO_CHAR(g_po_rcvd_dt, 'YYYYMMDD');
    --------------
    -- determine if managed or delivered - if shipment exists, then managed
    --------------
                BEGIN
                    SELECT  s.shpm_nbr, s.tms_src, s.mot, s.eqpmt, s.srvc_lvl, s.crs_dck_flg,
                            s.po_cmpltn_dt, s.po_orgn_fclty_alias_id, s.shpm_prtcn_lvl,
                            s.srvc_cd,  s.alt_hlng_typ, s.shp_dest_fclty_alias_id,
                            s.carr_cd, c.carr_nm, shp_orgn_fclty_alias_id,
                            s.po_orgn_fclty_alias_id, f.fclty_nm, f.city, f.st, f.zip_cd,
                            s.tms_prch_from_vndr_nm, s.po_rqstd_dt, s.po_appt_dt, s.po_plnd_dlvry_dt, --R2
                            s.po_plnd_pckp_dt, s.po_orig_due_dt,  --R2
                            (select MAX(fp.fclty_alias_id) from xdmadm.fclty_corp fp where f.fclty_id = fp.fclty_id and fp.prmry_flg = 'Y')
                            as primary_fclty_alias_id,  --R2
                            NVL(s.rcvd_wght, 0), NVL(s.rcvd_qty, 0),NVL(s.rcvd_volume, 0)
                         INTO g_shipment_nbr, g_tms_src, g_mot, g_eqpmt, g_srvc_lvl, g_cross_dock,
                         g_voucher_date, g_po_orgn_fclty_alias_id, g_tips_commodity,
                         g_srvc_cd, g_alt_hlng_typ, g_shp_dest_fclty_alias_id,
                         g_carrier_cd, g_carrier_nm, g_shp_orgn_fclty_alias_id,
                         g_load_at_id, g_load_at_name, g_load_at_city,
                         g_load_at_state,g_load_at_zip,
                         g_tms_prch_from_vndr_nm, g_po_rqstd_dt, g_po_appt_dt, g_po_plnd_dlvry_dt, --R2
                         g_po_plnd_pckp_dt, g_po_orig_due_dt, g_primary_fclty_alias_id,  --R2
                         g_po_weight, g_po_cases, g_po_cube
                    FROM  xdmadm.shpm_corp s, xdmadm.carr_corp c, xdmadm.fclty_corp f --R2
                    WHERE s.po_nbr = g_po_nbr
                    AND s.po_brnch_cd = g_brnch_cd
                    AND s.po_rcvd_dt = g_po_rcvd_dt
                    AND NVL(s.po_last_leg_flg, 'Y') = 'Y'
                    AND s.scac_cd = c.scac_cd(+)
                    AND s.po_orgn_fclty_alias_id = f.fclty_alias_id(+)
                    AND rownum < 2;
                    g_shipment_exists := TRUE;

                EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                       g_shipment_exists := FALSE;
                END;

                IF g_shipment_exists = FALSE THEN
                     g_display := 'delivered,reads: ' || g_reads;
                     DBMS_APPLICATION_INFO.SET_MODULE( module_name => 'PO_ROLLING_12', action_name => g_display);
                     sp_delivered;
                ELSE
                     g_display := 'managed,reads: ' || g_reads;
                     DBMS_APPLICATION_INFO.SET_MODULE( module_name => 'PO_ROLLING_12', action_name => g_display);
                     sp_managed;
                END IF;

                sp_save_record;

                IF nt_output_record.COUNT >= c_limit THEN
                     g_display := 'inserts,reads: ' || g_reads;
                     DBMS_APPLICATION_INFO.SET_MODULE( module_name => 'PO_ROLLING_12', action_name => g_display);
                     sp_insert_record;
                END IF;
            END LOOP;
         END IF;  -- IF nt_po.count > 0
       ------------------------
       -- stay in the loop unless we are finished with all the records
       ------------------------

         IF nt_po.COUNT < c_limit THEN
            EXIT;
         END IF;
    END LOOP;
    CLOSE c_cursor;

    IF nt_output_record.COUNT > 0 THEN
         g_display := 'last inserts,reads: ' || g_reads;
         DBMS_APPLICATION_INFO.SET_MODULE( module_name => 'PO_ROLLING_12', action_name => g_display);
         sp_insert_record;
    END IF;
    dbms_output.put_line('reads   : ' || g_reads);
    dbms_output.put_line('inserts : ' || g_writes);

    DBMS_OUTPUT.PUT_LINE('END at ' || to_char(sysdate, 'yyyymmdd hh24:mi:ss'));
    COMMIT;
    DBMS_APPLICATION_INFO.SET_MODULE(null,null);
    RETURN 0;
 EXCEPTION
           WHEN OTHERS THEN
                DBMS_APPLICATION_INFO.SET_MODULE(null,null);
                v_sqlcode := SQLCODE;
                v_message :=  ' fn_hybrid_po_extract sqlerror ' || v_sqlcode || ' ' || SUBSTR(SQLERRM, 1, 75);
                dbms_output.put_line(v_message);
                v_message :=  'Number Reads ' || g_reads;
                dbms_output.put_line(v_message);
                RETURN 1;
  END fn_hybrid_po_extract;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_SYN_CUST_PLUS_PRSPCT_LOAD" (
   v_in_odate   IN VARCHAR2
)
   RETURN NUMBER
IS
   /***********************************************************************
   ** Program Name:  FN_SYN_CUST_PLUS_PRSPCT_LOAD
   **
   ** Description: . This function will load all customers and prospects into a
   **                factless fact table..
   **
   ** Called by:
   **
   ** Input parameter: ODATE  (YYYYMMDD)
   **
   ** Output parameters :
   **
   ** Modification Log
   ** 08-15-2012  Ajay Mallela   Created function.
   **
   ************************************************************************/
   --      EIW Standard Variables
   --***********************************************************************
   CON_PROCESS_NAME CONSTANT VARCHAR2 (40)
         := 'FN_SYN_CUST_PLUS_PRSPCT_LOAD' ;
   -- VARIABLES
   v_odate                 DATE;
   v_cur_fisc_yr_mth       XDMADM.TIME_CORP.fisc_yr_mth%TYPE;
   v_last_fisc_yr_mth      XDMADM.TIME_CORP.fisc_yr_mth%TYPE;
   v_cur_fisc_mth_of_yr    XDMADM.TIME_CORP.fisc_mth_of_yr%TYPE;
   v_last_fisc_mth_of_yr   XDMADM.TIME_CORP.fisc_mth_of_yr%TYPE;
   v_fisc_yr               XDMADM.TIME_CORP.fisc_yr%TYPE;
   v_cur_fisc_prd_nm       XDMADM.TIME_CORP.fisc_prd_nm%TYPE;
   v_last_fisc_prd_nm      XDMADM.TIME_CORP.fisc_prd_nm%TYPE;
   v_prd_strt_dt           DATE;
   v_prd_end_dt            DATE;
   v_syn_nm CTLADM.SYN_TBL_MAP.synonym_nm%TYPE
         := 'CUST_PLUS_PRSPCT_CORP' ;
   v_tbl_to_load           CTLADM.SYN_TBL_MAP.tbl_nm%TYPE;
   v_tbl_owner             VARCHAR2 (40 BYTE) := 'XDMADM';
   v_tbl_inactv            VARCHAR2 (40 BYTE);
   v_tbl_actv              VARCHAR2 (40 BYTE);
   v_tbl_nm                VARCHAR2 (40 BYTE);
   v_sql_str               VARCHAR2 (5000) := ' ';
   v_cnt                   NUMBER;
   v_ret_val               NUMBER;
   v_trunc_allow           BOOLEAN;
   v_trunc_ret             NUMBER (3);
   v_load_ret              NUMBER (3);
   v_grs_sls_extnd         XDMADM.SALES_CORP.grs_sls_extnd%TYPE;
   v_unfrm_qty_ship        XDMADM.SALES_CORP.unfrm_qty_ship%TYPE;
   /******************************************************************************
   Define Variables for publishing Run details in EIW process log
   ******************************************************************************/
   v_prcs_nm               VARCHAR (100);
   v_prcs_step             VARCHAR (200);
   v_prcs_pram             VARCHAR (100);
   v_out_msg               VARCHAR (200);
   --******************************************************************************
   --* Define User Defined Exceptions                                             *
   --******************************************************************************
   ALL_EXCEPTIONS EXCEPTION;
   e_truncate_table EXCEPTION;
BEGIN
   DBMS_OUTPUT.put_line ('Start Process ' || CON_PROCESS_NAME);
   DBMS_OUTPUT.put_line (
      'Start Time:' || TO_CHAR (SYSDATE, 'YYYY-MM-DD HH24:MI:SS')
   );
   EXECUTE IMMEDIATE 'alter session set nls_date_format = ''YYYYMMDD''';
   v_odate := TO_DATE (v_in_odate, 'YYYYMMDD');
   -- Get date parameters
   SELECT   t.fisc_yr_mth
     INTO   v_cur_fisc_yr_mth
     FROM   XDMADM.time_corp t
    WHERE   t.clndr_dt = v_odate;

   DBMS_OUTPUT.put_line ('Current Period is ' || v_cur_fisc_yr_mth);

   SELECT   MAX (a.fisc_yr_mth)
     INTO   v_last_fisc_yr_mth
     FROM   XDMADM.time_corp a
    WHERE   a.fisc_yr_mth < (SELECT   a.fisc_yr_mth
                               FROM   XDMADM.time_corp a
                              WHERE   a.clndr_dt = TRUNC (v_odate));

   DBMS_OUTPUT.put_line ('Last Closed Period is ' || v_last_fisc_yr_mth);

   SELECT   MIN (clndr_dt), MAX (clndr_dt)
     INTO   v_prd_strt_dt, v_prd_end_dt
     FROM   XDMADM.time_corp
    WHERE   fisc_yr_mth = v_last_fisc_yr_mth;

   DBMS_OUTPUT.put_line ('Start Date of last period is ' || v_prd_strt_dt);
   DBMS_OUTPUT.put_line ('End Date of last period is ' || v_prd_end_dt);

   SELECT   tbl_nm
     INTO   v_tbl_inactv
     FROM   CTLADM.syn_tbl_map
    WHERE   synonym_nm = v_syn_nm AND actv_ind = 'N';

   --dbms_output.put_line(v_tbl_inactv);
   SELECT   tbl_nm
     INTO   v_tbl_actv
     FROM   CTLADM.syn_tbl_map
    WHERE   synonym_nm = v_syn_nm AND actv_ind = 'Y';

   --dbms_output.put_line(v_tbl_actv);
   SELECT   table_name
     INTO   v_tbl_nm
     FROM   ALL_SYNONYMS
    WHERE       owner = v_tbl_owner
            AND table_owner = v_tbl_owner
            AND synonym_name = v_syn_nm;

   IF v_tbl_actv <> v_tbl_nm
   THEN
      DBMS_OUTPUT.put_line (
         'The tables ALL_SYNONYMS and ctladm.syn_tbl_map are not in synch'
      );
      RETURN 1;
   END IF;

   DBMS_OUTPUT.put_line (
      'Table which needs to be loaded is ' || v_tbl_inactv
   );
   --******************************************************************************
   --* Truncating the inactive Table      *
   --******************************************************************************
   DBMS_OUTPUT.put_line ('Truncating the table ' || v_tbl_inactv);
   v_trunc_ret := USFDBA.TABLE_PKG.TRUNCATE_TABLE (v_out_msg, 'XDMADM', v_tbl_inactv);
   --EXECUTE immediate 'truncate table ' || 'XDMADM.' || v_tbl_inactv;
   DBMS_OUTPUT.PUT_LINE (v_out_msg);

   IF v_trunc_ret <> 0
   THEN
      DBMS_OUTPUT.PUT_LINE (
         'Error in Truncating ' || v_tbl_inactv || ' table'
      );
      RAISE e_truncate_table;
   END IF;

   v_tbl_to_load := v_tbl_inactv;
   DBMS_OUTPUT.put_line (
      'Loading the table ' || v_tbl_to_load || ' started...' || SYSTIMESTAMP
   );
   v_load_ret := XDMADM.FN_XDM_CUST_PRSPCT_LOAD (v_odate, v_tbl_to_load);

   IF v_load_ret != 0
   THEN
      DBMS_OUTPUT.PUT_LINE ('Error loading ' || v_tbl_inactv || ' table');
      RAISE ALL_EXCEPTIONS;
   END IF;

   --Analyze Table
   DBMS_OUTPUT.PUT_LINE ('Start table analyze... ' || SYSTIMESTAMP);
   v_ret_val :=
      usfdba.stats_pkg.analyze_table (v_out_msg, 'XDMADM', v_tbl_to_load);

   IF v_ret_val != 0
   THEN
      DBMS_OUTPUT.PUT_LINE (
         'Error in analyzing ' || v_tbl_to_load || ' table'
      );
      RAISE ALL_EXCEPTIONS;
   END IF;

   DBMS_OUTPUT.PUT_LINE (
      'Table ' || v_tbl_to_load || ' analyzed OK...' || SYSTIMESTAMP
   );
   Return 0;
   EXCEPTION
   WHEN OTHERS
   THEN
      --DBMS_OUTPUT.put_line('Error inserting into cust_plus_prspct_corp');
      DBMS_OUTPUT.put_line (SQLCODE || ': ' || SQLERRM);
      RETURN 1;
END FN_SYN_CUST_PLUS_PRSPCT_LOAD;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_CKBK_RSN_EXCLD_LOAD" (p_odate IN DATE)
   RETURN NUMBER AS
   /***********************************************************************
   * Name: FN_CKBK_RSN_EXCLD_LOAD
   * Type: Function
   * Description: Load cookbook reason exclude table.
   * Revisions:
   *  Ver        Date        Author           Description
   *  ---------  ----------  ---------------  -----------------------------
   *  1.0        09/22/2014  Matt Nicol       Created this function
   ************************************************************************/
   c_success            CONSTANT NUMBER := 0;
   c_error              CONSTANT NUMBER := 1;
   c_schema             CONSTANT VARCHAR2(30) := 'XDMADM';
   c_aggr_tbl_syn_nm    CONSTANT VARCHAR2(30) := 'CKBK_RSN_EXCLD';
   c_aggr_load_syn_nm   CONSTANT VARCHAR2(30) := 'CKBK_RSN_EXCLD_LOAD';
   l_return_code        NUMBER;
   l_out_msg            VARCHAR2(256);

   l_aggr_tbl_nm        VARCHAR2(30);
   l_load_tbl_nm        VARCHAR2(30);
BEGIN
   -- Validate input parameters
   IF (p_odate IS NULL) THEN
      DBMS_OUTPUT.put_line('Error: Invalid Parameters: Date is required');
      RETURN c_error;
   END IF;

   -- Get current synonym tables
   EXECUTE IMMEDIATE 'SELECT table_name FROM user_synonyms WHERE synonym_name = ''' || c_aggr_tbl_syn_nm || ''''
      INTO l_aggr_tbl_nm;

   EXECUTE IMMEDIATE 'SELECT table_name FROM user_synonyms WHERE synonym_name = ''' || c_aggr_load_syn_nm || ''''
      INTO l_load_tbl_nm;

   DBMS_OUTPUT.put_line('Aggr Table: ' || l_aggr_tbl_nm);
   DBMS_OUTPUT.put_line('Load Table: ' || l_load_tbl_nm);

   -- Truncate load table
   l_return_code   := usfdba.table_pkg.truncate_table(l_out_msg, c_schema, l_load_tbl_nm);
   DBMS_OUTPUT.put_line('Truncate Load Table Return: ' || l_return_code || ' - ' || l_out_msg);

   IF (l_return_code <> 0) THEN
      DBMS_OUTPUT.put_line('Error: Failed to truncate table');
      RETURN c_error;
   END IF;

   INSERT /*+ append */
         INTO xdmadm.ckbk_rsn_excld_load
      (SELECT DISTINCT t2.clndr_dt prcs_dt,
                       p.div_nbr,
                       p.cust_nbr,
                       p.prod_nbr,
                       'X' excld_flg,
                       TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') ldr_tm
         FROM xdmadm.prc_rsn_cd p, xdmadm.time_corp t1, xdmadm.time_corp t2
        WHERE t1.clndr_dt = p.tm_entry_dt
          AND t2.clndr_dt BETWEEN p.tm_entry_dt - t1.clndr_day_of_wk - 6 AND p.tm_entry_dt - t1.clndr_day_of_wk + 7);

   DBMS_OUTPUT.put_line('Inserted ' || sql%ROWCOUNT || ' rows');

   COMMIT;

   -- Analyze customer weekly aggregate table

   l_return_code   := xdmadm.fn_getstat_tbl(c_schema, l_load_tbl_nm);
   DBMS_OUTPUT.put_line('Analyze Return: ' || l_return_code);

   IF (l_return_code <> 0) THEN
      DBMS_OUTPUT.put_line('Error: Failed to analyze table');
      RETURN c_error;
   END IF;

   -- Swap synonyms
   l_return_code   := xdmadm.fn_crt_synonym(c_aggr_tbl_syn_nm, c_schema, l_load_tbl_nm);
   DBMS_OUTPUT.put_line(
      'Create synonym ' || c_aggr_tbl_syn_nm || ' for ' || c_schema || '.' || l_load_tbl_nm || ': ' || l_return_code);

   IF (l_return_code <> 0) THEN
      DBMS_OUTPUT.put_line('Error: Failed to create synonym for aggregate table');
      RETURN c_error;
   END IF;

   l_return_code   := xdmadm.fn_crt_synonym(c_aggr_load_syn_nm, c_schema, l_aggr_tbl_nm);
   DBMS_OUTPUT.put_line(
      'Create synonym ' || c_aggr_load_syn_nm || ' for ' || c_schema || '.' || l_aggr_tbl_nm || ': ' || l_return_code);

   IF (l_return_code <> 0) THEN
      DBMS_OUTPUT.put_line('Error: Failed to create synonym for aggregate table');
      RETURN c_error;
   END IF;

   -- Truncate new load table
   l_return_code   := usfdba.table_pkg.truncate_table(l_out_msg, c_schema, l_aggr_tbl_nm);
   DBMS_OUTPUT.put_line('Truncate Prev Aggr Table Return: ' || l_return_code || ' - ' || l_out_msg);

   IF (l_return_code <> 0) THEN
      DBMS_OUTPUT.put_line('Error: Failed to truncate table');
      RETURN c_error;
   END IF;

   COMMIT;

   RETURN c_success;
EXCEPTION
   WHEN OTHERS THEN
      DBMS_OUTPUT.put_line('Unexepected error');
      DBMS_OUTPUT.put_line(SQLCODE || ': ' || SQLERRM);
      RETURN c_error;
END fn_ckbk_rsn_excld_load;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_SLS_ORG_XFER_VPD" (p_schema       IN VARCHAR2,
                                              p_objname      IN VARCHAR2)
   RETURN VARCHAR2 AS
   /***********************************************************************
   * Name: FN_SLS_ORG_XFER_VPD
   * Type: Function
   * Description: VPD Function to exclude sales data that was tranfered. This
   *              prevents duplicated records. (Un-Restated)
   *  REVISIONS:
   *  Ver        Date        Author           Description
   *  ---------  ----------  ---------------  ------------------------------------
   *  1.0        06/20/2012 Jim Caccia      Created this function
   ************************************************************************/
   c_start                CONSTANT NUMBER := DBMS_UTILITY.get_time;
   c_fn_nm                CONSTANT VARCHAR2(30) := 'FN_SLS_ORG_XFER_VPD';
   l_security_predicate   VARCHAR2(4000) DEFAULT NULL;
   l_cur_sql              VARCHAR2(4000) := SYS_CONTEXT('USERENV', 'CURRENT_SQL');
   l_sbjct_area VARCHAR2(100)
         := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_sbjct_area_attr);
   l_vpd_exempt VARCHAR2(1)
         := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_exempt_attr);
BEGIN
   --If no subject area context is set then return predicate filtering all data
   IF l_sbjct_area IS NULL THEN
      l_security_predicate   := '1=2';
      ctladm.pkg_vpd_debug_util.vpd_debug('NO SA', c_fn_nm, USER, p_schema, p_objname, l_sbjct_area, l_vpd_exempt, NULL,
      l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   -- Check if user is exempt based on current subject area context
   -- If so, return predicate without any filter
   IF l_vpd_exempt = 'Y' THEN
      l_security_predicate   := '1=1';
      ctladm.pkg_vpd_debug_util.vpd_debug('EXEMPT', c_fn_nm, USER, p_schema, p_objname, l_sbjct_area, l_vpd_exempt,
      NULL, l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   l_security_predicate   := 'XFER_FROM_DT IS NULL';
   ctladm.pkg_vpd_debug_util.vpd_debug('ALL DIVS', c_fn_nm, USER, p_schema, p_objname, l_sbjct_area, l_vpd_exempt, NULL,
   l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

   RETURN l_security_predicate;
EXCEPTION
   WHEN OTHERS THEN
      l_security_predicate   := '1=3';
      ctladm.pkg_vpd_debug_util.vpd_debug(SQLCODE || '-' || SQLERRM, c_fn_nm, USER, p_schema, p_objname, l_sbjct_area,
      l_vpd_exempt, NULL, l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
END fn_sls_org_xfer_vpd;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_DIV_COMPRESS"
(
    p_in_odate                IN VARCHAR2,
    p_force_run               IN VARCHAR2,
    p_compress_end_day_of_wk  IN NUMBER,
    p_compress_end_tm         IN VARCHAR2,
    p_compress_job_no         IN NUMBER,
    p_end_dt                  IN VARCHAR2
)
   RETURN NUMBER IS

 /******************************************************************************
   NAME: XDMADM.FN_DIV_COMPRESS
   TYPE: Function
   USAGE:XDMADM.FN_DIV_COMPRESS(P_IN_ODATE )

   PURPOSE:  Function

   REVISIONS:
   Ver        Date                    Description
   ---------  --------------------------------------------------

   1.         20140122              Initial Development

   Parameters:-

    p_in_odate                ODATE in format YYYYMMDD
    p_force_run               indicates whether scheduled or non-scheduled. 'N' when run thru ControlM. Manual run should pass 'Y'.
    p_compress_end_day_of_wk  indicates which day of week you want compress to end.  A number between 1 to 7. 1 is SUNDAY, 7 is SATURDAY
    p_compress_end_tm        indicates which time on the day of week (above)you want compress to end. Should be in format HH24MISS Eg:- '235958'
    p_compress_job_no       indicates which ControlM job will handle the compress.
    p_end_dt                indicates what date in past you wish to compress data.    Optional.
                                       A date in format YYYYMMDD . This date should go beyond  the  date determined by SKIP_SLS_INTRVL in param_value table.


   Eg:-XDMADM.FN_DIV_COMPRESS ( '20140124', 'N' , 6, '102600', 1, '20131101' );

  ******************************************************************************/

  /***************************
  * Variables declaration    *
  ****************************/



    v_const         NUMBER := 2 ;
    v_count         NUMBER ;
    v_cur_count     NUMBER ;
    v_end_dt        DATE := to_date(p_end_dt,'YYYYMMDD');

    v_odate         DATE := to_date(p_in_odate,'YYYYMMDD');
    v_prcs_stp      VARCHAR2(2000);
    v_ldr_tm        NUMBER(20);


    l_start         NUMBER;
    l_end           NUMBER;
    v_schema        VARCHAR2(40) :='XDMADM'  ;
    v_day_of_wk     NUMBER;

    v_compress_end_day_of_wk NUMBER:=p_compress_end_day_of_wk;

    v_tbl            VARCHAR2(20);
    v_crnt_tm        VARCHAR2(40);

    v_chk_run_tm         NUMBER;
    v_chk_end_dt         NUMBER;
    v_force_run          VARCHAR2(2):=p_force_run;
    v_skip_compr_intvl   NUMBER;
    v_skip_compr_end_dt  DATE;
    max_compress_dt_tm   NUMBER;
    v_compress_end_tm    VARCHAR2(40) :=p_compress_end_tm;
    v_compress_job_no    NUMBER :=p_compress_job_no;
    no_of_div_compressed VARCHAR2(5000);

    cursor c1 is   select div_nbr from xdmadm.div_compress
       where nvl(compress_dt_tm, 20120101120000)  <= (select max(compress_dt_tm) from div_compress)
       and compress_job_no = v_compress_job_no
       order by compress_dt_tm;

PROCEDURE chk_run_tm
IS
 BEGIN

    DBMS_OUTPUT.PUT_LINE ('**************************************');
    select to_char(sysdate,'d') into v_day_of_wk from dual;
    DBMS_OUTPUT.PUT_LINE('Day of Week = ' || v_day_of_wk);

    select to_char(sysdate,'HH24MISS') into v_crnt_tm from dual;
    DBMS_OUTPUT.PUT_LINE('Current Time (v_crnt_tm)= ' || v_crnt_tm);
    DBMS_OUTPUT.PUT_LINE ('**************************************');

   --  If current day is not equal to Saturday   Check time has exceeded SAT_DAY_TM
   --if ( ((v_crnt_tm > SAT_DAY_TM) and  v_day_of_wk = 7 ) or ((v_crnt_tm < SUN_DAY_TM) and v_day_of_wk = 1 ))

     if ( (v_crnt_tm >= v_compress_end_tm) and (v_day_of_wk = v_compress_end_day_of_wk ))
     then
        v_chk_run_tm:=1;
         DBMS_OUTPUT.put_line (' ***** v_chk_run_tm ***** : '||v_chk_run_tm);
         DBMS_OUTPUT.PUT_LINE ('**************************************');
         DBMS_OUTPUT.put_line ('*** Outside of run hours ***.');
         DBMS_OUTPUT.PUT_LINE ('**************************************');
         DBMS_OUTPUT.put_line ('*** Exiting Program ***.');

     else
         v_chk_run_tm:=0;
         DBMS_OUTPUT.put_line (' ***** v_chk_run_tm ***** : '||v_chk_run_tm);


     end if ;


 EXCEPTION
   WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE ('** ERROR in chk_run_tm. ' || SQLCODE || ' ' || SQLERRM);
     RAISE;
 END chk_run_tm;

--******************************************************************************

PROCEDURE chk_end_dt
IS

     BEGIN

            SELECT param_value_nbr
              INTO v_skip_compr_intvl
              FROM xdmadm.param_value
             WHERE app_name = 'COMPRESSION'
               AND param_type = 'COMPR_INTVL'
               AND param_code = 'SKIP_SLS_COMPR_INTVL';

             dbms_output.put_line('SKIP_SLS_COMPR_INTVL from param value is: ' || v_skip_compr_intvl);


          select (sysdate - v_skip_compr_intvl) into v_skip_compr_end_dt from dual;

             if (v_end_dt > v_skip_compr_end_dt ) then
              v_chk_end_dt := 1;
                     DBMS_OUTPUT.PUT_LINE ('******************************************************************************************');
                     DBMS_OUTPUT.PUT_LINE ('SKIP_SLS_COMPR_INTVL from param_value tells how many days back from sysdate to SKIP compression');
                     DBMS_OUTPUT.PUT_LINE ('v_end_dt should be less than that date determined by SKIP_SLS_COMPR_INTVL');
                     DBMS_OUTPUT.PUT_LINE ('******************************************************************************************');
             else
              v_chk_end_dt := 0;
             end if;



             EXCEPTION
                  WHEN NO_DATA_FOUND THEN
                      DBMS_OUTPUT.PUT_LINE ('** ERROR in chk_end_dt. No Data in PARAM_VALUE for SKIP_SLS_COMPR_INTVL' );
                      DBMS_OUTPUT.PUT_LINE ('**'||SQLCODE||' - '|| SQLERRM);
                      RAISE;
                  WHEN OTHERS THEN
                      DBMS_OUTPUT.PUT_LINE('** ERROR in chk_end_dt: '||SQLCODE||' - '|| SQLERRM);
                      RAISE;



 END chk_end_dt;

 --******************************************************************************
 --* inserts missing divisions into div_compress from div-corp.                          *
  --******************************************************************************

PROCEDURE insert_missing_divs
IS

     BEGIN

      INSERT INTO xdmadm.div_compress(div_nbr, compress_job_no)
       SELECT src.div_nbr, 1
         FROM xdmadm.div_corp src
        WHERE   NOT EXISTS
               (SELECT   1
                        FROM  xdmadm.div_compress tgt
                       WHERE  tgt.div_nbr = src.div_nbr)
          AND  src.eiw_actv>0;

          dbms_output.put_line( sql%rowcount || ' Rows Inserted in xdmadm.div_compress...' );

           COMMIT;
             EXCEPTION
                  WHEN OTHERS THEN
                      DBMS_OUTPUT.PUT_LINE('** ERROR in insert_missing_divs: '||SQLCODE||' - '|| SQLERRM);
                      RAISE;



 END insert_missing_divs;


--******************************************************************************
  --* begin                            *
  --******************************************************************************
  BEGIN
       v_prcs_stp := 'Process starts ';
       l_start := DBMS_UTILITY.get_time;

        DBMS_OUTPUT.PUT_LINE('TIME ' || to_char(sysdate, 'yyyymmdd hh24:mi:ss'));






  /***********************************
   ** Validate  parameters **
   ***********************************/
   v_prcs_stp := 'Validate parameters';

        if ((v_force_run is null) or (v_force_run not in ('Y', 'N'))) then

        DBMS_OUTPUT.PUT_LINE('*** ERROR FORCE_RUN should be Y or N. Manual run should be Y. Scheduled run thru ControlM should be N');
        return -50;
        end if;



        if ((p_compress_end_day_of_wk is null ) or (p_compress_end_tm is null) ) then
        DBMS_OUTPUT.PUT_LINE('*** ERROR p_compress_end_day_of_wk AND p_compress_end_tm cannot be null..');
        return -51;
        end if;



  /***********************************
   ** Insert Missing Divisions**
   ***********************************/

      if (v_compress_job_no = 1) then
      DBMS_OUTPUT.PUT_LINE ('RUNNING insert_missing_divs');
         insert_missing_divs;

      end if;

  /***********************************
   ** Validate  table not empty**
   ***********************************/
  v_prcs_stp := 'Validate table not empty';

    select count(*) into v_count from xdmadm.div_compress;
       if  v_count = 0 then
         DBMS_OUTPUT.PUT_LINE ('xdmadm.div_compress is empty');
          return -41;
        end if;



  /*************************************
   ** Calculate v_end_date i.e. how far back you want to compress**
   ***********************************/

     if ((v_force_run = 'N') and  (v_end_dt is null)) then  -- will go back 2 + current
            SELECT  MIN (clndr_dt)
            INTO v_end_dt
            FROM   xdmadm.time_corp
             WHERE   fisc_yr IN
                   (SELECT   fisc_yr - v_const
                           FROM   xdmadm.time_corp
                          WHERE   clndr_dt = (SELECT   clndr_dt_wkago
                                                FROM   xdmadm.time_corp
                                               WHERE   clndr_dt = v_odate));

         DBMS_OUTPUT.PUT_LINE (' No END DATE was passed. v_end_dt : ' || v_end_dt );

     elsif ((v_force_run = 'Y') and  (v_end_dt is null))   --will go back to  date in past specified by SLS_COMPR_INTVL in param_value
     then
          DBMS_OUTPUT.PUT_LINE (' Run Out Of Schedule BUT no END DATE was passed.' );
          DBMS_OUTPUT.PUT_LINE (' End date will be determined based on value in PARAM_VALUE where app_name = COMPRESSION and param_type = COMPR_INTVL and param_code = SLS_COMPR_INTVL');
     elsif ((v_force_run = 'Y') and  (v_end_dt is not null))   ---will go back to a date in past specified by user
     then
        chk_end_dt ;
        if (v_chk_end_dt =0) then
        DBMS_OUTPUT.PUT_LINE (' v_force_run = Y. END DATE was passed. v_end_dt : ' || v_end_dt);
        else
        return -52;
        end if;
     else --will go back to a date in past specified
        DBMS_OUTPUT.PUT_LINE (' END DATE was passed. v_end_dt : ' || v_end_dt);
     end if;

 /*************************************
   ** Do the Compress**
   ***********************************/

  BEGIN

   no_of_div_compressed:='';
    select max(compress_dt_tm)  into max_compress_dt_tm from div_compress;
     DBMS_OUTPUT.PUT_LINE('Max compress_dt_tm in table is ' || max_compress_dt_tm);



   -- Check if time is appropriate to run the job
  DBMS_OUTPUT.PUT_LINE ('RUNNING chk_run_tm');
   chk_run_tm;





       if v_chk_run_tm = 0 then

        select max(compress_dt_tm)  into max_compress_dt_tm from div_compress;
        DBMS_OUTPUT.PUT_LINE('Max compress_dt_tm in table is ' || max_compress_dt_tm);

         FOR i IN c1
         LOOP
          DBMS_OUTPUT.PUT_LINE ('**************************************');
          DBMS_OUTPUT.PUT_LINE ('Compressing for division: ' ||i.div_nbr);
          DBMS_OUTPUT.PUT_LINE ('**************************************');

          v_tbl:='SALES_'||i.div_nbr;

          -- Do the compress
          DBMS_OUTPUT.PUT_LINE('TIME ' || to_char(sysdate, 'yyyymmdd hh24:mi:ss'));

          XDMADM.COMPRESS_SUBPARTITION(v_schema,v_tbl,v_end_dt);

          DBMS_OUTPUT.PUT_LINE ('Completed Compressing for: ' ||v_tbl );

          no_of_div_compressed:=no_of_div_compressed||'   '||i.div_nbr;

          -- Update the table
          DBMS_OUTPUT.PUT_LINE ('Updating table.....: ');

          update xdmadm.div_compress set
          compress_dt_tm = to_number(to_char(sysdate, 'YYYYMMDDHH24MISS')),
          compress_dt    = trunc(sysdate)
          where div_nbr = i.div_nbr;

           COMMIT;
          DBMS_OUTPUT.PUT_LINE('TIME ' || to_char(sysdate, 'yyyymmdd hh24:mi:ss'));
           chk_run_tm;
           --exit when
           if v_chk_run_tm = 1 then

            DBMS_OUTPUT.PUT_LINE ( round( (l_end - l_start)/100, 2 ) ||' seconds...' );
            DBMS_OUTPUT.PUT_LINE ('Divisions Compressed :-'||no_of_div_compressed);

             return 0;

           end if;

          END LOOP;

          else     ---v_chk_run_tm = 1
            return 0;

         end if;

      l_end := DBMS_UTILITY.get_time;


      DBMS_OUTPUT.PUT_LINE ( round( (l_end - l_start)/100, 2 ) ||' seconds...' );
      DBMS_OUTPUT.PUT_LINE ('Divisions Compressed :-'||no_of_div_compressed);

       RETURN 0;


    exception
      WHEN OTHERS
      THEN
        DBMS_OUTPUT.PUT_LINE('Error in v_prcs_stp:'||v_prcs_stp || SQLCODE || SQLERRM );



         RETURN 701;
    END ;

    --******************************************************************************
   --* Exception Handling                                                         *
   --******************************************************************************
 EXCEPTION
      WHEN OTHERS
      THEN
     ROLLBACK;
     DBMS_OUTPUT.PUT_LINE(SQLCODE);
     DBMS_OUTPUT.PUT_LINE(SQLERRM);

    DBMS_OUTPUT.put_line('Error in function FN_DIV_COMPRESS');
    RETURN 600;



END FN_DIV_COMPRESS;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_SALESCB_ACCESS_VPD" (p_schema       IN VARCHAR2,
                                                 p_objname      IN VARCHAR2)
   RETURN VARCHAR2 AS
   /***********************************************************************
   * Name: FN_SALESCB_ACCESS_VPD
   * Type: Function
   * Description: VPD Function to permit or deny access to salescb_corp
   *
   *  REVISIONS:
   *  Ver        Date        Author           Description
   *  ---------  ----------  ---------------  ------------------------------------
   *  1.0        01/11/2017  Bob Young      Created this function
   ************************************************************************/
   c_start                CONSTANT NUMBER := DBMS_UTILITY.get_time;
   c_fn_nm                CONSTANT VARCHAR2(30) := 'FN_SALESCB_ACCESS_VPD';
   l_security_predicate   VARCHAR2(4000) DEFAULT NULL;
   l_cur_sql              VARCHAR2(4000) := SYS_CONTEXT('USERENV', 'CURRENT_SQL');
   l_sbjct_area VARCHAR2(100)
         := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_sbjct_area_attr);
   l_sales_cb VARCHAR2(1)
         := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_sales_cb_attr);
BEGIN
   --If no subject area context is set then return predicate filtering all data
   IF l_sbjct_area IS NULL THEN
      l_security_predicate   := '1=2';
      ctladm.pkg_vpd_debug_util.vpd_debug('NO SA', c_fn_nm, USER, p_schema, p_objname, l_sbjct_area, l_sales_cb, NULL,
      l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   -- Check if user is has access

   IF l_sales_cb = 'Y' THEN
      l_security_predicate   := '1=1';
   ELSE
      l_security_predicate   := '1=2';
   END IF;
      ctladm.pkg_vpd_debug_util.vpd_debug('SALESCB', c_fn_nm, USER, p_schema, p_objname, l_sbjct_area, l_sales_cb,
      NULL, l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;

EXCEPTION
   WHEN OTHERS THEN
      l_security_predicate   := '1=3';
      ctladm.pkg_vpd_debug_util.vpd_debug(SQLCODE || '-' || SQLERRM, c_fn_nm, USER, p_schema, p_objname, l_sbjct_area,
      l_sales_cb, NULL, l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
END fn_salescb_access_vpd;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_POWER_SELL_EXTRACT" (v_in_promo_start_dt IN VARCHAR2,
                                                                                                        v_in_promo_end_dt IN VARCHAR2,
                                                                                                        v_in_pwr_sell_nbr IN NUMBER,
                                                                                                        v_in_part_or_all IN CHAR)
RETURN NUMBER IS

/*****************************************************************************
   NAME: XDMADM.FN_POWER_SELL_EXTRACT
   TYPE: Function
   USAGE:XDMADM.FN_POWER_SELL_EXTRACT(yyyymmdd,power_sell_number,v_in_part_or_all )

 DESCRIPTION
 -----------
 Function extracts data for PowerSell promotions based on the Promo Start date and PowerSell number for
 Participating and ALL the customers.

 Input Tables : XDMADM.SALES_CORP
                      XDMADM.CUST_CORP
                      XDMADM.POWER_SELL_PROD
                      XDMADM.POWER_SELL_CUST_SEG

 Output Tables : XDMADM.POWER_SELL_EXTRACT

 Return Code : 0 Successful, Others - Load Failed

 REVISIONS:
*****************************************************************************
  Date                      User Id                Changes Description
  ===========   =======         ============================================
  09-Jun-2011         Manisha Singh         Initial release of this procedure.
*****************************************************************************

 EIW Standard Variables
******************************************************************************/
   CON_PROCESS_NAME  CONSTANT varchar2(40) := 'FN_POWER_SELL_EXTRACT';

/******************************************************************************
 Define program variables
******************************************************************************/
    v_promo_strt_dt DATE:=to_Date(v_in_promo_start_dt,'YYYYMMDD');
    v_promo_end_dt DATE:=to_Date(v_in_promo_end_dt,'YYYYMMDD');
    v_6wk_promo_strt_dt  DATE;
    v_6wk_promo_end_dt  DATE;
    v_pre_before_promo_strt_dt  DATE;
    v_pre_before_promo_end_dt  DATE;
    v_before_promo_strt_dt  DATE;
    v_before_promo_end_dt  DATE;
    v_prior_4wk_promo_strt_dt  DATE;
    v_prior_4wk_promo_end_dt  DATE;
    v_during_promo_strt_dt  DATE ;
    v_during_promo_end_dt  DATE;
    v_after_promo_1_strt_dt  DATE;
    v_after_promo_1_end_dt  DATE;
    v_after_promo_2_strt_dt DATE;
    v_after_promo_2_end_dt DATE;
    v_after_promo_3_strt_dt  DATE;
    v_after_promo_3_end_dt  DATE;
    v_after_promo_4_strt_dt DATE;
    v_after_promo_4_end_dt DATE;
    v_after_promo_5_strt_dt DATE;
    v_after_promo_5_end_dt DATE;
    v_after_promo_6_strt_dt  DATE;
    v_after_promo_6_end_dt  DATE;

    v_prcs_start_dt_1   DATE;
    v_prcs_start_dt_2   DATE;

    v_trunc_allow   boolean;
    v_trunc_ret      NUMBER(3);

/******************************************************************************
 Define Variables for publishing Run details in EIW process log
******************************************************************************/
   v_prcs_nm           varchar(100);
   v_prcs_stp           varchar(100);
   v_prcs_pram        varchar(100);
   v_out_msg           varchar(200);

--******************************************************************************
--* Define User Defined Exceptions                                             *
--******************************************************************************
   ALL_EXCEPTIONS       EXCEPTION;

BEGIN
    dbms_output.put_line('Start Process '||CON_PROCESS_NAME);
    dbms_output.put_line('Start Time:'||TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS'));
    v_prcs_nm  := CON_PROCESS_NAME ;
    v_prcs_pram:= 'PARAM1 : '||v_in_promo_start_dt||'  PARAM2 : '||v_in_pwr_sell_nbr|| ' PARAM3 : '||v_in_part_or_all;
    v_prcs_stp := 'Start Process '||CON_PROCESS_NAME;

/******************************************************************************
* Calculating the different 2 week periods
******************************************************************************/
    v_prcs_stp := 'Calculating different 2 week periods before and after the promo period';

    SELECT  (clndr_dt - 14) into v_6wk_promo_strt_dt
    FROM  xdmadm.time_corp
    where clndr_dt = to_Date(v_in_promo_start_dt,'YYYYMMDD');

    SELECT  (clndr_dt + 27) into v_6wk_promo_end_dt
    FROM  xdmadm.time_corp
    where clndr_dt =  to_Date(v_in_promo_start_dt,'YYYYMMDD');

    SELECT  (clndr_dt - 28) into v_pre_before_promo_strt_dt
    FROM  xdmadm.time_corp
    where clndr_dt = to_Date(v_in_promo_start_dt,'YYYYMMDD');

    SELECT  (clndr_dt - 15) into v_pre_before_promo_end_dt
    FROM  xdmadm.time_corp
    where clndr_dt = to_Date(v_in_promo_start_dt,'YYYYMMDD');

    SELECT  (clndr_dt - 14) into v_before_promo_strt_dt
    FROM  xdmadm.time_corp
    where clndr_dt = to_Date(v_in_promo_start_dt,'YYYYMMDD');

    SELECT  (clndr_dt - 1) into v_before_promo_end_dt
    FROM  xdmadm.time_corp
    where clndr_dt = to_Date(v_in_promo_start_dt,'YYYYMMDD');

    SELECT  (clndr_dt - 28) into v_prior_4wk_promo_strt_dt
    FROM  xdmadm.time_corp
    where clndr_dt =  to_Date(v_in_promo_start_dt,'YYYYMMDD');

    SELECT  (clndr_dt - 1) into v_prior_4wk_promo_end_dt
    FROM  xdmadm.time_corp
    where clndr_dt =  to_Date(v_in_promo_start_dt,'YYYYMMDD');

    SELECT  (clndr_dt + 14) into v_after_promo_1_strt_dt
    FROM  xdmadm.time_corp
    where clndr_dt =  to_Date(v_in_promo_start_dt,'YYYYMMDD');

    SELECT  (clndr_dt + 27) into v_after_promo_1_end_dt
    FROM  xdmadm.time_corp
    where clndr_dt =  to_Date(v_in_promo_start_dt,'YYYYMMDD');

    SELECT  (clndr_dt + 28) into v_after_promo_2_strt_dt
    FROM  xdmadm.time_corp
    where clndr_dt =  to_Date(v_in_promo_start_dt,'YYYYMMDD');

    SELECT  (clndr_dt + 41) into v_after_promo_2_end_dt
    FROM  xdmadm.time_corp
    where clndr_dt =  to_Date(v_in_promo_start_dt,'YYYYMMDD');

    SELECT  (clndr_dt + 42) into v_after_promo_3_strt_dt
    FROM  xdmadm.time_corp
    where clndr_dt =  to_Date(v_in_promo_start_dt,'YYYYMMDD');

    SELECT  (clndr_dt + 55) into v_after_promo_3_end_dt
    FROM  xdmadm.time_corp
    where clndr_dt =  to_Date(v_in_promo_start_dt,'YYYYMMDD');

    SELECT  (clndr_dt + 56) into v_after_promo_4_strt_dt
    FROM  xdmadm.time_corp
    where clndr_dt =  to_Date(v_in_promo_start_dt,'YYYYMMDD');

    SELECT  (clndr_dt + 69) into v_after_promo_4_end_dt
    FROM  xdmadm.time_corp
    where clndr_dt =  to_Date(v_in_promo_start_dt,'YYYYMMDD');

    SELECT  (clndr_dt + 70) into v_after_promo_5_strt_dt
    FROM  xdmadm.time_corp
    where clndr_dt =  to_Date(v_in_promo_start_dt,'YYYYMMDD');

    SELECT  (clndr_dt + 83) into v_after_promo_5_end_dt
    FROM  xdmadm.time_corp
    where clndr_dt =  to_Date(v_in_promo_start_dt,'YYYYMMDD');

    SELECT  (clndr_dt + 84) into v_after_promo_6_strt_dt
    FROM  xdmadm.time_corp
    where clndr_dt =  to_Date(v_in_promo_start_dt,'YYYYMMDD');

    SELECT  (clndr_dt + 97) into v_after_promo_6_end_dt
    FROM  xdmadm.time_corp
    where clndr_dt =  to_Date(v_in_promo_start_dt,'YYYYMMDD');

    v_during_promo_strt_dt  := to_Date(v_in_promo_start_dt,'YYYYMMDD');

    v_during_promo_end_dt  := v_promo_end_dt;

    v_prcs_start_dt_1 :=to_Date(v_in_promo_start_dt,'YYYYMMDD') - 7;

    dbms_output.put_line('Process Date lower boundary 1 is set to '||v_prcs_start_dt_1);

    v_prcs_start_dt_2 :=to_date(v_prior_4wk_promo_strt_dt) - 7;

    dbms_output.put_line('Process Date lower boundary 2 is set to '||v_prcs_start_dt_2);

--******************************************************************************
--* Truncating the Table      *
--******************************************************************************
   v_prcs_stp := 'Truncating XDMADM.POWER_SELL_EXTRACT Table';
   v_trunc_allow := USFDBA.TABLE_PKG.ALLOW_TRUNCATE_TABLE (v_out_msg, 'XDMADM','POWER_SELL_EXTRACT');
   DBMS_OUTPUT.PUT_LINE(v_out_msg);
   IF v_trunc_allow = TRUE THEN
   dbms_output.put_line('Truncating the Extract table XDMADM.POWER_SELL_EXTRACT');
    v_trunc_ret := USFDBA.TABLE_PKG.TRUNCATE_TABLE(v_out_msg, 'XDMADM','POWER_SELL_EXTRACT');
     DBMS_OUTPUT.PUT_LINE(v_out_msg);
     IF v_trunc_ret != 0 THEN
        DBMS_OUTPUT.PUT_LINE('Error in Truncating the XDMADM.POWER_SELL_EXTRACT table');
        RAISE ALL_EXCEPTIONS;
     END IF;
   ELSE
     DBMS_OUTPUT.PUT_LINE('USFDBA Security doesn''t allow to truncate XDMADM.POWER_SELL_EXTRACT table');
     DBMS_OUTPUT.PUT_LINE('     Check entry in USFDBA.USF_TABLE_SCRTY table for XDMADM.POWER_SELL_EXTRACT table');
     RAISE ALL_EXCEPTIONS;
   END IF;

--******************************************************************************
--* Extracting the data     *
--******************************************************************************

   dbms_output.put_line('Extracting the data and inserting it into the XDMADM.POWER_SELL_EXTRACT table');

   IF v_in_part_or_all = 'P' THEN

        INSERT INTO XDMADM.POWER_SELL_EXTRACT (CUST_NBR,
                                            DIV_NBR,
                                            RGN_NM,
                                            DIV_NM,
                                            BRNCH_CD,
                                            CUST_MNR_CD,
                                            CUST_SEGMENT)
             SELECT cust_nbr,
                    div_nbr,
                    rgn_nm,
                    div_nm,
                    brnch_cd,
                    cust_mnr_cd,
                    cust_segment
               FROM (  SELECT sls.cust_nbr,
                              div.div_nbr,
                              div.rgn_nm,
                              div.div_nm,
                              div.brnch_cd,
                              cust.cust_mnr_cd,
                              NVL(seg.cust_seg_desc,'UNKNOWN') cust_segment
                         FROM xdmadm.sales_corp sls,
                              xdmadm.cust_corp cust,
                              xdmadm.div_corp div,
                              XDMADM.POWER_SELL_PROD ps,
                              XDMADM.POWER_SELL_CUST_SEG seg
                        WHERE     1 = 1
                              AND sls.orig_ord_dt BETWEEN v_promo_strt_dt
                                                            AND v_promo_end_dt
                              AND sls.prcs_dt >= v_prcs_start_dt_1
                              AND sls.div_nbr = cust.div_nbr
                              AND sls.cust_nbr = cust.cust_nbr
                              AND sls.acct_typ_cd_actl = 'ST'
                              AND sls.div_nbr = div.div_nbr
                              AND sls.div_nbr = ps.div_nbr
                              AND sls.prod_nbr = ps.prod_nbr
                              AND cust.cust_mnr_cd = seg.cust_mnr_cd(+)
                              AND ps.pwr_sell_nbr=v_in_pwr_sell_nbr
                              AND div.CONV_TO_DIV_NBR IS NULL
                              AND sls.prod_alwnc_cd = 475
                              AND XFER_TO_DT IS NULL)
           GROUP BY cust_nbr,
                    div_nbr,
                    rgn_nm,
                    div_nm,
                    brnch_cd,
                    cust_mnr_cd,
                    cust_segment;

        COMMIT;

    ELSIF v_in_part_or_all = 'A' THEN

       INSERT INTO XDMADM.POWER_SELL_EXTRACT (CUST_NBR,
                                            DIV_NBR,
                                            RGN_NM,
                                            DIV_NM,
                                            BRNCH_CD,
                                            CUST_MNR_CD,
                                            CUST_SEGMENT)
             SELECT cust_nbr,
                    div_nbr,
                    rgn_nm,
                    div_nm,
                    brnch_cd,
                    cust_mnr_cd,
                    cust_segment
               FROM (  SELECT sls.cust_nbr,
                              div.div_nbr,
                              div.rgn_nm,
                              div.div_nm,
                              div.brnch_cd,
                              cust.cust_mnr_cd,
                              NVL(seg.cust_seg_desc,'UNKNOWN') cust_segment
                         FROM xdmadm.sales_corp sls,
                              xdmadm.cust_corp cust,
                              xdmadm.div_corp div,
                              XDMADM.POWER_SELL_CUST_SEG seg
                        WHERE     1 = 1
                              AND sls.orig_ord_dt BETWEEN v_promo_strt_dt
                                                            AND v_promo_end_dt
                              AND sls.prcs_dt >= v_prcs_start_dt_1
                              AND sls.div_nbr = cust.div_nbr
                              AND sls.cust_nbr = cust.cust_nbr
                              AND sls.div_nbr = div.div_nbr
                              AND cust.cust_mnr_cd = seg.cust_mnr_cd(+)
                              AND sls.acct_typ_cd_actl = 'ST'
                              AND div.CONV_TO_DIV_NBR IS NULL
                              AND XFER_TO_DT IS NULL
                              AND div.div_typ_cd not in ('NS','STK'))
           GROUP BY cust_nbr,
                    div_nbr,
                    rgn_nm,
                    div_nm,
                    brnch_cd,
                    cust_mnr_cd,
                    cust_segment;

        COMMIT;

    ELSE

        dbms_output.put_line('Invalid Parameter Value');

    END IF;
/******************************************************************************
* Merging the data
******************************************************************************/
    dbms_output.put_line('Merging data into the Extract table');

    MERGE INTO XDMADM.POWER_SELL_EXTRACT TRGT
         USING (  SELECT cust_nbr,
                         div_nbr,
                         CASE
                            WHEN SUM (NVL (WEEKLY_AVG_6WK_PROMO_SALE, 0) / 6) < 1000
                            THEN
                               1
                            WHEN SUM (NVL (WEEKLY_AVG_6WK_PROMO_SALE, 0) / 6) >= 1000
                                 AND SUM (NVL (WEEKLY_AVG_6WK_PROMO_SALE, 0) / 6) <= 3000
                            THEN
                               2
                            ELSE
                               3
                         END
                            CUST_TIER,
                         SUM (PRIOR_4_WK_SLS_ALL_PROD)
                            PRIOR_4_WK_SLS_ALL_PROD,
                         CASE
                            WHEN SUM (PRIOR_4_WK_SLS_ALL_PROD) > 0
                            THEN
                               'EXISTING CUSTOMER'
                            ELSE
                               'NEW CUSTOMER'
                         END
                            EXISTING_CUST_FLAG,
                         SUM (AFTER_PROMO_SLS_1) AFTER_PROMO_SLS_1,
                         SUM (AFTER_PROMO_CASES_1) AFTER_PROMO_CASES_1,
                         SUM (AFTER_PROMO_DROPS_1) AFTER_PROMO_DROPS_1,
                         SUM (AFTER_PROMO_LINES_1) AFTER_PROMO_LINES_1,
                         SUM (AFTER_PROMO_GP3_1) AFTER_PROMO_GP3_1,
                         SUM (AFTER_PROMO_SLS_2) AFTER_PROMO_SLS_2,
                         SUM (AFTER_PROMO_CASES_2) AFTER_PROMO_CASES_2,
                         SUM (AFTER_PROMO_DROPS_2) AFTER_PROMO_DROPS_2,
                         SUM (AFTER_PROMO_LINES_2) AFTER_PROMO_LINES_2,
                         SUM (AFTER_PROMO_GP3_2) AFTER_PROMO_GP3_2,
                         SUM (AFTER_PROMO_SLS_3) AFTER_PROMO_SLS_3,
                         SUM (AFTER_PROMO_CASES_3) AFTER_PROMO_CASES_3,
                         SUM (AFTER_PROMO_DROPS_3) AFTER_PROMO_DROPS_3,
                         SUM (AFTER_PROMO_LINES_3) AFTER_PROMO_LINES_3,
                         SUM (AFTER_PROMO_GP3_3) AFTER_PROMO_GP3_3,
                         SUM (AFTER_PROMO_SLS_4) AFTER_PROMO_SLS_4,
                         SUM (AFTER_PROMO_CASES_4) AFTER_PROMO_CASES_4,
                         SUM (AFTER_PROMO_DROPS_4) AFTER_PROMO_DROPS_4,
                         SUM (AFTER_PROMO_LINES_4) AFTER_PROMO_LINES_4,
                         SUM (AFTER_PROMO_GP3_4) AFTER_PROMO_GP3_4,
                         SUM (AFTER_PROMO_SLS_5) AFTER_PROMO_SLS_5,
                         SUM (AFTER_PROMO_CASES_5) AFTER_PROMO_CASES_5,
                         SUM (AFTER_PROMO_DROPS_5) AFTER_PROMO_DROPS_5,
                         SUM (AFTER_PROMO_LINES_5) AFTER_PROMO_LINES_5,
                         SUM (AFTER_PROMO_GP3_5) AFTER_PROMO_GP3_5,
                         SUM (AFTER_PROMO_SLS_6) AFTER_PROMO_SLS_6,
                         SUM (AFTER_PROMO_CASES_6) AFTER_PROMO_CASES_6,
                         SUM (AFTER_PROMO_DROPS_6) AFTER_PROMO_DROPS_6,
                         SUM (AFTER_PROMO_LINES_6) AFTER_PROMO_LINES_6,
                         SUM (AFTER_PROMO_GP3_6) AFTER_PROMO_GP3_6,
                         SUM (PRE_BEFORE_PROMO_SLS) PRE_BEFORE_PROMO_SLS,
                         SUM (PRE_BEFORE_PROMO_CASES) PRE_BEFORE_PROMO_CASES,
                         SUM (PRE_BEFORE_PROMO_DROPS) PRE_BEFORE_PROMO_DROPS,
                         SUM (PRE_BEFORE_PROMO_LINES) PRE_BEFORE_PROMO_LINES,
                         SUM (PRE_BEFORE_PROMO_GP3) PRE_BEFORE_PROMO_GP3,
                         SUM (DURING_PROMO_SLS) DURING_PROMO_SLS,
                         SUM (BEFORE_PROMO_SLS) BEFORE_PROMO_SLS,
                         SUM (DURING_PROMO_CASES) DURING_PROMO_CASES,
                         SUM (BEFORE_PROMO_CASES) BEFORE_PROMO_CASES,
                         SUM (DURING_PROMO_DROPS) DURING_PROMO_DROPS,
                         SUM (BEFORE_PROMO_DROPS) BEFORE_PROMO_DROPS,
                         SUM (DURING_PROMO_LINES) DURING_PROMO_LINES,
                         SUM (BEFORE_PROMO_LINES) BEFORE_PROMO_LINES,
                         SUM (DURING_PROMO_GP3) DURING_PROMO_GP3,
                         SUM (BEFORE_PROMO_GP3) BEFORE_PROMO_GP3,
                         SUM (WEEKLY_AVG_6WK_PROMO_SALE) WEEKLY_AVG_6WK_PROMO_SALE
                    FROM (  SELECT sls.cust_nbr,
                                   sls.div_nbr,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_6wk_promo_strt_dt
                                                               AND v_6wk_promo_end_dt
                                      THEN
                                         SUM (grs_sls_extnd)
                                   END
                                      WEEKLY_AVG_6WK_PROMO_SALE,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_pre_before_promo_strt_dt
                                                               AND v_pre_before_promo_end_dt
                                      THEN
                                         CASE
                                            WHEN trans_typ = 'RT'
                                            THEN
                                               COUNT (
                                                  DISTINCT (   sls.div_nbr
                                                            || sls.cust_nbr
                                                            || sls.orig_ord_dt
                                                            || sls.INV_DT
                                                            || sls.DLVR_RTE))
                                            ELSE
                                               0
                                         END
                                   END
                                      PRE_BEFORE_PROMO_DROPS,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN  v_pre_before_promo_strt_dt
                                                               AND v_pre_before_promo_end_dt
                                      THEN
                                         SUM (grs_sls_extnd)
                                   END
                                      PRE_BEFORE_PROMO_SLS,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN  v_pre_before_promo_strt_dt
                                                               AND v_pre_before_promo_end_dt
                                      THEN
                                         SUM (qty_ship)
                                   END
                                      PRE_BEFORE_PROMO_CASES,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN  v_pre_before_promo_strt_dt
                                                               AND v_pre_before_promo_end_dt
                                      THEN
                                         SUM (
                                            CASE
                                               WHEN TRANS_TYP IN ('RT', 'WC', 'VS')
                                                    AND PIM_SUPRCLS_ID_ACTL <> '97'
                                               THEN
                                                  1
                                               ELSE
                                                  0
                                            END)
                                   END
                                      PRE_BEFORE_PROMO_LINES,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN  v_pre_before_promo_strt_dt
                                                               AND v_pre_before_promo_end_dt
                                      THEN
                                         SUM (
                                              NVL (grs_sls_extnd, 0)
                                            - NVL (dwa_cost_extnd, 0)
                                            + NVL (dvt_cost_extnd, 0)
                                            - NVL (ttl_int_vndr_fnd_dvt, 0)
                                            + NVL (ttl_alwnc, 0))
                                   END
                                      PRE_BEFORE_PROMO_GP3,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_during_promo_strt_dt
                                                               AND v_during_promo_end_dt
                                      THEN
                                         CASE
                                            WHEN trans_typ = 'RT'
                                            THEN
                                               COUNT (
                                                  DISTINCT (   sls.div_nbr
                                                            || sls.cust_nbr
                                                            || sls.orig_ord_dt
                                                            || sls.INV_DT
                                                            || sls.DLVR_RTE))
                                            ELSE
                                               0
                                         END
                                   END
                                      DURING_PROMO_DROPS,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_during_promo_strt_dt
                                                               AND v_during_promo_end_dt
                                      THEN
                                         SUM (grs_sls_extnd)
                                   END
                                      DURING_PROMO_SLS,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_during_promo_strt_dt --'20-mar-2011'
                                                               AND v_during_promo_end_dt -- '2-apr-2011'
                                      THEN
                                         SUM (qty_ship)
                                   END
                                      DURING_PROMO_CASES,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_during_promo_strt_dt
                                                               AND v_during_promo_end_dt
                                      THEN
                                         SUM (
                                            CASE
                                               WHEN TRANS_TYP IN ('RT', 'WC', 'VS')
                                                    AND PIM_SUPRCLS_ID_ACTL <> '97'
                                               THEN
                                                  1
                                               ELSE
                                                  0
                                            END)
                                   END
                                      DURING_PROMO_LINES,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_during_promo_strt_dt
                                                               AND v_during_promo_end_dt
                                      THEN
                                         SUM (
                                              NVL (grs_sls_extnd, 0)
                                            - NVL (dwa_cost_extnd, 0)
                                            + NVL (dvt_cost_extnd, 0)
                                            - NVL (ttl_int_vndr_fnd_dvt, 0)
                                            + NVL (ttl_alwnc, 0))
                                   END
                                      DURING_PROMO_GP3,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_before_promo_strt_dt
                                                               AND v_before_promo_end_dt
                                      THEN
                                         CASE
                                            WHEN trans_typ = 'RT'
                                            THEN
                                               COUNT (
                                                  DISTINCT (   sls.div_nbr
                                                            || sls.cust_nbr
                                                            || sls.orig_ord_dt
                                                            || sls.INV_DT
                                                            || sls.DLVR_RTE))
                                            ELSE
                                               0
                                         END
                                   END
                                      BEFORE_PROMO_DROPS,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_before_promo_strt_dt
                                                               AND v_before_promo_end_dt
                                      THEN
                                         SUM (grs_sls_extnd)
                                   END
                                      BEFORE_PROMO_SLS,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_before_promo_strt_dt
                                                               AND v_before_promo_end_dt
                                      THEN
                                         SUM (qty_ship)
                                   END
                                      BEFORE_PROMO_CASES,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_before_promo_strt_dt
                                                               AND v_before_promo_end_dt
                                      THEN
                                         SUM (
                                            CASE
                                               WHEN TRANS_TYP IN ('RT', 'WC', 'VS')
                                                    AND PIM_SUPRCLS_ID_ACTL <> '97'
                                               THEN
                                                  1
                                               ELSE
                                                  0
                                            END)
                                   END
                                      BEFORE_PROMO_LINES,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_before_promo_strt_dt
                                                               AND v_before_promo_end_dt
                                      THEN
                                         SUM (
                                              NVL (grs_sls_extnd, 0)
                                            - NVL (dwa_cost_extnd, 0)
                                            + NVL (dvt_cost_extnd, 0)
                                            - NVL (ttl_int_vndr_fnd_dvt, 0)
                                            + NVL (ttl_alwnc, 0))
                                   END
                                      BEFORE_PROMO_GP3,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_prior_4wk_promo_strt_dt
                                                               AND v_prior_4wk_promo_end_dt
                                      THEN
                                         SUM (grs_sls_extnd)
                                   END
                                      PRIOR_4_WK_SLS_ALL_PROD,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_1_strt_dt
                                                               AND v_after_promo_1_end_dt
                                      THEN
                                         CASE
                                            WHEN trans_typ = 'RT'
                                            THEN
                                               COUNT (
                                                  DISTINCT (   sls.div_nbr
                                                            || sls.cust_nbr
                                                            || sls.orig_ord_dt
                                                            || sls.INV_DT
                                                            || sls.DLVR_RTE))
                                            ELSE
                                               0
                                         END
                                   END
                                      AFTER_PROMO_DROPS_1,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_1_strt_dt
                                                               AND v_after_promo_1_end_dt
                                      THEN
                                         SUM (grs_sls_extnd)
                                   END
                                      AFTER_PROMO_SLS_1,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_1_strt_dt
                                                               AND v_after_promo_1_end_dt
                                      THEN
                                         SUM (qty_ship)
                                   END
                                      AFTER_PROMO_CASES_1,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_1_strt_dt
                                                               AND v_after_promo_1_end_dt
                                      THEN
                                         SUM (
                                            CASE
                                               WHEN TRANS_TYP IN ('RT', 'WC', 'VS')
                                                    AND PIM_SUPRCLS_ID_ACTL <> '97'
                                               THEN
                                                  1
                                               ELSE
                                                  0
                                            END)
                                   END
                                      AFTER_PROMO_LINES_1,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_1_strt_dt
                                                               AND v_after_promo_1_end_dt
                                      THEN
                                         SUM (
                                              NVL (grs_sls_extnd, 0)
                                            - NVL (dwa_cost_extnd, 0)
                                            + NVL (dvt_cost_extnd, 0)
                                            - NVL (ttl_int_vndr_fnd_dvt, 0)
                                            + NVL (ttl_alwnc, 0))
                                   END
                                      AFTER_PROMO_GP3_1,
                                 CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_2_strt_dt
                                                               AND v_after_promo_2_end_dt
                                      THEN
                                         CASE
                                            WHEN trans_typ = 'RT'
                                            THEN
                                               COUNT (
                                                  DISTINCT (   sls.div_nbr
                                                            || sls.cust_nbr
                                                            || sls.orig_ord_dt
                                                            || sls.INV_DT
                                                            || sls.DLVR_RTE))
                                            ELSE
                                               0
                                         END
                                   END
                                      AFTER_PROMO_DROPS_2,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_2_strt_dt
                                                               AND v_after_promo_2_end_dt
                                      THEN
                                         SUM (grs_sls_extnd)
                                   END
                                      AFTER_PROMO_SLS_2,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_2_strt_dt
                                                               AND v_after_promo_2_end_dt
                                      THEN
                                         SUM (qty_ship)
                                   END
                                      AFTER_PROMO_CASES_2,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_2_strt_dt
                                                               AND v_after_promo_2_end_dt
                                      THEN
                                         SUM (
                                            CASE
                                               WHEN TRANS_TYP IN ('RT', 'WC', 'VS')
                                                    AND PIM_SUPRCLS_ID_ACTL <> '97'
                                               THEN
                                                  1
                                               ELSE
                                                  0
                                            END)
                                   END
                                      AFTER_PROMO_LINES_2,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_2_strt_dt
                                                               AND v_after_promo_2_end_dt
                                      THEN
                                         SUM (
                                              NVL (grs_sls_extnd, 0)
                                            - NVL (dwa_cost_extnd, 0)
                                            + NVL (dvt_cost_extnd, 0)
                                            - NVL (ttl_int_vndr_fnd_dvt, 0)
                                            + NVL (ttl_alwnc, 0))
                                   END
                                      AFTER_PROMO_GP3_2,
                                 CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_3_strt_dt
                                                               AND v_after_promo_3_end_dt
                                      THEN
                                         CASE
                                            WHEN trans_typ = 'RT'
                                            THEN
                                               COUNT (
                                                  DISTINCT (   sls.div_nbr
                                                            || sls.cust_nbr
                                                            || sls.orig_ord_dt
                                                            || sls.INV_DT
                                                            || sls.DLVR_RTE))
                                            ELSE
                                               0
                                         END
                                   END
                                      AFTER_PROMO_DROPS_3,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_3_strt_dt
                                                               AND v_after_promo_3_end_dt
                                      THEN
                                         SUM (grs_sls_extnd)
                                   END
                                      AFTER_PROMO_SLS_3,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_3_strt_dt
                                                               AND v_after_promo_3_end_dt
                                      THEN
                                         SUM (qty_ship)
                                   END
                                      AFTER_PROMO_CASES_3,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_3_strt_dt
                                                               AND v_after_promo_3_end_dt
                                      THEN
                                         SUM (
                                            CASE
                                               WHEN TRANS_TYP IN ('RT', 'WC', 'VS')
                                                    AND PIM_SUPRCLS_ID_ACTL <> '97'
                                               THEN
                                                  1
                                               ELSE
                                                  0
                                            END)
                                   END
                                      AFTER_PROMO_LINES_3,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_3_strt_dt
                                                               AND v_after_promo_3_end_dt
                                      THEN
                                         SUM (
                                              NVL (grs_sls_extnd, 0)
                                            - NVL (dwa_cost_extnd, 0)
                                            + NVL (dvt_cost_extnd, 0)
                                            - NVL (ttl_int_vndr_fnd_dvt, 0)
                                            + NVL (ttl_alwnc, 0))
                                   END
                                      AFTER_PROMO_GP3_3,
                                 CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_4_strt_dt
                                                               AND v_after_promo_4_end_dt
                                      THEN
                                         CASE
                                            WHEN trans_typ = 'RT'
                                            THEN
                                               COUNT (
                                                  DISTINCT (   sls.div_nbr
                                                            || sls.cust_nbr
                                                            || sls.orig_ord_dt
                                                            || sls.INV_DT
                                                            || sls.DLVR_RTE))
                                            ELSE
                                               0
                                         END
                                   END
                                      AFTER_PROMO_DROPS_4,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_4_strt_dt
                                                               AND v_after_promo_4_end_dt
                                      THEN
                                         SUM (grs_sls_extnd)
                                   END
                                      AFTER_PROMO_SLS_4,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_4_strt_dt
                                                               AND v_after_promo_4_end_dt
                                      THEN
                                         SUM (qty_ship)
                                   END
                                      AFTER_PROMO_CASES_4,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_4_strt_dt
                                                               AND v_after_promo_4_end_dt
                                      THEN
                                         SUM (
                                            CASE
                                               WHEN TRANS_TYP IN ('RT', 'WC', 'VS')
                                                    AND PIM_SUPRCLS_ID_ACTL <> '97'
                                               THEN
                                                  1
                                               ELSE
                                                  0
                                            END)
                                   END
                                      AFTER_PROMO_LINES_4,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_4_strt_dt
                                                               AND v_after_promo_4_end_dt
                                      THEN
                                         SUM (
                                              NVL (grs_sls_extnd, 0)
                                            - NVL (dwa_cost_extnd, 0)
                                            + NVL (dvt_cost_extnd, 0)
                                            - NVL (ttl_int_vndr_fnd_dvt, 0)
                                            + NVL (ttl_alwnc, 0))
                                   END
                                      AFTER_PROMO_GP3_4,
                                 CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_5_strt_dt
                                                               AND v_after_promo_5_end_dt
                                      THEN
                                         CASE
                                            WHEN trans_typ = 'RT'
                                            THEN
                                               COUNT (
                                                  DISTINCT (   sls.div_nbr
                                                            || sls.cust_nbr
                                                            || sls.orig_ord_dt
                                                            || sls.INV_DT
                                                            || sls.DLVR_RTE))
                                            ELSE
                                               0
                                         END
                                   END
                                      AFTER_PROMO_DROPS_5,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_5_strt_dt
                                                               AND v_after_promo_5_end_dt
                                      THEN
                                         SUM (grs_sls_extnd)
                                   END
                                      AFTER_PROMO_SLS_5,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_5_strt_dt
                                                               AND v_after_promo_5_end_dt
                                      THEN
                                         SUM (qty_ship)
                                   END
                                      AFTER_PROMO_CASES_5,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_5_strt_dt
                                                               AND v_after_promo_5_end_dt
                                      THEN
                                         SUM (
                                            CASE
                                               WHEN TRANS_TYP IN ('RT', 'WC', 'VS')
                                                    AND PIM_SUPRCLS_ID_ACTL <> '97'
                                               THEN
                                                  1
                                               ELSE
                                                  0
                                            END)
                                   END
                                      AFTER_PROMO_LINES_5,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_5_strt_dt
                                                               AND v_after_promo_5_end_dt
                                      THEN
                                         SUM (
                                              NVL (grs_sls_extnd, 0)
                                            - NVL (dwa_cost_extnd, 0)
                                            + NVL (dvt_cost_extnd, 0)
                                            - NVL (ttl_int_vndr_fnd_dvt, 0)
                                            + NVL (ttl_alwnc, 0))
                                   END
                                      AFTER_PROMO_GP3_5,
                                 CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_6_strt_dt
                                                               AND v_after_promo_6_end_dt
                                      THEN
                                         CASE
                                            WHEN trans_typ = 'RT'
                                            THEN
                                               COUNT (
                                                  DISTINCT (   sls.div_nbr
                                                            || sls.cust_nbr
                                                            || sls.orig_ord_dt
                                                            || sls.INV_DT
                                                            || sls.DLVR_RTE))
                                            ELSE
                                               0
                                         END
                                   END
                                      AFTER_PROMO_DROPS_6,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_6_strt_dt
                                                               AND v_after_promo_6_end_dt
                                      THEN
                                         SUM (grs_sls_extnd)
                                   END
                                      AFTER_PROMO_SLS_6,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_6_strt_dt
                                                               AND v_after_promo_6_end_dt
                                      THEN
                                         SUM (qty_ship)
                                   END
                                      AFTER_PROMO_CASES_6,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_6_strt_dt
                                                               AND v_after_promo_6_end_dt
                                      THEN
                                         SUM (
                                            CASE
                                               WHEN TRANS_TYP IN ('RT', 'WC', 'VS')
                                                    AND PIM_SUPRCLS_ID_ACTL <> '97'
                                               THEN
                                                  1
                                               ELSE
                                                  0
                                            END)
                                   END
                                      AFTER_PROMO_LINES_6,
                                   CASE
                                      WHEN sls.orig_ord_dt BETWEEN v_after_promo_6_strt_dt
                                                               AND v_after_promo_6_end_dt
                                      THEN
                                         SUM (
                                              NVL (grs_sls_extnd, 0)
                                            - NVL (dwa_cost_extnd, 0)
                                            + NVL (dvt_cost_extnd, 0)
                                            - NVL (ttl_int_vndr_fnd_dvt, 0)
                                            + NVL (ttl_alwnc, 0))
                                   END
                                      AFTER_PROMO_GP3_6
                              FROM xdmadm.sales_corp sls, XDMADM.POWER_SELL_EXTRACT PS
                             WHERE 1 = 1
                                   AND sls.orig_ord_dt BETWEEN v_prior_4wk_promo_strt_dt
                                                           AND  v_after_promo_6_end_dt
                                   AND sls.prcs_dt >=v_prcs_start_dt_2
                                   AND sls.div_nbr IN (SELECT div_nbr
                                                         FROM xdmadm.div_corp
                                                       WHERE CONV_TO_DIV_NBR IS NULL)
                                   AND XFER_TO_DT IS NULL
                                   AND SLS.DIV_NBR = PS.DIV_NBR
                                   AND SLS.CUST_NBR = PS.CUST_NBR
                          GROUP BY sls.cust_nbr,
                                   sls.div_nbr,
                                   --CUST_TIER,
                                   trans_typ,
                                   sls.orig_ord_dt)
                GROUP BY cust_nbr, div_nbr) SRC
            ON (SRC.DIV_NBR = TRGT.DIV_NBR AND SRC.CUST_NBR = TRGT.CUST_NBR)
    WHEN MATCHED
    THEN
       UPDATE SET
          TRGT.PRIOR_4_WK_SLS_ALL_PROD = SRC.PRIOR_4_WK_SLS_ALL_PROD,
          TRGT.EXISTING_CUST_FLAG = SRC.EXISTING_CUST_FLAG,
          TRGT.CUST_TIER = SRC.CUST_TIER,
          TRGT.DURING_PROMO_SLS = SRC.DURING_PROMO_SLS,
          TRGT.BEFORE_PROMO_SLS = SRC.BEFORE_PROMO_SLS,
          TRGT.DURING_PROMO_CASES = SRC.DURING_PROMO_CASES,
          TRGT.BEFORE_PROMO_CASES = SRC.BEFORE_PROMO_CASES,
          TRGT.DURING_PROMO_DROPS = SRC.DURING_PROMO_DROPS,
          TRGT.BEFORE_PROMO_DROPS = SRC.BEFORE_PROMO_DROPS,
          TRGT.DURING_PROMO_LINES = SRC.DURING_PROMO_LINES,
          TRGT.BEFORE_PROMO_LINES = SRC.BEFORE_PROMO_LINES,
          TRGT.DURING_PROMO_GP3 = SRC.DURING_PROMO_GP3,
          TRGT.BEFORE_PROMO_GP3 = SRC.BEFORE_PROMO_GP3,
          TRGT.PRE_BEFORE_PROMO_SLS = SRC.PRE_BEFORE_PROMO_SLS,
          TRGT.PRE_BEFORE_PROMO_CASES = SRC.PRE_BEFORE_PROMO_CASES,
          TRGT.PRE_BEFORE_PROMO_DROPS = SRC.PRE_BEFORE_PROMO_DROPS,
          TRGT.PRE_BEFORE_PROMO_LINES = SRC.PRE_BEFORE_PROMO_LINES,
          TRGT.PRE_BEFORE_PROMO_GP3 = SRC.PRE_BEFORE_PROMO_GP3,
          TRGT.AFTER_PROMO_SLS_1 = SRC.AFTER_PROMO_SLS_1,
          TRGT.AFTER_PROMO_CASES_1 = SRC.AFTER_PROMO_CASES_1,
          TRGT.AFTER_PROMO_DROPS_1 = SRC.AFTER_PROMO_DROPS_1,
          TRGT.AFTER_PROMO_LINES_1 = SRC.AFTER_PROMO_LINES_1,
          TRGT.AFTER_PROMO_GP3_1 = SRC.AFTER_PROMO_GP3_1,
          TRGT.AFTER_PROMO_SLS_2 = SRC.AFTER_PROMO_SLS_2,
          TRGT.AFTER_PROMO_CASES_2 = SRC.AFTER_PROMO_CASES_2,
          TRGT.AFTER_PROMO_DROPS_2 = SRC.AFTER_PROMO_DROPS_2,
          TRGT.AFTER_PROMO_LINES_2 = SRC.AFTER_PROMO_LINES_2,
          TRGT.AFTER_PROMO_GP3_2 = SRC.AFTER_PROMO_GP3_2,
          TRGT.AFTER_PROMO_SLS_3 = SRC.AFTER_PROMO_SLS_3,
          TRGT.AFTER_PROMO_CASES_3 = SRC.AFTER_PROMO_CASES_3,
          TRGT.AFTER_PROMO_DROPS_3 = SRC.AFTER_PROMO_DROPS_3,
          TRGT.AFTER_PROMO_LINES_3 = SRC.AFTER_PROMO_LINES_3,
          TRGT.AFTER_PROMO_GP3_3 = SRC.AFTER_PROMO_GP3_3,
          TRGT.AFTER_PROMO_SLS_4 = SRC.AFTER_PROMO_SLS_4,
          TRGT.AFTER_PROMO_CASES_4 = SRC.AFTER_PROMO_CASES_4,
          TRGT.AFTER_PROMO_DROPS_4 = SRC.AFTER_PROMO_DROPS_4,
          TRGT.AFTER_PROMO_LINES_4 = SRC.AFTER_PROMO_LINES_4,
          TRGT.AFTER_PROMO_GP3_4 = SRC.AFTER_PROMO_GP3_4,
          TRGT.AFTER_PROMO_SLS_5 = SRC.AFTER_PROMO_SLS_5,
          TRGT.AFTER_PROMO_CASES_5 = SRC.AFTER_PROMO_CASES_5,
          TRGT.AFTER_PROMO_DROPS_5 = SRC.AFTER_PROMO_DROPS_5,
          TRGT.AFTER_PROMO_LINES_5 = SRC.AFTER_PROMO_LINES_5,
          TRGT.AFTER_PROMO_GP3_5 = SRC.AFTER_PROMO_GP3_5,
          TRGT.AFTER_PROMO_SLS_6 = SRC.AFTER_PROMO_SLS_6,
          TRGT.AFTER_PROMO_CASES_6 = SRC.AFTER_PROMO_CASES_6,
          TRGT.AFTER_PROMO_DROPS_6 = SRC.AFTER_PROMO_DROPS_6,
          TRGT.AFTER_PROMO_LINES_6 = SRC.AFTER_PROMO_LINES_6,
          TRGT.AFTER_PROMO_GP3_6 = SRC.AFTER_PROMO_GP3_6;

--******************************************************************************
--* Wrap Program
--******************************************************************************
  <<Wrap_Program>>

      v_prcs_stp := 'Final Commit';

      COMMIT;

      dbms_output.put_line('End Process '||CON_PROCESS_NAME);
      dbms_output.put_line('End Time:'||TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS'));
      RETURN 0;
--******************************************************************************
--* Exception Handling
--******************************************************************************
    EXCEPTION
      WHEN ALL_EXCEPTIONS
      THEN
         ROLLBACK;
         DBMS_OUTPUT.put_line ('error raised at step:');
         DBMS_OUTPUT.put_line ('******'||v_prcs_stp);
         RETURN 1;
      WHEN OTHERS
      THEN
          ROLLBACK;
         DBMS_OUTPUT.put_line ('ERROR:' || SQLCODE || ',' || SQLERRM);
         DBMS_OUTPUT.PUT_LINE(       v_prcs_nm
                            ||' - '||v_prcs_stp
                            ||' - '||v_prcs_pram);
         RETURN 2;
END;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_GET_PAST_FUT_MTH" (p_fisc_yr_mth  IN VARCHAR2,
                             p_num_mth      IN NUMBER)
   RETURN VARCHAR2
   DETERMINISTIC IS
   l_fut_fisc_yr_mth    VARCHAR2(6);
   l_past_fisc_yr_mth   VARCHAR2(6);
BEGIN
   SELECT fut_fisc_yr_mth, past_fisc_yr_mth
     INTO l_fut_fisc_yr_mth, l_past_fisc_yr_mth
     FROM (SELECT fisc_yr_mth,
                  LEAD(fisc_yr_mth, ABS(p_num_mth), 0) OVER (ORDER BY fisc_yr_mth) fut_fisc_yr_mth,
                  LAG(fisc_yr_mth, ABS(p_num_mth), 0) OVER (ORDER BY fisc_yr_mth) past_fisc_yr_mth
             FROM (SELECT DISTINCT fisc_yr_mth FROM xdmadm.wkly_time_corp))
    WHERE fisc_yr_mth = p_fisc_yr_mth;

   IF (p_num_mth > 0) THEN
      RETURN l_fut_fisc_yr_mth;
   ELSIF (p_num_mth < 0) THEN
      RETURN l_past_fisc_yr_mth;
   ELSE
      RETURN p_fisc_yr_mth;
   END IF;
END fn_get_past_fut_mth;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_CHK_ACCRLS_LOADED"
RETURN VARCHAR2 IS
   /*
	**********************************************************************
    * Name: fn_chk_accrls_loaded
    * Type: Function
    * Description: determines whether accruals have been loaded as of the rebate
	*		date plus one week
    *
    *  REVISIONS:
    *  Ver        Date        Author           Description
    *  ---------  ----------  ---------------  ------------------------------------
    *  1.0        12/26/2013  Ankur Patel	      	1. Created this function.
    *
	*  ERROR HANDLING:
	*
    ***********************************************************************
	*/

	l_return_val	VARCHAR2(100);
	l_rbt_dt_p1		DATE;
	l_accruals_dt	DATE;
BEGIN

	l_return_val := 'N';

	SELECT latest_prcs_dt+7
	INTO l_rbt_dt_p1
	FROM xdmadm.fact_load_stat
	WHERE fact_table='SALES_CORP'
	AND fact_typ_cd='RB'
	AND div_nbr=0;

	select max(clndr_dt)
	into l_accruals_dt
	from
	(
	  select max(ssma.fisc_yr_wk) as max_fyw
	  from xdmadm.sales_summ_mrch_aggr ssma
	  where (ssma.rbt_loc_accrl_amt <> 0 or ssma.rbt_natl_accrl_amt <> 0)

	) a
	inner join xdmadm.time_corp tc on a.max_fyw=tc.fisc_yr_wk
	where tc.clndr_dt >= l_rbt_dt_p1;

	if(l_accruals_dt >= l_rbt_dt_p1) then
		l_return_val := 'Y';
	end if;

	RETURN l_return_val;
END fn_chk_accrls_loaded;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_XDM_SALES_CORP_UPD_REG" (
                                P_IN_DIV_NBR    IN NUMBER,
                                P_IN_SRC_TBL    IN VARCHAR2,
                                P_IN_TGT_TBL    IN VARCHAR2,
                                P_IN_START_DT   IN VARCHAR2,
                                P_IN_END_DT     IN VARCHAR2,
                                p_out_message   IN OUT VARCHAR2) RETURN NUMBER  IS
/*
NAME: FN_XDM_SALES_CORP_UPD_REG
PURPOSE: HISTORICAL UPDATE FOR REGULAR TRANSACTIONS IN XDMADM.SALES_CORP TABLE

    XIW   1. CREATE NEW SALES_CORP SHELL - DBA
          2. INSERT-APPEND INTO NEW SHELL - DW
          3. SWAP TABLES - DBA

          This function requires the following input parameters:
          division number
          source table
          target table
          start date
          end date
*/

   v_return_nbr              NUMBER         := 0;
   v_err_msg                 VARCHAR2(32767) := NULL;
   n_return_code             NUMBER         := 0;
   v_return_message          VARCHAR2(32767) := NULL;

   v_src_cnt                 NUMBER;
   v_src_grs_sls             NUMBER;
   v_src_qty_ship            NUMBER;
   v_src_ttl_dvt             NUMBER;
   v_src_np_alw              NUMBER;
   v_src_np_chrg             NUMBER;
   v_src_prd_alw             NUMBER;
   v_src_prd_chrg            NUMBER;

   v_tgt_cnt                 NUMBER;
   v_tgt_grs_sls             NUMBER;
   v_tgt_qty_ship            NUMBER;
   v_tgt_ttl_dvt             NUMBER;
   v_tgt_np_alw              NUMBER;
   v_tgt_np_chrg             NUMBER;
   v_tgt_prd_alw             NUMBER;
   v_tgt_prd_chrg            NUMBER;

   v_ins_sql1         VARCHAR2(32767);
   v_ins_sql2         VARCHAR2(32767);
   v_ins_sql3          VARCHAR2(32767);
   v_ins_sql4          VARCHAR2(32767);
   v_ins_sql5         VARCHAR2(32767);
   v_ins_sql6         VARCHAR2(32767);

   v_regtxn_sql1          VARCHAR2(32767);
   v_regtxn_sql2         VARCHAR2(32767);
   v_regtxn_sql3         VARCHAR2(32767);
   v_regtxn_sql4         VARCHAR2(32767);
   v_regtxn_sql5         VARCHAR2(32767);
   v_regtxn_sql6    VARCHAR2(32767);

   v_reg_addfilter_sql     VARCHAR2(32767);

   v_div_nbr           NUMBER;
   v_src_tbl           VARCHAR2(50);
   v_tgt_tbl           VARCHAR2(50);
   v_start_dt           VARCHAR2(12) := p_in_start_dt;
   v_end_dt             VARCHAR2(12) := p_in_end_dt;
   v_audt_sql1     VARCHAR2(2000);
   v_audt_sql2     VARCHAR2(2000);

BEGIN

   v_div_nbr  := p_in_div_nbr;
   v_src_tbl  := p_in_src_tbl;
   v_tgt_tbl  := p_in_tgt_tbl;

v_ins_sql1 := 'INSERT /*+ APPEND */ INTO ' || v_tgt_tbl || ' (acct_typ_cd_actl, acct_typ_cd_desc_actl, actl_cst, actl_extnd, actl_gp, adj_markout, alw_chrg_cd, ' ||
 ' ap_cost, ap_gain, ap_vndr_nbr_actl, brk_srchrg, bsis_alw_amt, bsis_alw_applied, bsis_alw_ind, bsis_amt, carr_addr_txt, carr_alt_id, carr_alt_id_typ_cd, ' ||
 ' carr_city_nm, carr_cmnt, carr_cntct, carr_ctry_txt, carr_data_src_cd, carr_dot_nbr, carr_email_txt, carr_eqmt_mark_typ_cd, ' ||
 ' carr_fax_nbr, carr_inv_user_id, carr_motor_carr_nbr, carr_nm, carr_phn_nbr, carr_scac_cd, ';

v_ins_sql2 := ' carr_st_cd, carr_stat_cd, carr_updt_dt, carr_updt_tm, carr_updt_user_id, carr_usf_nbr, carr_zip_cd, cde, cmpny_vndr_nbr_actl, cmsn_sls_extnd, ' ||
 ' cntrct_cpr_amt, cntrct_cpr_amt_ind, cntrct_cpr_bsis, cntrct_cpr_bsis_dt, cntrct_cpr_calc, cntrct_cpr_grp_typ, cntrct_cpr_nbr, cntrct_cpr_prod_grp, ' ||
 ' COMM_BSIS_AMT, corp_dvt_sls_base_rbt, corp_mlt_unit_desc_actl, corp_mlt_unit_nbr_actl, corp_non_dvt_sls_base_rbt, corp_prch_base_rbt, cr_dbt_rsn_cd, ' ||
 ' cr_dbt_rsn_desc, cr_memo_dlr, cr_memo_dt, cr_memo_dwa, cr_memo_nbr, cust_bus_seg_actl, cust_bus_seg_desc_actl, cust_nbr, cust_po_nbr, cust_prod_nbr, ' ||
 ' cust_sk, div_nbr, div_sk, dlvr_rte, dlvr_seq_nbr, drvr, dry_each, dry_unit, dry_wt, dstrct_cd_actl, dstrct_nm_actl, dstrct_sls_mgr_id_actl, ' ||
 ' dstrct_sls_mgr_nm_actl, ';

v_ins_sql3 := ' dvt_cost_extnd, dwa_cost_extnd, each_conv_fctr, END_DAY_CD, each_ord, each_orig, each_prc, each_rsrv, each_ship, extnd_fctr, frght_cost, ' ||
 ' frz_each, frz_unit, frz_wt, gl_sbsys_cd, grs_sls_extnd, inside_pad, inv_actl_gp, inv_dt, inv_gp, inv_nbr, lagp_per_case, ldr, ldr_seq_nbr, ' ||
 ' ldr_tm, lic_prod_extnd, lic_tot_extnd, line_nbr, lnd_actl_gp, lnd_gp, loc_dvt_sls_base_rbt, loc_int_dvt, loc_mlt_unit_desc_actl, loc_mlt_unit_nbr_actl, '||
 ' loc_mrktng_alwnc_pgms, loc_non_dvt_sls_base_rbt, loc_one_tm, loc_prch_base_rbt, loc_prom_alwnc_pgms, loc_vndr_fnd_dvt, lpp, mkt_prod_extnd, ' ||
 ' mkt_tot_extnd, mrgn_bsis, natl_int_dvt, natl_mrktng_alwnc_pgms, natl_one_tm, natl_prom_alwnc_pgms, natl_vndr_fnd_dvt, net_sls_extnd, net_wt_ship, ' ||
 ' non_prod_alwnc, non_prod_alwnc_cd, non_prod_alwnc_desc, non_prod_chrg, non_prod_chrg_cd, non_prod_chrg_desc, ';

v_ins_sql4 := ' ntv_cr_dbt_rsn_cd, ntv_cr_dbt_rsn_desc, ntv_ord_cls, ntv_ord_typ, ord_src, ord_tkr, orig_dwa_cost_extnd, orig_ldr_tm, orig_ord_dt, ' ||
 ' pick_slot_actl, pim_brnd_typ_actl, pim_brnd_typ_desc_actl, pim_cls_desc_actl, pim_cls_id_actl, pim_ctgry_desc_actl, ' ||
 ' pim_ctgry_id_actl, pim_grp_desc_actl, pim_grp_id_actl, pim_sk, pim_suprcls_desc_actl, pim_suprcls_id_actl, pim_usf_std_prod_cd, prc_mrgn, ' ||
 ' prc_src, prch_from_vndr_nbr_actl, prcs_dt, prime_aft_adj_dlr_amt, prime_aft_bsis_adj_amt, prime_aft_bsis_adj_ind, ' ||
 ' prime_bfr_adj_dlr_amt, prime_bfr_bsis_adj_amt, prime_bfr_bsis_adj_ind, prime_calc_ind, prime_cnh_cntrct_nbr, prime_cnh_prc_br_cd, ' ||
 ' prime_cns_cost_pt_mrk, prime_cns_cost_pt_rng, prime_cntrct_calc_bsis_amt, prime_cntrct_each_mrk_amt, prime_cntrct_each_mrk_typ, prime_cntrct_nm, ' ||
 ' prime_cntrct_prod_excpt_ind, prime_cost_by_po_nbr, prime_cust_prc_on_ind, prime_dvt_cost_amt, prime_dvt_cost_aply, prime_dvt_cost_typ, ';

v_ins_sql5 := ' prime_dvtn_grp_nbr, prime_dvtn_grp_nm, prime_extnd_rbl_sis_amt, prime_frght_amt, prime_frght_bsis, prime_hcp_pim_cat, prime_hcp_pim_cls, ' ||
' prime_hcp_pim_grp, prime_hcp_usf_std_prod_cd, prime_min_mrk_amt, prime_mrk_amt, prime_mrk_ind, prime_ord_orig_unit_prc, prime_prc_bsis, ' ||
' prime_prc_bsis_amt, prime_prc_by, prime_prc_cost_tbl_eff_dt, prime_prc_cost_tbl_eff_tm, prime_rbl_sis_amt, prime_rbl_sis_mrgn, prime_rbl_sis_per, ' ||
' prime_rnd_cd, prime_sbtyp_prc_by, prime_sis_flg, prime_updt_cyc, prnt_mlt_unit_cd_actl, prnt_mlt_unit_desc_actl, prod_alw, prod_alwnc_cd, ' ||
' prod_alwnc_desc, prod_chrg, prod_chrg_cd, prod_chrg_desc, prod_nbr, prod_sk, prod_sls_tax, prod_stat_ind_actl, qty_dvt, qty_markout, qty_ord, ' ||
' qty_orig, qty_rsrv, qty_ship, qty_subbed, rcrd_stat, rcvng_po_nbr, ';

v_ins_sql6 := ' rep_cost_extnd, rfrgrt_each, rfrgrt_unit, rfrgrt_wt, rtd_ind, sample_ord_ind, ship_from, ship_to_id, sls_mrgn, sls_uom, srchrg, ' ||
' sub_for, sub_prod_ind, tagp_per_case, tax_typ, tm_sk, trans_typ, trd_cls_actl, trtry_cd_actl, trtry_mgr_id_actl, trtry_mgr_nm_actl, ' ||
' true_gp, true_mfr, ttl_alwnc, ttl_dvt, ttl_int_vndr_fnd_dvt, ttl_loc_alwnc, ttl_natl_alwnc, ttl_vndr_fnd_dvt, unfrm_qty_dvt, ' ||
' unfrm_qty_markout, unfrm_qty_ord, unfrm_qty_orig, unfrm_qty_rsrv, unfrm_qty_ship, unfrm_qty_subbed, unit_ord, unit_orig, unit_prc, ' ||
' unit_rsrv, unit_ship, xfer_from_dt, xfer_to_dt) ';

v_regtxn_sql1 := ' SELECT acct_typ_cd_actl, acct_typ_cd_desc_actl, actl_cst, actl_extnd, actl_gp, adj_markout, alw_chrg_cd, ap_cost, ap_gain, ' ||
' NVL(ap_vndr_nbr_actl,''0000000''), brk_srchrg, bsis_alw_amt, bsis_alw_applied, bsis_alw_ind, bsis_amt, carr_addr_txt, carr_alt_id, carr_alt_id_typ_cd, carr_city_nm, ' ||
' carr_cmnt, carr_cntct, carr_ctry_txt, carr_data_src_cd, carr_dot_nbr, carr_email_txt, carr_eqmt_mark_typ_cd, carr_fax_nbr, carr_inv_user_id, ' ||
' carr_motor_carr_nbr, carr_nm, carr_phn_nbr, carr_scac_cd, carr_st_cd, carr_stat_cd, carr_updt_dt, carr_updt_tm, carr_updt_user_id, ' ||
' carr_usf_nbr, carr_zip_cd, cde, TO_NUMBER(NVL(cmpny_vndr_nbr_actl,0)), cmsn_sls_extnd, ';

v_regtxn_sql2 := ' cntrct_cpr_amt, cntrct_cpr_amt_ind, cntrct_cpr_bsis, cntrct_cpr_bsis_dt, cntrct_cpr_calc, cntrct_cpr_grp_typ, ' ||
' cntrct_cpr_nbr, cntrct_cpr_prod_grp, 0, corp_dvt_sls_base_rbt, corp_mlt_unit_desc_actl, corp_mlt_unit_nbr_actl, corp_non_dvt_sls_base_rbt, ' ||
' corp_prch_base_rbt, cr_dbt_rsn_cd, cr_dbt_rsn_desc, cr_memo_dlr, cr_memo_dt, cr_memo_dwa, cr_memo_nbr, cust_bus_seg_actl, ' ||
' cust_bus_seg_desc_actl, cust_nbr, cust_po_nbr, cust_prod_nbr, cust_sk, div_nbr, div_sk, dlvr_rte, dlvr_seq_nbr, drvr, dry_each, ' ||
' dry_unit, dry_wt, dstrct_cd_actl, dstrct_nm_actl, dstrct_sls_mgr_id_actl, dstrct_sls_mgr_nm_actl, dvt_cost_extnd, dwa_cost_extnd, ' ||
' each_conv_fctr, NULL, each_ord, each_orig, each_prc, each_rsrv, each_ship, extnd_fctr, frght_cost, ';

v_regtxn_sql3 := ' frz_each, frz_unit, frz_wt, gl_sbsys_cd, grs_sls_extnd, inside_pad, inv_actl_gp, inv_dt, inv_gp, inv_nbr, lagp_per_case, ' ||
' ldr, ldr_seq_nbr, ldr_tm, lic_prod_extnd, lic_tot_extnd, line_nbr, lnd_actl_gp, lnd_gp, loc_dvt_sls_base_rbt, loc_int_dvt, loc_mlt_unit_desc_actl, ' ||
' loc_mlt_unit_nbr_actl, loc_mrktng_alwnc_pgms, loc_non_dvt_sls_base_rbt, loc_one_tm, loc_prch_base_rbt, loc_prom_alwnc_pgms, loc_vndr_fnd_dvt, ' ||
' lpp, mkt_prod_extnd, mkt_tot_extnd, mrgn_bsis, natl_int_dvt, natl_mrktng_alwnc_pgms, natl_one_tm, natl_prom_alwnc_pgms, natl_vndr_fnd_dvt, ' ||
' net_sls_extnd, net_wt_ship, non_prod_alwnc, non_prod_alwnc_cd, non_prod_alwnc_desc, non_prod_chrg, non_prod_chrg_cd, non_prod_chrg_desc, ' ||
' ntv_cr_dbt_rsn_cd, ntv_cr_dbt_rsn_desc,  ntv_ord_cls, ntv_ord_typ, ';

v_regtxn_sql4 := ' ord_src, ord_tkr, orig_dwa_cost_extnd, ldr_tm, orig_ord_dt, pick_slot_actl, NVL(pim_brnd_typ_actl,9), ' ||
' NVL(pim_brnd_typ_desc_actl,''UNKNOWN''), NVL(pim_cls_desc_actl,''UNKNOWN''), NVL(pim_cls_id_actl,99999), NVL(pim_ctgry_desc_actl,''UNKNOWN''), ' ||
' NVL(pim_ctgry_id_actl,99999),  NVL(pim_grp_desc_actl,''UNKNOWN''), NVL(pim_grp_id_actl,99999), pim_sk, NVL(pim_suprcls_desc_actl,''UNKNOWN''), ' ||
' NVL(pim_suprcls_id_actl,99999), pim_usf_std_prod_cd, prc_mrgn, prc_src, NVL(prch_from_vndr_nbr_actl,''000000''), prcs_dt, prime_aft_adj_dlr_amt, ' ||
' prime_aft_bsis_adj_amt, prime_aft_bsis_adj_ind, prime_bfr_adj_dlr_amt, prime_bfr_bsis_adj_amt, prime_bfr_bsis_adj_ind, ';

v_regtxn_sql5 := ' prime_calc_ind, prime_cnh_cntrct_nbr, prime_cnh_prc_br_cd, prime_cns_cost_pt_mrk, prime_cns_cost_pt_rng, ' ||
' prime_cntrct_calc_bsis_amt, prime_cntrct_each_mrk_amt, prime_cntrct_each_mrk_typ, prime_cntrct_nm, prime_cntrct_prod_excpt_ind, ' ||
' prime_cost_by_po_nbr, prime_cust_prc_on_ind, prime_dvt_cost_amt, prime_dvt_cost_aply, prime_dvt_cost_typ, prime_dvtn_grp_nbr, prime_dvtn_grp_nm, ' ||
' prime_extnd_rbl_sis_amt, prime_frght_amt, prime_frght_bsis, prime_hcp_pim_cat, prime_hcp_pim_cls, prime_hcp_pim_grp, ' ||
' prime_hcp_usf_std_prod_cd, prime_min_mrk_amt, prime_mrk_amt, prime_mrk_ind, prime_ord_orig_unit_prc, prime_prc_bsis, prime_prc_bsis_amt, ' ||
' prime_prc_by, prime_prc_cost_tbl_eff_dt, prime_prc_cost_tbl_eff_tm, prime_rbl_sis_amt, prime_rbl_sis_mrgn, prime_rbl_sis_per, ' ||
' prime_rnd_cd, prime_sbtyp_prc_by, prime_sis_flg, prime_updt_cyc, prnt_mlt_unit_cd_actl, prnt_mlt_unit_desc_actl, ';

IF v_div_nbr = '9999' THEN
v_regtxn_sql6 := ' prod_alw, prod_alwnc_cd, prod_alwnc_desc, prod_chrg, prod_chrg_cd, prod_chrg_desc, prod_nbr, prod_sk, prod_sls_tax, ' ||
' prod_stat_ind_actl, qty_dvt, qty_markout, qty_ord, qty_orig, qty_rsrv, qty_ship, qty_subbed, rcrd_stat, rcvng_po_nbr, ' ||
' rep_cost_extnd, rfrgrt_each, rfrgrt_unit, rfrgrt_wt, rtd_ind, sample_ord_ind, ship_from, ship_to_id, sls_mrgn, sls_uom, srchrg, ' ||
' sub_for, sub_prod_ind, tagp_per_case, tax_typ, tm_sk, trans_typ, trd_cls_actl, trtry_cd_actl, trtry_mgr_id_actl, trtry_mgr_nm_actl, ' ||
' true_gp, NVL(true_mfr,0), ttl_alwnc, ttl_dvt, ttl_int_vndr_fnd_dvt, ttl_loc_alwnc, ttl_natl_alwnc, ttl_vndr_fnd_dvt, unfrm_qty_dvt, ' ||
' unfrm_qty_markout, unfrm_qty_ord, unfrm_qty_orig, unfrm_qty_rsrv, unfrm_qty_ship, unfrm_qty_subbed, unit_ord, unit_orig, unit_prc, ' ||
' unit_rsrv, unit_ship, xfer_from_dt, xfer_to_dt FROM ' || v_src_tbl || ' WHERE prcs_dt between ''' || v_start_dt || ''' AND ''' || v_end_dt || '''' ||
' AND (trans_typ IN (''WC'',''VS'',''RT'',''CD'',''KS'',''TX'') ' ||
' AND ((PROD_ALWNC_CD IS NULL AND PROD_CHRG_CD IS NULL OR PROD_ALWNC_CD=0 AND PROD_CHRG_CD=0) ' ||
' OR (prod_nbr = ''NPAC0248'') ' ||
' OR ( grs_sls_extnd>0 AND (prod_alw>0 OR prod_chrg >0))) ' ||
' OR (prcs_dt between ''' || v_start_dt || ''' AND ''' || v_end_dt || ''' AND TRANS_TYP=''AN'' AND NVL(GRS_SLS_EXTND,0)<>0 )) ';
ELSE
v_regtxn_sql6 := ' prod_alw, prod_alwnc_cd, prod_alwnc_desc, prod_chrg, prod_chrg_cd, prod_chrg_desc, prod_nbr, prod_sk, prod_sls_tax, ' ||
' prod_stat_ind_actl, qty_dvt, qty_markout, qty_ord, qty_orig, qty_rsrv, qty_ship, qty_subbed, rcrd_stat, rcvng_po_nbr, ' ||
' rep_cost_extnd, rfrgrt_each, rfrgrt_unit, rfrgrt_wt, rtd_ind, sample_ord_ind, ship_from, ship_to_id, sls_mrgn, sls_uom, srchrg, ' ||
' sub_for, sub_prod_ind, tagp_per_case, tax_typ, tm_sk, trans_typ, trd_cls_actl, trtry_cd_actl, trtry_mgr_id_actl, trtry_mgr_nm_actl, ' ||
' true_gp, NVL(true_mfr,0), ttl_alwnc, ttl_dvt, ttl_int_vndr_fnd_dvt, ttl_loc_alwnc, ttl_natl_alwnc, ttl_vndr_fnd_dvt, unfrm_qty_dvt, ' ||
' unfrm_qty_markout, unfrm_qty_ord, unfrm_qty_orig, unfrm_qty_rsrv, unfrm_qty_ship, unfrm_qty_subbed, unit_ord, unit_orig, unit_prc, ' ||
' unit_rsrv, unit_ship, xfer_from_dt, xfer_to_dt FROM ' || v_src_tbl || ' ' ||
' WHERE div_nbr= ' || v_div_nbr ||
' AND prcs_dt between ''' || v_start_dt || ''' AND ''' || v_end_dt || '''' ||
' AND (trans_typ IN (''WC'',''VS'',''RT'',''CD'',''KS'',''TX'') ' ||
' AND ((PROD_ALWNC_CD IS NULL AND PROD_CHRG_CD IS NULL OR PROD_ALWNC_CD=0 AND PROD_CHRG_CD=0) ' ||
' OR (prod_nbr = ''NPAC0248'') ' ||
' OR ( grs_sls_extnd>0 AND (prod_alw>0 OR prod_chrg >0))) ' ||
' OR (prcs_dt between ''' || v_start_dt || ''' AND ''' || v_end_dt || ''' AND TRANS_TYP=''AN'' AND NVL(GRS_SLS_EXTND,0)<>0 )) ';
END IF;

EXECUTE IMMEDIATE v_ins_sql1 || v_ins_sql2 || v_ins_sql3 || v_ins_sql4 || v_ins_sql5 || v_ins_sql6 || v_regtxn_sql1 || v_regtxn_sql2 || v_regtxn_sql3 ||
v_regtxn_sql4 || v_regtxn_sql5 || v_regtxn_sql6 ; --|| v_reg_addfilter_sql ;

COMMIT;

dbms_output.put_line ('STEP 1: Load complete for reg txn');


/*audit process*/
BEGIN

IF v_div_nbr = '9999' THEN --RUN FOR ALL DIVISIONS WITH USE A DATE RANGE THEN
v_audt_sql1 := ' SELECT COUNT(*), SUM(NVL(GRS_SLS_EXTND,0)), SUM(NVL(QTY_SHIP,0)), SUM(NVL(TTL_DVT,0)), SUM(NVL(NON_PROD_ALWNC,0)), SUM(NVL(NON_PROD_CHRG,0)), SUM(NVL(PROD_ALW,0)), SUM(NVL(PROD_CHRG,0)) FROM '|| v_src_tbl ||
              ' where prcs_dt between ''' || v_start_dt || ''' AND ''' || v_end_dt || '''' ||
              ' AND (trans_typ IN (''WC'',''VS'',''RT'',''CD'',''KS'',''TX'') ' ||
              ' AND ((PROD_ALWNC_CD IS NULL AND PROD_CHRG_CD IS NULL OR PROD_ALWNC_CD=0 AND PROD_CHRG_CD=0) ' ||
              ' OR (prod_nbr = ''NPAC0248'') ' ||
              ' OR ( grs_sls_extnd>0 AND (prod_alw>0 OR prod_chrg >0))) ' ||
              ' OR (prcs_dt between ''' || v_start_dt || ''' AND ''' || v_end_dt || ''' AND TRANS_TYP=''AN'' AND NVL(GRS_SLS_EXTND,0)<>0 )) ';

v_audt_sql2 := ' SELECT COUNT(*), SUM(NVL(GRS_SLS_EXTND,0)), SUM(NVL(QTY_SHIP,0)), SUM(NVL(TTL_DVT,0)), SUM(NVL(NON_PROD_ALWNC,0)), SUM(NVL(NON_PROD_CHRG,0)), SUM(NVL(PROD_ALW,0)), SUM(NVL(PROD_CHRG,0)) FROM '|| v_tgt_tbl ||
              ' where prcs_dt between ''' || v_start_dt || ''' AND ''' || v_end_dt || '''' ||
              ' AND (trans_typ IN (''WC'',''VS'',''RT'',''CD'',''KS'',''TX'') ' ||
              ' AND ((PROD_ALWNC_CD IS NULL AND PROD_CHRG_CD IS NULL OR PROD_ALWNC_CD=0 AND PROD_CHRG_CD=0) ' ||
              ' OR (prod_nbr = ''NPAC0248'') ' ||
              ' OR ( grs_sls_extnd>0 AND (prod_alw>0 OR prod_chrg >0))) ' ||
              ' OR (prcs_dt between ''' || v_start_dt || ''' AND ''' || v_end_dt || ''' AND TRANS_TYP=''AN'' AND NVL(GRS_SLS_EXTND,0)<>0 )) ';
ELSE
v_audt_sql1 := ' SELECT COUNT(*), SUM(NVL(GRS_SLS_EXTND,0)), SUM(NVL(QTY_SHIP,0)), SUM(NVL(TTL_DVT,0)), SUM(NVL(NON_PROD_ALWNC,0)), SUM(NVL(NON_PROD_CHRG,0)), SUM(NVL(PROD_ALW,0)), SUM(NVL(PROD_CHRG,0)) FROM '|| v_src_tbl ||
              ' WHERE div_nbr = ' || v_div_nbr ||
              ' AND prcs_dt between ''' || v_start_dt || ''' AND ''' || v_end_dt || '''' ||
              ' AND (trans_typ IN (''WC'',''VS'',''RT'',''CD'',''KS'',''TX'') ' ||
              ' AND ((PROD_ALWNC_CD IS NULL AND PROD_CHRG_CD IS NULL OR PROD_ALWNC_CD=0 AND PROD_CHRG_CD=0) ' ||
              ' OR (prod_nbr = ''NPAC0248'') ' ||
              ' OR ( grs_sls_extnd>0 AND (prod_alw>0 OR prod_chrg >0))) ' ||
              ' OR (prcs_dt between ''' || v_start_dt || ''' AND ''' || v_end_dt || ''' AND TRANS_TYP=''AN'' AND NVL(GRS_SLS_EXTND,0)<>0 )) ';

v_audt_sql2 := ' SELECT COUNT(*), SUM(NVL(GRS_SLS_EXTND,0)), SUM(NVL(QTY_SHIP,0)), SUM(NVL(TTL_DVT,0)), SUM(NVL(NON_PROD_ALWNC,0)), SUM(NVL(NON_PROD_CHRG,0)), SUM(NVL(PROD_ALW,0)), SUM(NVL(PROD_CHRG,0)) FROM '|| v_tgt_tbl ||
             ' WHERE div_nbr = ' || v_div_nbr ||
            ' AND prcs_dt between ''' || v_start_dt || ''' AND ''' || v_end_dt || '''' ||
            ' AND (trans_typ IN (''WC'',''VS'',''RT'',''CD'',''KS'',''TX'') ' ||
            ' AND ((PROD_ALWNC_CD IS NULL AND PROD_CHRG_CD IS NULL OR PROD_ALWNC_CD=0 AND PROD_CHRG_CD=0) ' ||
            ' OR (prod_nbr = ''NPAC0248'') ' ||
            ' OR ( grs_sls_extnd>0 AND (prod_alw>0 OR prod_chrg >0))) ' ||
            ' OR (prcs_dt between ''' || v_start_dt || ''' AND ''' || v_end_dt || ''' AND TRANS_TYP=''AN'' AND NVL(GRS_SLS_EXTND,0)<>0 )) ';
END IF;


EXECUTE IMMEDIATE v_audt_sql1 INTO v_src_cnt, v_src_grs_sls, v_src_qty_ship, v_src_ttl_dvt, v_src_np_alw, v_src_np_chrg, v_src_prd_alw, v_src_prd_chrg;

COMMIT;

dbms_output.put_line ('AUDIT STEP 1: complete first audit');

EXECUTE IMMEDIATE v_audt_sql2 INTO v_tgt_cnt, v_tgt_grs_sls, v_tgt_qty_ship, v_tgt_ttl_dvt, v_tgt_np_alw, v_tgt_np_chrg, v_tgt_prd_alw, v_tgt_prd_chrg;

COMMIT;

dbms_output.put_line ('AUDIT STEP 2: complete second audit');

IF v_src_cnt > 0 THEN
  IF (v_src_cnt = v_tgt_cnt) AND (v_src_grs_sls = v_tgt_grs_sls) AND (v_src_qty_ship = v_tgt_qty_ship) AND (v_src_ttl_dvt = v_tgt_ttl_dvt)
  AND (v_src_np_alw = v_tgt_np_alw) AND (v_src_np_chrg = v_tgt_np_chrg) AND (v_src_prd_alw = v_tgt_prd_alw) AND (v_src_prd_chrg = v_tgt_prd_chrg) THEN
    dbms_output.put_line ('src cnt ' || v_src_cnt || '; tgt cnt ' || v_tgt_cnt || '; ');
    dbms_output.put_line ('src grs_sls ' || v_src_grs_sls || '; tgt grs_sls ' || v_tgt_grs_sls || '; ');
    dbms_output.put_line ('src qty_ship ' || v_src_qty_ship || '; tgt qty_ship ' || v_tgt_qty_ship || '; ');
    dbms_output.put_line ('src ttl_dvt ' || v_src_ttl_dvt || '; tgt ttl_dvt ' || v_tgt_ttl_dvt || '; ');
    dbms_output.put_line ('v_src_np_alw ' || v_src_np_alw || '; v_tgt_np_alw ' || v_tgt_np_alw || '; ');
    dbms_output.put_line ('v_src_np_chrg ' || v_src_np_chrg || '; v_tgt_np_chrg ' || v_tgt_np_chrg || '; ');
    dbms_output.put_line ('v_src_prd_alw ' || v_src_prd_alw || '; v_tgt_prd_alw ' || v_tgt_prd_alw || '; ');
    dbms_output.put_line ('v_src_prd_chrg ' || v_src_prd_chrg || '; v_tgt_prd_chrg ' || v_tgt_prd_chrg || '; ');

    RETURN 0; --Test
  ELSE
    DBMS_OUTPUT.PUT_LINE ('source count ' || v_src_cnt || ' target count ' || v_tgt_cnt || 'source grs sls ' || v_src_grs_sls || 'target grs sls ' ||
    v_tgt_grs_sls || 'source qty ship ' || v_src_qty_ship || 'target qty ship ' || v_tgt_qty_ship || 'source ttl dvt ' || v_src_ttl_dvt ||
    'target ttl dvt ' || v_tgt_ttl_dvt);
    dbms_output.put_line ('v_src_np_alw ' || v_src_np_alw || '; v_tgt_np_alw ' || v_tgt_np_alw || '; ');
    dbms_output.put_line ('v_src_np_chrg ' || v_src_np_chrg || '; v_tgt_np_chrg ' || v_tgt_np_chrg || '; ');
    dbms_output.put_line ('v_src_prd_alw ' || v_src_prd_alw || '; v_tgt_prd_alw ' || v_tgt_prd_alw || '; ');
    dbms_output.put_line ('v_src_prd_chrg ' || v_src_prd_chrg || '; v_tgt_prd_chrg ' || v_tgt_prd_chrg || '; ');
    dbms_output.put_line (v_ins_sql1 || v_ins_sql2 || v_ins_sql3 || v_ins_sql4 || v_ins_sql5 || v_ins_sql6 || v_regtxn_sql1 || v_regtxn_sql2 || v_regtxn_sql3 ||
  v_regtxn_sql4 || v_regtxn_sql5 || v_regtxn_sql6 || v_reg_addfilter_sql);
    RETURN 20;
  END IF;
END IF;
RETURN 0; --Test

END;


  EXCEPTION
    WHEN OTHERS THEN

      p_out_message := '*ERROR in REG historical update script ' || SQLCODE || ' ' ||
                       SQLERRM;
      dbms_output.put_line(SQLCODE);
      dbms_output.put_line(SQLERRM);
      RETURN 20;

--UPDATE STATS, GRANTS, VIEWS, ETC...

END FN_XDM_SALES_CORP_UPD_REG;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_USR_DIV_ACTIVE_VPD" (p_schema       IN VARCHAR2,
                                                 p_objname      IN VARCHAR2)
   RETURN VARCHAR2 AS
   /***********************************************************************
   * Name: FN_USR_DIV_ACTIVE_VPD
   * Type: Function
   * Description: VPD Function to limit divisions based on the user role
   *              role data. Will also exclude inactive divisions.
   *  REVISIONS:
   *  Ver        Date        Author           Description
   *  ---------  ----------  ---------------  ------------------------------------
   *  1.0        09/01/2011  Matt Nicol       Created this function
   ************************************************************************/
   c_start                CONSTANT NUMBER := DBMS_UTILITY.get_time;
   c_fn_nm                CONSTANT VARCHAR2(30) := 'FN_USR_DIV_ACTIVE_VPD';
   l_security_predicate   VARCHAR2(4000) DEFAULT NULL;
   l_cur_sql              VARCHAR2(4000) := SYS_CONTEXT('USERENV', 'CURRENT_SQL');
   l_sbjct_area VARCHAR2(100)
         := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_sbjct_area_attr);
   l_vpd_exempt VARCHAR2(1)
         := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_exempt_attr);
   l_all_divs VARCHAR2(1)
         := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_alldivs_attr);
   l_usr_div_all          VARCHAR2(5);
   l_div_count            NUMBER := 0;
   l_usr_div_date         VARCHAR2(11);
   l_spcl_hndling         VARCHAR2(20) DEFAULT NULL;
   l_div_nbr              NUMBER := 0;
   l_first                BOOLEAN := TRUE;

   CURSOR divs_c(p_user          VARCHAR2,
                 p_sbjct_area    VARCHAR2) IS
      SELECT ud.div_nbr
        FROM ctladm.vw_usr_to_div ud, xdmadm.div_corp dc
       WHERE ud.div_nbr = dc.div_nbr
         AND usr_nm = p_user
         AND sbjct_area IN (p_sbjct_area, 'ALL')
         AND (dc.conv_to_div_nbr IS NULL
           OR dc.conv_on_date > SYSDATE);

   divs_rec               divs_c%ROWTYPE;

   CURSOR all_divs_c IS
      SELECT /*+ NOPARALLEL */
             dc.div_nbr
        FROM xdmadm.div_corp dc
       WHERE dc.conv_to_div_nbr IS NULL
          OR dc.conv_on_date > SYSDATE;

   all_divs_rec           all_divs_c%ROWTYPE;
BEGIN
   --If no subject area context is set then return predicate filtering all data

   IF l_sbjct_area IS NULL THEN
      l_security_predicate   := '1=2';
      ctladm.pkg_vpd_debug_util.vpd_debug('NO SA', c_fn_nm, USER, p_schema, p_objname, l_sbjct_area, l_vpd_exempt,
      l_all_divs, l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   -- Check if user is exempt based on current subject area context
   -- If so, return predicate without any filter

   IF l_vpd_exempt = 'Y' THEN
      l_security_predicate   := '1=1';
      ctladm.pkg_vpd_debug_util.vpd_debug('EXEMPT', c_fn_nm, USER, p_schema, p_objname, l_sbjct_area, l_vpd_exempt,
      l_all_divs, l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   -- Check if user has all division access based on current subject area context
   -- If so, return predicate that excludes inactive divisions

   IF l_all_divs = 'Y' THEN
      SELECT COUNT( * )
        INTO l_div_count
        FROM xdmadm.div_corp dc
       WHERE dc.conv_to_div_nbr IS NULL
          OR dc.conv_on_date > SYSDATE;

      IF l_div_count > 0 THEN
         l_first                := TRUE;

         OPEN all_divs_c;

         LOOP
            FETCH all_divs_c INTO all_divs_rec;

            EXIT WHEN all_divs_c%NOTFOUND;

            IF l_first THEN
               l_security_predicate   := 'DIV_NBR IN (' || all_divs_rec.div_nbr;
               l_first                := FALSE;
            ELSE
               l_security_predicate   := l_security_predicate || ',' || all_divs_rec.div_nbr;
            END IF;
         END LOOP;

         CLOSE all_divs_c;

         l_security_predicate   := l_security_predicate || ')';
      ELSE
         l_security_predicate   := '1=2';
      END IF;

      ctladm.pkg_vpd_debug_util.vpd_debug('ALL DIVS', c_fn_nm, USER, p_schema, p_objname, l_sbjct_area, l_vpd_exempt,
      l_all_divs, l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   SELECT COUNT( * )
     INTO l_div_count
     FROM ctladm.vw_usr_to_div ud, xdmadm.div_corp dc
    WHERE ud.div_nbr = dc.div_nbr
      AND UPPER(ud.usr_nm) = USER
      AND ud.sbjct_area IN (l_sbjct_area, 'ALL')
      AND ud.div_nbr IS NOT NULL
      AND (dc.conv_to_div_nbr IS NULL
        OR dc.conv_on_date > SYSDATE);

   IF l_div_count > 0 THEN
      l_first                := TRUE;

      OPEN divs_c(USER, l_sbjct_area);

      LOOP
         FETCH divs_c INTO divs_rec;

         EXIT WHEN divs_c%NOTFOUND;

         IF l_first THEN
            l_security_predicate   := 'DIV_NBR IN (' || divs_rec.div_nbr;
            l_first                := FALSE;
         ELSE
            l_security_predicate   := l_security_predicate || ',' || divs_rec.div_nbr;
         END IF;
      END LOOP;

      CLOSE divs_c;

      l_security_predicate   := l_security_predicate || ')';
   ELSE
      l_security_predicate   := '1=2';
   END IF;

   ctladm.pkg_vpd_debug_util.vpd_debug('USR DIV', c_fn_nm, USER, p_schema, p_objname, l_sbjct_area, l_vpd_exempt,
   l_all_divs, l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

   RETURN l_security_predicate;
EXCEPTION
   WHEN OTHERS THEN
      l_security_predicate   := '1=2';
      ctladm.pkg_vpd_debug_util.vpd_debug(SQLCODE || '-' || SQLERRM, c_fn_nm, USER, p_schema, p_objname, l_sbjct_area,
      l_vpd_exempt, NULL, l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
END fn_usr_div_active_vpd;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_PYR_SLS_STAT_UPD" (odate IN DATE)
   RETURN NUMBER AS
   /***********************************************************************
    * Name: fn_pyr_sls_stat_upd
    * Type: Function
    * Description: This function will be called once a week after Briefing Books are created on Sunday.
                         The function updates the xdmadm.FACT_LOAD_STAT table with Sunday's Date for Pyramid Segmentation'

    *  REVISIONS:
    *  Ver        Date        Author           Description
    *  ---------  ----------  ---------------  ----------------------------
    *  1.0.       07/23/2013  Wes Holbert               Created this procedure.
    ************************************************************************/
   v_sun_dt                   DATE;
   v_sql                        VARCHAR2(2000);
   e_no_rec_updated     EXCEPTION;

  BEGIN
/*********  Update XDMADM.FACT_LOAD_STAT with Sunday Date.************/
            --Get the most recent Sunday Date
            SELECT TRUNC(NEXT_DAY(to_date(to_char(odate,'yyyymmdd'),'yyyymmdd'),'SUN'))-7 INTO v_sun_dt FROM dual;

            UPDATE xdmadm.fact_load_stat
            SET div_load_ts = TRUNC(v_sun_dt) -- Update with SUN Date
            WHERE fact_table = pkg_sls_pyr.c_aggr_syn_nm;

            IF (sql%ROWCOUNT = 0) THEN
                     RAISE e_no_rec_updated;
            END if;

           COMMIT;
           RETURN 0;

  EXCEPTION
      WHEN E_NO_REC_UPDATED THEN
     DBMS_OUTPUT.put_line('ERROR in the fn_pyr_sls_upd_dt function. No record found in FACT_LOAD_STAT table to update.');
      RETURN 1;
     WHEN OTHERS THEN
     DBMS_OUTPUT.put_line('ERROR in the fn_pyr_sls_upd_dt function. FACT_LOAD_STAT table was not updated with Sunday date.');
      RETURN 1;
END;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_DOLLARS_BY_PYR_SEG_LOAD" (P_IN_ODATE   IN VARCHAR2)
   RETURN NUMBER IS

 /******************************************************************************
   NAME: XDMADM.FN_DOLLARS_BY_PYR_SEG_LOAD
   TYPE: Function
   USAGE:XDMADM.FN_DOLLARS_BY_PYR_SEG_LOAD (P_IN_ODATE )

   PURPOSE:  Function Inserts the  into DOLLARS_BY_PYR_SEG

   REVISIONS:
   Ver        Date                    Description
   ---------  --------------------------------------------------

   1.        09/28/2013              Initial Development

  ******************************************************************************/

  /***************************
  * Variables declaration    *
  ****************************/



    v_const         NUMBER := 2 ;
    v_end_dt        DATE;
    v_strt_dt       DATE;
    v_odate         DATE := to_date(p_in_odate,'YYYYMMDD');
    v_prcs_stp      VARCHAR2(2000);
    v_ldr_tm        NUMBER(20);
    v_out_msg       VARCHAR2(256);

   v_dba_func_msg   VARCHAR2(2000) := 'oXo';
   dml_err_cnt      NUMBER;



   l_start              NUMBER;
   l_end                NUMBER;
   v_table_owner       VARCHAR2(40) := 'XDMADM'; /*-- hardcoded value*/
   v_table_name1        VARCHAR2(40) := 'DOLLARS_BY_PYR_SEG'; /*-- hardcoded value*/


 BEGIN



--******************************************************************************
  --* INSERT INTO XDMADM.DOLLARS_BY_PYR_SEG                                 *
  --******************************************************************************
  BEGIN
       v_prcs_stp := 'INSERT INTO table starts ';
       l_start := DBMS_UTILITY.get_time;

        DBMS_OUTPUT.PUT_LINE('TIME ' || to_char(sysdate, 'yyyymmdd hh24:mi:ss'));

    INSERT  /*+ append */  INTO xdmadm.DOLLARS_BY_PYR_SEG
                                      (
                                        SLS_DIV_NBR               ,
                                        BRNCH_CD                ,
                                        DIV_NBR                 ,
                                        FISC_YR                 ,
                                        FISC_MTH_OF_YR          ,
                                        PYR_SEG_CD              ,
                                        GL_ACCT_CD              ,
                                        CUST_ACCTBLTY_FLG       ,
                                        CUST_NATL_MNGD_FLG      ,
                                        GRS_SLS_EXTND           ,
                                        DWA_COST_EXTND          ,
                                        NATL_ONE_TM             ,
                                        NATL_PROM_ALWNC_PGMS    ,
                                        LOC_MRKTNG_ALWNC_PGMS   ,
                                        LOC_ONE_TM              ,
                                        LOC_PROM_ALWNC_PGMS     ,
                                        NATL_MRKTNG_ALWNC_PGMS  ,
                                        RBT_LOC_ACCRL_AMT       ,
                                        RBT_NATL_ACCRL_AMT      ,
                                        RBT_LOC_EXP_AMT         ,
                                        RBT_NATL_EXP_AMT        ,
                                        LOC_INT_DVT             ,
                                        LOC_VNDR_FND_DVT        ,
                                        NATL_INT_DVT            ,
                                        NATL_VNDR_FND_DVT       ,
                                        TTL_AC                  ,
                                        LDR_TM
                                        )

    SELECT * FROM (
     WITH x1 AS ( SELECT
            sls_div_nbr,
            div_nbr,
            fisc_yr,
            fisc_mth_of_yr,
            pyr_seg_cd,
            gl_acct_cd,
            cust_acctblty_flg,
            cust_natl_mngd_flg,
            SUM(NVL(grs_sls_extnd, 0))          grs_sls_extnd,
            SUM(NVL(dwa_cost_extnd, 0))         dwa_cost_extnd,
            SUM(NVL(natl_one_tm, 0))            natl_one_tm,
            SUM(NVL(natl_prom_alwnc_pgms, 0))   natl_prom_alwnc_pgms,
            SUM(NVL(loc_mrktng_alwnc_pgms, 0))  loc_mrktng_alwnc_pgms,
            SUM(NVL(loc_one_tm, 0))             loc_one_tm,
            SUM(NVL(loc_prom_alwnc_pgms, 0))    loc_prom_alwnc_pgms,
            SUM(NVL( natl_mrktng_alwnc_pgms, 0)) natl_mrktng_alwnc_pgms,
            SUM(NVL(rbt_loc_accrl_amt, 0))       rbt_loc_accrl_amt,
            SUM(NVL(rbt_natl_accrl_amt, 0))      rbt_natl_accrl_amt,
            SUM(NVL(rbt_loc_exp_amt, 0))         rbt_loc_exp_amt,
            SUM(NVL(rbt_natl_exp_amt, 0))        rbt_natl_exp_amt,
            SUM(loc_int_dvt )       loc_int_dvt,
            SUM(loc_vndr_fnd_dvt )  loc_vndr_fnd_dvt,
            SUM(natl_int_dvt)       natl_int_dvt,
            SUM(natl_vndr_fnd_dvt ) natl_vndr_fnd_dvt,
            SUM ( ttl_ac) TTL_AC ,
            LDR_TM
       FROM cases_and_dollars_temp
       group by sls_div_nbr,
            div_nbr,
            fisc_yr,
            fisc_mth_of_yr,
            pyr_seg_cd,
            gl_acct_cd,
            cust_acctblty_flg,
            cust_natl_mngd_flg,
            LDR_TM)  ,
     d1 AS (SELECT div_nbr, brnch_cd
                   FROM xdmadm.div_corp )
       SELECT
                    x1.sls_div_nbr      ,
                    d1.brnch_cd         ,
                    x1.div_nbr          ,
                    x1.fisc_yr          ,
                    x1.fisc_mth_of_yr   ,
                    x1.pyr_seg_cd       ,
                    x1.gl_acct_cd       ,
                    x1.cust_acctblty_flg  ,
                    x1.cust_natl_mngd_flg ,
                    x1.grs_sls_extnd,
                    x1.dwa_cost_extnd,
                    x1.natl_one_tm,
                    x1.natl_prom_alwnc_pgms,
                    x1.loc_mrktng_alwnc_pgms,
                    x1.loc_one_tm,
                    x1.loc_prom_alwnc_pgms,
                    x1.natl_mrktng_alwnc_pgms,
                    x1.rbt_loc_accrl_amt,
                    x1.rbt_natl_accrl_amt,
                    x1.rbt_loc_exp_amt,
                    x1.rbt_natl_exp_amt,
                    x1.loc_int_dvt,
                    x1.loc_vndr_fnd_dvt,
                    x1.natl_int_dvt,
                    x1.natl_vndr_fnd_dvt,
                    x1.TTL_AC ,
                    x1.ldr_tm
                FROM x1, d1
               WHERE x1.sls_div_nbr = d1.div_nbr );


      l_end := DBMS_UTILITY.get_time;


      DBMS_OUTPUT.PUT_LINE('NO OF ROWS INSERTED:' || sql%rowcount ) ;

      DBMS_OUTPUT.PUT_LINE ( round( (l_end - l_start)/100, 2 ) ||' seconds...' );
      COMMIT;
       RETURN 0;
    exception
      WHEN OTHERS
      THEN
        DBMS_OUTPUT.PUT_LINE('Error in v_prcs_stp:'||v_prcs_stp || SQLCODE || SQLERRM );



         RETURN 701;
    END;


   --******************************************************************************
   --* Exception Handling                                                         *
   --******************************************************************************

    EXCEPTION
      WHEN OTHERS
      THEN
     ROLLBACK;
     DBMS_OUTPUT.PUT_LINE(SQLCODE);
     DBMS_OUTPUT.PUT_LINE(SQLERRM);

    DBMS_OUTPUT.put_line('Error in function FN_DOLLARS_BY_PYR_SEG_LOAD');
    RETURN 600;



END FN_DOLLARS_BY_PYR_SEG_LOAD;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_SALES_UNITS_BY_PYRAMID" (odate IN VARCHAR2)
   RETURN NUMBER AS
   v_liner                CHAR(1) := 'L';
   v_gl_acct              VARCHAR2(7);
   v_dept                 VARCHAR2(10);
   v_amt                  NUMBER(16, 2);
   v_amount               VARCHAR2(30);
   v_desc                 VARCHAR2(100);
   v_branch_cd            VARCHAR2(10);
   v_filler               CHAR(1) := '|';
   v_header_rec           VARCHAR2(40);
   v_liner_rec            VARCHAR2(75);
   v_control_rec          VARCHAR2(60);
   v_trunc_ret            NUMBER(3);
   v_out_msg              VARCHAR(200);
   v_select_cnt           NUMBER;
   all_exceptions exception;
   e_truncate_table exception;

   CURSOR c_branch_cd IS
        SELECT DISTINCT brnch_cd
          FROM xdmadm.sales_units_pyr_seg
      ORDER BY brnch_cd; --Cursor to pull each business unit so we create header, line and control records in the flat file

   TYPE r_cursor --Curosr to get the liner records for each business unit
                IS REF CURSOR;

   c_rec                  r_cursor;
   v_jrnl_dt              DATE;
   v_hdr_rec_type         CHAR(1) := 'H';
   v_hdr_jrnl_dt          VARCHAR2(8);
   v_hdr_rev_cd           CHAR(1) := 'N';
   v_hdr_rev_dt           VARCHAR2(8) := '|';
   v_src                  CHAR(3) := 'ST3';
   v_trans_ref_num        VARCHAR2(8) := '|';
   v_ctl_rec_type         CHAR(1) := 'C';
   v_ctl_units            NUMBER(26, 2);
   v_tot_dbt              NUMBER(16, 2) := 0;
   v_ctl_units_chr        VARCHAR2(30);
   v_ctl_lines            VARCHAR2(30);
   v_tbl_owner            VARCHAR2(30) := 'xdmadm';
   v_tbl_nm               VARCHAR2(30) := 'SALES_UNITS_PYR_SEG';
   v_sql                  VARCHAR2(6000);
   v_last_fisc_wk_of_yr   NUMBER;
   v_min_fisc_wk_dt       DATE;
   v_max_fisc_wk_dt       DATE;
BEGIN
   EXECUTE IMMEDIATE 'alter session set nls_date_format = ''YYYYMMDD''';

   SELECT MIN(clndr_dt), MAX(clndr_dt) -- Cursor to get the date ranges of last closed fiscal week of the year
     INTO v_min_fisc_wk_dt, v_max_fisc_wk_dt
     FROM xdmadm.time_corp
    WHERE fisc_yr_wk = (SELECT fisc_yr_wk
                          FROM xdmadm.time_corp
                         WHERE clndr_dt = (SELECT clndr_dt_wkago
                                             FROM xdmadm.time_corp
                                            WHERE clndr_dt = TO_DATE(odate, 'YYYYMMDD')));

   DBMS_OUTPUT.Put_Line( 'Min Date: ' || v_min_fisc_wk_dt );
   DBMS_OUTPUT.Put_Line( 'Max Date: ' || v_max_fisc_wk_dt );

   v_hdr_jrnl_dt   := TO_CHAR(v_max_fisc_wk_dt, 'MMDDYYYY');
   v_jrnl_dt       := v_max_fisc_wk_dt;
   DBMS_OUTPUT.put_line('Truncating the table ' || v_tbl_nm);
   v_trunc_ret     := usfdba.table_pkg.truncate_table(v_out_msg, v_tbl_owner, v_tbl_nm);
   --EXECUTE immediate 'truncate table ' || v_tbl_owner || '.' || v_tbl_nm;
   DBMS_OUTPUT.put_line(v_out_msg);

   IF v_trunc_ret != 0 THEN
      DBMS_OUTPUT.put_line('Error in Truncating ' || v_tbl_nm || ' table');
      RAISE e_truncate_table;
   END IF;

   INSERT INTO xdmadm.sales_units_pyr_seg --Inserting sales units by pyramid segments into SALES_UNITS_PYR_SEG table
                                         (brnch_cd, pyr_seg_cd_actl, gl_account, dept, statistic_amount, descr,
                                          div_typ_cd, journal_dt)
        SELECT brnch_cd,
               pyr_seg_cd_actl,
               gl_account,
               dept,
               ROUND(SUM(statistic_amount), 2) statistic_amount,
               descr,
               div_typ_cd,
               TO_DATE(v_jrnl_dt, 'YYYYMMDD') --saturday of last closed fiscal week
          FROM (SELECT x1.brnch_cd, --jc
                       x1.div_nbr,
                       x1.div_typ_cd,
                       NVL(x2.pyr_seg_cd_actl, 'UNK') pyr_seg_cd_actl,
                       x1.sls_div_nbr,
                       x1.dept,
                       CASE
                          WHEN x1.div_nbr = x1.sls_div_nbr
                           AND x1.div_typ_cd = 'CC'
                           AND x2.delivered_type = 'N' THEN
                             '9010220'
                          ELSE
                             x2.gl_account
                       END
                          gl_account,
                       x1.statistic_amount,
                       x2.descr,
                       x2.delivered_type
                  FROM       (  SELECT NVL(s.sls_revenue_div_nbr, s.div_nbr) sls_div_nbr,
                                       d.brnch_cd,
                                       s.div_nbr,
                                       d.div_typ_cd,
                                       s.pyr_seg_cd_actl,
                                       CASE
                                          WHEN t.fisc_wk_of_prd = 1 THEN '901'
                                          WHEN t.fisc_wk_of_prd = 2 THEN '902'
                                          WHEN t.fisc_wk_of_prd = 3 THEN '903'
                                          WHEN t.fisc_wk_of_prd = 4 THEN '904'
                                          WHEN t.fisc_wk_of_prd = 5 THEN '905'
                                          WHEN t.fisc_wk_of_prd = 6 THEN '906' --Added by MN on 7/8/2014 for 445 project
                                       END
                                          dept,
                                       SUM(s.unfrm_qty_ship) statistic_amount,
                                       CASE WHEN NVL(s.sls_revenue_div_nbr, s.div_nbr) = s.div_nbr THEN 'Y' ELSE 'N' END
                                          delivered_type
                                  FROM xdmadm.sales_corp s, xdmadm.div_corp d, xdmadm.time_corp t
                                 WHERE NVL(s.sls_revenue_div_nbr, s.div_nbr) = d.div_nbr
                                   AND s.prcs_dt = t.clndr_dt
                                   AND s.prcs_dt >= v_min_fisc_wk_dt --Date ranges for last closed fiscal week
                                   AND s.prcs_dt <= v_max_fisc_wk_dt
                                   AND s.xfer_from_dt IS NULL
                                   AND s.trd_cls_actl = '1'
                                   AND (d.div_typ_cd IN ('CC', 'USF') --OR d.DIV_NBR                                = 4165
                                                                      /* Commented to exclude the '4T' branch code division for Hyperion 2014 AOP Local - National project */
                                       )
                              GROUP BY NVL(s.sls_revenue_div_nbr, s.div_nbr),
                                       d.div_typ_cd,
                                       s.div_nbr,
                                       d.brnch_cd,
                                       s.pyr_seg_cd_actl,
                                       t.fisc_wk_of_prd,
                                       CASE WHEN NVL(s.sls_revenue_div_nbr, s.div_nbr) = s.div_nbr THEN 'Y' ELSE 'N' END)
                             x1
                          LEFT OUTER JOIN
                             xdmadm.gl_acct_by_pyr_seg x2
                          ON x1.pyr_seg_cd_actl = x2.pyr_seg_cd_actl
                         AND x1.delivered_type = x2.delivered_type --jc
                       INNER JOIN
                          xdmadm.div_corp x3
                       ON x2.div_typ_cd = x3.div_typ_cd
                      AND NVL(x1.sls_div_nbr, x1.div_nbr) = x3.div_nbr)
      GROUP BY brnch_cd,
               pyr_seg_cd_actl,
               gl_account,
               dept,
               descr,
               div_typ_cd
      ORDER BY brnch_cd,
               pyr_seg_cd_actl,
               gl_account,
               dept,
               descr,
               div_typ_cd;

   COMMIT;

   SELECT COUNT( * ) INTO v_select_cnt FROM xdmadm.sales_units_pyr_seg;

   IF (v_select_cnt = 0) THEN
      DBMS_OUTPUT.put_line('SELECT COUNT FROM SALES IS ZERO. CANNOT CONTINUE.');
      RETURN 1;
   ELSE
      DBMS_OUTPUT.put_line('SELECT COUNT FROM SALES IS ' || v_select_cnt);
   END IF;

   DBMS_OUTPUT.put_line('\n');

   OPEN c_branch_cd;

   LOOP
      FETCH c_branch_cd INTO v_branch_cd;

      EXIT WHEN c_branch_cd%NOTFOUND;
      DBMS_OUTPUT.put_line(   '&'
                           || v_hdr_rec_type
                           || RPAD(v_branch_cd, 5, '|')
                           || v_hdr_jrnl_dt
                           || v_hdr_rev_cd
                           || RPAD(v_hdr_rev_dt, 8, '|')
                           || v_src
                           || RPAD(v_trans_ref_num, 8, '|'));
      DBMS_OUTPUT.put_line('\n');

      OPEN c_rec FOR
           SELECT gl_account,
                  dept,
                  statistic_amount,
                  descr
             FROM xdmadm.sales_units_pyr_seg
            WHERE brnch_cd = v_branch_cd
         ORDER BY brnch_cd, pyr_seg_cd_actl, dept;

      SELECT COUNT( * )
        INTO v_ctl_lines
        FROM xdmadm.sales_units_pyr_seg
       WHERE brnch_cd = v_branch_cd;

      SELECT SUM(statistic_amount)
        INTO v_ctl_units
        FROM xdmadm.sales_units_pyr_seg
       WHERE brnch_cd = v_branch_cd;

      LOOP
         FETCH c_rec
         INTO v_gl_acct,
              v_dept,
              v_amt,
              v_desc;

         EXIT WHEN c_rec%NOTFOUND;

         IF v_amt < 0 THEN
            v_amount   := TO_CHAR(v_amt, 'FM00000000000.00');
         ELSE
            v_amount   := TO_CHAR(v_amt, 'FM000000000000.00');
         END IF;

         DBMS_OUTPUT.put_line(   '&'
                              || v_liner
                              || RPAD(v_branch_cd, 5, '|')
                              || RPAD(v_gl_acct, 10, '|')
                              || RPAD(v_dept, 10, '|')
                              || v_filler
                              || v_amount
                              || RPAD(v_desc, 30, '|'));
         DBMS_OUTPUT.put_line('\n');
      END LOOP;

      IF v_ctl_units < 0 THEN
         v_ctl_units_chr   := TO_CHAR(v_ctl_units, 'FM000000000000000000000.00');
      ELSE
         v_ctl_units_chr   := TO_CHAR(v_ctl_units, 'FM0000000000000000000000.00');
      END IF;

      DBMS_OUTPUT.put_line(   '&'
                           || v_ctl_rec_type
                           || RPAD(v_branch_cd, 5, '|')
                           || v_filler
                           || TO_CHAR(v_tot_dbt, 'FM000000000000.00')
                           || v_filler
                           || v_ctl_units_chr
                           || TO_CHAR(v_ctl_lines, 'FM000000000'));
      DBMS_OUTPUT.put_line('\n');

      CLOSE c_rec;
   END LOOP;

   CLOSE c_branch_cd;

   RETURN 0;
EXCEPTION
   WHEN OTHERS THEN
      DBMS_OUTPUT.put_line(SQLERRM);
      RETURN SQLCODE;
END fn_sales_units_by_pyramid;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_PO_AUDIT_PURGE"
  ( months_to_keep_i   NUMBER    -- number of months to keep on file
  )
-----------------------------------------
-- purges old records from po_hdr_audit and po_dtl_audit
-----------------------------------------
  RETURN NUMBER
  IS
/*********************************************************************
**********************************************************************
** Function:    fn_po_audit_purge                           **
**                                                                  **
**********************************************************************
** Description:  This function purges old records from
**              po_hdr_audit and po_dtl_audit      **
**                                                                  **
** Modifications:                                                   **
**                                                                  **
** Created  By: Arnie Witt        Ver. 1.0          Date: 09/01/16  **
 **********************************************************************
**  Version               Changes Description                       **
**  =======               ===================                       **
**    1.0       Initial release of this function.                   **
 *********************************************************************/

  /**********************************
  **     Variables declaration     **
  **********************************/

    v_message                       VARCHAR2(2054);
    g_how_many                      INTEGER;
    v_sqlcode                       NUMBER;
    g_purge_date                    DATE;
    g_hdr_deletes                   NUMBER;
    g_dtl_deletes                   NUMBER;

 --- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
 -- mainline
  BEGIN
--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
    DBMS_OUTPUT.PUT_LINE('BEGIN at ' || to_char(sysdate, 'yyyymmdd hh24:mi:ss'));
    DBMS_OUTPUT.PUT_LINE('Months to retain: ' || months_to_keep_i);
    g_hdr_deletes  := 0;
    g_dtl_deletes  := 0;
-------------------
-- process the parameter
-------------------
    BEGIN
        select add_months(TRUNC(sysdate), -months_to_keep_i)
        INTO g_purge_date
        from dual;
    EXCEPTION
        WHEN OTHERS THEN
           dbms_output.put_line('INVALID INPUT PARM, JOB ABORTING');
           RETURN 1;
    END;

    DBMS_OUTPUT.PUT_LINE('Purging records prior to: ' || g_purge_date);
    DELETE FROM xdmadm.po_hdr_audit
    WHERE entry_dt < g_purge_date;
    g_hdr_deletes := SQL%ROWCOUNT;

    DELETE FROM xdmadm.po_dtl_audit
    WHERE entry_dt < g_purge_date;
    g_dtl_deletes := SQL%ROWCOUNT;

    DBMS_OUTPUT.PUT_LINE('Hdr Deletes: ' || g_hdr_deletes);
    DBMS_OUTPUT.PUT_LINE('Dtl Deletes: ' || g_dtl_deletes);
    DBMS_OUTPUT.PUT_LINE('END at ' || to_char(sysdate, 'yyyymmdd hh24:mi:ss'));
    COMMIT;
    RETURN 0;
 EXCEPTION
           WHEN OTHERS THEN
                v_sqlcode := SQLCODE;
                v_message :=  ' fn_po_audit_purge sqlerror ' || v_sqlcode || ' ' || SUBSTR(SQLERRM, 1, 75);
                dbms_output.put_line(v_message);
                RETURN 1;
  END fn_po_audit_purge;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_CUST_CLS_WKLY" (v_in_odate IN VARCHAR2)
   RETURN NUMBER IS
   /***********************************************************************
   ** Program Name:  XDMADM.FN_CUST_CLS_WKLY
   **
   ** Description: . This function will reclassify all customers in the
   ** current period by comparing current period sales to same period
   ** last year sales. It truncates and loads XDMADM.CUST_CLSFCTN work table.
   ** Then data from said table is MERGED into XDMADM.CUST_CLSFCTN_CORP
   ** target table.
   **
   ** Called by: DBMXDMCustClsWkly.sh
   **
   ** Input parameter: ODATE  (YYYYMMDD)
   **
   ** Output parameters :
   **
   ** Modification Log
   ** 03-01-2011  MYasay   Created function.
   ** 03-22-2012 CKaczmarek Added update to populated TAGP, DROPS, TAGP_PER_DROPS
   ** 04-25-2012 CKaczmarek Added update populuated NEXT_FISC_MTH_CUST_CLSFCTN

   ** 06-17-2012 CKaczmarek Added Sales Metrics to the Insert statement as well as merge.
   ** The function will now insert a row for every customer that has bought for the last year and a half
   ** for the month that is being processed.  If they do not have sales for this month or last year month
   ** but have had sales within the last year and a half of any other month they will put inserted as OTHER
   ** 03-14-2013 Matt Nicol Added update to populate UNFRM_GRS_TGP, UNFRM_GRS_TGP_PER_DROP, CAT_SOLD,
   ** CUST_TENURE_MTH_ACTL. Also updated DROPS calculation to exclude Admin.
   ** 10/12/2015  p1a0168     Modified for Acquisition
   ** 11/30/2016  Leela     Modified exclusion week 49 to 53 for a 53 week fiscal year
   ** 05/01/2019  Sirish Karpuram Modified Acquisition Data Ledger Change
   ** 05/19/2020  David Li   Modified GROSS_TGP to exclude Auto Shipping Charge(ASC) when ASC_ORD_APLY_IND = 'P'.
   ************************************************************************/

   -- VARIABLES
   v_odate                        DATE := TO_DATE(v_in_odate, 'YYYYMMDD');
   v_end_dt                       DATE;
   v_fisc_mth_strt_dt             DATE;
   v_fisc_mth_end_dt              DATE;
   v_fisc_mth_strt_dt_yrago       DATE;
   v_fisc_mth_end_dt_yrago        DATE;
   v_fisc_yr                      NUMBER(4);
   v_fisc_mth_of_yr               VARCHAR2(2);
   v_fisc_wk_of_yr                NUMBER(2);
   v_py_max_wk                    NUMBER(2);
   v_last_fisc_mth_of_yr          NUMBER;
   v_fisc_yr_last_mth             NUMBER;
   v_last_fisc_mth_strt_dt        DATE;
   v_fisc_yr_mth                  NUMBER;
   v_prd_strt_dt                  DATE;
   v_prd_end_dt                   DATE;
   v_fisc_yr_mth_six_mth_ago      VARCHAR2(18);
   v_fisc_yr_mth_three_mth_ago    VARCHAR2(18);
   v_fisc_mth_strt_dt_6_mth_ago   DATE;
   v_fisc_mth_strt_dt_3_mth_ago   DATE;
   v_fisc_wk_strt_dt              DATE;
   v_fisc_wk_end_dt               DATE;
   v_net_acct_pim_suprcls_id      NUMBER;

   --Cursor to update the last_months clsfctn with this months clsfctn
   CURSOR next_clsfctn(c_last_fisc_mth_strt_dt IN DATE,
                       c_fisc_mth_strt_dt IN DATE) IS
      SELECT c1.cust_sk cust_sk,
             c1.div_nbr div_nbr,
             c1.cust_nbr cust_nbr,
             c1.fisc_yr fisc_yr,
             c1.fisc_mth_of_yr fisc_mth_of_yr,
             c1.fisc_mth_strt_dt fisc_mth_strt_dt,
             c1.cust_clsfctn,
             c2.fisc_mth_of_yr next_fisc_mth_of_yr,
             NVL(c2.cust_clsfctn, 'OTHER') next_fisc_mth_cust_clsfctn,
             c1.nbr_of_wk_ordr_this_yr_mth nbr_of_wk_ordr_this_yr_mth,
             NVL(c2.nbr_of_wk_ordr_this_yr_mth, 0) nbr_of_wk_ordr_next_fisc_mth,
             NVL(c2.unfrm_grs_sls_extnd, 0) next_fmth_unfrm_grs_sls_extnd,
             NVL(c2.unfrm_tagp, 0) next_fmth_unfrm_tagp,
             NVL(c2.unfrm_grs_tgp, 0) next_fmth_unfrm_grs_tgp, --MN 03142013
             NVL(c2.unfrm_qty_ship, 0) next_fmth_unfrm_qty_ship
        FROM xdmadm.cust_clsfctn_corp c1, xdmadm.cust_clsfctn_corp c2
       WHERE c1.div_nbr = c2.div_nbr(+)
         AND c1.cust_nbr = c2.cust_nbr(+)
         AND c1.fisc_mth_strt_dt = v_last_fisc_mth_strt_dt
         AND c1.fisc_wk_of_yr = 0
         AND c2.fisc_mth_strt_dt(+) = v_fisc_mth_strt_dt;

   --Cursor to update the three month clsfctn with this months clsfctn

   CURSOR third_clsfctn(c_fisc_mth_strt_dt_3_mth_ago IN DATE,
                        c_fisc_mth_strt_dt IN DATE) IS
      SELECT c1.cust_sk cust_sk,
             c1.div_nbr div_nbr,
             c1.cust_nbr cust_nbr,
             c1.fisc_yr fisc_yr,
             c1.fisc_mth_of_yr fisc_mth_of_yr,
             c1.fisc_mth_strt_dt fisc_mth_strt_dt,
             c1.cust_clsfctn,
             c2.fisc_mth_of_yr next_fisc_mth_of_yr,
             NVL(c2.cust_clsfctn, 'OTHER') third_fisc_mth_cust_clsfctn
        FROM xdmadm.cust_clsfctn_corp c1, xdmadm.cust_clsfctn_corp c2
       WHERE c1.div_nbr = c2.div_nbr(+)
         AND c1.cust_nbr = c2.cust_nbr(+)
         AND c1.fisc_mth_strt_dt = v_fisc_mth_strt_dt_3_mth_ago
         AND c1.fisc_wk_of_yr = 0
         AND c2.fisc_mth_strt_dt(+) = v_fisc_mth_strt_dt;

   --Cursor to update the sixth month clsfctn with this months clsfctn
   CURSOR sixth_clsfctn(c_fisc_mth_strt_dt_6_mth_ago IN DATE,
                        c_fisc_mth_strt_dt IN DATE) IS
      SELECT c1.cust_sk cust_sk,
             c1.div_nbr div_nbr,
             c1.cust_nbr cust_nbr,
             c1.fisc_yr fisc_yr,
             c1.fisc_mth_of_yr fisc_mth_of_yr,
             c1.fisc_mth_strt_dt fisc_mth_strt_dt,
             c1.cust_clsfctn,
             c2.fisc_mth_of_yr next_fisc_mth_of_yr,
             NVL(c2.cust_clsfctn, 'OTHER') sixth_fisc_mth_cust_clsfctn
        FROM xdmadm.cust_clsfctn_corp c1, xdmadm.cust_clsfctn_corp c2
       WHERE c1.div_nbr = c2.div_nbr(+)
         AND c1.cust_nbr = c2.cust_nbr(+)
         AND c1.fisc_mth_strt_dt = v_fisc_mth_strt_dt_6_mth_ago
         AND c1.fisc_wk_of_yr = 0
         AND c2.fisc_mth_strt_dt(+) = v_fisc_mth_strt_dt;

   --Added For Sprint 7.  Fisc_mth_sos_cnt cursor pdate
   CURSOR sos_cnt IS
        SELECT div_nbr,
               cust_nbr,
               fisc_yr_mth,
               COUNT( * ) AS fisc_mth_sos_cnt
          FROM xdmadm.sos_data s
         WHERE EXISTS (SELECT 1
                         FROM xdmadm.sos_data sd
                        WHERE inact_dt BETWEEN v_fisc_wk_strt_dt AND v_fisc_wk_end_dt
                          AND sd.cust_nbr = s.cust_nbr
                          AND sd.div_nbr = s.div_nbr
                          AND sd.fisc_yr_mth = s.fisc_yr_mth)
      GROUP BY div_nbr, cust_nbr, fisc_yr_mth;

   TYPE t_next_clsfctn IS TABLE OF next_clsfctn%ROWTYPE;

   r_next_clsfctn                 t_next_clsfctn;

   TYPE t_third_clsfctn IS TABLE OF third_clsfctn%ROWTYPE;

   r_third_clsfctn                t_third_clsfctn;

   TYPE t_sixth_clsfctn IS TABLE OF sixth_clsfctn%ROWTYPE;

   r_sixth_clsfctn                t_sixth_clsfctn;

   TYPE t_sos_cnt IS TABLE OF sos_cnt%ROWTYPE;

   r_sos_cnt                      t_sos_cnt;
BEGIN
   -- Get date parameters
   -- ODATE should be a Saturday date which determines the last sales record (based on prcs_dt)
   -- that will be included in the sales comparison for current year sales.
   -- If ODATE does not fall on a Saturday, calculate back to the most recent Saturday date.  This is the last closed week.
   -- Whatever period the Saturday date falls on is the processing period.
   CASE TRIM(TO_CHAR(v_odate, 'DAY'))
      WHEN 'SATURDAY' THEN
         v_end_dt   := v_odate;
      ELSE
         v_end_dt   := TRUNC(v_odate, 'DAY') - 1; -- get the most recent Saturday date
   END CASE;

   SELECT t.fisc_yr, t.fisc_mth_of_yr, t.fisc_yr_mth
     INTO v_fisc_yr, v_fisc_mth_of_yr, v_fisc_yr_mth
     FROM xdmadm.time_corp t
    WHERE t.clndr_dt = v_end_dt;

   SELECT MIN(clndr_dt), MAX(clndr_dt)
     INTO v_prd_strt_dt, v_prd_end_dt
     FROM xdmadm.time_corp
    WHERE fisc_yr_mth = v_fisc_yr_mth;

   SELECT MIN(t.clndr_dt), MAX(t.clndr_dt)
     INTO v_fisc_wk_strt_dt, v_fisc_wk_end_dt
     FROM xdmadm.time_corp t
    WHERE t.fisc_yr_wk IN (SELECT fisc_yr_wk
                             FROM xdmadm.time_corp
                            WHERE clndr_dt = v_end_dt);

   SELECT t.fisc_wk_of_yr
     INTO v_fisc_wk_of_yr
     FROM xdmadm.time_corp t
    WHERE t.clndr_dt = v_odate;

   SELECT MIN(clndr_dt),
          MAX(clndr_dt),
          MIN(clndr_dt_yrago),
          MAX(clndr_dt_yrago)
     INTO v_fisc_mth_strt_dt,
          v_fisc_mth_end_dt,
          v_fisc_mth_strt_dt_yrago,
          v_fisc_mth_end_dt_yrago
     FROM xdmadm.time_corp t
    WHERE t.fisc_yr = v_fisc_yr
      AND t.fisc_mth_of_yr = v_fisc_mth_of_yr;

   SELECT MAX(t.fisc_wk_of_yr)
     INTO v_py_max_wk -- check if prior year has 53 weeks
     FROM xdmadm.time_corp t
    WHERE t.fisc_yr = v_fisc_yr - 1;

   SELECT MAX(fisc_mth_of_yr), MAX(fisc_yr), MIN(clndr_dt)
     INTO v_last_fisc_mth_of_yr, v_fisc_yr_last_mth, v_last_fisc_mth_strt_dt
     FROM xdmadm.time_corp a
    WHERE fisc_yr_mth = (SELECT MAX(a.fisc_yr_mth) --min(fisc_mth_of_yr) fisc_mth_of_yr, max(a.fisc_yr) fisc_yr
                           FROM xdmadm.time_corp a
                          WHERE a.fisc_yr_mth < (SELECT a.fisc_yr_mth
                                                   FROM xdmadm.time_corp a
                                                  WHERE a.clndr_dt = v_end_dt));

   --find fisc_yr_mth 6 months ago for 6 month churn

   SELECT CASE WHEN fisc_mth_of_yr > 6 THEN fisc_yr_mth - 6 ELSE fisc_yr_mth - 94 END
     INTO v_fisc_yr_mth_six_mth_ago
     FROM time_corp
    WHERE clndr_dt = v_end_dt;

   -- find the fisc_mth_strt_dt for 6 month churn

   SELECT MIN(clndr_dt)
     INTO v_fisc_mth_strt_dt_6_mth_ago
     FROM xdmadm.time_corp
    WHERE fisc_yr_mth = v_fisc_yr_mth_six_mth_ago;

   --find fisc_yr_mth 3 months ago for 6 month churn

   SELECT CASE WHEN fisc_mth_of_yr > 3 THEN fisc_yr_mth - 3 ELSE fisc_yr_mth - 91 END
     INTO v_fisc_yr_mth_three_mth_ago
     FROM time_corp
    WHERE clndr_dt = v_end_dt;

   -- find the fisc_mth_strt_dt for 3 month churn

   SELECT MIN(clndr_dt)
     INTO v_fisc_mth_strt_dt_3_mth_ago
     FROM xdmadm.time_corp
    WHERE fisc_yr_mth = v_fisc_yr_mth_three_mth_ago;

   -- Get PIM_SUPRCLS_ID to calculate cat sold MN 03142013
   SELECT param_value_nbr
     INTO v_net_acct_pim_suprcls_id
     FROM xdmadm.param_value
    WHERE app_name = 'MERLIN'
      AND param_type = 'NON_ADMIN_PIM_SUPRCLS_ID'
      AND param_code = 'UPPER_LIMIT';

   -- truncate table
   EXECUTE IMMEDIATE 'TRUNCATE TABLE cust_clsfctn';

   DBMS_OUTPUT.put_line('Table xdmadm.cust_clsfctn truncated ' || SYSTIMESTAMP);

   -- build period classification data
   INSERT INTO xdmadm.cust_clsfctn(cust_nbr, div_nbr, fisc_yr, fisc_mth_of_yr, fisc_wk_of_yr, cust_clsfctn,
                                   fisc_mth_strt_dt, fisc_mth_end_dt, fisc_mth_strt_dt_yrago, fisc_mth_end_dt_yrago, crt_dt, nbr_of_wk_ordr_last_yr_mth,
                                   nbr_of_wk_ordr_this_yr_mth, cust_sk, fisc_yr_mth, tagp, drops, tagp_per_drop,
                                   grs_sls_extnd, qty_ship, unfrm_grs_sls_extnd, unfrm_tagp, unfrm_qty_ship, fisc_mth_sos_cnt,
                                   cat_sold, unfrm_grs_tgp, unfrm_grs_tgp_per_drop, cust_tenure_mth_actl, net_acct_cust_sk)
      SELECT c.cust_nbr,
             c.div_nbr,
             c.fisc_yr,
             c.fisc_mth_of_yr,
             0 AS fisc_wk_of_yr,
             CASE --MN 03142013 changed to no_cd_unfrm
                WHEN no_cd_unfrm_sales_ty > 0
                 AND no_cd_unfrm_sales_ly > 0 THEN
                   'PRIOR YEAR'
                WHEN no_cd_unfrm_sales_ty > 0
                 AND no_cd_unfrm_sales_ly <= 0 THEN
                   'NEW'
                WHEN no_cd_unfrm_sales_ty <= 0
                 AND no_cd_unfrm_sales_ly > 0 THEN
                   'LOST'
                ELSE
                   'OTHER'
             END
                AS cust_clsfctn,
             v_fisc_mth_strt_dt,
             v_fisc_mth_end_dt,
             v_fisc_mth_strt_dt_yrago,
             v_fisc_mth_end_dt_yrago,
             SYSDATE AS crt_dt,
             nbr_wk_ly,
             nbr_wk_ty,
             c.cust_sk,
             c.fisc_yr_mth,
             c.tagp,
             c.drops,
             c.tagp_per_drop,
             c.grs_sls_extnd,
             c.qty_ship,
             c.unfrm_grs_sls_extnd,
             c.unfrm_tagp,
             c.unfrm_qty_ship,
             c.sos_cnt,
             c.cat_sold, --MN 03142013
             c.unfrm_grs_tgp, --MN 03142013
             CASE
                WHEN c.unfrm_grs_tgp <> 0 THEN CASE WHEN drops <> 0 THEN c.unfrm_grs_tgp / c.drops ELSE 0 END
                ELSE NULL
             END
                unfrm_grs_tgp_per_drop, --MN 03142013
             c.cust_tenure_mth_actl, --MN 03142013
             CASE WHEN NVL(net_acct_flg, 'N') = 'Y' THEN c.cust_sk ELSE NULL END net_acct_cust_sk --MN 03142013
        FROM (  SELECT cust_nbr,
                       div_nbr,
                       fisc_yr,
                       fisc_mth_of_yr,
                       SUM(NVL(sales_ty, 0)) AS sales_ty,
                       SUM(NVL(sales_ly, 0)) AS sales_ly,
                       SUM(NVL(no_cd_unfrm_sales_ty, 0)) AS no_cd_unfrm_sales_ty, --MN 03142013
                       SUM(NVL(no_cd_unfrm_sales_ly, 0)) AS no_cd_unfrm_sales_ly, --MN 03142013
                       SUM(NVL(nbr_wk_ly, 0)) nbr_wk_ly,
                       SUM(NVL(nbr_wk_ty, 0)) nbr_wk_ty,
                       cust_sk,
                       fisc_yr_mth,
                       SUM(NVL(tagp, 0)) tagp,
                       SUM(NVL(drops, 0)) drops,
                       SUM(NVL(tagp_per_drop, 0)) tagp_per_drop,
                       SUM(NVL(grs_sls_extnd, 0)) grs_sls_extnd,
                       SUM(NVL(qty_ship, 0)) qty_ship,
                       SUM(NVL(unfrm_grs_sls_extnd, 0)) unfrm_grs_sls_extnd,
                       SUM(NVL(unfrm_tagp, 0)) unfrm_tagp,
                       SUM(NVL(unfrm_qty_ship, 0)) unfrm_qty_ship,
                       SUM(NVL(sos_cnt, 0)) sos_cnt,
                       MAX(NVL(cat_sold, 0)) cat_sold, --MN 03142013
                       SUM(NVL(unfrm_grs_tgp, 0)) unfrm_grs_tgp, --MN 03142013
                       cust_tenure_mth_actl, --MN 03142013
                       MAX(NVL(net_acct_flg, 0)) net_acct_flg --MN 03142013
                  FROM (SELECT cust_list.cust_nbr,
                               cust_list.div_nbr,
                               cust_list.fisc_yr,
                               cust_list.fisc_mth_of_yr,
                               CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr THEN NVL(cust_sales_ty_ly.grs_sls_extnd, 0)
                                  ELSE 0
                               END
                                  sales_ty,
                               CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr - 1 THEN
                                     NVL(cust_sales_ty_ly.grs_sls_extnd, 0)
                                  ELSE
                                     0
                               END
                                  sales_ly,
                               CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr THEN
                                     NVL(cust_sales_ty_ly.no_cd_unfrm_grs_sls_extnd, 0)
                                  ELSE
                                     0
                               END
                                  no_cd_unfrm_sales_ty, --MN 03142013
                               CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr - 1 THEN
                                     NVL(cust_sales_ty_ly.no_cd_unfrm_grs_sls_extnd, 0)
                                  ELSE
                                     0
                               END
                                  no_cd_unfrm_sales_ly, --MN 03142013
                               CASE WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr - 1 THEN cust_sales_ty_ly.nbr_wk END
                                  nbr_wk_ly,
                               CASE WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr THEN cust_sales_ty_ly.nbr_wk END nbr_wk_ty,
                               cust_list.cust_sk,
                               cust_list.fisc_yr_mth,
                               cust_list.cust_tenure_mth_actl, --MN 03142013
                               CASE WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr THEN cust_sales_ty_ly.tagp END tagp, --Sprint 7
                               CASE WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr THEN cust_sales_ty_ly.drops END drops, --Sprint 7
                               CASE WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr THEN cust_sales_ty_ly.tagp_per_drop END
                                  tagp_per_drop, --Sprint 7
                               CASE WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr THEN cust_sales_ty_ly.grs_sls_extnd END
                                  grs_sls_extnd, --Sprint 7
                               CASE WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr THEN cust_sales_ty_ly.qty_ship END qty_ship, --Sprint 7
                               CASE
                                  WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr THEN cust_sales_ty_ly.unfrm_grs_sls_extnd
                               END
                                  unfrm_grs_sls_extnd, --Sprint 7
                               CASE WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr THEN cust_sales_ty_ly.unfrm_tagp END
                                  unfrm_tagp, --Sprint 7
                               CASE WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr THEN cust_sales_ty_ly.unfrm_qty_ship END
                                  unfrm_qty_ship, --Sprint 7
                               CASE WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr THEN sos_cnt.sos_cnt END sos_cnt, --Sprint 7
                               CASE WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr THEN cust_sales_ty_ly.unfrm_grs_tgp END
                                  unfrm_grs_tgp, --MN 03142013
                               CASE WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr THEN cust_sales_ty_ly.cat_sold END cat_sold, --MN 03142013
                               CASE WHEN cust_sales_ty_ly.fisc_yr = v_fisc_yr THEN cust_sales_ty_ly.net_acct_flg END net_acct_flg --MN 03142013
                          FROM (SELECT DISTINCT cc.cust_sk,
                                                s.div_nbr,
                                                s.cust_nbr,
                                                --t.fisc_wk_of_prd,
                                                v_fisc_yr AS fisc_yr,
                                                v_fisc_mth_of_yr AS fisc_mth_of_yr,
                                                v_fisc_yr_mth AS fisc_yr_mth,
                                                (SELECT COUNT(fisc_yr_mth) - 2
                                                   FROM xdmadm.prd_time_corp
                                                  WHERE fisc_yr_mth BETWEEN cc.first_rt_fisc_yr_mth AND v_fisc_yr_mth)
                                                   cust_tenure_mth_actl --MN 03142013
                                  FROM xdmadm.time_corp t,
                                       xdmadm.sales_corp s,
                                       xdmadm.div_corp d,
                                       xdmadm.cust_corp cc
                                 WHERE t.fisc_yr IN (v_fisc_yr - 1, v_fisc_yr)
                                   --AND t.fisc_mth_of_yr = v_fisc_mth_of_yr  Made change for Sprint 7 to add customer who had sales for one plus current year
                                   AND s.prcs_dt = t.clndr_dt
                                   AND s.div_nbr = d.div_nbr
                                   AND s.cust_nbr = cc.cust_nbr
                                   AND s.div_nbr = cc.div_nbr
                                   AND s.xfer_to_dt IS NULL
                                   AND (d.conv_to_div_nbr IS NULL
                                     OR d.conv_on_date > SYSDATE)) cust_list,
                               (  SELECT cust_nbr,
                                         div_nbr,
                                         fisc_yr_mth,
                                         COUNT(sos_id) sos_cnt -- sprint 7 added sos_cnt for each fisc_mth being processed
                                    FROM xdmadm.sos_data
                                   WHERE fisc_yr_mth = v_fisc_yr_mth
                                     AND inact_dt IS NULL
                                GROUP BY cust_nbr, div_nbr, fisc_yr_mth) sos_cnt,
                               (  SELECT s.div_nbr,
                                         s.cust_nbr,
                                         t.fisc_yr,
                                         t.fisc_mth_of_yr AS fisc_mth_of_yr,
                                         t.fisc_yr_mth AS fisc_yr_mth,
                                         COUNT(DISTINCT t.fisc_wk_of_prd) nbr_wk,
                                         SUM(NVL(s.actl_gp, 0)) tagp,
                                         COUNT(
                                            DISTINCT CASE
                                                        WHEN s.trans_typ = 'RT'
                                                         AND p.pim_suprcls_id <> 97
                                                         AND p.pim_suprcls_id IS NOT NULL THEN
                                                           s.div_nbr || cust_nbr || inv_dt || NVL(dlvr_rte, '') || prcs_dt
                                                        ELSE
                                                           NULL
                                                     END)
                                            drops, --MN 03142013
                                         CASE
                                            WHEN COUNT(
                                                    DISTINCT CASE
                                                                WHEN s.trans_typ = 'RT'
                                                                 AND p.pim_suprcls_id <> 97
                                                                 AND p.pim_suprcls_id IS NOT NULL THEN
                                                                      s.div_nbr
                                                                   || cust_nbr
                                                                   || inv_dt
                                                                   || NVL(dlvr_rte, '')
                                                                   || prcs_dt
                                                                ELSE
                                                                   NULL
                                                             END) > 0 THEN
                                               SUM(NVL(s.actl_gp, 0))
                                               / COUNT(
                                                    DISTINCT CASE
                                                                WHEN s.trans_typ = 'RT'
                                                                 AND p.pim_suprcls_id <> 97
                                                                 AND p.pim_suprcls_id IS NOT NULL THEN
                                                                      s.div_nbr
                                                                   || cust_nbr
                                                                   || inv_dt
                                                                   || NVL(dlvr_rte, '')
                                                                   || prcs_dt
                                                                ELSE
                                                                   NULL
                                                             END)
                                            ELSE
                                               0
                                         END
                                            tagp_per_drop,
                                         SUM(grs_sls_extnd) AS grs_sls_extnd,
                                         SUM(CASE
                                                WHEN s.trans_typ IN ('RT', 'VS', 'WC')
                                                 AND p.pim_suprcls_id <> 97
                                                 AND p.pim_suprcls_id IS NOT NULL THEN
                                                   s.grs_sls_extnd
                                                ELSE
                                                   NULL
                                             END)
                                            no_cd_unfrm_grs_sls_extnd, --MN 03142013
                                         SUM(qty_ship) AS qty_ship, --Sprint 7
                                         SUM(unfrm_qty_ship) unfrm_qty_ship, --Sprint 7
                                         SUM(CASE
                                                WHEN p.pim_suprcls_id <> 97
                                                 AND p.pim_suprcls_id IS NOT NULL THEN
                                                   grs_sls_extnd
                                                ELSE
                                                   0
                                             END)
                                            unfrm_grs_sls_extnd, --Sprint 7
                                         SUM(CASE
                                                WHEN p.pim_suprcls_id <> 97
                                                 AND p.pim_suprcls_id IS NOT NULL THEN
                                                   actl_gp
                                                ELSE
                                                   0
                                             END)
                                            unfrm_tagp, --Sprint 7
                                         SUM(CASE
                                                WHEN p.pim_suprcls_id <> 97
                                                 AND p.pim_suprcls_id IS NOT NULL THEN
                                                   NVL(s.grs_sls_extnd - s.dwa_cost_extnd - (CASE WHEN s.ASC_ORD_APLY_IND = 'P' THEN NVL(s.ASC_EXTND_AMT,0) ELSE 0 END) + s.ttl_vndr_fnd_dvt, 0)
                                                ELSE
                                                   0
                                             END)
                                            unfrm_grs_tgp, --MN 03142013
                                         COUNT(DISTINCT (CASE
                                                            WHEN s.trans_typ IN ('RT', 'VS', 'WC')
                                                             AND p.pim_suprcls_id <= v_net_acct_pim_suprcls_id THEN
                                                               p.pim_suprcls_id
                                                            ELSE
                                                               NULL
                                                         END))
                                            cat_sold, --MN 03142013
                                         MAX(CASE
                                                WHEN s.trans_typ IN ('RT', 'VS', 'WC')
                                                 AND p.pim_suprcls_id <> 97
                                                 AND p.pim_suprcls_id IS NOT NULL THEN
                                                   'Y'
                                                ELSE
                                                   'N'
                                             END)
                                            net_acct_flg --MN 03142013
                                    FROM xdmadm.time_corp t,
                                         xdmadm.sales_corp s,
                                         xdmadm.div_corp d,
                                         xdmadm.div_corp d2,
                                         xdmadm.pim_corp p
                                   WHERE t.fisc_yr IN (v_fisc_yr, v_fisc_yr - 1)
                                     AND t.fisc_mth_of_yr = v_fisc_mth_of_yr
                                     AND s.pim_usf_std_prod_cd = p.pim_usf_std_prod_cd
                                     AND t.fisc_wk_of_yr <> CASE
                                                               WHEN t.fisc_yr = v_fisc_yr - 1
                                                                AND v_fisc_mth_of_yr = '12'
                                                                AND v_py_max_wk = 53 THEN
                                                                  53 -- *** WEEK 52-53 LOGIC *** exclude week #53 from last year if current period=12 and last year has 53 weeks
                                                               ELSE
                                                                  99 -- else, include all weeks
                                                            END
                                     AND t.clndr_dt <= v_end_dt -- process only sales up to the last closed week
                                     AND s.prcs_dt = t.clndr_dt
                                     AND s.div_nbr = d.div_nbr
                                     AND (d.conv_to_div_nbr IS NULL
                                       OR d.conv_on_date > SYSDATE)
                                     AND s.xfer_to_dt IS NULL
                                     AND NVL(s.sls_revenue_div_nbr, s.div_nbr) = d2.div_nbr
                                     AND d2.div_typ_cd <> 'CC'
									 AND  (case when NVL (d2.acqstn_cmpny_nm,'USF') <> 'USF'  --- 20190501 Modified Acquisition Data Ledger Filter
								     and NVL(s.sls_revenue_div_nbr, s.div_nbr) = d2.div_nbr
									 and s.prcs_dt < NVL(d2.acqstn_dt,s.prcs_dt)
									 then 'NON_USFGL' else 'USFGL' END) ='USFGL'
									-- AND NVL (d2.acqstn_cmpny_nm,'USF') = 'USF'  --Modified for Acquisition (Commented out on 20190501)
                                GROUP BY s.div_nbr,
                                         s.cust_nbr,
                                         t.fisc_yr,
                                         t.fisc_mth_of_yr,
                                         t.fisc_yr_mth) cust_sales_ty_ly -- inline view to get cust/div sales this year and last year
                         WHERE cust_list.cust_nbr = cust_sales_ty_ly.cust_nbr(+) -- left outer join this year and last year sales views to cust/div view
                           AND cust_list.div_nbr = cust_sales_ty_ly.div_nbr(+) -- outer join allows return of all cust/div even when no sales in that year
                           AND cust_list.fisc_mth_of_yr = cust_sales_ty_ly.fisc_mth_of_yr(+)
                           AND cust_list.fisc_yr_mth = sos_cnt.fisc_yr_mth(+)
                           AND cust_list.cust_nbr = sos_cnt.cust_nbr(+)
                           AND cust_list.div_nbr = sos_cnt.div_nbr(+))
              GROUP BY cust_sk,
                       cust_nbr,
                       div_nbr,
                       fisc_yr,
                       fisc_mth_of_yr,
                       fisc_yr_mth,
                       cust_tenure_mth_actl) c;

   COMMIT;

   DBMS_OUTPUT.put_line('Table xdmadm.cust_clsfctn loaded ' || SYSTIMESTAMP);

   -- merge period classification data to target table
   MERGE INTO xdmadm.cust_clsfctn_corp tgt
        USING (SELECT cust_nbr,
                      div_nbr,
                      fisc_yr,
                      fisc_mth_of_yr,
                      fisc_wk_of_yr,
                      cust_clsfctn,
                      fisc_mth_strt_dt,
                      fisc_mth_end_dt,
                      fisc_mth_strt_dt_yrago,
                      fisc_mth_end_dt_yrago,
                      crt_dt,
                      nbr_of_wk_ordr_last_yr_mth,
                      nbr_of_wk_ordr_this_yr_mth,
                      cust_sk,
                      fisc_yr_mth,
                      tagp,
                      drops,
                      tagp_per_drop,
                      grs_sls_extnd,
                      qty_ship,
                      unfrm_grs_sls_extnd,
                      unfrm_tagp,
                      unfrm_qty_ship,
                      fisc_mth_sos_cnt, --Sprint 7 added measures and fisc_mth_sos_cnt
                      cat_sold,
                      unfrm_grs_tgp,
                      unfrm_grs_tgp_per_drop,
                      cust_tenure_mth_actl,
                      net_acct_cust_sk
                 FROM xdmadm.cust_clsfctn) src
           ON (tgt.cust_nbr = src.cust_nbr
           AND tgt.div_nbr = src.div_nbr
           AND tgt.fisc_yr = src.fisc_yr
           AND tgt.fisc_mth_of_yr = src.fisc_mth_of_yr
           AND tgt.fisc_wk_of_yr = src.fisc_wk_of_yr)
   WHEN MATCHED THEN
      UPDATE SET tgt.cust_clsfctn                 = src.cust_clsfctn,
                 tgt.fisc_mth_strt_dt             = src.fisc_mth_strt_dt,
                 tgt.fisc_mth_end_dt              = src.fisc_mth_end_dt,
                 tgt.fisc_mth_strt_dt_yrago       = src.fisc_mth_strt_dt_yrago,
                 tgt.fisc_mth_end_dt_yrago        = src.fisc_mth_end_dt_yrago,
                 tgt.upd_dt                       = (    SELECT SYSDATE FROM DUAL),
                 tgt.tagp                         = src.tagp,
                 tgt.drops                        = src.drops,
                 tgt.tagp_per_drop                = src.tagp_per_drop,
                 tgt.nbr_of_wk_ordr_last_yr_mth   = src.nbr_of_wk_ordr_last_yr_mth,
                 tgt.nbr_of_wk_ordr_this_yr_mth   = src.nbr_of_wk_ordr_this_yr_mth,
                 tgt.grs_sls_extnd                = src.grs_sls_extnd,
                 tgt.qty_ship                     = src.qty_ship,
                 tgt.unfrm_grs_sls_extnd          = src.unfrm_grs_sls_extnd,
                 tgt.unfrm_tagp                   = src.unfrm_tagp,
                 tgt.unfrm_qty_ship               = src.unfrm_qty_ship,
                 tgt.fisc_mth_sos_cnt             = src.fisc_mth_sos_cnt,
                 tgt.cat_sold                     = src.cat_sold, --MN 03142013
                 tgt.unfrm_grs_tgp                = src.unfrm_grs_tgp, --MN 03142013
                 tgt.unfrm_grs_tgp_per_drop       = src.unfrm_grs_tgp_per_drop, --MN 03142013
                 tgt.cust_tenure_mth_actl         = src.cust_tenure_mth_actl, --MN 03142013
                 tgt.net_acct_cust_sk             = src.net_acct_cust_sk --MN 03142013
   WHEN NOT MATCHED THEN
      INSERT            (cust_sk, cust_nbr, div_nbr, fisc_yr, fisc_mth_of_yr, fisc_yr_mth,
                         fisc_wk_of_yr, cust_clsfctn, fisc_mth_strt_dt, fisc_mth_end_dt, fisc_mth_strt_dt_yrago, fisc_mth_end_dt_yrago,
                         crt_dt, tagp, drops, tagp_per_drop, nbr_of_wk_ordr_last_yr_mth, nbr_of_wk_ordr_this_yr_mth,
                         grs_sls_extnd, qty_ship, unfrm_grs_sls_extnd, unfrm_tagp, unfrm_qty_ship, fisc_mth_sos_cnt,
                         cat_sold, unfrm_grs_tgp, unfrm_grs_tgp_per_drop, cust_tenure_mth_actl, net_acct_cust_sk)
          VALUES (src.cust_sk,
                  src.cust_nbr,
                  src.div_nbr,
                  src.fisc_yr,
                  src.fisc_mth_of_yr,
                  src.fisc_yr_mth,
                  src.fisc_wk_of_yr,
                  src.cust_clsfctn,
                  src.fisc_mth_strt_dt,
                  src.fisc_mth_end_dt,
                  src.fisc_mth_strt_dt_yrago,
                  src.fisc_mth_end_dt_yrago,
                  src.crt_dt,
                  src.tagp,
                  src.drops,
                  src.tagp_per_drop,
                  src.nbr_of_wk_ordr_last_yr_mth,
                  src.nbr_of_wk_ordr_this_yr_mth,
                  src.grs_sls_extnd,
                  src.qty_ship,
                  src.unfrm_grs_sls_extnd,
                  src.unfrm_tagp,
                  src.unfrm_qty_ship,
                  src.fisc_mth_sos_cnt,
                  src.cat_sold, --MN 03142013
                  src.unfrm_grs_tgp, --MN 03142013
                  src.unfrm_grs_tgp_per_drop, --MN 03142013
                  src.cust_tenure_mth_actl, --MN 03142013
                  src.net_acct_cust_sk); --MN 03142013

   COMMIT;

   -- delete the NULL classification records created during the open week
   DELETE FROM xdmadm.cust_clsfctn_corp
         WHERE fisc_mth_strt_dt = v_fisc_mth_strt_dt
           --AND fisc_yr = v_fisc_yr
           --AND fisc_mth_of_yr = v_fisc_mth_of_yr
           AND fisc_wk_of_yr = v_fisc_wk_of_yr
           AND cust_clsfctn IS NULL;

   -- Sprint 7 added update for sos_cnt
   OPEN sos_cnt;

   LOOP
      EXIT WHEN sos_cnt%NOTFOUND;

      FETCH sos_cnt
      BULK COLLECT INTO r_sos_cnt
      LIMIT 10000;

      FORALL i IN 1 .. r_sos_cnt.COUNT()
         UPDATE /*+ use_invisible_indexes */
               xdmadm.cust_clsfctn_corp b
            SET fisc_mth_sos_cnt   = r_sos_cnt(i).fisc_mth_sos_cnt
          WHERE b.div_nbr = r_sos_cnt(i).div_nbr
            AND b.cust_nbr = r_sos_cnt(i).cust_nbr
            AND b.fisc_yr_mth = r_sos_cnt(i).fisc_yr_mth;
   END LOOP;

   CLOSE sos_cnt;

   DBMS_OUTPUT.put_line('Fisc_mth_cnt Rows are updated' || ' ' || sql%ROWCOUNT);
   COMMIT;

   -- Only Process NEXT_FISC_MTH_CUST_CLSFCTN, THIRD_MTH_CUST_CLSFCTN, SIXTH_MTH_CUST_CLSFCTN on the last closed day of the month

   IF v_odate = v_prd_end_dt THEN
      DBMS_OUTPUT.put_line('Processing End of Month Next_fisc_mth_cust_Clsfctn Update' || SYSTIMESTAMP);
      DBMS_OUTPUT.put_line(   'Processing Fisc_Mth_Strt_dt_Last_Month: '
                           || v_last_fisc_mth_strt_dt
                           || ' Fisc_Mth_Strt_dt: '
                           || v_fisc_mth_strt_dt
                           || SYSTIMESTAMP);

      OPEN next_clsfctn(v_last_fisc_mth_strt_dt, v_fisc_mth_strt_dt);

      LOOP
         EXIT WHEN next_clsfctn%NOTFOUND;

         FETCH next_clsfctn
         BULK COLLECT INTO r_next_clsfctn
         LIMIT 10000;

         FORALL i IN 1 .. r_next_clsfctn.COUNT()
            UPDATE /*+ use_invisible_indexes */
                  xdmadm.cust_clsfctn_corp b
               SET next_fisc_mth_cust_clsfctn      = r_next_clsfctn(i).next_fisc_mth_cust_clsfctn,
                   nbr_of_wk_ordr_next_fisc_mth    = r_next_clsfctn(i).nbr_of_wk_ordr_next_fisc_mth,
                   next_fmth_unfrm_grs_sls_extnd   = r_next_clsfctn(i).next_fmth_unfrm_grs_sls_extnd,
                   next_fmth_unfrm_tagp            = r_next_clsfctn(i).next_fmth_unfrm_tagp,
                   next_fmth_unfrm_qty_ship        = r_next_clsfctn(i).next_fmth_unfrm_qty_ship,
                   next_fmth_unfrm_grs_tgp         = r_next_clsfctn(i).next_fmth_unfrm_grs_tgp --MN 03142013
             WHERE b.div_nbr = r_next_clsfctn(i).div_nbr
               AND b.cust_nbr = r_next_clsfctn(i).cust_nbr
               AND b.fisc_mth_strt_dt = r_next_clsfctn(i).fisc_mth_strt_dt
               AND b.cust_sk = r_next_clsfctn(i).cust_sk;
      END LOOP;

      CLOSE next_clsfctn;

      DBMS_OUTPUT.put_line('Next Fisc Mth Cust Clsfctn Rows Updated' || ' ' || sql%ROWCOUNT);
      COMMIT;

      DBMS_OUTPUT.put_line('Processing End of Month Third_fisc_mth_cust_Clsfctn Update' || SYSTIMESTAMP);
      DBMS_OUTPUT.put_line(   'Processing Fisc_Mth_Strt_dt_Third_Month_Ago: '
                           || v_fisc_mth_strt_dt_3_mth_ago
                           || ' Fisc_Mth_Strt_dt: '
                           || v_fisc_mth_strt_dt
                           || SYSTIMESTAMP);

      OPEN third_clsfctn(v_fisc_mth_strt_dt_6_mth_ago, v_fisc_mth_strt_dt);

      LOOP
         EXIT WHEN third_clsfctn%NOTFOUND;

         FETCH third_clsfctn
         BULK COLLECT INTO r_third_clsfctn
         LIMIT 10000;

         FORALL i IN 1 .. r_third_clsfctn.COUNT()
            UPDATE /*+ use_invisible_indexes */
                  xdmadm.cust_clsfctn_corp b
               SET third_fisc_mth_cust_clsfctn   = r_third_clsfctn(i).third_fisc_mth_cust_clsfctn
             WHERE b.div_nbr = r_third_clsfctn(i).div_nbr
               AND b.cust_nbr = r_third_clsfctn(i).cust_nbr
               AND b.fisc_mth_strt_dt = r_third_clsfctn(i).fisc_mth_strt_dt
               AND b.cust_sk = r_third_clsfctn(i).cust_sk;
      END LOOP;

      CLOSE third_clsfctn;

      DBMS_OUTPUT.put_line('Third Fisc Mth Cust Clsfctn Rows Updated' || ' ' || sql%ROWCOUNT);
      COMMIT;

      DBMS_OUTPUT.put_line('Processing End of Month Sixth_fisc_mth_cust_Clsfctn Update' || SYSTIMESTAMP);
      DBMS_OUTPUT.put_line(   'Processing Fisc_Mth_Strt_dt_Sixth_Month_Ago: '
                           || v_fisc_mth_strt_dt_6_mth_ago
                           || ' Fisc_Mth_Strt_dt: '
                           || v_fisc_mth_strt_dt
                           || SYSTIMESTAMP);

      OPEN sixth_clsfctn(v_fisc_mth_strt_dt_6_mth_ago, v_fisc_mth_strt_dt);

      LOOP
         EXIT WHEN sixth_clsfctn%NOTFOUND;

         FETCH sixth_clsfctn
         BULK COLLECT INTO r_sixth_clsfctn
         LIMIT 10000;

         FORALL i IN 1 .. r_sixth_clsfctn.COUNT()
            UPDATE /*+ use_invisible_indexes */
                  xdmadm.cust_clsfctn_corp b
               SET sixth_fisc_mth_cust_clsfctn   = r_sixth_clsfctn(i).sixth_fisc_mth_cust_clsfctn
             WHERE b.div_nbr = r_sixth_clsfctn(i).div_nbr
               AND b.cust_nbr = r_sixth_clsfctn(i).cust_nbr
               AND b.fisc_mth_strt_dt = r_sixth_clsfctn(i).fisc_mth_strt_dt
               AND b.cust_sk = r_sixth_clsfctn(i).cust_sk;
      END LOOP;

      CLOSE sixth_clsfctn;

      DBMS_OUTPUT.put_line('Sixth Fisc Mth Cust Clsfctn Rows Updated' || '  ' || sql%ROWCOUNT);
      COMMIT;
   END IF;

   RETURN 0;
EXCEPTION
   WHEN OTHERS THEN
      DBMS_OUTPUT.put_line('Error in XDMADM.FN_CUST_CLS_WKLY:' || SQLCODE || ' ' || SQLERRM);
      RETURN 1;
END fn_cust_cls_wkly;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_RGN_SLS_PRJ_LOAD" (odate IN DATE)
   RETURN NUMBER AS
   /***********************************************************************
    * Name: FN_RGN_SLS_PRJ_LOAD
    * Type: Function
    * Description: Populate corporate regional sales projection aggregate in XDMADM.
    *  REVISIONS:
    *  Ver        Date        Author           Description
    *  ---------  ----------  ---------------  ------------------------------------
    *  1.0        04/29/2011  Matt Nicol       1. Created this procedure.
    *  1.1        01/21/2012  Wes Holbert      1. Added grs_tgp, net_sls, net_tgp.
    ************************************************************************/

   c_num_past_wks           CONSTANT NUMBER := 6; --num wks used to determine growth
   c_num_prj_wks            CONSTANT NUMBER := 5; --num wks to project

   l_first_source_wk        VARCHAR2(6);
   l_last_source_wk         VARCHAR2(6);
   l_first_source_wk_ly     VARCHAR2(6);
   l_last_source_wk_ly      VARCHAR2(6);
   l_first_prj_wk           VARCHAR2(6);
   l_last_prj_wk            VARCHAR2(6);
   l_use_default_mode       BOOLEAN;
   l_aggr_inactive_tbl      VARCHAR2(30);
   l_prj_inactive_tbl       VARCHAR2(30);
   l_prj_inactive_tbl_cnt   NUMBER := 0;
   l_aggr_dim_query         VARCHAR2(2000);
   l_insert_query           VARCHAR2(2000);
   l_cur_syn_tbl            VARCHAR2(30);

   l_return_code            NUMBER := 0;
   l_object_nm              VARCHAR2(30);
   l_out_msg                VARCHAR2(256);

   e_truncate_table exception;
   e_analyze_table exception;
   e_syn exception;

   l_fn_start               DATE;

   TYPE ref_get_aggr_dim IS REF CURSOR;

   c_get_aggr_dim           ref_get_aggr_dim;

   r_aggr_msr_null          pkg_sls_rgn.t_aggr_msr;
   r_aggr_msr_cy            pkg_sls_rgn.t_aggr_msr;
   r_aggr_msr_ly            pkg_sls_rgn.t_aggr_msr;
   r_aggr_msr_prj_ly        pkg_sls_rgn.t_aggr_msr;
   r_aggr_msr_first_wk_cy   pkg_sls_rgn.t_aggr_msr;
   r_aggr_msr_last_wk_cy    pkg_sls_rgn.t_aggr_msr;
   r_aggr_msr_prj           pkg_sls_rgn.t_aggr_msr;
   r_aggr_msr_wow_avg       pkg_sls_rgn.t_aggr_msr;
   r_aggr_msr_growth        pkg_sls_rgn.t_aggr_growth;

   r_aggr_dim               pkg_sls_rgn.t_aggr_dim;

   CURSOR c_prj_wks(x_first_prj_wk IN VARCHAR2, x_last_prj_wk IN VARCHAR2) IS
        SELECT fisc_yr_wk
          FROM wkly_time_corp
         WHERE fisc_yr_wk BETWEEN x_first_prj_wk AND x_last_prj_wk
      ORDER BY fisc_yr_wk;

   TYPE t_prj_wks IS TABLE OF xdmadm.time_corp.fisc_yr_wk%TYPE
                        INDEX BY BINARY_INTEGER;

   r_prj_wks                t_prj_wks;
BEGIN
   l_fn_start             := SYSDATE;
   l_first_source_wk      := pkg_sls_rgn.get_fisc_wk(odate - ((c_num_past_wks) * 7));
   l_last_source_wk       := pkg_sls_rgn.get_fisc_wk(odate - 7);
   l_first_source_wk_ly   := pkg_sls_rgn.fn_get_prev_yr_wk(l_first_source_wk, 1);
   l_last_source_wk_ly    := pkg_sls_rgn.fn_get_prev_yr_wk(l_last_source_wk, 1);
   l_first_prj_wk         := pkg_sls_rgn.get_fisc_wk(odate);
   l_last_prj_wk          := pkg_sls_rgn.get_fisc_wk(odate + ((c_num_prj_wks - 1) * 7));
   DBMS_OUTPUT.put_line('ODATE: ' || odate);
   DBMS_OUTPUT.put_line('First Source Week: ' || l_first_source_wk);
   DBMS_OUTPUT.put_line('Last Source Week: ' || l_last_source_wk);
   DBMS_OUTPUT.put_line('First Source Week LY: ' || l_first_source_wk_ly);
   DBMS_OUTPUT.put_line('Last Source Week LY: ' || l_last_source_wk_ly);
   DBMS_OUTPUT.put_line('First Project Week: ' || l_first_prj_wk);
   DBMS_OUTPUT.put_line('Last Project Week: ' || l_last_prj_wk);

   --Fetch weeks that will be project into record set
   OPEN c_prj_wks(l_first_prj_wk, l_last_prj_wk);

   FETCH c_prj_wks
   BULK COLLECT INTO r_prj_wks;

   CLOSE c_prj_wks;

   --Get inactive projection and aggregate table that will be used
   l_prj_inactive_tbl     := pkg_sls_rgn.fn_get_tbl_nm(pkg_sls_rgn.c_prj_syn_nm, 'N');
   l_aggr_inactive_tbl    := pkg_sls_rgn.fn_get_tbl_nm(pkg_sls_rgn.c_aggr_syn_nm, 'N');

   DBMS_OUTPUT.put_line('Inactive projection table: ' || l_prj_inactive_tbl);
   DBMS_OUTPUT.put_line('Inactive aggr: ' || l_aggr_inactive_tbl);

   --Check if synonym is pointing to inactive table. If so, error
   EXECUTE IMMEDIATE 'SELECT table_name FROM user_synonyms WHERE synonym_name = ''' || pkg_sls_rgn.c_prj_syn_nm || ''''
      INTO l_cur_syn_tbl;

      dbms_output.put_line('l_cur_syn_tbl ' || l_cur_syn_tbl);

   IF (l_cur_syn_tbl = l_prj_inactive_tbl) THEN
      RAISE e_syn;
   END IF;

   --Check if data exists in projection table and truncate if so
   EXECUTE IMMEDIATE 'SELECT count(1) FROM ' || l_prj_inactive_tbl INTO l_prj_inactive_tbl_cnt;

   IF (l_prj_inactive_tbl_cnt > 0) THEN
      DBMS_OUTPUT.put_line('Error: Inactive projection table has ' || l_prj_inactive_tbl_cnt || ' records in it');

  l_return_code   := usfdba.table_pkg.truncate_table(l_out_msg, pkg_sls_rgn.c_schema_nm, l_prj_inactive_tbl);

      IF (l_return_code <> 0) THEN
         l_object_nm   := l_prj_inactive_tbl;
         RAISE e_truncate_table;
      END IF;

      DBMS_OUTPUT.put_line('Inactive projection table truncated');
   END IF;

   --Query to get unique aggregate records for week used to calculate growth
   l_aggr_dim_query       :=
         'SELECT DISTINCT a.div_nbr, a.pim_cls_id, a.pim_suprcls_id_crnt, a.pim_suprcls_id_actl, a.trd_cls, '
      || ' a.acct_typ_cd, a.corp_mlt_unit_nbr, a.prnt_mlt_unit_cd, a.pim_brnd_typ'
      || ' FROM '
      || l_aggr_inactive_tbl || ' a, '
      || ' DIV_CORP d '
      || ' WHERE  fisc_yr_wk BETWEEN '''
      || l_first_source_wk
      || ''' AND '''
      || l_last_source_wk
      || ''''
      || ' AND d.DIV_NBR = a.SLS_REVENUE_DIV_NBR'
      || ' AND d.DIV_TYP_CD <> ''CC''';

   DBMS_OUTPUT.put_line(l_aggr_dim_query);

   -- Loop on unique aggregate records
   OPEN c_get_aggr_dim FOR l_aggr_dim_query;

   LOOP
      FETCH c_get_aggr_dim INTO r_aggr_dim;

      EXIT WHEN c_get_aggr_dim%NOTFOUND;
      --Reset wow average
      r_aggr_msr_wow_avg   := r_aggr_msr_null;

      --Get current year and last year measures for weeks used to calculate growth
      r_aggr_msr_cy        := pkg_sls_rgn.get_measures(l_first_source_wk, l_last_source_wk, r_aggr_dim);
      r_aggr_msr_ly        := pkg_sls_rgn.get_measures(l_first_source_wk_ly, l_last_source_wk_ly, r_aggr_dim);

      --Only process aggregate record if data exists for this year or last year
      IF (
         (r_aggr_msr_cy.sales <> 0)
       OR (r_aggr_msr_ly.sales <> 0)
       OR (r_aggr_msr_cy.cases <> 0)
       OR (r_aggr_msr_ly.cases <> 0)
       OR (r_aggr_msr_cy.tagp <> 0)
       OR (r_aggr_msr_ly.tagp <> 0)
       OR (r_aggr_msr_cy.grs_tgp <> 0)                       --Change 1.1
       OR (r_aggr_msr_ly.grs_tgp <> 0)                       --Change 1.1
       OR (r_aggr_msr_cy.net_sls <> 0)                       --Change 1.1
       OR (r_aggr_msr_ly.net_sls <> 0)                       --Change 1.1
       OR (r_aggr_msr_cy.net_tgp <> 0)                       --Change 1.1
       OR (r_aggr_msr_ly.net_tgp <> 0)                       --Change 1.1
       )
       THEN
         --Determine method used for projection. If data exists last year, use YoY(default). Otherwise, WoW.
         IF ((r_aggr_msr_ly.sales > 0)
          OR (r_aggr_msr_ly.cases <> 0)
          OR (r_aggr_msr_ly.tagp <> 0)
          OR (r_aggr_msr_ly.grs_tgp <> 0)                     --Change 1.1
          OR (r_aggr_msr_ly.net_sls <> 0)                     --Change 1.1
          OR (r_aggr_msr_ly.net_tgp <> 0)                     --Change 1.1
        ) THEN
            l_use_default_mode        := TRUE;

            --Calculate growth for YoY
            r_aggr_msr_growth.sales   := pkg_sls_rgn.get_msr_growth(r_aggr_msr_cy.sales, r_aggr_msr_ly.sales);
            r_aggr_msr_growth.cases   := pkg_sls_rgn.get_msr_growth(r_aggr_msr_cy.cases, r_aggr_msr_ly.cases);
            r_aggr_msr_growth.tagp    := pkg_sls_rgn.get_msr_growth(r_aggr_msr_cy.tagp, r_aggr_msr_ly.tagp);
            r_aggr_msr_growth.grs_tgp := pkg_sls_rgn.get_msr_growth(r_aggr_msr_cy.grs_tgp, r_aggr_msr_ly.grs_tgp);    --Change 1.1
            r_aggr_msr_growth.net_sls := pkg_sls_rgn.get_msr_growth(r_aggr_msr_cy.net_sls, r_aggr_msr_ly.net_sls);    --Change 1.1
            r_aggr_msr_growth.net_tgp := pkg_sls_rgn.get_msr_growth(r_aggr_msr_cy.net_tgp, r_aggr_msr_ly.net_tgp);    --Change 1.1

         ELSE
            l_use_default_mode         := FALSE;

            --Call function to calculate WoW growth
            r_aggr_msr_growth          := pkg_sls_rgn.get_wow_growth(l_first_source_wk, l_last_source_wk, r_aggr_dim);

            --Get average of recent weeks measures
            r_aggr_msr_wow_avg         := pkg_sls_rgn.get_measures(l_first_source_wk, l_last_source_wk, r_aggr_dim);
            r_aggr_msr_wow_avg.sales   := r_aggr_msr_wow_avg.sales / c_num_past_wks;
            r_aggr_msr_wow_avg.cases   := r_aggr_msr_wow_avg.cases / c_num_past_wks;
            r_aggr_msr_wow_avg.tagp    := r_aggr_msr_wow_avg.tagp / c_num_past_wks;
            r_aggr_msr_wow_avg.grs_tgp := r_aggr_msr_wow_avg.grs_tgp / c_num_past_wks;                                   --Change 1.1
            r_aggr_msr_wow_avg.net_sls := r_aggr_msr_wow_avg.net_sls / c_num_past_wks;                                --Change 1.1
            r_aggr_msr_wow_avg.net_tgp := r_aggr_msr_wow_avg.net_tgp / c_num_past_wks;                                --Change 1.1

            --Calcualte projections using recent weeks and WoW growth
            r_aggr_msr_prj             := pkg_sls_rgn.get_msr_prj(r_aggr_msr_wow_avg, r_aggr_msr_growth);
         END IF;

         --Loop through weeks being projected
         FOR i IN r_prj_wks.FIRST .. r_prj_wks.LAST LOOP
            --If YoY growth is used calcualte projection using corresponding week last year measures and calculated growth
            IF l_use_default_mode THEN
               r_aggr_msr_prj_ly   :=
                  pkg_sls_rgn.get_measures(pkg_sls_rgn.fn_get_prev_yr_wk(r_prj_wks(i), 1),
                  pkg_sls_rgn.fn_get_prev_yr_wk(r_prj_wks(i), 1), r_aggr_dim);

               r_aggr_msr_prj   := pkg_sls_rgn.get_msr_prj(r_aggr_msr_prj_ly, r_aggr_msr_growth);
            END IF;

            --Insert projection data
            /* Change 1.1, added projected values for GRS_TGP, NET_SLS, NET_TGP */
            SELECT    'INSERT /*+ append */ INTO '
                   || l_prj_inactive_tbl
                   || ' VALUES ('
                   || r_aggr_dim.div_nbr
                   || ', '''
                   || r_prj_wks(i)
                   || ''', ''N'','
                   || NVL(TO_CHAR(r_aggr_dim.pim_cls_id), 'NULL')
                   || ', '
                   || NVL(TO_CHAR(r_aggr_dim.pim_suprcls_id_crnt), 'NULL')
                   || ', '
                   || NVL(TO_CHAR(r_aggr_dim.pim_suprcls_id_actl), 'NULL')
                   || ', '
                   || DECODE(r_aggr_dim.trd_cls, NULL, 'NULL,', '''' || r_aggr_dim.trd_cls || ''', ')
                   || DECODE(r_aggr_dim.acct_typ_cd, NULL, 'NULL,', '''' || r_aggr_dim.acct_typ_cd || ''', ')
                   || DECODE(r_aggr_dim.corp_mlt_unit_nbr,
                             NULL, 'NULL,',
                             '''' || r_aggr_dim.corp_mlt_unit_nbr || ''', ')
                   || DECODE(r_aggr_dim.prnt_mlt_unit_cd, NULL, 'NULL,', '''' || r_aggr_dim.prnt_mlt_unit_cd || ''', ')
                   || DECODE(r_aggr_dim.pim_brnd_typ, NULL, 'NULL,', '''' || r_aggr_dim.pim_brnd_typ || ''', ')
                   || NVL(r_aggr_msr_prj.sales, 0)
                   || ', '
                   || NVL(r_aggr_msr_prj.cases, 0)
                   || ', '
                   || NVL(r_aggr_msr_prj.tagp, 0)
                   || ', 0, 1'
                   || ', '
                   || NVL(r_aggr_msr_prj.grs_tgp, 0)
                   || ', '
                   || NVL(r_aggr_msr_prj.net_sls, 0)
                   || ', '
                   || NVL(r_aggr_msr_prj.net_tgp, 0)
                   || ')'

            INTO l_insert_query
             FROM DUAL;

            EXECUTE IMMEDIATE l_insert_query;
         END LOOP;
      END IF;
   END LOOP;

   CLOSE c_get_aggr_dim;

   COMMIT;

   EXECUTE IMMEDIATE 'SELECT count(1) FROM ' || l_prj_inactive_tbl INTO l_prj_inactive_tbl_cnt;

   DBMS_OUTPUT.put_line(   'Inserted '
                        || l_prj_inactive_tbl_cnt
                        || ' rows in '
                        || TO_CHAR(ROUND((SYSDATE - l_fn_start) * 86400))
                        || ' seconds');

   --Analyze Table
  l_return_code          := usfdba.stats_pkg.analyze_table(l_out_msg, pkg_sls_rgn.c_schema_nm, l_prj_inactive_tbl);

   IF (l_return_code <> 0) THEN
      l_object_nm   := l_prj_inactive_tbl;
      RAISE e_analyze_table;
   END IF;

   DBMS_OUTPUT.put_line('Successfully created Sales Region Weekly Projection data');
   RETURN pkg_sls_rgn.c_success;
EXCEPTION
   WHEN e_syn THEN
      DBMS_OUTPUT.put_line(
         'Synonym currently points to inactive table: ' || l_cur_syn_tbl || '. Requires manual update.');
      RETURN pkg_sls_rgn.c_error;
   WHEN e_truncate_table THEN
      DBMS_OUTPUT.put_line('Error Truncating Table: ' || l_object_nm || '. Requires manual update.');
      DBMS_OUTPUT.put_line(l_out_msg);
      RETURN pkg_sls_rgn.c_error;
   WHEN e_analyze_table THEN
      DBMS_OUTPUT.put_line('Error Analyzing Table: ' || l_object_nm || '. Requires manual update.');
      DBMS_OUTPUT.put_line('Verify SYN_TBL_MAP active records match existing synonyms');
      DBMS_OUTPUT.put_line(l_out_msg);
      RETURN pkg_sls_rgn.c_error;
   WHEN OTHERS THEN
      DBMS_OUTPUT.put_line('Error creating Sales Region Weekly Projection data');
      DBMS_OUTPUT.put_line(SUBSTR(SQLERRM, 1, 2000));
      RETURN pkg_sls_rgn.c_error;
END;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_SFTY_SECURITY_VPD" (p_schema       IN VARCHAR2,
                                                p_objname      IN VARCHAR2)
   RETURN VARCHAR2 AS
   /***********************************************************************
   * Name: FN_SFTY_SECURITY_VPD
   * Type: Function
   * Description: VPD Function to exclude safety data for partially loaded week.
   *  REVISIONS:
   *  Ver        Date        Author           Description
   *  ---------  ----------  ---------------  ------------------------------------
   *  1.0        09/01/2011  Matt Nicol       Created this function
   ************************************************************************/
   c_start                CONSTANT NUMBER := DBMS_UTILITY.get_time;
   c_fn_nm                CONSTANT VARCHAR2(30) := 'FN_SFTY_SECURITY_VPD';
   l_security_predicate   VARCHAR2(4000) DEFAULT NULL;
   l_cur_sql              VARCHAR2(4000) := SYS_CONTEXT('USERENV', 'CURRENT_SQL');
   l_sbjct_area VARCHAR2(100)
         := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_sbjct_area_attr);
   l_vpd_exempt VARCHAR2(1)
         := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_exempt_attr);
   l_all_divs VARCHAR2(1)
         := SYS_CONTEXT(ctladm.pkg_sec_context_util.c_context, ctladm.pkg_sec_context_util.c_alldivs_attr);
   l_prcs_end_date        VARCHAR2(8) DEFAULT NULL;
BEGIN
   --If no subject area context is set then return predicate filtering all data
   IF l_sbjct_area IS NULL THEN
      l_security_predicate   := '1=2';
      ctladm.pkg_vpd_debug_util.vpd_debug('NO SA', c_fn_nm, USER, p_schema, p_objname, l_sbjct_area, l_vpd_exempt,
      l_all_divs, l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   -- Check if user is exempt based on current subject area context
   -- If so, return predicate without any filter
   IF l_vpd_exempt = 'Y' THEN
      l_security_predicate   := '1=1';
      ctladm.pkg_vpd_debug_util.vpd_debug('EXEMPT', c_fn_nm, USER, p_schema, p_objname, l_sbjct_area, l_vpd_exempt,
      l_all_divs, l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);

      RETURN l_security_predicate;
   END IF;

   SELECT TO_CHAR(MIN(prcs_end_dt), 'YYYYMMDD')
     INTO l_prcs_end_date
     FROM wkly_dw_ctl
    WHERE sbjct_area = 'SAFETY';

   IF l_prcs_end_date IS NULL THEN
      l_security_predicate   := '1=2'; -- Datamart not loaded. Nothing should be displayed
      ctladm.pkg_vpd_debug_util.vpd_debug('END DATE NOT FOUND', c_fn_nm, USER, p_schema, p_objname, l_sbjct_area,
      l_vpd_exempt, l_all_divs, l_cur_sql, l_security_predicate);
      RETURN l_security_predicate;
   ELSE
      l_security_predicate   := 'PRCS_END_DT <= TO_DATE (''' || l_prcs_end_date || ''',''YYYYMMDD'')';
      ctladm.pkg_vpd_debug_util.vpd_debug('END DATE FOUND', c_fn_nm, USER, p_schema, p_objname, l_sbjct_area,
      l_vpd_exempt, l_all_divs, l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);
      RETURN l_security_predicate;
   END IF;
EXCEPTION
   WHEN OTHERS THEN
      l_security_predicate   := '1=2';
      ctladm.pkg_vpd_debug_util.vpd_debug(SQLCODE || '-' || SQLERRM, c_fn_nm, USER, p_schema, p_objname, l_sbjct_area,
      l_vpd_exempt, l_all_divs, l_cur_sql, l_security_predicate, (DBMS_UTILITY.get_time - c_start) / 100);
      RETURN l_security_predicate;
END fn_sfty_security_vpd;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_GET_FISC_TIME_DT" (p_clndr_dt     IN DATE,
                             p_timeframe    IN VARCHAR2)
   RETURN DATE
   DETERMINISTIC IS
   l_st_dt    DATE;
   l_end_dt   DATE;
BEGIN
   SELECT MIN(clndr_dt), MAX(clndr_dt)
     INTO l_st_dt, l_end_dt
     FROM xdmadm.time_corp
    WHERE ((p_timeframe LIKE 'WK%')
       AND (fisc_yr_wk = fn_get_fisc_time(p_clndr_dt, 'WK')))
       OR ((p_timeframe LIKE 'MTH%')
       AND (fisc_yr_mth = fn_get_fisc_time(p_clndr_dt, 'MTH')))
       OR ((p_timeframe LIKE 'YR%')
       AND (fisc_yr = fn_get_fisc_time(p_clndr_dt, 'YR')));

   IF p_timeframe LIKE '%ST_DT' THEN
      RETURN l_st_dt;
   ELSIF p_timeframe LIKE '%END_DT' THEN
      RETURN l_end_dt;
   END IF;
END fn_get_fisc_time_dt;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_PYR_SLS_PRJ_LOAD" (odate IN DATE)
   RETURN NUMBER AS
   /***********************************************************************
    * Name: FN_PYR_SLS_PRJ_LOAD
    * Type: Function
    * Description: Populate corporate pyramid sales projection aggregate in XDMADM.
    *  REVISIONS:
    *  Ver        Date        Author                Description
    *  ---------  ----------  ---------------       ------------------------------------
    *  1.0        12/16/2011  Manisha Singh         1. Created this procedure.
    *  1.1        07/05/2012  Matt Nicol            1. Updated to include PAs
    *  1.2        01/09/2013  Madhu Veerapaneni     1. Added Accountabily flag from XDMADM.Cust_Corp
    *                                                  to SALES_SUMM_PYR_PRJ tables
    *  1.3        02/11/2014  Madhu Veerapaneni     1.Modified to get the Active pyramid sls table
    *                                                 instead of the inactive pyramid sls table so
    *                                                 the projections can run after the synonym swap of
    *                                                 pyramid sales table
	*  1.4        02/26/2014  Ankur Patel           1. Dropped ACCT_TYP_CD='FB' logic from filter and replaced
    *                                                 with Trade Business Filter; support for 2 projections
	*                                                 synonyms; added new fields; removed dynamic SQL
	*  1.5        04/16/2014  Ankur Patel           1. Added Street Sales fields
	************************************************************************/

   c_num_past_wks           CONSTANT NUMBER := 6; --num wks used to determine growth
   c_num_prj_wks            CONSTANT NUMBER := 5; --num wks to project

   l_start_dt               DATE;

   l_first_source_wk        VARCHAR2(6);
   l_last_source_wk         VARCHAR2(6);
   l_first_source_wk_ly     VARCHAR2(6);
   l_last_source_wk_ly      VARCHAR2(6);
   l_first_prj_wk           VARCHAR2(6);
   l_last_prj_wk            VARCHAR2(6);
   l_use_default_mode       BOOLEAN;
   l_prj_inactive_tbl       VARCHAR2(30);
   l_prj_inactive_tbl_cnt   NUMBER := 0;

   l_return_code            NUMBER := 0;
   l_object_nm              VARCHAR2(30);
   l_out_msg                VARCHAR2(256);

   e_truncate_table exception;
   e_analyze_table exception;

   l_fn_start               DATE;
   l_analyze_start          DATE;
   l_analyze_flag           VARCHAR2(10);

   TYPE ref_get_aggr_dim IS REF CURSOR;

   c_get_aggr_dim           ref_get_aggr_dim;

   r_aggr_msr_null          pkg_sls_pyr.t_aggr_msr;
   r_aggr_msr_cy            pkg_sls_pyr.t_aggr_msr;
   r_aggr_msr_ly            pkg_sls_pyr.t_aggr_msr;
   r_aggr_msr_prj_ly        pkg_sls_pyr.t_aggr_msr;
   r_aggr_msr_prj           pkg_sls_pyr.t_aggr_msr;
   r_aggr_msr_wow_avg       pkg_sls_pyr.t_aggr_msr;
   r_aggr_msr_growth        pkg_sls_pyr.t_aggr_growth;

   r_aggr_dim               pkg_sls_pyr.t_aggr_dim;

   CURSOR c_prj_wks(x_first_prj_wk IN VARCHAR2,
                    x_last_prj_wk  IN VARCHAR2) IS
        SELECT fisc_yr_wk
        FROM wkly_time_corp
        WHERE fisc_yr_wk BETWEEN x_first_prj_wk AND x_last_prj_wk
        ORDER BY fisc_yr_wk;

   TYPE t_prj_wks IS TABLE OF xdmadm.time_corp.fisc_yr_wk%TYPE
                        INDEX BY BINARY_INTEGER;

   r_prj_wks                t_prj_wks;
BEGIN
   l_fn_start             := SYSDATE;

   IF (TO_CHAR(odate, 'D') = 7) THEN
      l_start_dt   := odate + 1;
   ELSE
      l_start_dt   := odate;
   END IF;

   l_first_source_wk      := pkg_sls_pyr.get_fisc_wk(l_start_dt - ((c_num_past_wks) * 7));
   l_last_source_wk       := pkg_sls_pyr.get_fisc_wk(l_start_dt - 7);
   l_first_source_wk_ly   := pkg_sls_pyr.fn_get_prev_yr_wk(l_first_source_wk, 1);
   l_last_source_wk_ly    := pkg_sls_pyr.fn_get_prev_yr_wk(l_last_source_wk, 1);
   l_first_prj_wk         := pkg_sls_pyr.get_fisc_wk(l_start_dt);
   l_last_prj_wk          := pkg_sls_pyr.get_fisc_wk(l_start_dt + ((c_num_prj_wks - 1) * 7));
   DBMS_OUTPUT.put_line('ODATE: ' || odate);
   DBMS_OUTPUT.put_line('Start Date: ' || l_start_dt);
   DBMS_OUTPUT.put_line('First Source Week: ' || l_first_source_wk);
   DBMS_OUTPUT.put_line('Last Source Week: ' || l_last_source_wk);
   DBMS_OUTPUT.put_line('First Source Week LY: ' || l_first_source_wk_ly);
   DBMS_OUTPUT.put_line('Last Source Week LY: ' || l_last_source_wk_ly);
   DBMS_OUTPUT.put_line('First Project Week: ' || l_first_prj_wk);
   DBMS_OUTPUT.put_line('Last Project Week: ' || l_last_prj_wk);

   --Fetch weeks that will be project into record set
   OPEN c_prj_wks(l_first_prj_wk, l_last_prj_wk);

   FETCH c_prj_wks
   BULK COLLECT INTO r_prj_wks;

   CLOSE c_prj_wks;

   --Get inactive projection table that will be used
   l_prj_inactive_tbl     := pkg_sls_pyr.fn_get_tbl_nm_syn(pkg_sls_pyr.c_prj_load_syn_nm);

   --Get ACTIVE sales pyramid aggregate table that will be used
   DBMS_OUTPUT.put_line('Inactive projection table: ' || l_prj_inactive_tbl);

   --Check if data exists in projection table and truncate if so
   SELECT COUNT(*)
   INTO l_prj_inactive_tbl_cnt
   FROM SALES_SUMM_PYR_PRJ_LOAD;

   IF (l_prj_inactive_tbl_cnt > 0) THEN
      DBMS_OUTPUT.put_line('Error: Inactive projection table has ' || l_prj_inactive_tbl_cnt || ' records in it');

      l_return_code   := usfdba.table_pkg.truncate_table(l_out_msg, pkg_sls_pyr.c_schema_nm, l_prj_inactive_tbl);

      IF (l_return_code <> 0) THEN
         l_object_nm   := l_prj_inactive_tbl;
         RAISE e_truncate_table;
      END IF;

      DBMS_OUTPUT.put_line('Inactive projection table truncated');
   END IF;

   -- Loop on unique aggregate records

   OPEN c_get_aggr_dim FOR
   SELECT DISTINCT a.div_nbr, a.pim_cls_id, a.pim_suprcls_id_crnt, a.pim_suprcls_id_actl, a.trd_cls,
   a.pyr_seg_cd, a.corp_mlt_unit_nbr, a.prnt_mlt_unit_cd, a.pim_brnd_typ,
   a.cust_cntrct_flg, a.cust_natl_mngd_flg, a.cust_acctblty_flg, a.sls_revenue_div_nbr
   FROM xdmadm.SALES_SUMM_PYR_AGGR a
   WHERE fisc_yr_wk BETWEEN l_first_source_wk AND l_last_source_wk
   ;
   LOOP
      FETCH c_get_aggr_dim INTO r_aggr_dim;
      EXIT WHEN c_get_aggr_dim%NOTFOUND;

	  --Reset wow average
      r_aggr_msr_wow_avg   := r_aggr_msr_null;

      --Get current year and last year measures for weeks used to calculate growth
      r_aggr_msr_cy        := pkg_sls_pyr.get_measures(l_first_source_wk, l_last_source_wk, r_aggr_dim);
      r_aggr_msr_ly        := pkg_sls_pyr.get_measures(l_first_source_wk_ly, l_last_source_wk_ly, r_aggr_dim);

	  --Only process aggregate record if data exists for this year or last year

	  IF ((r_aggr_msr_cy.sales <> 0) OR (r_aggr_msr_ly.sales <> 0) OR (r_aggr_msr_cy.cases <> 0) OR (r_aggr_msr_ly.cases <> 0)
		OR (r_aggr_msr_cy.tagp <> 0) OR (r_aggr_msr_ly.tagp <> 0) OR (r_aggr_msr_cy.pa <> 0) OR (r_aggr_msr_ly.pa <> 0)
		OR (r_aggr_msr_cy.grs_tgp <> 0) OR (r_aggr_msr_ly.grs_tgp <> 0) OR (r_aggr_msr_cy.net_sls <> 0) OR (r_aggr_msr_ly.net_sls <> 0)
		OR (r_aggr_msr_cy.net_tgp <> 0) OR (r_aggr_msr_ly.net_tgp <> 0)
		OR (r_aggr_msr_cy.net_non_prod_alwnc <> 0) OR (r_aggr_msr_ly.net_non_prod_alwnc <> 0)
		OR (r_aggr_msr_cy.net_prod_alwnc <> 0) OR (r_aggr_msr_ly.net_prod_alwnc <> 0)
		OR (r_aggr_msr_cy.rbt_loc_accrl_amt <> 0) OR (r_aggr_msr_ly.rbt_loc_accrl_amt <> 0)
		OR (r_aggr_msr_cy.rbt_natl_accrl_amt <> 0) OR (r_aggr_msr_ly.rbt_natl_accrl_amt <> 0)
		OR (r_aggr_msr_cy.rbt_loc_exp_amt <> 0) OR (r_aggr_msr_ly.rbt_loc_exp_amt <> 0)
		OR (r_aggr_msr_cy.rbt_natl_exp_amt <> 0) OR (r_aggr_msr_ly.rbt_natl_exp_amt <> 0)
		OR (r_aggr_msr_cy.net_prod_chrg <> 0) OR (r_aggr_msr_ly.net_prod_chrg <> 0)
		OR (r_aggr_msr_cy.net_non_prod_chrg <> 0) OR (r_aggr_msr_ly.net_non_prod_chrg <> 0)
		OR (r_aggr_msr_cy.ec_grs_sls_extnd <> 0) OR (r_aggr_msr_ly.ec_grs_sls_extnd <> 0)
		OR (r_aggr_msr_cy.py_cust_cases <> 0) OR (r_aggr_msr_ly.py_cust_cases <> 0)
		OR (r_aggr_msr_cy.py_cust_cnt <> 0) OR (r_aggr_msr_ly.py_cust_cnt <> 0)
		OR (r_aggr_msr_cy.cust_bow_cnt <> 0) OR (r_aggr_msr_ly.cust_bow_cnt <> 0)) THEN

		--Determine method used for projection. If data exists last year, use YoY(default). Otherwise, WoW.
		IF ((r_aggr_msr_ly.sales <> 0) OR (r_aggr_msr_ly.cases <> 0) OR (r_aggr_msr_ly.tagp <> 0) OR (r_aggr_msr_ly.pa <> 0)
			OR (r_aggr_msr_ly.grs_tgp <> 0) OR (r_aggr_msr_ly.net_sls <> 0) OR (r_aggr_msr_ly.net_tgp <> 0)
			OR (r_aggr_msr_ly.net_non_prod_alwnc <> 0) OR (r_aggr_msr_ly.net_prod_alwnc <> 0)
			OR (r_aggr_msr_ly.rbt_loc_accrl_amt <> 0) OR (r_aggr_msr_ly.rbt_natl_accrl_amt <> 0)
			OR (r_aggr_msr_ly.rbt_loc_exp_amt <> 0) OR (r_aggr_msr_ly.rbt_natl_exp_amt <> 0)
			OR (r_aggr_msr_ly.net_prod_chrg <> 0) OR (r_aggr_msr_ly.net_non_prod_chrg <> 0)
			OR (r_aggr_msr_ly.ec_grs_sls_extnd <> 0) OR (r_aggr_msr_ly.py_cust_cases <> 0)
			OR (r_aggr_msr_ly.py_cust_cnt <> 0) OR (r_aggr_msr_ly.cust_bow_cnt <> 0)) THEN

			l_use_default_mode          := TRUE;

			--Calculate growth for YoY
            r_aggr_msr_growth.sales						:= pkg_sls_pyr.get_msr_growth(r_aggr_msr_cy.sales, r_aggr_msr_ly.sales);
            r_aggr_msr_growth.cases						:= pkg_sls_pyr.get_msr_growth(r_aggr_msr_cy.cases, r_aggr_msr_ly.cases);
            r_aggr_msr_growth.tagp						:= pkg_sls_pyr.get_msr_growth(r_aggr_msr_cy.tagp, r_aggr_msr_ly.tagp);
            r_aggr_msr_growth.pa						:= pkg_sls_pyr.get_msr_growth(r_aggr_msr_cy.pa, r_aggr_msr_ly.pa);
            r_aggr_msr_growth.grs_tgp					:= pkg_sls_pyr.get_msr_growth(r_aggr_msr_cy.grs_tgp, r_aggr_msr_ly.grs_tgp);
            r_aggr_msr_growth.net_sls					:= pkg_sls_pyr.get_msr_growth(r_aggr_msr_cy.net_sls, r_aggr_msr_ly.net_sls);
            r_aggr_msr_growth.net_tgp					:= pkg_sls_pyr.get_msr_growth(r_aggr_msr_cy.net_tgp, r_aggr_msr_ly.net_tgp);
			r_aggr_msr_growth.net_non_prod_alwnc		:= pkg_sls_pyr.get_msr_growth(r_aggr_msr_cy.net_non_prod_alwnc, r_aggr_msr_ly.net_non_prod_alwnc);
			r_aggr_msr_growth.net_prod_alwnc			:= pkg_sls_pyr.get_msr_growth(r_aggr_msr_cy.net_prod_alwnc, r_aggr_msr_ly.net_prod_alwnc);
			r_aggr_msr_growth.rbt_loc_accrl_amt			:= pkg_sls_pyr.get_msr_growth(r_aggr_msr_cy.rbt_loc_accrl_amt, r_aggr_msr_ly.rbt_loc_accrl_amt);
			r_aggr_msr_growth.rbt_natl_accrl_amt		:= pkg_sls_pyr.get_msr_growth(r_aggr_msr_cy.rbt_natl_accrl_amt, r_aggr_msr_ly.rbt_natl_accrl_amt);
			r_aggr_msr_growth.rbt_loc_exp_amt			:= pkg_sls_pyr.get_msr_growth(r_aggr_msr_cy.rbt_loc_exp_amt, r_aggr_msr_ly.rbt_loc_exp_amt);
			r_aggr_msr_growth.rbt_natl_exp_amt			:= pkg_sls_pyr.get_msr_growth(r_aggr_msr_cy.rbt_natl_exp_amt, r_aggr_msr_ly.rbt_natl_exp_amt);
			r_aggr_msr_growth.net_prod_chrg				:= pkg_sls_pyr.get_msr_growth(r_aggr_msr_cy.net_prod_chrg, r_aggr_msr_ly.net_prod_chrg);
			r_aggr_msr_growth.net_non_prod_chrg			:= pkg_sls_pyr.get_msr_growth(r_aggr_msr_cy.net_non_prod_chrg, r_aggr_msr_ly.net_non_prod_chrg);
			r_aggr_msr_growth.ec_grs_sls_extnd			:= pkg_sls_pyr.get_msr_growth(r_aggr_msr_cy.ec_grs_sls_extnd, r_aggr_msr_ly.ec_grs_sls_extnd);
			r_aggr_msr_growth.py_cust_cases				:= pkg_sls_pyr.get_msr_growth(r_aggr_msr_cy.py_cust_cases, r_aggr_msr_ly.py_cust_cases);
			r_aggr_msr_growth.py_cust_cnt				:= pkg_sls_pyr.get_msr_growth(r_aggr_msr_cy.py_cust_cnt, r_aggr_msr_ly.py_cust_cnt);
			r_aggr_msr_growth.cust_bow_cnt				:= pkg_sls_pyr.get_msr_growth(r_aggr_msr_cy.cust_bow_cnt, r_aggr_msr_ly.cust_bow_cnt);
		ELSE

            l_use_default_mode           := FALSE;

            --Call function to calculate WoW growth
            r_aggr_msr_growth            := pkg_sls_pyr.get_wow_growth(l_first_source_wk, l_last_source_wk, r_aggr_dim);

            --Get average of recent weeks measures
            r_aggr_msr_wow_avg           := pkg_sls_pyr.get_measures(l_first_source_wk, l_last_source_wk, r_aggr_dim);

            r_aggr_msr_wow_avg.sales				:= r_aggr_msr_wow_avg.sales / c_num_past_wks;
            r_aggr_msr_wow_avg.cases				:= r_aggr_msr_wow_avg.cases / c_num_past_wks;
            r_aggr_msr_wow_avg.tagp					:= r_aggr_msr_wow_avg.tagp / c_num_past_wks;
            r_aggr_msr_wow_avg.pa					:= r_aggr_msr_wow_avg.pa / c_num_past_wks;
            r_aggr_msr_wow_avg.grs_tgp				:= r_aggr_msr_wow_avg.grs_tgp / c_num_past_wks;
            r_aggr_msr_wow_avg.net_sls				:= r_aggr_msr_wow_avg.net_sls / c_num_past_wks;
            r_aggr_msr_wow_avg.net_tgp				:= r_aggr_msr_wow_avg.net_tgp / c_num_past_wks;
			r_aggr_msr_wow_avg.net_non_prod_alwnc	:= r_aggr_msr_wow_avg.net_non_prod_alwnc / c_num_past_wks;
			r_aggr_msr_wow_avg.net_prod_alwnc		:= r_aggr_msr_wow_avg.net_prod_alwnc / c_num_past_wks;
			r_aggr_msr_wow_avg.rbt_loc_accrl_amt	:= r_aggr_msr_wow_avg.rbt_loc_accrl_amt / c_num_past_wks;
			r_aggr_msr_wow_avg.rbt_natl_accrl_amt	:= r_aggr_msr_wow_avg.rbt_natl_accrl_amt / c_num_past_wks;
			r_aggr_msr_wow_avg.rbt_loc_exp_amt		:= r_aggr_msr_wow_avg.rbt_loc_exp_amt / c_num_past_wks;
			r_aggr_msr_wow_avg.rbt_natl_exp_amt		:= r_aggr_msr_wow_avg.rbt_natl_exp_amt / c_num_past_wks;
			r_aggr_msr_wow_avg.net_prod_chrg		:= r_aggr_msr_wow_avg.net_prod_chrg / c_num_past_wks;
			r_aggr_msr_wow_avg.net_non_prod_chrg	:= r_aggr_msr_wow_avg.net_non_prod_chrg / c_num_past_wks;
			r_aggr_msr_wow_avg.ec_grs_sls_extnd		:= r_aggr_msr_wow_avg.ec_grs_sls_extnd / c_num_past_wks;
			r_aggr_msr_wow_avg.py_cust_cases		:= r_aggr_msr_wow_avg.py_cust_cases / c_num_past_wks;
			r_aggr_msr_wow_avg.py_cust_cnt			:= r_aggr_msr_wow_avg.py_cust_cnt / c_num_past_wks;
			r_aggr_msr_wow_avg.cust_bow_cnt			:= r_aggr_msr_wow_avg.cust_bow_cnt / c_num_past_wks;

            --Calculate projections using recent weeks and WoW growth
            r_aggr_msr_prj               := pkg_sls_pyr.get_msr_prj(r_aggr_msr_wow_avg, r_aggr_msr_growth);
		END IF;

		--Loop through weeks being projected
		FOR i IN r_prj_wks.FIRST .. r_prj_wks.LAST LOOP

			--If YoY growth is used calculate projection using corresponding week last year measures and calculated growth
			IF l_use_default_mode THEN
               r_aggr_msr_prj_ly   := pkg_sls_pyr.get_measures(pkg_sls_pyr.fn_get_prev_yr_wk(r_prj_wks(i), 1), pkg_sls_pyr.fn_get_prev_yr_wk(r_prj_wks(i), 1), r_aggr_dim);
               r_aggr_msr_prj      := pkg_sls_pyr.get_msr_prj(r_aggr_msr_prj_ly, r_aggr_msr_growth);
            END IF;

            --Insert projection data
            INSERT /*+ append */ INTO SALES_SUMM_PYR_PRJ_LOAD
			VALUES (r_aggr_dim.div_nbr, r_prj_wks(i), 'N', NVL(TO_CHAR(r_aggr_dim.pim_cls_id), 'NULL'), NVL(TO_CHAR(r_aggr_dim.pim_suprcls_id_crnt), 'NULL'),
				NVL(TO_CHAR(r_aggr_dim.pim_suprcls_id_actl), 'NULL'), r_aggr_dim.trd_cls, r_aggr_dim.pyr_seg_cd, r_aggr_dim.corp_mlt_unit_nbr,
				r_aggr_dim.prnt_mlt_unit_cd, r_aggr_dim.pim_brnd_typ, NVL(r_aggr_msr_prj.sales, 0), NVL(r_aggr_msr_prj.cases, 0), NVL(r_aggr_msr_prj.tagp, 0),
				NVL(r_aggr_msr_prj.pa, 0),  r_aggr_dim.cust_cntrct_flg, r_aggr_dim.cust_natl_mngd_flg, NVL(r_aggr_msr_prj.grs_tgp, 0),
				NVL(r_aggr_msr_prj.net_sls, 0), NVL(r_aggr_msr_prj.net_tgp, 0), r_aggr_dim.cust_acctblty_flg, NVL(r_aggr_msr_prj.net_non_prod_alwnc, 0),
				NVL(r_aggr_msr_prj.net_prod_alwnc, 0), NVL(r_aggr_msr_prj.rbt_loc_accrl_amt, 0), NVL(r_aggr_msr_prj.rbt_natl_accrl_amt, 0),
				NVL(r_aggr_msr_prj.rbt_loc_exp_amt, 0), NVL(r_aggr_msr_prj.rbt_natl_exp_amt, 0), NVL(r_aggr_msr_prj.net_prod_chrg, 0),
				NVL(r_aggr_msr_prj.net_non_prod_chrg, 0), NVL(TO_CHAR(r_aggr_dim.sls_revenue_div_nbr), 'NULL'),
				NVL(r_aggr_msr_prj.ec_grs_sls_extnd, 0), NVL(r_aggr_msr_prj.py_cust_cases, 0), NVL(r_aggr_msr_prj.py_cust_cnt, 0),
				NVL(r_aggr_msr_prj.cust_bow_cnt, 0));
		END LOOP;
	  END IF;
   END LOOP;

   CLOSE c_get_aggr_dim;
   COMMIT;

   SELECT count(1)
   INTO l_prj_inactive_tbl_cnt
   FROM SALES_SUMM_PYR_PRJ_LOAD;

   DBMS_OUTPUT.put_line('Inserted ' || l_prj_inactive_tbl_cnt || ' rows in ' || TO_CHAR(ROUND((SYSDATE - l_fn_start) * 86400)) || ' seconds');


   l_analyze_start := SYSDATE;

   --Analyze Table
   l_return_code := usfdba.stats_pkg.analyze_table(l_out_msg, pkg_sls_pyr.c_schema_nm, l_prj_inactive_tbl);

   IF (l_return_code <> 0) THEN
      l_object_nm   := l_prj_inactive_tbl;
      RAISE e_analyze_table;
   END IF;

   DBMS_OUTPUT.put_line('Analyzed ' || l_prj_inactive_tbl || ' in ' || TO_CHAR(ROUND((SYSDATE - l_analyze_start) * 86400)) || ' seconds');

   DBMS_OUTPUT.put_line('Successfully created Sales Pyramid Weekly Projection data');
   RETURN pkg_sls_pyr.c_success;
EXCEPTION
   WHEN e_truncate_table THEN
      DBMS_OUTPUT.put_line('Error Truncating Table: ' || l_object_nm || '. Requires manual update.');
      DBMS_OUTPUT.put_line(l_out_msg);
      RETURN pkg_sls_pyr.c_error;
   WHEN e_analyze_table THEN
      DBMS_OUTPUT.put_line('Error Analyzing Table: ' || l_object_nm || '. Requires manual update.');
      DBMS_OUTPUT.put_line('Verify SYN_TBL_MAP active records match existing synonyms');
      DBMS_OUTPUT.put_line(l_out_msg);
      RETURN pkg_sls_pyr.c_error;
   WHEN OTHERS THEN
      DBMS_OUTPUT.put_line('Error creating Sales Pyramid Weekly Projection data');
      DBMS_OUTPUT.put_line(SUBSTR(SQLERRM, 1, 2000));
      RETURN pkg_sls_pyr.c_error;
END;
/




  CREATE OR REPLACE FUNCTION "XDMADM"."FN_AUGEO_SALES_EXTRCT" (
   p_partner_id   IN   VARCHAR2,
   p_odate          IN   VARCHAR2,
   p_yr               IN   NUMBER,
   p_wk              IN   NUMBER
)
   RETURN NUMBER
IS
/*******************************************************************************
**               Name: fn_ddm_augeo_sales_extrct                              **
**                                                                            **
**            Madhu Veerapaneni        28/01/16                 ver 1.0       **
********************************************************************************
**                              Description                                   **
**                                                                            **
**  This function writes to a staging table AUGEO_SALES_EXTRCT                **
**  used to hold  extracted SALES data for AUGEO.                             **
**  The processing of data flows as follows:                                  **
**    - Delete from table (augeo_sales_extrct)                                **
**    - Insert to table (augeo_sales_extrct)                                  **
**                                                                            **
**  At every step in the processing, messages are sent to Oracle              **
**  logs and common errors are identified/captured via EXCEPTION              **
**  processing and unique function return codes to easily identify            **
**  point of failure and last point of commitment.                            **
**                                                                            **
**  Input  : p_partner_id      augeo_SALES                                    **
**           p_yr              2012  / 0                                      **
**           p_wk              22 / 0                                         **
**  Output : success(0)                                                       **
**           failure (nonzero)                                                **
**                                                                            **
**  Return:  0    - no errors occurred during processing.                     **
**           <> 0 - failure during execution                                  **
**                                                                            **
**                                                                            **
**  Error Handling: Record level errors will be logged in the data-           **
**   base error log. For Oracle errors identified with "WHEN OTHER            **
**   THEN" clause ( to differentiate from insert/update failure               **
**   identified by SQL%NOTFOUND), error will be logged and the job            **
**   aborted with a non-0 (failure) return code. Analyze error will           **
**   not cause the job to abort with a non-0 return code.                     **
**                                                                            **
********************************************************************************
**  Version               Changes Description                                 **
**  =======               ===================                                 **
**    1.0       Initial release of this function.         Madhu Veerapaneni   **
**    1.1       Order source project logic change.        Madhu Veerapaneni   **
**    1.2       Added logic for Acq Sales .               Adwait Kelkar       **
*******************************************************************************/

   /**********************************
   **     Variables declaration    **
   **********************************/
   c_quote                 VARCHAR2 (1)     := '"';
   c_comma                 VARCHAR2 (1)     := ',';
   v_prd_tbl_name          VARCHAR2 (25)   := 'AUGEO_SALES_EXTRCT';
   v_fn_name               VARCHAR2 (25)   := 'FN_DDM_AUGEO_SALES_EXTRCT';
   v_owner                 VARCHAR2 (9)    := 'xdmadm';
   v_return_message        VARCHAR2 (2000) := NULL;
   n_return_code           NUMBER          := 0;
   wkstartdate             VARCHAR2 (14);
   wkenddate               VARCHAR2 (14);
   v_days                  number ;
   v_ret_cd                number:= 0 ;
   v_odate                 DATE := TO_DATE (p_odate, 'YYYYMMDD');
   out_msg                 VARCHAR2(500)   := null;
   twowkstrtdt             VARCHAR2 (14);
   twowkenddt            VARCHAR2 (14);
   v_days_acq				number;

BEGIN
   DBMS_OUTPUT.PUT_LINE('START of function ' || v_owner || '.' || v_fn_name);
   DBMS_OUTPUT.PUT_LINE('...');

  --Get the default number of days from the param value table per EIW standards
begin
  select param_value_nbr into v_days
  from xdmadm.param_value
  where app_name = 'AUGEO_EXTRCT'
      and PARAM_type = 'DAYS_BACK'
      and param_code = 'Num_Days_back';

--9/19/2017 Added query to pick up Acq param
  select param_value_nbr into v_days_acq
  from xdmadm.param_value
  where app_name = 'AUGEO_EXTRCT'
      and PARAM_type = 'ACQ_DAYS_BACK'
      and param_code = 'Acq_Num_Days_back';

 exception when others then
    --stop the program if there is no record in the xdmadm.param_value table
     dbms_output.put_line('...ERROR No data found in xdmadm.param_value table. ' );
      dbms_output.put_line('...SQLERRM: ' || sqlerrm);
      dbms_output.put_line('...SQLCODE: ' || sqlcode);
      dbms_output.put_line('end of function ' || v_owner || '.' || v_fn_name);
     return 2;
end;

   IF p_yr = 0 AND p_wk = 0 THEN
      SELECT MIN(TO_CHAR(tc.clndr_dt,'YYYYMMDDHH24MISS')),
             MAX(TO_CHAR(tc.clndr_dt,'YYYYMMDDHH24MISS'))
      INTO wkstartdate, wkenddate
      FROM xdmadm.time_corp tc
      WHERE tc.fisc_yr = (SELECT tc2.fisc_yr
                         FROM xdmadm.time_corp tc2
                         WHERE tc2.clndr_dt = TRUNC(v_odate - v_days))
      AND   tc.fisc_wk_of_yr = (SELECT tc3.fisc_wk_of_yr
                               FROM xdmadm.time_corp tc3
                               WHERE tc3.clndr_dt = TRUNC(v_odate - v_days));
   ELSE
      SELECT MIN(TO_CHAR(tc4.clndr_dt,'YYYYMMDDHH24MISS')),
             MAX(TO_CHAR(tc4.clndr_dt,'YYYYMMDDHH24MISS'))
      INTO wkstartdate, wkenddate
      FROM xdmadm.time_corp tc4
      WHERE tc4.fisc_yr = p_yr
      AND   tc4.fisc_wk_of_yr = p_wk;
   END IF;


      SELECT MIN(TO_CHAR(tc.clndr_dt,'YYYYMMDDHH24MISS')),
             MAX(TO_CHAR(tc.clndr_dt,'YYYYMMDDHH24MISS'))
      INTO twowkstrtdt, twowkenddt
      FROM xdmadm.time_corp tc
      WHERE tc.fisc_yr = (SELECT tc2.fisc_yr
                         FROM xdmadm.time_corp tc2
                         WHERE tc2.clndr_dt = TRUNC(v_odate - v_days_acq))
      AND   tc.fisc_wk_of_yr = (SELECT tc3.fisc_wk_of_yr
                               FROM xdmadm.time_corp tc3
                               WHERE tc3.clndr_dt = TRUNC(v_odate - v_days_acq));


   /***************************************************************************
   **  Delete from table: DATA_EXTRACTS_augeo_SALES.                **
   ***************************************************************************/
   BEGIN
      DBMS_OUTPUT.PUT_LINE('...Truncating  ' || UPPER(RTRIM(SUBSTR(p_partner_id, 1, 30))));
      DBMS_OUTPUT.PUT_LINE('...        table : ' || v_owner || '.' || v_prd_tbl_name);

       --truncate the backup table
      v_ret_cd := usfdba.table_pkg.truncate_table(out_msg, v_owner,  v_prd_tbl_name );
      IF v_ret_cd <> 0 THEN
        --stop the program if table does not exist or truncate permission not granted or any other error
        dbms_output.put_line('end of function ' || v_owner || '.' || v_fn_name);
        dbms_output.put_line('...Error '|| out_msg);
        return 2;
      END IF;

   END;
--Chageing the login for user type
----TRIM(NVL(LTRIM(TRANSLATE(case when ec_user.user_typ = 1 then 'Y' else 'N' END,'*^|><@"~`&','         ')),' '))
   BEGIN
      DBMS_OUTPUT.PUT_LINE('...Inserting  into table : ' || v_owner || '.' || v_prd_tbl_name);
      DBMS_OUTPUT.PUT_LINE('...Input Parameters Used: PARTNER_ID = ' || UPPER(RTRIM(SUBSTR(p_partner_id, 1, 30))));
      DBMS_OUTPUT.PUT_LINE('...                      YEAR       = ' || p_yr);
      DBMS_OUTPUT.PUT_LINE('...                      WEEK       = ' || p_wk);
      DBMS_OUTPUT.PUT_LINE('...Date Parameters Used : Begin= ' || SUBSTR(wkstartdate, 1, 8));
      DBMS_OUTPUT.PUT_LINE('...                        End= ' || SUBSTR(wkenddate, 1, 8));

      INSERT /*+ PARALLEL APPEND */ INTO xdmadm.AUGEO_SALES_EXTRCT
          NOLOGGING (KEY_augeo_SALES, DATA_augeo_SALES)
WITH
   user_emp AS (SELECT   user_id, empl_id from stgadm.CRM_USR_EXTND_EXT),
    ec_user AS (SELECT to_char(EC_USERID) EC_USERID, user_typ FROM xdmadm.dcom_cr_user)
                SELECT
                  DISTINCT
                  UPPER(RTRIM (SUBSTR ('AUGEO_SALES', 1, 30))),
                  '"' ||
                  TRIM(NVL(TRANSLATE(pim.pim_usf_mfr_id,'*^|><@"~`&',' '),' '))
                  ||'","' ||
                  TRIM(NVL(TRANSLATE(pim.pim_usf_mfr_nm,'*^|><@"~`&',' '),' '))
                  ||'","' ||
                  TRIM(NVL(TRANSLATE(sd.pim_brnd_typ_actl,'*^|><@"~`&',' '),' '))
                  ||'","' ||
                  TRIM(NVL(TRANSLATE(pim.pim_brnd_nm,'*^|><@"~`&',' '),' '))
                  ||'","' ||
                  TRIM(NVL(TRANSLATE(pim.pim_usf_std_prod_cd,'*^|><@"~`&','        '),' '))
                  ||'","' ||
                  TRIM(NVL(TRANSLATE(pc.prod_nbr,'*^|><@"~`&','        '),' '))
                  ||'","' ||
                  TRIM(NVL(TRANSLATE(pim.pim_prod_desc,'*^|><@"~`&','     '),' '))
                  ||'","' ||
                  TRIM(NVL(TRANSLATE(pim.pim_sls_pk_sz_desc,'*^|><@"~`&','      '),' '))
                  ||'","' ||
                  TRIM(NVL(TRANSLATE(pim.pim_prch_pk_sz_desc,'*^|><@"~`&','         '),' '))
                  ||'","' ||
                  TRIM(NVL(TRANSLATE(sd.pim_cls_id_actl,'*^|><@"~`&','         '),' '))
                  ||'","' ||
                  TRIM(NVL(TRANSLATE(sd.pim_cls_desc_actl,'*^|><@"~`&','         '),' '))
                  ||'","' ||
                  TRIM(NVL(TRANSLATE(sd.pim_ctgry_id_actl,'*^|><@"~`&','         '),' '))
                  ||'","' ||
                  TRIM(TRANSLATE(sd.pim_ctgry_desc_actl,'*^|><@"~`&','         '))
                  ||'","' ||
                  TRIM(NVL(TRANSLATE(sd.pim_grp_id_actl,'*^|><@"~`&','         '),' '))
                  ||'","' ||
                  TRIM(NVL(TRANSLATE(sd.pim_grp_desc_actl,'*^|><@"~`&','         '),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(pc.brk_ind,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sum(sd.unit_ship),'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sum(sd.each_ship),'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sum(sd.qty_ship),'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(TO_CHAR(sd.prcs_dt,'DD/MM/YYYY'),'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.inv_nbr,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(TO_CHAR(sd.inv_dt,'DD/MM/YYYY'),'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.trtry_cd_actl,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.trtry_mgr_id_actl,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.trtry_mgr_nm_actl,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.dstrct_cd_actl,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.dstrct_nm_actl,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.dstrct_sls_mgr_id_actl,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.dstrct_sls_mgr_nm_actl,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.acct_typ_cd_actl,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(c.cust_nbr,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(b.brnch_cd,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(b.div_nbr,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(b.prcs_sys,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.true_mfr,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(cov.cmpny_vndr_nm,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(pc.acorp_prod_nbr,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(pc.pcorp_prod_nbr,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sum(sd.net_wt_ship),'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sum(sd.grs_sls_extnd),'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.unit_prc,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(c.cust_bus_seg,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(c.cmsn_pay_ind,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(c.rgn_sls_mgr_id,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(c.rgn_sls_mgr_nm,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(rsm_id.empl_id,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(dsm_id.empl_id,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(tm_id.empl_id,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM (NVL (LTRIM (TRANSLATE (sd.prod_stat_ind_actl,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(pc.prtry_item_ind,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(pc.cmdty_ind,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(c.cust_mjr_cd,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(c.cust_mnr_cd,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(DECODE(sd.corp_mlt_unit_nbr_actl,'000','   ','UNK','   ',sd.corp_mlt_unit_nbr_actl),'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(DECODE(sd.prnt_mlt_unit_cd_actl,'000','   ','UNK','   ',sd.prnt_mlt_unit_cd_actl),'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(pim.pim_brnd_id,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(pc.prch_from_vndr_nbr,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(pc.prch_from_vndr_nm,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.menu_typ_cd_actl,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.usf_top_pyr_seg_cd_actl,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(c.cust_cntrct_stat_desc,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.cust_natl_mngd_flg_actl,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.mkt_seg_cd_actl,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.pyr_seg_cd_actl,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(c.mp_mkt_seg_cd,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(
                  case when sd.ord_src in ('EC','MO','NV','VP') then 'EC'
                       when sd.ord_src in ('ED','OS','EP') then 'ED'
                       when sd.ord_src in ('CS','SO') then 'CS'
                   else 'N' END,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.ord_tkr,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(c.trtry_type,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.trans_typ,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(case when ec_user.user_typ in ( 1,2,3)  then 'Y' else 'N' END,'*^|><@"~`&','         ')),' '))
                  ||'"'
  FROM   xdmadm.sales_corp sd,
         xdmadm.cust_corp c,
         xdmadm.div_corp b,
         xdmadm.cov_corp cov,
         xdmadm.prod_corp pc,
         xdmadm.pim_corp pim,
         user_emp tm_id,
         user_emp dsm_id,
         user_emp rsm_id,
         ec_user
 WHERE  --sd.prcs_dt BETWEEN TO_DATE ('20170803000000','YYYYMMDDHH24MISS')  AND  TO_DATE ('20170909000000','YYYYMMDDHH24MISS')
         sd.prcs_dt BETWEEN TO_DATE ('' || wkstartdate || '','YYYYMMDDHH24MISS')  AND  TO_DATE ('' || wkenddate || '','YYYYMMDDHH24MISS')
         AND b.div_sk = sd.div_sk
         AND c.cust_sk = sd.cust_sk
         AND c.trd_cls = '1'
         AND sd.xfer_from_dt IS NULL
         AND sd.trans_typ NOT IN ('AP', 'AN')
         AND sd.prod_alwnc_cd IS NULL
         AND sd.prod_chrg_cd IS NULL
         AND pim.pim_sk = sd.pim_sk
         AND pc.prod_sk = sd.prod_sk
         AND cov.cmpny_vndr_nbr(+) = TO_CHAR (sd.true_mfr)
         AND UPPER (sd.trtry_mgr_id_actl) = tm_id.user_id(+)
         AND UPPER (sd.dstrct_sls_mgr_id_actl) = dsm_id.user_id(+)
         AND rsm_id.user_id(+) = c.rgn_sls_mgr_id
         AND ec_user.ec_userid (+) = sd.ord_tkr
          group by
            pim.pim_usf_mfr_id,
            pim.pim_usf_mfr_nm,
            sd.pim_brnd_typ_actl,
            pim.pim_brnd_nm,
            pim.pim_usf_std_prod_cd,
            pc.prod_nbr,
            pim.pim_prod_desc,
            pim.pim_sls_pk_sz_desc,
            pim.pim_prch_pk_sz_desc,
            sd.pim_cls_id_actl,
            sd.pim_cls_desc_actl,
            sd.pim_ctgry_id_actl,
            sd.pim_ctgry_desc_actl,
            sd.pim_grp_id_actl,
            sd.pim_grp_desc_actl,
            pc.brk_ind,
            sd.prcs_dt,
            sd.inv_nbr,
            sd.inv_dt,
            sd.trtry_cd_actl,
            sd.trtry_mgr_id_actl,
            sd.trtry_mgr_nm_actl,
            sd.dstrct_cd_actl,
            sd.dstrct_nm_actl,
            sd.dstrct_sls_mgr_id_actl,
            sd.dstrct_sls_mgr_nm_actl,
            sd.acct_typ_cd_actl,
            c.cust_nbr,
            b.brnch_cd,
            b.div_nbr,
            b.prcs_sys,
            sd.true_mfr,
            cov.cmpny_vndr_nm,
            pc.acorp_prod_nbr,
            pc.pcorp_prod_nbr,
            sd.unit_prc,
            c.cust_bus_seg,
            c.cmsn_pay_ind,
            c.rgn_sls_mgr_id,
            c.rgn_sls_mgr_nm,
            rsm_id.empl_id,
            dsm_id.empl_id,
            tm_id.empl_id,
            sd.prod_stat_ind_actl,
            pc.prtry_item_ind,
            pc.cmdty_ind,
            c.cust_mjr_cd,
            c.cust_mnr_cd,
            sd.corp_mlt_unit_nbr_actl,
            sd.prnt_mlt_unit_cd_actl,
            pim.pim_brnd_id,
            pc.prch_from_vndr_nbr,
            pc.prch_from_vndr_nm,
            sd.menu_typ_cd_actl,
            sd.usf_top_pyr_seg_cd_actl,
            c.cust_cntrct_stat_desc,
            sd.cust_natl_mngd_flg_actl,
            sd.mkt_seg_cd_actl,
            sd.pyr_seg_cd_actl,
            c.mp_mkt_seg_cd,
            sd.ord_src,
            sd.ord_tkr,
            c.trtry_type,
            sd.trans_typ,
            case when user_typ in ( 1,2,3)  then 'Y' else 'N' END
    UNION ALL
                SELECT
                  DISTINCT
                  UPPER(RTRIM (SUBSTR ('AUGEO_SALES', 1, 30))),
                  '"' ||
                  TRIM(NVL(TRANSLATE(pim.pim_usf_mfr_id,'*^|><@"~`&',' '),' '))
                  ||'","' ||
                  TRIM(NVL(TRANSLATE(pim.pim_usf_mfr_nm,'*^|><@"~`&',' '),' '))
                  ||'","' ||
                  TRIM(NVL(TRANSLATE(sd.pim_brnd_typ_actl,'*^|><@"~`&',' '),' '))
                  ||'","' ||
                  TRIM(NVL(TRANSLATE(pim.pim_brnd_nm,'*^|><@"~`&',' '),' '))
                  ||'","' ||
                  TRIM(NVL(TRANSLATE(pim.pim_usf_std_prod_cd,'*^|><@"~`&','        '),' '))
                  ||'","' ||
                  TRIM(NVL(TRANSLATE(pc.prod_nbr,'*^|><@"~`&','        '),' '))
                  ||'","' ||
                  TRIM(NVL(TRANSLATE(pim.pim_prod_desc,'*^|><@"~`&','     '),' '))
                  ||'","' ||
                  TRIM(NVL(TRANSLATE(pim.pim_sls_pk_sz_desc,'*^|><@"~`&','      '),' '))
                  ||'","' ||
                  TRIM(NVL(TRANSLATE(pim.pim_prch_pk_sz_desc,'*^|><@"~`&','         '),' '))
                  ||'","' ||
                  TRIM(NVL(TRANSLATE(sd.pim_cls_id_actl,'*^|><@"~`&','         '),' '))
                  ||'","' ||
                  TRIM(NVL(TRANSLATE(sd.pim_cls_desc_actl,'*^|><@"~`&','         '),' '))
                  ||'","' ||
                  TRIM(NVL(TRANSLATE(sd.pim_ctgry_id_actl,'*^|><@"~`&','         '),' '))
                  ||'","' ||
                  TRIM(TRANSLATE(sd.pim_ctgry_desc_actl,'*^|><@"~`&','         '))
                  ||'","' ||
                  TRIM(NVL(TRANSLATE(sd.pim_grp_id_actl,'*^|><@"~`&','         '),' '))
                  ||'","' ||
                  TRIM(NVL(TRANSLATE(sd.pim_grp_desc_actl,'*^|><@"~`&','         '),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(pc.brk_ind,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sum(sd.unit_ship),'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sum(sd.each_ship),'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sum(sd.qty_ship),'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(TO_CHAR(sd.prcs_dt,'DD/MM/YYYY'),'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.inv_nbr,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(TO_CHAR(sd.inv_dt,'DD/MM/YYYY'),'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.trtry_cd_actl,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.trtry_mgr_id_actl,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.trtry_mgr_nm_actl,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.dstrct_cd_actl,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.dstrct_nm_actl,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.dstrct_sls_mgr_id_actl,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.dstrct_sls_mgr_nm_actl,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.acct_typ_cd_actl,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(c.cust_nbr,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(b.brnch_cd,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(b.div_nbr,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(b.prcs_sys,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.true_mfr,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(cov.cmpny_vndr_nm,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(pc.acorp_prod_nbr,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(pc.pcorp_prod_nbr,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sum(sd.net_wt_ship),'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sum(sd.grs_sls_extnd),'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.unit_prc,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(c.cust_bus_seg,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(c.cmsn_pay_ind,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(c.rgn_sls_mgr_id,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(c.rgn_sls_mgr_nm,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(rsm_id.empl_id,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(dsm_id.empl_id,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(tm_id.empl_id,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM (NVL (LTRIM (TRANSLATE (sd.prod_stat_ind_actl,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(pc.prtry_item_ind,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(pc.cmdty_ind,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(c.cust_mjr_cd,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(c.cust_mnr_cd,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(DECODE(sd.corp_mlt_unit_nbr_actl,'000','   ','UNK','   ',sd.corp_mlt_unit_nbr_actl),'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(DECODE(sd.prnt_mlt_unit_cd_actl,'000','   ','UNK','   ',sd.prnt_mlt_unit_cd_actl),'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(pim.pim_brnd_id,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(pc.prch_from_vndr_nbr,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(pc.prch_from_vndr_nm,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.menu_typ_cd_actl,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.usf_top_pyr_seg_cd_actl,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(c.cust_cntrct_stat_desc,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.cust_natl_mngd_flg_actl,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.mkt_seg_cd_actl,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.pyr_seg_cd_actl,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(c.mp_mkt_seg_cd,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(
                  case when sd.ord_src in ('EC','MO','NV','VP') then 'EC'
                       when sd.ord_src in ('ED','OS','EP') then 'ED'
                       when sd.ord_src in ('CS','SO') then 'CS'
                   else 'N' END,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.ord_tkr,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(c.trtry_type,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(sd.trans_typ,'*^|><@"~`&','         ')),' '))
                  ||'","' ||
                  TRIM(NVL(LTRIM(TRANSLATE(case when ec_user.user_typ in ( 1,2,3)  then 'Y' else 'N' END,'*^|><@"~`&','         ')),' '))
                  ||'"'
  FROM   xdmadm.sales_corp sd,
         xdmadm.cust_corp c,
         xdmadm.div_corp b,
         xdmadm.cov_corp cov,
         xdmadm.prod_corp pc,
         xdmadm.pim_corp pim,
         user_emp tm_id,
         user_emp dsm_id,
         user_emp rsm_id,
         ec_user,
         xdmadm.div_corp rd,
         (select distinct acqstn_div_nbr,usf_div_nbr,usf_cust_nbr from xdmadm.acqstn_cust_xref) ac
 WHERE   sd.prcs_dt BETWEEN TO_DATE ('' || twowkstrtdt || '','YYYYMMDDHH24MISS')  AND  TO_DATE ('' || twowkenddt || '','YYYYMMDDHH24MISS')
         --sd.prcs_dt BETWEEN TO_DATE ('20170903000000','YYYYMMDDHH24MISS')  AND  TO_DATE ('20170909000000','YYYYMMDDHH24MISS')
         AND b.div_sk = sd.div_sk
         AND c.cust_sk = sd.cust_sk
         AND c.trd_cls = '1'
         AND NVL(SD.SLS_REVENUE_DIV_NBR,SD.DIV_NBR) = rd.div_nbr
         AND NVL(rd.acqstn_cmpny_nm,'USF') <> 'USF'
         AND sd.trans_typ NOT IN ('AP', 'AN')
         AND sd.prod_alwnc_cd IS NULL
         AND sd.prod_chrg_cd IS NULL
         AND pim.pim_sk = sd.pim_sk
         AND pc.prod_sk = sd.prod_sk
         AND cov.cmpny_vndr_nbr(+) = TO_CHAR (sd.true_mfr)
         AND UPPER (sd.trtry_mgr_id_actl) = tm_id.user_id(+)
         AND UPPER (sd.dstrct_sls_mgr_id_actl) = dsm_id.user_id(+)
         AND rsm_id.user_id(+) = c.rgn_sls_mgr_id
         AND ec_user.ec_userid (+) = sd.ord_tkr
         AND NVL(SD.SLS_REVENUE_DIV_NBR,SD.DIV_NBR) = ac.acqstn_div_nbr
         AND SD.cust_nbr = ac.usf_cust_nbr
         AND SD.div_nbr = ac.usf_div_nbr
          group by
            pim.pim_usf_mfr_id,
            pim.pim_usf_mfr_nm,
            sd.pim_brnd_typ_actl,
            pim.pim_brnd_nm,
            pim.pim_usf_std_prod_cd,
            pc.prod_nbr,
            pim.pim_prod_desc,
            pim.pim_sls_pk_sz_desc,
            pim.pim_prch_pk_sz_desc,
            sd.pim_cls_id_actl,
            sd.pim_cls_desc_actl,
            sd.pim_ctgry_id_actl,
            sd.pim_ctgry_desc_actl,
            sd.pim_grp_id_actl,
            sd.pim_grp_desc_actl,
            pc.brk_ind,
            sd.prcs_dt,
            sd.inv_nbr,
            sd.inv_dt,
            sd.trtry_cd_actl,
            sd.trtry_mgr_id_actl,
            sd.trtry_mgr_nm_actl,
            sd.dstrct_cd_actl,
            sd.dstrct_nm_actl,
            sd.dstrct_sls_mgr_id_actl,
            sd.dstrct_sls_mgr_nm_actl,
            sd.acct_typ_cd_actl,
            c.cust_nbr,
            b.brnch_cd,
            b.div_nbr,
            b.prcs_sys,
            sd.true_mfr,
            cov.cmpny_vndr_nm,
            pc.acorp_prod_nbr,
            pc.pcorp_prod_nbr,
            sd.unit_prc,
            c.cust_bus_seg,
            c.cmsn_pay_ind,
            c.rgn_sls_mgr_id,
            c.rgn_sls_mgr_nm,
            rsm_id.empl_id,
            dsm_id.empl_id,
            tm_id.empl_id,
            sd.prod_stat_ind_actl,
            pc.prtry_item_ind,
            pc.cmdty_ind,
            c.cust_mjr_cd,
            c.cust_mnr_cd,
            sd.corp_mlt_unit_nbr_actl,
            sd.prnt_mlt_unit_cd_actl,
            pim.pim_brnd_id,
            pc.prch_from_vndr_nbr,
            pc.prch_from_vndr_nm,
            sd.menu_typ_cd_actl,
            sd.usf_top_pyr_seg_cd_actl,
            c.cust_cntrct_stat_desc,
            sd.cust_natl_mngd_flg_actl,
            sd.mkt_seg_cd_actl,
            sd.pyr_seg_cd_actl,
            c.mp_mkt_seg_cd,
            sd.ord_src,
            sd.ord_tkr,
            c.trtry_type,
            sd.trans_typ,
            case when user_typ in ( 1,2,3)  then 'Y' else 'N' END;


      COMMIT;
      DBMS_OUTPUT.PUT_LINE('...End of  Insert ' || UPPER(RTRIM(SUBSTR(p_partner_id, 1, 30))));
      DBMS_OUTPUT.PUT_LINE('...Count  Insert ' || UPPER(RTRIM(SUBSTR(p_partner_id, 1, 30))));

      EXECUTE IMMEDIATE 'INSERT /*+ PARALLEL APPEND */ INTO ' || v_owner || '.' || v_prd_tbl_name ||
                        ' NOLOGGING (KEY_augeo_SALES, DATA_augeo_SALES)
                          SELECT DISTINCT
                                 UPPER(RTRIM (SUBSTR (''' || p_partner_id || ''', 1, 30))),
                                 ''"Sales Transactions",''
                                 ||
                                 COUNT(*)
                                 ||'',''||
                                 sysdate
                          FROM '  || v_owner || '.' || v_prd_tbl_name ||
                         ' WHERE key_augeo_sales = UPPER(RTRIM(SUBSTR(''' || p_partner_id || ''', 1, 30)))';

      COMMIT;
      DBMS_OUTPUT.PUT_LINE('...End of Count Insert ' || UPPER(RTRIM(SUBSTR(p_partner_id, 1, 30))));

   END;

   DBMS_OUTPUT.PUT_LINE('...');
   DBMS_OUTPUT.PUT_LINE('END of function ' || v_owner || '.' || v_fn_name);
   RETURN 0;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('...ERROR NO DATA inserting into table ' || v_owner || '.' || v_prd_tbl_name);
      DBMS_OUTPUT.PUT_LINE('...SQLERRM: ' || SQLERRM);
      DBMS_OUTPUT.PUT_LINE('...SQLCODE: ' || SQLCODE);
      DBMS_OUTPUT.PUT_LINE('END of function ' || v_owner || '.' || v_fn_name);
      RETURN 2;
   WHEN OTHERS THEN
      ROLLBACK;
      DBMS_OUTPUT.PUT_LINE('...ERROR OTHERS inserting into table ' || v_owner || '.' || v_prd_tbl_name);
      DBMS_OUTPUT.PUT_LINE('...SQLERRM: ' || SQLERRM);
      DBMS_OUTPUT.PUT_LINE('...SQLCODE: ' || SQLCODE);
      DBMS_OUTPUT.PUT_LINE('END of function ' || v_owner || '.' || v_fn_name);
      RETURN 3;
END fn_augeo_sales_extrct;
/




  